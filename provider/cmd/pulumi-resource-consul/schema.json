{
    "name": "consul",
    "description": "A Pulumi package for creating and managing consul resources.",
    "keywords": [
        "pulumi",
        "consul"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`consul` Terraform Provider](https://github.com/terraform-providers/terraform-provider-consul).",
    "repository": "https://github.com/pulumi/pulumi-consul",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "address": {
                "type": "string",
                "default": "localhost:8500",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_ADDRESS",
                        "CONSUL_HTTP_ADDR"
                    ]
                }
            },
            "caFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_CA_FILE"
                    ]
                }
            },
            "caPath": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_CAPATH"
                    ]
                }
            },
            "certFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_CERT_FILE"
                    ]
                }
            },
            "datacenter": {
                "type": "string"
            },
            "httpAuth": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_HTTP_AUTH"
                    ]
                }
            },
            "insecureHttps": {
                "type": "boolean"
            },
            "keyFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_KEY_FILE"
                    ]
                }
            },
            "namespace": {
                "type": "string"
            },
            "scheme": {
                "type": "string",
                "default": "http",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_SCHEME",
                        "CONSUL_HTTP_SCHEME"
                    ]
                }
            },
            "token": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_TOKEN",
                        "CONSUL_HTTP_TOKEN"
                    ]
                }
            }
        }
    },
    "types": {
        "consul:/AclAuthMethodNamespaceRule:AclAuthMethodNamespaceRule": {
            "properties": {
                "bindNamespace": {
                    "type": "string",
                    "description": "If the namespace rule's `selector` matches then\nthis is used to control the namespace where the token is created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selector": {
                    "type": "string",
                    "description": "Specifies the expression used to match this namespace\nrule against valid identities returned from an auth method validation.\nDefaults to `\"\"`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bindNamespace"
            ]
        },
        "consul:/AclRoleServiceIdentity:AclRoleServiceIdentity": {
            "properties": {
                "datacenters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The datacenters the effective policy is valid within.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceName"
            ]
        },
        "consul:/CatalogEntryService:CatalogEntryService": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the service. Defaults to the\nnode address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the service. Defaults to the `name`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values that are opaque to Consul,\nbut can be used to distinguish between services or nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "consul:/KeyPrefixSubkeyCollection:KeyPrefixSubkeyCollection": {
            "properties": {
                "flags": {
                    "type": "integer",
                    "description": "An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)\nto attach to the key (defaults to 0).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "This is the path (which will be appended to the given\n`path_prefix`) in Consul that should be written to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value to write to the given path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path",
                "value"
            ]
        },
        "consul:/KeysKey:KeysKey": {
            "properties": {
                "default": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delete": {
                    "type": "boolean",
                    "description": "If true, then the key will be deleted when\neither its configuration block is removed from the configuration or\nthe entire resource is destroyed. Otherwise, it will be left in Consul.\nDefaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flags": {
                    "type": "integer",
                    "description": "An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)\nto attach to the key (defaults to 0).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "deprecationMessage": "Using consul_keys resource to *read* is deprecated; please use consul_keys data source instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "This is the path in Consul that should be written to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value to write to the given path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "path",
                        "value"
                    ]
                }
            }
        },
        "consul:/PreparedQueryDns:PreparedQueryDns": {
            "properties": {
                "ttl": {
                    "type": "string",
                    "description": "The TTL to send when returning DNS results.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "consul:/PreparedQueryFailover:PreparedQueryFailover": {
            "properties": {
                "datacenters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote datacenters to return results from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nearestN": {
                    "type": "integer",
                    "description": "Return results from this many datacenters,\nsorted in ascending order of estimated RTT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "consul:/PreparedQueryTemplate:PreparedQueryTemplate": {
            "properties": {
                "regexp": {
                    "type": "string",
                    "description": "The regular expression to match with. When using\n`name_prefix_match`, this regex is applied against the query name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of template matching to perform. Currently\nonly `name_prefix_match` is supported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "regexp",
                "type"
            ]
        },
        "consul:/ServiceCheck:ServiceCheck": {
            "properties": {
                "checkId": {
                    "type": "string",
                    "description": "An ID, *unique per agent*. Will default to *name*\nif not set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deregisterCriticalServiceAfter": {
                    "type": "string",
                    "description": "The time after which\nthe service is automatically deregistered when in the `critical` state.\nDefaults to `30s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/ServiceCheckHeader:ServiceCheckHeader"
                    },
                    "description": "The headers to send for an HTTP check.\nThe attributes of each header is given below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http": {
                    "type": "string",
                    "description": "The HTTP endpoint to call for an HTTP check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "description": "The interval to wait between each health-check\ninvocation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The method to use for HTTP health-checks. Defaults\nto `GET`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "An opaque field meant to hold human readable text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The initial health-check status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcp": {
                    "type": "string",
                    "description": "The TCP address and port to connect to for a TCP check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "The timeout value for HTTP checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsSkipVerify": {
                    "type": "boolean",
                    "description": "Whether to deactivate certificate\nverification for HTTP health-checks. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "checkId",
                "interval",
                "name",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "checkId",
                        "interval",
                        "name",
                        "status",
                        "timeout"
                    ]
                }
            }
        },
        "consul:/ServiceCheckHeader:ServiceCheckHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the header.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The header's list of values.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "consul:/getAclAuthMethodNamespaceRule:getAclAuthMethodNamespaceRule": {
            "properties": {
                "bindNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selector": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bindNamespace",
                "selector"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getAclRolePolicy:getAclRolePolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ACL Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getAclRoleServiceIdentity:getAclRoleServiceIdentity": {
            "properties": {
                "datacenters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "consul:/getAclTokenPolicy:getAclTokenPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getAutopilotHealthServer:getAutopilotHealthServer": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the server\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthy": {
                    "type": "boolean",
                    "description": "Whether the server is healthy according to the current Autopilot\nconfiguration\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Raft ID of the server\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastContact": {
                    "type": "string",
                    "description": "The time elapsed since the server's last contact with\nthe leader\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastIndex": {
                    "type": "integer",
                    "description": "The index of the server's last committed Raft log entry\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastTerm": {
                    "type": "integer",
                    "description": "The server's last known Raft leader term\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "leader": {
                    "type": "boolean",
                    "description": "Whether the server is currently leader\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The node name of the server\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serfStatus": {
                    "type": "string",
                    "description": "The status of the SerfHealth check of the server\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stableSince": {
                    "type": "string",
                    "description": "The time this server has been in its current ``Healthy``\nstate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "The Consul version of the server\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "voter": {
                    "type": "boolean",
                    "description": "Whether the server is a voting member of the Raft cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "healthy",
                "id",
                "lastContact",
                "lastIndex",
                "lastTerm",
                "leader",
                "name",
                "serfStatus",
                "stableSince",
                "version",
                "voter"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getCatalogNodesNode:getCatalogNodesNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taggedAddresses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "meta",
                "name",
                "taggedAddresses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getCatalogNodesQueryOption:getCatalogNodesQueryOption": {
            "properties": {
                "allowStale": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "near": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requireConsistent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "consul:/getCatalogServiceQueryOption:getCatalogServiceQueryOption": {
            "properties": {
                "allowStale": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "near": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requireConsistent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "consul:/getCatalogServiceService:getCatalogServiceService": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createIndex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableTagOverride": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyIndex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taggedAddresses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "createIndex",
                "enableTagOverride",
                "id",
                "meta",
                "modifyIndex",
                "name",
                "nodeAddress",
                "nodeId",
                "nodeMeta",
                "nodeName",
                "port",
                "taggedAddresses",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getCatalogServicesQueryOption:getCatalogServicesQueryOption": {
            "properties": {
                "allowStale": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "near": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requireConsistent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "consul:/getKeyPrefixSubkeyCollection:getKeyPrefixSubkeyCollection": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "This is the default value to set for `var.\u003cname\u003e`\nif the key does not exist in Consul. Defaults to an empty string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the key. This value of the\nkey is exposed as `var.\u003cname\u003e`. This is not the path of the subkey\nin Consul.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "This is the subkey path in Consul (which will be appended\nto the given `path_prefix`) to construct the full key that will be used\nto read the value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "consul:/getKeysKey:getKeysKey": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "This is the default value to set for `var.\u003cname\u003e`\nif the key does not exist in Consul. Defaults to an empty string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the key. This value of the\nkey is exposed as `var.\u003cname\u003e`. This is not the path of the key\nin Consul.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "This is the path in Consul that should be read\nor written to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "consul:/getNetworkAreaMembersMember:getNetworkAreaMembersMember": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "build": {
                    "type": "string",
                    "description": "The Consul version running on the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The node ID of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The node name of the server, with its datacenter appended.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The server RPC port the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "integer",
                    "description": "The protocol version being spoken by the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Role is always `\"server\"` since only Consul servers can participate\nin network areas.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rtt": {
                    "type": "integer",
                    "description": "An estimated network round trip time from the server answering the\nquery to the given server, in nanoseconds. This is computed using network\ncoordinates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The current health status of the node, as determined by the\nnetwork area distributed failure detector. This will be `\"alive\"`, `\"leaving\"`,\nor `\"failed\"`. A `\"failed\"` status means that other servers are not able to\nprobe this server over its server RPC interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "build",
                "datacenter",
                "id",
                "name",
                "port",
                "protocol",
                "role",
                "rtt",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getNodesNode:getNodesNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Node ID of the Consul agent.\n* [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta\ndata tag information, if any.\n* [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name\nof the Consul node.\n* [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The\nIP address the node is advertising to the Consul cluster.\n* [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -\nList of explicit LAN and WAN IP addresses for the agent.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taggedAddresses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "meta",
                "name",
                "taggedAddresses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getNodesQueryOption:getNodesQueryOption": {
            "properties": {
                "allowStale": {
                    "type": "boolean",
                    "description": "When `true`, the default, allow responses from\nConsul servers that are followers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "description": "The Consul datacenter to query.  Defaults to the\nsame value found in `query_options` parameter specified below, or if that is\nempty, the `datacenter` value found in the Consul agent that this provider is\nconfigured to talk to then the datacenter in the provider setup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "near": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requireConsistent": {
                    "type": "boolean",
                    "description": "When `true` force the client to perform a\nread on at least quorum servers and verify the result is the same.  Defaults\nto `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "Specify the Consul ACL token to use when performing the\nrequest.  This defaults to the same API token configured by the `consul`\nprovider but may be overriden if necessary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitIndex": {
                    "type": "integer",
                    "description": "Index number used to enable blocking quereis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitTime": {
                    "type": "string",
                    "description": "Max time the client should wait for a blocking query\nto return.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "consul:/getServiceHealthResult:getServiceHealthResult": {
            "properties": {
                "checks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/getServiceHealthResultCheck:getServiceHealthResultCheck"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/getServiceHealthResultNode:getServiceHealthResultNode"
                    },
                    "description": "The name of the node associated with this health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/getServiceHealthResultService:getServiceHealthResultService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "checks",
                "nodes",
                "services"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getServiceHealthResultCheck:getServiceHealthResultCheck": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The service name to select.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "node": {
                    "type": "string",
                    "description": "The name of the node associated with this health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "A human readable description of the current state of the health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "output": {
                    "type": "string",
                    "description": "The output of the health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service associated to this health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the service associated with this health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of tags associated with this health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of this health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "node",
                "notes",
                "output",
                "serviceId",
                "serviceName",
                "serviceTags",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getServiceHealthResultNode:getServiceHealthResultNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of this instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "description": "The Consul datacenter to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Service metadata tag information, if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The service name to select.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taggedAddresses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "datacenter",
                "id",
                "meta",
                "name",
                "taggedAddresses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getServiceHealthResultService:getServiceHealthResultService": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of this instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this health-check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Service metadata tag information, if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The service name to select.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port of this instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of tags associated with this instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "meta",
                "name",
                "port",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getServiceQueryOption:getServiceQueryOption": {
            "properties": {
                "allowStale": {
                    "type": "boolean",
                    "description": "When `true`, the default, allow responses from\nConsul servers that are followers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "description": "The Consul datacenter to query.  Defaults to the\nsame value found in `query_options` parameter specified below, or if that is\nempty, the `datacenter` value found in the Consul agent that this provider is\nconfigured to talk to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to lookup the service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "near": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requireConsistent": {
                    "type": "boolean",
                    "description": "When `true` force the client to perform a\nread on at least quorum servers and verify the result is the same.  Defaults\nto `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "Specify the Consul ACL token to use when performing the\nrequest.  This defaults to the same API token configured by the `consul`\nprovider but may be overriden if necessary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitIndex": {
                    "type": "integer",
                    "description": "Index number used to enable blocking quereis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitTime": {
                    "type": "string",
                    "description": "Max time the client should wait for a blocking query\nto return.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "consul:/getServiceService:getServiceService": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createIndex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableTagOverride": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyIndex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The service name to select.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "The Node ID of the Consul agent advertising the service.\n* [`node_meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node\nmeta data tag information, if any.\n* [`node_name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The\nname of the Consul node.\n* [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -\nThe IP address of the service.  If the `ServiceAddress` in the Consul catalog\nis empty, this value is automatically populated with the `node_address` (the\n`Address` in the Consul Catalog).\n* [`enable_tag_override`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -\nWhether service tags can be overridden on this service.\n* [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A\nunique service instance identifier.\n* [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The\nname of the service.\n* [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -\nPort number of the service.\n* [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -\nList of explicit LAN and WAN IP addresses for the agent.\n* [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -\nList of tags for the service.\n* [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta\ndata tag information, if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taggedAddresses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "createIndex",
                "enableTagOverride",
                "id",
                "meta",
                "modifyIndex",
                "name",
                "nodeAddress",
                "nodeId",
                "nodeMeta",
                "nodeName",
                "port",
                "taggedAddresses",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "consul:/getServicesQueryOption:getServicesQueryOption": {
            "properties": {
                "allowStale": {
                    "type": "boolean",
                    "description": "When `true`, the default, allow responses from\nConsul servers that are followers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "description": "The Consul datacenter to query.  Defaults to the\nsame value found in `query_options` parameter specified below, or if that is\nempty, the `datacenter` value found in the Consul agent that this provider is\nconfigured to talk to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to lookup the services.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "near": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requireConsistent": {
                    "type": "boolean",
                    "description": "When `true` force the client to perform a\nread on at least quorum servers and verify the result is the same.  Defaults\nto `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "Specify the Consul ACL token to use when performing the\nrequest.  This defaults to the same API token configured by the `consul`\nprovider but may be overriden if necessary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitIndex": {
                    "type": "integer",
                    "description": "Index number used to enable blocking quereis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitTime": {
                    "type": "string",
                    "description": "Max time the client should wait for a blocking query\nto return.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the consul package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "address": {
                "type": "string",
                "default": "localhost:8500",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_ADDRESS",
                        "CONSUL_HTTP_ADDR"
                    ]
                }
            },
            "caFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_CA_FILE"
                    ]
                }
            },
            "caPath": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_CAPATH"
                    ]
                }
            },
            "certFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_CERT_FILE"
                    ]
                }
            },
            "datacenter": {
                "type": "string"
            },
            "httpAuth": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_HTTP_AUTH"
                    ]
                }
            },
            "insecureHttps": {
                "type": "boolean"
            },
            "keyFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_KEY_FILE"
                    ]
                }
            },
            "namespace": {
                "type": "string"
            },
            "scheme": {
                "type": "string",
                "default": "http",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_SCHEME",
                        "CONSUL_HTTP_SCHEME"
                    ]
                }
            },
            "token": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "CONSUL_TOKEN",
                        "CONSUL_HTTP_TOKEN"
                    ]
                }
            }
        }
    },
    "resources": {
        "consul:index/aclAuthMethod:AclAuthMethod": {
            "description": "Starting with Consul 1.5.0, the consul.AclAuthMethod resource can be used to\nmanaged [Consul ACL auth methods](https://www.consul.io/docs/acl/auth-methods).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nDefine a `kubernetes` auth method:\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst minikube = new consul.AclAuthMethod(\"minikube\", {\n    type: \"kubernetes\",\n    description: \"dev minikube cluster\",\n    configJson: JSON.stringify({\n        Host: \"https://192.0.2.42:8443\",\n        CACert: `-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----\n`,\n        ServiceAccountJWT: \"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_consul as consul\n\nminikube = consul.AclAuthMethod(\"minikube\",\n    type=\"kubernetes\",\n    description=\"dev minikube cluster\",\n    config_json=json.dumps({\n        \"Host\": \"https://192.0.2.42:8443\",\n        \"CACert\": \"\"\"-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----\n\"\"\",\n        \"ServiceAccountJWT\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var minikube = new Consul.AclAuthMethod(\"minikube\", new Consul.AclAuthMethodArgs\n        {\n            Type = \"kubernetes\",\n            Description = \"dev minikube cluster\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"Host\", \"https://192.0.2.42:8443\" },\n                { \"CACert\", @\"-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----\n\" },\n                { \"ServiceAccountJWT\", \"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...\" },\n            }),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Host\":              \"https://192.0.2.42:8443\",\n\t\t\t\"CACert\":            \"-----BEGIN CERTIFICATE-----\\n...-----END CERTIFICATE-----\\n\",\n\t\t\t\"ServiceAccountJWT\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err := consul.NewAclAuthMethod(ctx, \"minikube\", \u0026consul.AclAuthMethodArgs{\n\t\t\tType:        pulumi.String(\"kubernetes\"),\n\t\t\tDescription: pulumi.String(\"dev minikube cluster\"),\n\t\t\tConfigJson:  pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nDefine a `jwt` auth method:\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst minikube = new consul.AclAuthMethod(\"minikube\", {\n    type: \"jwt\",\n    configJson: JSON.stringify({\n        JWKSURL: \"https://example.com/identity/oidc/.well-known/keys\",\n        JWTSupportedAlgs: \"RS256\",\n        BoundIssuer: \"https://example.com\",\n        ClaimMappings: {\n            subject: \"subject\",\n        },\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_consul as consul\n\nminikube = consul.AclAuthMethod(\"minikube\",\n    type=\"jwt\",\n    config_json=json.dumps({\n        \"JWKSURL\": \"https://example.com/identity/oidc/.well-known/keys\",\n        \"JWTSupportedAlgs\": \"RS256\",\n        \"BoundIssuer\": \"https://example.com\",\n        \"ClaimMappings\": {\n            \"subject\": \"subject\",\n        },\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var minikube = new Consul.AclAuthMethod(\"minikube\", new Consul.AclAuthMethodArgs\n        {\n            Type = \"jwt\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"JWKSURL\", \"https://example.com/identity/oidc/.well-known/keys\" },\n                { \"JWTSupportedAlgs\", \"RS256\" },\n                { \"BoundIssuer\", \"https://example.com\" },\n                { \"ClaimMappings\", new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"subject\", \"subject\" },\n                } },\n            }),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"JWKSURL\":          \"https://example.com/identity/oidc/.well-known/keys\",\n\t\t\t\"JWTSupportedAlgs\": \"RS256\",\n\t\t\t\"BoundIssuer\":      \"https://example.com\",\n\t\t\t\"ClaimMappings\": map[string]interface{}{\n\t\t\t\t\"subject\": \"subject\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err := consul.NewAclAuthMethod(ctx, \"minikube\", \u0026consul.AclAuthMethodArgs{\n\t\t\tType:       pulumi.String(\"jwt\"),\n\t\t\tConfigJson: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The raw configuration for this ACL auth method. This\nattribute is deprecated and will be removed in a future version. `config_json`\nshould be used instead.\n",
                    "deprecationMessage": "The config attribute is deprecated, please use config_json instead."
                },
                "configJson": {
                    "type": "string",
                    "description": "The raw configuration for this ACL auth method.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free form human readable description of the auth method.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "An optional name to use instead of the name\nattribute when displaying information about this auth method.\n"
                },
                "maxTokenTtl": {
                    "type": "string",
                    "description": "The maximum life of any token created by this\nauth method.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ACL auth method.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the policy within.\n"
                },
                "namespaceRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/AclAuthMethodNamespaceRule:AclAuthMethodNamespaceRule"
                    },
                    "description": "A set of rules that control\nwhich namespace tokens created via this auth method will be created within.\n"
                },
                "tokenLocality": {
                    "type": "string",
                    "description": "The kind of token that this auth method\nproduces. This can be either 'local' or 'global'.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the ACL auth method.\n"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The raw configuration for this ACL auth method. This\nattribute is deprecated and will be removed in a future version. `config_json`\nshould be used instead.\n",
                    "deprecationMessage": "The config attribute is deprecated, please use config_json instead."
                },
                "configJson": {
                    "type": "string",
                    "description": "The raw configuration for this ACL auth method.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free form human readable description of the auth method.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "An optional name to use instead of the name\nattribute when displaying information about this auth method.\n"
                },
                "maxTokenTtl": {
                    "type": "string",
                    "description": "The maximum life of any token created by this\nauth method.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ACL auth method.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the policy within.\n"
                },
                "namespaceRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/AclAuthMethodNamespaceRule:AclAuthMethodNamespaceRule"
                    },
                    "description": "A set of rules that control\nwhich namespace tokens created via this auth method will be created within.\n"
                },
                "tokenLocality": {
                    "type": "string",
                    "description": "The kind of token that this auth method\nproduces. This can be either 'local' or 'global'.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the ACL auth method.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclAuthMethod resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The raw configuration for this ACL auth method. This\nattribute is deprecated and will be removed in a future version. `config_json`\nshould be used instead.\n",
                        "deprecationMessage": "The config attribute is deprecated, please use config_json instead."
                    },
                    "configJson": {
                        "type": "string",
                        "description": "The raw configuration for this ACL auth method.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free form human readable description of the auth method.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "An optional name to use instead of the name\nattribute when displaying information about this auth method.\n"
                    },
                    "maxTokenTtl": {
                        "type": "string",
                        "description": "The maximum life of any token created by this\nauth method.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ACL auth method.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to create the policy within.\n"
                    },
                    "namespaceRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/AclAuthMethodNamespaceRule:AclAuthMethodNamespaceRule"
                        },
                        "description": "A set of rules that control\nwhich namespace tokens created via this auth method will be created within.\n"
                    },
                    "tokenLocality": {
                        "type": "string",
                        "description": "The kind of token that this auth method\nproduces. This can be either 'local' or 'global'.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the ACL auth method.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/aclBindingRule:AclBindingRule": {
            "description": "Starting with Consul 1.5.0, the consul.AclBindingRule resource can be used to\nmanaged Consul ACL binding rules.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst minikube = new consul.AclAuthMethod(\"minikube\", {\n    config: {\n        CACert: `-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----\n`,\n        Host: \"https://192.0.2.42:8443\",\n        ServiceAccountJWT: \"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...\",\n    },\n    description: \"dev minikube cluster\",\n    type: \"kubernetes\",\n});\nconst test = new consul.AclBindingRule(\"test\", {\n    authMethod: minikube.name,\n    bindName: \"minikube\",\n    bindType: \"service\",\n    description: \"foobar\",\n    selector: \"serviceaccount.namespace==default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nminikube = consul.AclAuthMethod(\"minikube\",\n    config={\n        \"CACert\": \"\"\"-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----\n\n\"\"\",\n        \"Host\": \"https://192.0.2.42:8443\",\n        \"ServiceAccountJWT\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...\",\n    },\n    description=\"dev minikube cluster\",\n    type=\"kubernetes\")\ntest = consul.AclBindingRule(\"test\",\n    auth_method=minikube.name,\n    bind_name=\"minikube\",\n    bind_type=\"service\",\n    description=\"foobar\",\n    selector=\"serviceaccount.namespace==default\")\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var minikube = new Consul.AclAuthMethod(\"minikube\", new Consul.AclAuthMethodArgs\n        {\n            Config = \n            {\n                { \"CACert\", @\"-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----\n\n\" },\n                { \"Host\", \"https://192.0.2.42:8443\" },\n                { \"ServiceAccountJWT\", \"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...\" },\n            },\n            Description = \"dev minikube cluster\",\n            Type = \"kubernetes\",\n        });\n        var test = new Consul.AclBindingRule(\"test\", new Consul.AclBindingRuleArgs\n        {\n            AuthMethod = minikube.Name,\n            BindName = \"minikube\",\n            BindType = \"service\",\n            Description = \"foobar\",\n            Selector = \"serviceaccount.namespace==default\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tminikube, err := consul.NewAclAuthMethod(ctx, \"minikube\", \u0026consul.AclAuthMethodArgs{\n\t\t\tConfig: pulumi.StringMap{\n\t\t\t\t\"CACert\":            pulumi.String(fmt.Sprintf(\"%v%v%v\", \"-----BEGIN CERTIFICATE-----\\n\", \"...-----END CERTIFICATE-----\\n\", \"\\n\")),\n\t\t\t\t\"Host\":              pulumi.String(\"https://192.0.2.42:8443\"),\n\t\t\t\t\"ServiceAccountJWT\": pulumi.String(\"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"dev minikube cluster\"),\n\t\t\tType:        pulumi.String(\"kubernetes\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = consul.NewAclBindingRule(ctx, \"test\", \u0026consul.AclBindingRuleArgs{\n\t\t\tAuthMethod:  minikube.Name,\n\t\t\tBindName:    pulumi.String(\"minikube\"),\n\t\t\tBindType:    pulumi.String(\"service\"),\n\t\t\tDescription: pulumi.String(\"foobar\"),\n\t\t\tSelector:    pulumi.String(\"serviceaccount.namespace==default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "authMethod": {
                    "type": "string",
                    "description": "The name of the ACL auth method this rule apply.\n"
                },
                "bindName": {
                    "type": "string",
                    "description": "The name to bind to a token at login-time.\n"
                },
                "bindType": {
                    "type": "string",
                    "description": "Specifies the way the binding rule affects a token\ncreated at login.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free form human readable description of the\nbinding rule.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the binding\nrule within.\n"
                },
                "selector": {
                    "type": "string",
                    "description": "The expression used to math this rule against valid\nidentities returned from an auth method validation.\n"
                }
            },
            "required": [
                "authMethod",
                "bindName",
                "bindType"
            ],
            "inputProperties": {
                "authMethod": {
                    "type": "string",
                    "description": "The name of the ACL auth method this rule apply.\n"
                },
                "bindName": {
                    "type": "string",
                    "description": "The name to bind to a token at login-time.\n"
                },
                "bindType": {
                    "type": "string",
                    "description": "Specifies the way the binding rule affects a token\ncreated at login.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free form human readable description of the\nbinding rule.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the binding\nrule within.\n"
                },
                "selector": {
                    "type": "string",
                    "description": "The expression used to math this rule against valid\nidentities returned from an auth method validation.\n"
                }
            },
            "requiredInputs": [
                "authMethod",
                "bindName",
                "bindType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclBindingRule resources.\n",
                "properties": {
                    "authMethod": {
                        "type": "string",
                        "description": "The name of the ACL auth method this rule apply.\n"
                    },
                    "bindName": {
                        "type": "string",
                        "description": "The name to bind to a token at login-time.\n"
                    },
                    "bindType": {
                        "type": "string",
                        "description": "Specifies the way the binding rule affects a token\ncreated at login.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free form human readable description of the\nbinding rule.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to create the binding\nrule within.\n"
                    },
                    "selector": {
                        "type": "string",
                        "description": "The expression used to math this rule against valid\nidentities returned from an auth method validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/aclPolicy:AclPolicy": {
            "description": "Starting with Consul 1.4.0, the consul.AclPolicy can be used to managed Consul ACL policies.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst test = new consul.AclPolicy(\"test\", {\n    datacenters: [\"dc1\"],\n    rules: `node_prefix \"\" {\n  policy = \"read\"\n}\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\ntest = consul.AclPolicy(\"test\",\n    datacenters=[\"dc1\"],\n    rules=\"\"\"node_prefix \"\" {\n  policy = \"read\"\n}\n\n\"\"\")\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Consul.AclPolicy(\"test\", new Consul.AclPolicyArgs\n        {\n            Datacenters = \n            {\n                \"dc1\",\n            },\n            Rules = @\"node_prefix \"\"\"\" {\n  policy = \"\"read\"\"\n}\n\n\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewAclPolicy(ctx, \"test\", \u0026consul.AclPolicyArgs{\n\t\t\tDatacenters: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"dc1\"),\n\t\t\t},\n\t\t\tRules: pulumi.String(fmt.Sprintf(\"%v%v%v%v\", \"node_prefix \\\"\\\" {\\n\", \"  policy = \\\"read\\\"\\n\", \"}\\n\", \"\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "datacenters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The datacenters of the policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the policy within.\n"
                },
                "rules": {
                    "type": "string",
                    "description": "The rules of the policy.\n"
                }
            },
            "required": [
                "name",
                "rules"
            ],
            "inputProperties": {
                "datacenters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The datacenters of the policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the policy within.\n"
                },
                "rules": {
                    "type": "string",
                    "description": "The rules of the policy.\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclPolicy resources.\n",
                "properties": {
                    "datacenters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The datacenters of the policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the policy.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to create the policy within.\n"
                    },
                    "rules": {
                        "type": "string",
                        "description": "The rules of the policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/aclRole:AclRole": {
            "description": "Starting with Consul 1.5.0, the consul.AclRole can be used to managed Consul ACL roles.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst read_policy = new consul.AclPolicy(\"read-policy\", {\n    datacenters: [\"dc1\"],\n    rules: \"node \\\"\\\" { policy = \\\"read\\\" }\",\n});\nconst read = new consul.AclRole(\"read\", {\n    description: \"bar\",\n    policies: [read_policy.id],\n    serviceIdentities: [{\n        serviceName: \"foo\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nread_policy = consul.AclPolicy(\"read-policy\",\n    datacenters=[\"dc1\"],\n    rules=\"node \\\"\\\" { policy = \\\"read\\\" }\")\nread = consul.AclRole(\"read\",\n    description=\"bar\",\n    policies=[read_policy.id],\n    service_identities=[{\n        \"serviceName\": \"foo\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var read_policy = new Consul.AclPolicy(\"read-policy\", new Consul.AclPolicyArgs\n        {\n            Datacenters = \n            {\n                \"dc1\",\n            },\n            Rules = \"node \\\"\\\" { policy = \\\"read\\\" }\",\n        });\n        var read = new Consul.AclRole(\"read\", new Consul.AclRoleArgs\n        {\n            Description = \"bar\",\n            Policies = \n            {\n                read_policy.Id,\n            },\n            ServiceIdentities = \n            {\n                new Consul.Inputs.AclRoleServiceIdentityArgs\n                {\n                    ServiceName = \"foo\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewAclPolicy(ctx, \"read_policy\", \u0026consul.AclPolicyArgs{\n\t\t\tDatacenters: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"dc1\"),\n\t\t\t},\n\t\t\tRules: pulumi.String(\"node \\\"\\\" { policy = \\\"read\\\" }\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = consul.NewAclRole(ctx, \"read\", \u0026consul.AclRoleArgs{\n\t\t\tDescription: pulumi.String(\"bar\"),\n\t\t\tPolicies: pulumi.StringArray{\n\t\t\t\tread_policy.ID(),\n\t\t\t},\n\t\t\tServiceIdentities: consul.AclRoleServiceIdentityArray{\n\t\t\t\t\u0026consul.AclRoleServiceIdentityArgs{\n\t\t\t\t\tServiceName: pulumi.String(\"foo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A free form human readable description of the role.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ACL role.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the role within.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of policies that should be applied to the role.\n"
                },
                "serviceIdentities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/AclRoleServiceIdentity:AclRoleServiceIdentity"
                    },
                    "description": "The list of service identities that should\nbe applied to the role.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A free form human readable description of the role.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ACL role.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the role within.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of policies that should be applied to the role.\n"
                },
                "serviceIdentities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/AclRoleServiceIdentity:AclRoleServiceIdentity"
                    },
                    "description": "The list of service identities that should\nbe applied to the role.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclRole resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A free form human readable description of the role.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ACL role.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to create the role within.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of policies that should be applied to the role.\n"
                    },
                    "serviceIdentities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/AclRoleServiceIdentity:AclRoleServiceIdentity"
                        },
                        "description": "The list of service identities that should\nbe applied to the role.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/aclToken:AclToken": {
            "description": "The `consul.AclToken` resource writes an ACL token into Consul.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst agent = new consul.AclPolicy(\"agent\", {\n    rules: `node_prefix \"\" {\n  policy = \"read\"\n}\n`,\n});\nconst test = new consul.AclToken(\"test\", {\n    description: \"my test token\",\n    local: true,\n    policies: [agent.name],\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nagent = consul.AclPolicy(\"agent\", rules=\"\"\"node_prefix \"\" {\n  policy = \"read\"\n}\n\n\"\"\")\ntest = consul.AclToken(\"test\",\n    description=\"my test token\",\n    local=True,\n    policies=[agent.name])\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var agent = new Consul.AclPolicy(\"agent\", new Consul.AclPolicyArgs\n        {\n            Rules = @\"node_prefix \"\"\"\" {\n  policy = \"\"read\"\"\n}\n\n\",\n        });\n        var test = new Consul.AclToken(\"test\", new Consul.AclTokenArgs\n        {\n            Description = \"my test token\",\n            Local = true,\n            Policies = \n            {\n                agent.Name,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tagent, err := consul.NewAclPolicy(ctx, \"agent\", \u0026consul.AclPolicyArgs{\n\t\t\tRules: pulumi.String(fmt.Sprintf(\"%v%v%v%v\", \"node_prefix \\\"\\\" {\\n\", \"  policy = \\\"read\\\"\\n\", \"}\\n\", \"\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = consul.NewAclToken(ctx, \"test\", \u0026consul.AclTokenArgs{\n\t\t\tDescription: pulumi.String(\"my test token\"),\n\t\t\tLocal:       pulumi.Bool(true),\n\t\t\tPolicies: pulumi.StringArray{\n\t\t\t\tagent.Name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessorId": {
                    "type": "string",
                    "description": "The uuid of the token. If omitted, Consul will\ngenerate a random uuid.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "local": {
                    "type": "boolean",
                    "description": "The flag to set the token local to the current datacenter.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the token within.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of policies attached to the token.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of roles attached to the token.\n"
                }
            },
            "required": [
                "accessorId"
            ],
            "inputProperties": {
                "accessorId": {
                    "type": "string",
                    "description": "The uuid of the token. If omitted, Consul will\ngenerate a random uuid.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "local": {
                    "type": "boolean",
                    "description": "The flag to set the token local to the current datacenter.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the token within.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of policies attached to the token.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of roles attached to the token.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclToken resources.\n",
                "properties": {
                    "accessorId": {
                        "type": "string",
                        "description": "The uuid of the token. If omitted, Consul will\ngenerate a random uuid.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the token.\n"
                    },
                    "local": {
                        "type": "boolean",
                        "description": "The flag to set the token local to the current datacenter.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to create the token within.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of policies attached to the token.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of roles attached to the token.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/aclTokenPolicyAttachment:AclTokenPolicyAttachment": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "The name of the policy attached to the token.\n"
                },
                "tokenId": {
                    "type": "string",
                    "description": "The id of the token.\n"
                }
            },
            "required": [
                "policy",
                "tokenId"
            ],
            "inputProperties": {
                "policy": {
                    "type": "string",
                    "description": "The name of the policy attached to the token.\n"
                },
                "tokenId": {
                    "type": "string",
                    "description": "The id of the token.\n"
                }
            },
            "requiredInputs": [
                "policy",
                "tokenId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclTokenPolicyAttachment resources.\n",
                "properties": {
                    "policy": {
                        "type": "string",
                        "description": "The name of the policy attached to the token.\n"
                    },
                    "tokenId": {
                        "type": "string",
                        "description": "The id of the token.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/agentService:AgentService": {
            "description": "!\u003e The `consul.AgentService` resource has been deprecated in version 2.0.0 of the provider\nand will be removed in a future release. Please read the [upgrade guide](https://www.terraform.io/docs/providers/consul/guides/upgrading.html#deprecation-of-consul_agent_service)\nfor more information.\n\nProvides access to the agent service data in Consul. This can be used to\ndefine a service associated with a particular agent. Currently, defining\nhealth checks for an agent service is not supported.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst app = new consul.AgentService(\"app\", {\n    address: \"www.google.com\",\n    port: 80,\n    tags: [\n        \"tag0\",\n        \"tag1\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\napp = consul.AgentService(\"app\",\n    address=\"www.google.com\",\n    port=80,\n    tags=[\n        \"tag0\",\n        \"tag1\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var app = new Consul.AgentService(\"app\", new Consul.AgentServiceArgs\n        {\n            Address = \"www.google.com\",\n            Port = 80,\n            Tags = \n            {\n                \"tag0\",\n                \"tag1\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewAgentService(ctx, \"app\", \u0026consul.AgentServiceArgs{\n\t\t\tAddress: pulumi.String(\"www.google.com\"),\n\t\t\tPort:    pulumi.Int(80),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag0\"),\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the service. Defaults to the\naddress of the agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the service.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values that are opaque to Consul,\nbut can be used to distinguish between services or nodes.\n"
                }
            },
            "required": [
                "address",
                "name"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The address of the service. Defaults to the\naddress of the agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the service.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values that are opaque to Consul,\nbut can be used to distinguish between services or nodes.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AgentService resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address of the service. Defaults to the\naddress of the agent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of the service.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of values that are opaque to Consul,\nbut can be used to distinguish between services or nodes.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/autopilotConfig:AutopilotConfig": {
            "description": "Provides access to the [Autopilot Configuration](https://www.consul.io/docs/guides/autopilot.html)\nof Consul to automatically manage Consul servers.\n\nIt includes to automatically cleanup dead servers, monitor the status of the Raft\ncluster and stable server introduction.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst config = new consul.AutopilotConfig(\"config\", {\n    cleanupDeadServers: false,\n    lastContactThreshold: \"1s\",\n    maxTrailingLogs: 500,\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nconfig = consul.AutopilotConfig(\"config\",\n    cleanup_dead_servers=False,\n    last_contact_threshold=\"1s\",\n    max_trailing_logs=500)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var config = new Consul.AutopilotConfig(\"config\", new Consul.AutopilotConfigArgs\n        {\n            CleanupDeadServers = false,\n            LastContactThreshold = \"1s\",\n            MaxTrailingLogs = 500,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewAutopilotConfig(ctx, \"config\", \u0026consul.AutopilotConfigArgs{\n\t\t\tCleanupDeadServers:   pulumi.Bool(false),\n\t\t\tLastContactThreshold: pulumi.String(\"1s\"),\n\t\t\tMaxTrailingLogs:      pulumi.Int(500),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cleanupDeadServers": {
                    "type": "boolean",
                    "description": "Whether to remove failing servers when a\nreplacement comes online. Defaults to true.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the agent's\ndefault datacenter and the datacenter in the provider setup.\n"
                },
                "disableUpgradeMigration": {
                    "type": "boolean",
                    "description": "Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).\nDefaults to false.\n"
                },
                "lastContactThreshold": {
                    "type": "string",
                    "description": "The time after which a server is\nconsidered as unhealthy and will be removed. Defaults to `\"200ms\"`.\n"
                },
                "maxTrailingLogs": {
                    "type": "integer",
                    "description": "The maximum number of Raft log entries a\nserver can trail the leader. Defaults to 250.\n"
                },
                "redundancyZoneTag": {
                    "type": "string",
                    "description": "The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)\ntag to use. Consul will try to keep one voting server by zone to take advantage\nof isolated failure domains. Defaults to an empty string.\n"
                },
                "serverStabilizationTime": {
                    "type": "string",
                    "description": "The period to wait for a server to be\nhealthy and stable before being promoted to a full, voting member. Defaults to\n`\"10s\"`.\n"
                },
                "upgradeVersionTag": {
                    "type": "string",
                    "description": "The tag to override the version information\nused during a migration. Defaults to an empty string.\n"
                }
            },
            "inputProperties": {
                "cleanupDeadServers": {
                    "type": "boolean",
                    "description": "Whether to remove failing servers when a\nreplacement comes online. Defaults to true.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the agent's\ndefault datacenter and the datacenter in the provider setup.\n"
                },
                "disableUpgradeMigration": {
                    "type": "boolean",
                    "description": "Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).\nDefaults to false.\n"
                },
                "lastContactThreshold": {
                    "type": "string",
                    "description": "The time after which a server is\nconsidered as unhealthy and will be removed. Defaults to `\"200ms\"`.\n"
                },
                "maxTrailingLogs": {
                    "type": "integer",
                    "description": "The maximum number of Raft log entries a\nserver can trail the leader. Defaults to 250.\n"
                },
                "redundancyZoneTag": {
                    "type": "string",
                    "description": "The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)\ntag to use. Consul will try to keep one voting server by zone to take advantage\nof isolated failure domains. Defaults to an empty string.\n"
                },
                "serverStabilizationTime": {
                    "type": "string",
                    "description": "The period to wait for a server to be\nhealthy and stable before being promoted to a full, voting member. Defaults to\n`\"10s\"`.\n"
                },
                "upgradeVersionTag": {
                    "type": "string",
                    "description": "The tag to override the version information\nused during a migration. Defaults to an empty string.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutopilotConfig resources.\n",
                "properties": {
                    "cleanupDeadServers": {
                        "type": "boolean",
                        "description": "Whether to remove failing servers when a\nreplacement comes online. Defaults to true.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the agent's\ndefault datacenter and the datacenter in the provider setup.\n"
                    },
                    "disableUpgradeMigration": {
                        "type": "boolean",
                        "description": "Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).\nDefaults to false.\n"
                    },
                    "lastContactThreshold": {
                        "type": "string",
                        "description": "The time after which a server is\nconsidered as unhealthy and will be removed. Defaults to `\"200ms\"`.\n"
                    },
                    "maxTrailingLogs": {
                        "type": "integer",
                        "description": "The maximum number of Raft log entries a\nserver can trail the leader. Defaults to 250.\n"
                    },
                    "redundancyZoneTag": {
                        "type": "string",
                        "description": "The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)\ntag to use. Consul will try to keep one voting server by zone to take advantage\nof isolated failure domains. Defaults to an empty string.\n"
                    },
                    "serverStabilizationTime": {
                        "type": "string",
                        "description": "The period to wait for a server to be\nhealthy and stable before being promoted to a full, voting member. Defaults to\n`\"10s\"`.\n"
                    },
                    "upgradeVersionTag": {
                        "type": "string",
                        "description": "The tag to override the version information\nused during a migration. Defaults to an empty string.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/catalogEntry:CatalogEntry": {
            "description": "!\u003e The `consul.CatalogEntry` resource has been deprecated in version 2.0.0 of the provider\nand will be removed in a future release. Please read the [upgrade guide](https://www.terraform.io/docs/providers/consul/guides/upgrading.html#deprecation-of-consul_catalog_entry)\nfor more information.\n\nRegisters a node or service with the [Consul Catalog](https://www.consul.io/docs/agent/http/catalog.html#catalog_register).\nCurrently, defining health checks is not supported.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst app = new consul.CatalogEntry(\"app\", {\n    address: \"192.168.10.10\",\n    node: \"foobar\",\n    services: [{\n        address: \"127.0.0.1\",\n        id: \"redis1\",\n        name: \"redis\",\n        port: 8000,\n        tags: [\n            \"master\",\n            \"v1\",\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\napp = consul.CatalogEntry(\"app\",\n    address=\"192.168.10.10\",\n    node=\"foobar\",\n    services=[{\n        \"address\": \"127.0.0.1\",\n        \"id\": \"redis1\",\n        \"name\": \"redis\",\n        \"port\": 8000,\n        \"tags\": [\n            \"master\",\n            \"v1\",\n        ],\n    }])\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var app = new Consul.CatalogEntry(\"app\", new Consul.CatalogEntryArgs\n        {\n            Address = \"192.168.10.10\",\n            Node = \"foobar\",\n            Services = \n            {\n                new Consul.Inputs.CatalogEntryServiceArgs\n                {\n                    Address = \"127.0.0.1\",\n                    Id = \"redis1\",\n                    Name = \"redis\",\n                    Port = 8000,\n                    Tags = \n                    {\n                        \"master\",\n                        \"v1\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewCatalogEntry(ctx, \"app\", \u0026consul.CatalogEntryArgs{\n\t\t\tAddress: pulumi.String(\"192.168.10.10\"),\n\t\t\tNode:    pulumi.String(\"foobar\"),\n\t\t\tServices: consul.CatalogEntryServiceArray{\n\t\t\t\t\u0026consul.CatalogEntryServiceArgs{\n\t\t\t\t\tAddress: pulumi.String(\"127.0.0.1\"),\n\t\t\t\t\tId:      pulumi.String(\"redis1\"),\n\t\t\t\t\tName:    pulumi.String(\"redis\"),\n\t\t\t\t\tPort:    pulumi.Int(8000),\n\t\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"master\"),\n\t\t\t\t\t\tpulumi.String(\"v1\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the node being added to,\nor referenced in the catalog.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The name of the node being added to, or\nreferenced in the catalog.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/CatalogEntryService:CatalogEntryService"
                    },
                    "description": "A service to optionally associated with\nthe node. Supported values are documented below.\n"
                },
                "token": {
                    "type": "string",
                    "description": "ACL token.\n"
                }
            },
            "required": [
                "address",
                "datacenter",
                "node"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The address of the node being added to,\nor referenced in the catalog.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The name of the node being added to, or\nreferenced in the catalog.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/CatalogEntryService:CatalogEntryService"
                    },
                    "description": "A service to optionally associated with\nthe node. Supported values are documented below.\n"
                },
                "token": {
                    "type": "string",
                    "description": "ACL token.\n"
                }
            },
            "requiredInputs": [
                "address",
                "node"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CatalogEntry resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address of the node being added to,\nor referenced in the catalog.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "node": {
                        "type": "string",
                        "description": "The name of the node being added to, or\nreferenced in the catalog.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/CatalogEntryService:CatalogEntryService"
                        },
                        "description": "A service to optionally associated with\nthe node. Supported values are documented below.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "ACL token.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/certificateAuthority:CertificateAuthority": {
            "description": "The `certificate_authority` resource can be used to manage the configuration of\nthe Certificate Authority used by [Consul Connect](https://www.consul.io/docs/connect/ca).\n",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The raw configuration to use for the chosen provider.\n"
                },
                "connectProvider": {
                    "type": "string",
                    "description": "Specifies the CA provider type to use.\n"
                }
            },
            "required": [
                "config",
                "connectProvider"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The raw configuration to use for the chosen provider.\n"
                },
                "connectProvider": {
                    "type": "string",
                    "description": "Specifies the CA provider type to use.\n"
                }
            },
            "requiredInputs": [
                "config",
                "connectProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CertificateAuthority resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The raw configuration to use for the chosen provider.\n"
                    },
                    "connectProvider": {
                        "type": "string",
                        "description": "Specifies the CA provider type to use.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/configEntry:ConfigEntry": {
            "description": "The [Configuration Entry](https://www.consul.io/docs/agent/config_entries.html)\nresource can be used to provide cluster-wide defaults for various aspects of\nConsul.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst proxyDefaults = new consul.ConfigEntry(\"proxyDefaults\", {\n    kind: \"proxy-defaults\",\n    configJson: JSON.stringify({\n        Config: {\n            local_connect_timeout_ms: 1000,\n            handshake_timeout_ms: 10000,\n        },\n    }),\n});\nconst web = new consul.ConfigEntry(\"web\", {\n    kind: \"service-defaults\",\n    configJson: JSON.stringify({\n        Protocol: \"http\",\n    }),\n});\nconst admin = new consul.ConfigEntry(\"admin\", {\n    kind: \"service-defaults\",\n    configJson: JSON.stringify({\n        Protocol: \"http\",\n    }),\n});\nconst serviceResolver = new consul.ConfigEntry(\"serviceResolver\", {\n    kind: \"service-resolver\",\n    configJson: JSON.stringify({\n        DefaultSubset: \"v1\",\n        Subsets: {\n            v1: {\n                Filter: \"Service.Meta.version == v1\",\n            },\n            v2: {\n                Filter: \"Service.Meta.version == v2\",\n            },\n        },\n    }),\n});\nconst serviceSplitter = new consul.ConfigEntry(\"serviceSplitter\", {\n    kind: \"service-splitter\",\n    configJson: JSON.stringify({\n        Splits: [\n            {\n                Weight: 90,\n                ServiceSubset: \"v1\",\n            },\n            {\n                Weight: 10,\n                ServiceSubset: \"v2\",\n            },\n        ],\n    }),\n});\nconst serviceRouter = new consul.ConfigEntry(\"serviceRouter\", {\n    kind: \"service-router\",\n    configJson: JSON.stringify({\n        Routes: [{\n            Match: {\n                HTTP: {\n                    PathPrefix: \"/admin\",\n                },\n            },\n            Destination: {\n                Service: \"admin\",\n            },\n        }],\n    }),\n});\nconst ingressGateway = new consul.ConfigEntry(\"ingressGateway\", {\n    kind: \"ingress-gateway\",\n    configJson: JSON.stringify({\n        TLS: {\n            Enabled: true,\n        },\n        Listeners: [{\n            Port: 8000,\n            Protocol: \"http\",\n            Services: [{\n                Name: \"*\",\n            }],\n        }],\n    }),\n});\nconst terminatingGateway = new consul.ConfigEntry(\"terminatingGateway\", {\n    kind: \"terminating-gateway\",\n    configJson: JSON.stringify({\n        Services: [{\n            Name: \"billing\",\n        }],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_consul as consul\n\nproxy_defaults = consul.ConfigEntry(\"proxyDefaults\",\n    kind=\"proxy-defaults\",\n    config_json=json.dumps({\n        \"Config\": {\n            \"local_connect_timeout_ms\": 1000,\n            \"handshake_timeout_ms\": 10000,\n        },\n    }))\nweb = consul.ConfigEntry(\"web\",\n    kind=\"service-defaults\",\n    config_json=json.dumps({\n        \"Protocol\": \"http\",\n    }))\nadmin = consul.ConfigEntry(\"admin\",\n    kind=\"service-defaults\",\n    config_json=json.dumps({\n        \"Protocol\": \"http\",\n    }))\nservice_resolver = consul.ConfigEntry(\"serviceResolver\",\n    kind=\"service-resolver\",\n    config_json=json.dumps({\n        \"DefaultSubset\": \"v1\",\n        \"Subsets\": {\n            \"v1\": {\n                \"Filter\": \"Service.Meta.version == v1\",\n            },\n            \"v2\": {\n                \"Filter\": \"Service.Meta.version == v2\",\n            },\n        },\n    }))\nservice_splitter = consul.ConfigEntry(\"serviceSplitter\",\n    kind=\"service-splitter\",\n    config_json=json.dumps({\n        \"Splits\": [\n            {\n                \"Weight\": 90,\n                \"ServiceSubset\": \"v1\",\n            },\n            {\n                \"Weight\": 10,\n                \"ServiceSubset\": \"v2\",\n            },\n        ],\n    }))\nservice_router = consul.ConfigEntry(\"serviceRouter\",\n    kind=\"service-router\",\n    config_json=json.dumps({\n        \"Routes\": [{\n            \"Match\": {\n                \"HTTP\": {\n                    \"PathPrefix\": \"/admin\",\n                },\n            },\n            \"Destination\": {\n                \"Service\": \"admin\",\n            },\n        }],\n    }))\ningress_gateway = consul.ConfigEntry(\"ingressGateway\",\n    kind=\"ingress-gateway\",\n    config_json=json.dumps({\n        \"TLS\": {\n            \"Enabled\": True,\n        },\n        \"Listeners\": [{\n            \"Port\": 8000,\n            \"Protocol\": \"http\",\n            \"Services\": [{\n                \"Name\": \"*\",\n            }],\n        }],\n    }))\nterminating_gateway = consul.ConfigEntry(\"terminatingGateway\",\n    kind=\"terminating-gateway\",\n    config_json=json.dumps({\n        \"Services\": [{\n            \"Name\": \"billing\",\n        }],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var proxyDefaults = new Consul.ConfigEntry(\"proxyDefaults\", new Consul.ConfigEntryArgs\n        {\n            Kind = \"proxy-defaults\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"Config\", new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"local_connect_timeout_ms\", 1000 },\n                    { \"handshake_timeout_ms\", 10000 },\n                } },\n            }),\n        });\n        var web = new Consul.ConfigEntry(\"web\", new Consul.ConfigEntryArgs\n        {\n            Kind = \"service-defaults\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"Protocol\", \"http\" },\n            }),\n        });\n        var admin = new Consul.ConfigEntry(\"admin\", new Consul.ConfigEntryArgs\n        {\n            Kind = \"service-defaults\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"Protocol\", \"http\" },\n            }),\n        });\n        var serviceResolver = new Consul.ConfigEntry(\"serviceResolver\", new Consul.ConfigEntryArgs\n        {\n            Kind = \"service-resolver\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"DefaultSubset\", \"v1\" },\n                { \"Subsets\", new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"v1\", new Dictionary\u003cstring, object?\u003e\n                    {\n                        { \"Filter\", \"Service.Meta.version == v1\" },\n                    } },\n                    { \"v2\", new Dictionary\u003cstring, object?\u003e\n                    {\n                        { \"Filter\", \"Service.Meta.version == v2\" },\n                    } },\n                } },\n            }),\n        });\n        var serviceSplitter = new Consul.ConfigEntry(\"serviceSplitter\", new Consul.ConfigEntryArgs\n        {\n            Kind = \"service-splitter\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"Splits\", new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"Weight\", 90 },\n                            { \"ServiceSubset\", \"v1\" },\n                        },\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"Weight\", 10 },\n                            { \"ServiceSubset\", \"v2\" },\n                        },\n                    }\n                 },\n            }),\n        });\n        var serviceRouter = new Consul.ConfigEntry(\"serviceRouter\", new Consul.ConfigEntryArgs\n        {\n            Kind = \"service-router\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"Routes\", new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"Match\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"HTTP\", new Dictionary\u003cstring, object?\u003e\n                                {\n                                    { \"PathPrefix\", \"/admin\" },\n                                } },\n                            } },\n                            { \"Destination\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"Service\", \"admin\" },\n                            } },\n                        },\n                    }\n                 },\n            }),\n        });\n        var ingressGateway = new Consul.ConfigEntry(\"ingressGateway\", new Consul.ConfigEntryArgs\n        {\n            Kind = \"ingress-gateway\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"TLS\", new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"Enabled\", true },\n                } },\n                { \"Listeners\", new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"Port\", 8000 },\n                            { \"Protocol\", \"http\" },\n                            { \"Services\", new[]\n                                {\n                                    new Dictionary\u003cstring, object?\u003e\n                                    {\n                                        { \"Name\", \"*\" },\n                                    },\n                                }\n                             },\n                        },\n                    }\n                 },\n            }),\n        });\n        var terminatingGateway = new Consul.ConfigEntry(\"terminatingGateway\", new Consul.ConfigEntryArgs\n        {\n            Kind = \"terminating-gateway\",\n            ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"Services\", new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"Name\", \"billing\" },\n                        },\n                    }\n                 },\n            }),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Config\": map[string]interface{}{\n\t\t\t\t\"local_connect_timeout_ms\": 1000,\n\t\t\t\t\"handshake_timeout_ms\":     10000,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err := consul.NewConfigEntry(ctx, \"proxyDefaults\", \u0026consul.ConfigEntryArgs{\n\t\t\tKind:       pulumi.String(\"proxy-defaults\"),\n\t\t\tConfigJson: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Protocol\": \"http\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = consul.NewConfigEntry(ctx, \"web\", \u0026consul.ConfigEntryArgs{\n\t\t\tKind:       pulumi.String(\"service-defaults\"),\n\t\t\tConfigJson: pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON2, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Protocol\": \"http\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson2 := string(tmpJSON2)\n\t\t_, err = consul.NewConfigEntry(ctx, \"admin\", \u0026consul.ConfigEntryArgs{\n\t\t\tKind:       pulumi.String(\"service-defaults\"),\n\t\t\tConfigJson: pulumi.String(json2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON3, err := json.Marshal(map[string]interface{}{\n\t\t\t\"DefaultSubset\": \"v1\",\n\t\t\t\"Subsets\": map[string]interface{}{\n\t\t\t\t\"v1\": map[string]interface{}{\n\t\t\t\t\t\"Filter\": \"Service.Meta.version == v1\",\n\t\t\t\t},\n\t\t\t\t\"v2\": map[string]interface{}{\n\t\t\t\t\t\"Filter\": \"Service.Meta.version == v2\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson3 := string(tmpJSON3)\n\t\t_, err = consul.NewConfigEntry(ctx, \"serviceResolver\", \u0026consul.ConfigEntryArgs{\n\t\t\tKind:       pulumi.String(\"service-resolver\"),\n\t\t\tConfigJson: pulumi.String(json3),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON4, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Splits\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Weight\":        90,\n\t\t\t\t\t\"ServiceSubset\": \"v1\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Weight\":        10,\n\t\t\t\t\t\"ServiceSubset\": \"v2\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson4 := string(tmpJSON4)\n\t\t_, err = consul.NewConfigEntry(ctx, \"serviceSplitter\", \u0026consul.ConfigEntryArgs{\n\t\t\tKind:       pulumi.String(\"service-splitter\"),\n\t\t\tConfigJson: pulumi.String(json4),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON5, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Routes\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Match\": map[string]interface{}{\n\t\t\t\t\t\t\"HTTP\": map[string]interface{}{\n\t\t\t\t\t\t\t\"PathPrefix\": \"/admin\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"Destination\": map[string]interface{}{\n\t\t\t\t\t\t\"Service\": \"admin\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson5 := string(tmpJSON5)\n\t\t_, err = consul.NewConfigEntry(ctx, \"serviceRouter\", \u0026consul.ConfigEntryArgs{\n\t\t\tKind:       pulumi.String(\"service-router\"),\n\t\t\tConfigJson: pulumi.String(json5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON6, err := json.Marshal(map[string]interface{}{\n\t\t\t\"TLS\": map[string]interface{}{\n\t\t\t\t\"Enabled\": true,\n\t\t\t},\n\t\t\t\"Listeners\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Port\":     8000,\n\t\t\t\t\t\"Protocol\": \"http\",\n\t\t\t\t\t\"Services\": []map[string]interface{}{\n\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\"Name\": \"*\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson6 := string(tmpJSON6)\n\t\t_, err = consul.NewConfigEntry(ctx, \"ingressGateway\", \u0026consul.ConfigEntryArgs{\n\t\t\tKind:       pulumi.String(\"ingress-gateway\"),\n\t\t\tConfigJson: pulumi.String(json6),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON7, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Services\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Name\": \"billing\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson7 := string(tmpJSON7)\n\t\t_, err = consul.NewConfigEntry(ctx, \"terminatingGateway\", \u0026consul.ConfigEntryArgs{\n\t\t\tKind:       pulumi.String(\"terminating-gateway\"),\n\t\t\tConfigJson: pulumi.String(json7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configJson": {
                    "type": "string",
                    "description": "An arbitrary map of configuration values.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of configuration entry to register.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configuration entry being registred.\n"
                }
            },
            "required": [
                "kind",
                "name"
            ],
            "inputProperties": {
                "configJson": {
                    "type": "string",
                    "description": "An arbitrary map of configuration values.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of configuration entry to register.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configuration entry being registred.\n"
                }
            },
            "requiredInputs": [
                "kind"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConfigEntry resources.\n",
                "properties": {
                    "configJson": {
                        "type": "string",
                        "description": "An arbitrary map of configuration values.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of configuration entry to register.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the configuration entry being registred.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/intention:Intention": {
            "description": "[Intentions](https://www.consul.io/docs/connect/intentions.html) are used to define\nrules for which services may connect to one another when using [Consul Connect](https://www.consul.io/docs/connect/index.html).\n\nIt is appropriate to either reference existing services or specify non-existent services\nthat will be created in the future when creating intentions. This resource can be used\nin conjunction with the `consul.Service` datasource when referencing services\nregistered on nodes that have a running Consul agent.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a simplest intention with static service names:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst database = new consul.Intention(\"database\", {\n    action: \"allow\",\n    destinationName: \"db\",\n    sourceName: \"api\",\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\ndatabase = consul.Intention(\"database\",\n    action=\"allow\",\n    destination_name=\"db\",\n    source_name=\"api\")\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var database = new Consul.Intention(\"database\", new Consul.IntentionArgs\n        {\n            Action = \"allow\",\n            DestinationName = \"db\",\n            SourceName = \"api\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewIntention(ctx, \"database\", \u0026consul.IntentionArgs{\n\t\t\tAction:          pulumi.String(\"allow\"),\n\t\t\tDestinationName: pulumi.String(\"db\"),\n\t\t\tSourceName:      pulumi.String(\"api\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nReferencing a known service via a datasource:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst database = new consul.Intention(\"database\", {\n    action: \"allow\",\n    destinationName: consul_service_pg.name,\n    sourceName: \"api\",\n});\nconst pg = pulumi.output(consul.getService({\n    name: \"postgresql\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\ndatabase = consul.Intention(\"database\",\n    action=\"allow\",\n    destination_name=consul_service[\"pg\"][\"name\"],\n    source_name=\"api\")\npg = consul.get_service(name=\"postgresql\")\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var database = new Consul.Intention(\"database\", new Consul.IntentionArgs\n        {\n            Action = \"allow\",\n            DestinationName = consul_service.Pg.Name,\n            SourceName = \"api\",\n        });\n        var pg = Output.Create(Consul.GetService.InvokeAsync(new Consul.GetServiceArgs\n        {\n            Name = \"postgresql\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewIntention(ctx, \"database\", \u0026consul.IntentionArgs{\n\t\t\tAction:          pulumi.String(\"allow\"),\n\t\t\tDestinationName: pulumi.String(consul_service.Pg.Name),\n\t\t\tSourceName:      pulumi.String(\"api\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = consul.LookupService(ctx, \u0026consul.LookupServiceArgs{\n\t\t\tName: \"postgresql\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The intention action. Must be one of `allow` or `deny`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Optional description that can be used by Consul\ntooling, but is not used internally.\n"
                },
                "destinationName": {
                    "type": "string",
                    "description": "The name of the destination service for the intention. This\nservice does not have to exist.\n"
                },
                "destinationNamespace": {
                    "type": "string",
                    "description": "The destination\nnamespace of the intention.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key/value pairs that are opaque to Consul and are associated\nwith the intention.\n"
                },
                "sourceName": {
                    "type": "string",
                    "description": "The name of the source service for the intention. This\nservice does not have to exist.\n"
                },
                "sourceNamespace": {
                    "type": "string",
                    "description": "The source namespace of the\nintention.\n"
                }
            },
            "required": [
                "action",
                "destinationName",
                "sourceName"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The intention action. Must be one of `allow` or `deny`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Optional description that can be used by Consul\ntooling, but is not used internally.\n"
                },
                "destinationName": {
                    "type": "string",
                    "description": "The name of the destination service for the intention. This\nservice does not have to exist.\n"
                },
                "destinationNamespace": {
                    "type": "string",
                    "description": "The destination\nnamespace of the intention.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key/value pairs that are opaque to Consul and are associated\nwith the intention.\n"
                },
                "sourceName": {
                    "type": "string",
                    "description": "The name of the source service for the intention. This\nservice does not have to exist.\n"
                },
                "sourceNamespace": {
                    "type": "string",
                    "description": "The source namespace of the\nintention.\n"
                }
            },
            "requiredInputs": [
                "action",
                "destinationName",
                "sourceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Intention resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The intention action. Must be one of `allow` or `deny`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional description that can be used by Consul\ntooling, but is not used internally.\n"
                    },
                    "destinationName": {
                        "type": "string",
                        "description": "The name of the destination service for the intention. This\nservice does not have to exist.\n"
                    },
                    "destinationNamespace": {
                        "type": "string",
                        "description": "The destination\nnamespace of the intention.\n"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key/value pairs that are opaque to Consul and are associated\nwith the intention.\n"
                    },
                    "sourceName": {
                        "type": "string",
                        "description": "The name of the source service for the intention. This\nservice does not have to exist.\n"
                    },
                    "sourceNamespace": {
                        "type": "string",
                        "description": "The source namespace of the\nintention.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/keyPrefix:KeyPrefix": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the keys within.\n"
                },
                "pathPrefix": {
                    "type": "string",
                    "description": "Specifies the common prefix shared by all keys\nthat will be managed by this resource instance. In most cases this will\nend with a slash, to manage a \"folder\" of keys.\n"
                },
                "subkeyCollection": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/KeyPrefixSubkeyCollection:KeyPrefixSubkeyCollection"
                    },
                    "description": "A subkey to add. Supported values documented below.\nMultiple blocks supported.\n"
                },
                "subkeys": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping from subkey name (which will be appended\nto the given `path_prefix`) to the value that should be stored at that key.\nUse slashes, as shown in the above example, to create \"sub-folders\" under\nthe given path prefix.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                }
            },
            "required": [
                "datacenter",
                "pathPrefix"
            ],
            "inputProperties": {
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the keys within.\n"
                },
                "pathPrefix": {
                    "type": "string",
                    "description": "Specifies the common prefix shared by all keys\nthat will be managed by this resource instance. In most cases this will\nend with a slash, to manage a \"folder\" of keys.\n"
                },
                "subkeyCollection": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/KeyPrefixSubkeyCollection:KeyPrefixSubkeyCollection"
                    },
                    "description": "A subkey to add. Supported values documented below.\nMultiple blocks supported.\n"
                },
                "subkeys": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping from subkey name (which will be appended\nto the given `path_prefix`) to the value that should be stored at that key.\nUse slashes, as shown in the above example, to create \"sub-folders\" under\nthe given path prefix.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                }
            },
            "requiredInputs": [
                "pathPrefix"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KeyPrefix resources.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to create the keys within.\n"
                    },
                    "pathPrefix": {
                        "type": "string",
                        "description": "Specifies the common prefix shared by all keys\nthat will be managed by this resource instance. In most cases this will\nend with a slash, to manage a \"folder\" of keys.\n"
                    },
                    "subkeyCollection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/KeyPrefixSubkeyCollection:KeyPrefixSubkeyCollection"
                        },
                        "description": "A subkey to add. Supported values documented below.\nMultiple blocks supported.\n"
                    },
                    "subkeys": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping from subkey name (which will be appended\nto the given `path_prefix`) to the value that should be stored at that key.\nUse slashes, as shown in the above example, to create \"sub-folders\" under\nthe given path prefix.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/keys:Keys": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/KeysKey:KeysKey"
                    },
                    "description": "Specifies a key in Consul to be written.\nSupported values documented below.\n",
                    "language": {
                        "csharp": {
                            "name": "KeysCollection"
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the keys within.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                },
                "var": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "datacenter",
                "var"
            ],
            "inputProperties": {
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/KeysKey:KeysKey"
                    },
                    "description": "Specifies a key in Consul to be written.\nSupported values documented below.\n",
                    "language": {
                        "csharp": {
                            "name": "KeysCollection"
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the keys within.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Keys resources.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/KeysKey:KeysKey"
                        },
                        "description": "Specifies a key in Consul to be written.\nSupported values documented below.\n",
                        "language": {
                            "csharp": {
                                "name": "KeysCollection"
                            }
                        }
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to create the keys within.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                    },
                    "var": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "consul:index/license:License": {
            "description": "\u003e **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).\n\nThe `consul.License` resource provides datacenter-level management of\nthe Consul Enterprise license. If ACLs are enabled then a token with operator\nprivileges may be required in order to use this command.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\nimport * from \"fs\";\n\nconst license = new consul.License(\"license\", {license: fs.readFileSync(\"license.hclic\")});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nlicense = consul.License(\"license\", license=(lambda path: open(path).read())(\"license.hclic\"))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var license = new Consul.License(\"license\", new Consul.LicenseArgs\n        {\n            License = File.ReadAllText(\"license.hclic\"),\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "customerId": {
                    "type": "string",
                    "description": "The ID of the customer the license is attached to.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "expirationTime": {
                    "type": "string",
                    "description": "The expiration time of the license.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The features for which the license is valid.\n"
                },
                "flags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The metadata attached to the license.\n"
                },
                "installationId": {
                    "type": "string",
                    "description": "The ID of the current installation.\n"
                },
                "issueTime": {
                    "type": "string",
                    "description": "The date the license was issued.\n"
                },
                "license": {
                    "type": "string",
                    "description": "The Consul license to use.\n",
                    "language": {
                        "csharp": {
                            "name": "ConsulLicense"
                        }
                    }
                },
                "licenseId": {
                    "type": "string",
                    "description": "The ID of the license used.\n"
                },
                "product": {
                    "type": "string",
                    "description": "The product for which the license is valid.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The start time of the license.\n"
                },
                "valid": {
                    "type": "boolean",
                    "description": "Whether the license is valid.\n"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of warning messages regarding the license validity.\n"
                }
            },
            "required": [
                "customerId",
                "expirationTime",
                "features",
                "flags",
                "installationId",
                "issueTime",
                "license",
                "licenseId",
                "product",
                "startTime",
                "valid",
                "warnings"
            ],
            "inputProperties": {
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "license": {
                    "type": "string",
                    "description": "The Consul license to use.\n",
                    "language": {
                        "csharp": {
                            "name": "ConsulLicense"
                        }
                    }
                }
            },
            "requiredInputs": [
                "license"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering License resources.\n",
                "properties": {
                    "customerId": {
                        "type": "string",
                        "description": "The ID of the customer the license is attached to.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "expirationTime": {
                        "type": "string",
                        "description": "The expiration time of the license.\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features for which the license is valid.\n"
                    },
                    "flags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The metadata attached to the license.\n"
                    },
                    "installationId": {
                        "type": "string",
                        "description": "The ID of the current installation.\n"
                    },
                    "issueTime": {
                        "type": "string",
                        "description": "The date the license was issued.\n"
                    },
                    "license": {
                        "type": "string",
                        "description": "The Consul license to use.\n",
                        "language": {
                            "csharp": {
                                "name": "ConsulLicense"
                            }
                        }
                    },
                    "licenseId": {
                        "type": "string",
                        "description": "The ID of the license used.\n"
                    },
                    "product": {
                        "type": "string",
                        "description": "The product for which the license is valid.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "The start time of the license.\n"
                    },
                    "valid": {
                        "type": "boolean",
                        "description": "Whether the license is valid.\n"
                    },
                    "warnings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of warning messages regarding the license validity.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/namespace:Namespace": {
            "description": "\u003e **NOTE:** This feature requires Consul Enterprise.\n\nThe `consul.Namespace` resource provides isolated [Consul Enterprise Namespaces](https://www.consul.io/docs/enterprise/namespaces/index.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst production = new consul.Namespace(\"production\", {\n    description: \"Production namespace\",\n    meta: {\n        foo: \"bar\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nproduction = consul.Namespace(\"production\",\n    description=\"Production namespace\",\n    meta={\n        \"foo\": \"bar\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var production = new Consul.Namespace(\"production\", new Consul.NamespaceArgs\n        {\n            Description = \"Production namespace\",\n            Meta = \n            {\n                { \"foo\", \"bar\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewNamespace(ctx, \"production\", \u0026consul.NamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Production namespace\"),\n\t\t\tMeta: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Free form namespace description.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies arbitrary KV metadata to associate with the\nnamespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The namespace name.\n"
                },
                "policyDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of default policies that should be\napplied to all tokens created in this namespace.\n"
                },
                "roleDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of default roles that should be applied\nto all tokens created in this namespace.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Free form namespace description.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies arbitrary KV metadata to associate with the\nnamespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The namespace name.\n"
                },
                "policyDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of default policies that should be\napplied to all tokens created in this namespace.\n"
                },
                "roleDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of default roles that should be applied\nto all tokens created in this namespace.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Namespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Free form namespace description.\n"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies arbitrary KV metadata to associate with the\nnamespace.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The namespace name.\n"
                    },
                    "policyDefaults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of default policies that should be\napplied to all tokens created in this namespace.\n"
                    },
                    "roleDefaults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of default roles that should be applied\nto all tokens created in this namespace.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/networkArea:NetworkArea": {
            "description": "\u003e **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).\n\nThe `consul.NetworkArea` resource manages a relationship between servers in two\ndifferent Consul datacenters.\n\nUnlike Consul's WAN feature, network areas use just the server RPC port for\ncommunication, and relationships can be made between independent pairs of\ndatacenters, so not all servers need to be fully connected. This allows for\ncomplex topologies among Consul datacenters like hub/spoke and more general trees.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst dc2 = new consul.NetworkArea(\"dc2\", {\n    peerDatacenter: \"dc2\",\n    retryJoins: [\"1.2.3.4\"],\n    useTls: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\ndc2 = consul.NetworkArea(\"dc2\",\n    peer_datacenter=\"dc2\",\n    retry_joins=[\"1.2.3.4\"],\n    use_tls=True)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dc2 = new Consul.NetworkArea(\"dc2\", new Consul.NetworkAreaArgs\n        {\n            PeerDatacenter = \"dc2\",\n            RetryJoins = \n            {\n                \"1.2.3.4\",\n            },\n            UseTls = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewNetworkArea(ctx, \"dc2\", \u0026consul.NetworkAreaArgs{\n\t\t\tPeerDatacenter: pulumi.String(\"dc2\"),\n\t\t\tRetryJoins: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1.2.3.4\"),\n\t\t\t},\n\t\t\tUseTls: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "peerDatacenter": {
                    "type": "string",
                    "description": "The name of the Consul datacenter that will be\njoined to form the area.\n"
                },
                "retryJoins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of Consul servers to attempt to\njoin. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Specifies whether gossip over this area should be\nencrypted with TLS if possible. Defaults to `false`.\n"
                }
            },
            "required": [
                "datacenter",
                "peerDatacenter"
            ],
            "inputProperties": {
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "peerDatacenter": {
                    "type": "string",
                    "description": "The name of the Consul datacenter that will be\njoined to form the area.\n"
                },
                "retryJoins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of Consul servers to attempt to\njoin. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Specifies whether gossip over this area should be\nencrypted with TLS if possible. Defaults to `false`.\n"
                }
            },
            "requiredInputs": [
                "peerDatacenter"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkArea resources.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "peerDatacenter": {
                        "type": "string",
                        "description": "The name of the Consul datacenter that will be\njoined to form the area.\n"
                    },
                    "retryJoins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of Consul servers to attempt to\njoin. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                    },
                    "useTls": {
                        "type": "boolean",
                        "description": "Specifies whether gossip over this area should be\nencrypted with TLS if possible. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/node:Node": {
            "description": "Provides access to Node data in Consul. This can be used to define a\nnode. Currently, defining health checks is not supported.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst foobar = new consul.Node(\"foobar\", {\n    address: \"192.168.10.10\",\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nfoobar = consul.Node(\"foobar\", address=\"192.168.10.10\")\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Consul.Node(\"foobar\", new Consul.NodeArgs\n        {\n            Address = \"192.168.10.10\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewNode(ctx, \"foobar\", \u0026consul.NodeArgs{\n\t\t\tAddress: pulumi.String(\"192.168.10.10\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the node being added to,\nor referenced in the catalog.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the agent's\ndefault datacenter and the datacenter in the provider setup.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key/value pairs that are associated with the node.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the node being added to, or\nreferenced in the catalog.\n"
                },
                "token": {
                    "type": "string"
                }
            },
            "required": [
                "address",
                "datacenter",
                "name"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The address of the node being added to,\nor referenced in the catalog.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the agent's\ndefault datacenter and the datacenter in the provider setup.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key/value pairs that are associated with the node.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the node being added to, or\nreferenced in the catalog.\n"
                },
                "token": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "address"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Node resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address of the node being added to,\nor referenced in the catalog.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the agent's\ndefault datacenter and the datacenter in the provider setup.\n"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key/value pairs that are associated with the node.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the node being added to, or\nreferenced in the catalog.\n"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/preparedQuery:PreparedQuery": {
            "properties": {
                "connect": {
                    "type": "boolean",
                    "description": "When `true` the prepared query will return connect\nproxy services for a queried service.  Conditions such as `tags` in the\nprepared query will be matched against the proxy service. Defaults to false.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "dns": {
                    "$ref": "#/types/consul:/PreparedQueryDns:PreparedQueryDns",
                    "description": "Settings for controlling the DNS response details.\n"
                },
                "failover": {
                    "$ref": "#/types/consul:/PreparedQueryFailover:PreparedQueryFailover",
                    "description": "Options for controlling behavior when no healthy\nnodes are available in the local DC.\n"
                },
                "ignoreCheckIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of check IDs that should be\nignored when filtering unhealthy instances. This is mostly useful in an\nemergency or as a temporary measure when a health check is found to be\nunreliable. Being able to ignore it in centrally-defined queries can be\nsimpler than de-registering the check as an interim solution until the check\ncan be fixed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the prepared query. Used to identify\nthe prepared query during requests. Can be specified as an empty string\nto configure the query as a catch-all.\n"
                },
                "near": {
                    "type": "string",
                    "description": "Allows specifying the name of a node to sort results\nnear using Consul's distance sorting and network coordinates. The magic\n`_agent` value can be used to always sort nearest the node servicing the\nrequest.\n"
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a list of user-defined key/value pairs that\nwill be used for filtering the query results to nodes with the given metadata\nvalues present.\n"
                },
                "onlyPassing": {
                    "type": "boolean",
                    "description": "When `true`, the prepared query will only\nreturn nodes with passing health checks in the result.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The name of the service to query.\n"
                },
                "serviceMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a list of user-defined key/value pairs\nthat will be used for filtering the query results to services with the given\nmetadata values present.\n"
                },
                "session": {
                    "type": "string",
                    "description": "The name of the Consul session to tie this query's\nlifetime to.  This is an advanced parameter that should not be used without a\ncomplete understanding of Consul sessions and the implications of their use\n(it is recommended to leave this blank in nearly all cases).  If this\nparameter is omitted the query will not expire.\n"
                },
                "storedToken": {
                    "type": "string",
                    "description": "The ACL token to store with the prepared\nquery. This token will be used by default whenever the query is executed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of required and/or disallowed tags.  If a tag is\nin this list it must be present.  If the tag is preceded with a \"!\" then it is\ndisallowed.\n"
                },
                "template": {
                    "$ref": "#/types/consul:/PreparedQueryTemplate:PreparedQueryTemplate",
                    "description": "Query templating options. This is used to make a\nsingle prepared query respond to many different requests.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The ACL token to use when saving the prepared query.\nThis overrides the token that the agent provides by default.\n"
                }
            },
            "required": [
                "name",
                "service"
            ],
            "inputProperties": {
                "connect": {
                    "type": "boolean",
                    "description": "When `true` the prepared query will return connect\nproxy services for a queried service.  Conditions such as `tags` in the\nprepared query will be matched against the proxy service. Defaults to false.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "dns": {
                    "$ref": "#/types/consul:/PreparedQueryDns:PreparedQueryDns",
                    "description": "Settings for controlling the DNS response details.\n"
                },
                "failover": {
                    "$ref": "#/types/consul:/PreparedQueryFailover:PreparedQueryFailover",
                    "description": "Options for controlling behavior when no healthy\nnodes are available in the local DC.\n"
                },
                "ignoreCheckIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of check IDs that should be\nignored when filtering unhealthy instances. This is mostly useful in an\nemergency or as a temporary measure when a health check is found to be\nunreliable. Being able to ignore it in centrally-defined queries can be\nsimpler than de-registering the check as an interim solution until the check\ncan be fixed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the prepared query. Used to identify\nthe prepared query during requests. Can be specified as an empty string\nto configure the query as a catch-all.\n"
                },
                "near": {
                    "type": "string",
                    "description": "Allows specifying the name of a node to sort results\nnear using Consul's distance sorting and network coordinates. The magic\n`_agent` value can be used to always sort nearest the node servicing the\nrequest.\n"
                },
                "nodeMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a list of user-defined key/value pairs that\nwill be used for filtering the query results to nodes with the given metadata\nvalues present.\n"
                },
                "onlyPassing": {
                    "type": "boolean",
                    "description": "When `true`, the prepared query will only\nreturn nodes with passing health checks in the result.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The name of the service to query.\n"
                },
                "serviceMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a list of user-defined key/value pairs\nthat will be used for filtering the query results to services with the given\nmetadata values present.\n"
                },
                "session": {
                    "type": "string",
                    "description": "The name of the Consul session to tie this query's\nlifetime to.  This is an advanced parameter that should not be used without a\ncomplete understanding of Consul sessions and the implications of their use\n(it is recommended to leave this blank in nearly all cases).  If this\nparameter is omitted the query will not expire.\n"
                },
                "storedToken": {
                    "type": "string",
                    "description": "The ACL token to store with the prepared\nquery. This token will be used by default whenever the query is executed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of required and/or disallowed tags.  If a tag is\nin this list it must be present.  If the tag is preceded with a \"!\" then it is\ndisallowed.\n"
                },
                "template": {
                    "$ref": "#/types/consul:/PreparedQueryTemplate:PreparedQueryTemplate",
                    "description": "Query templating options. This is used to make a\nsingle prepared query respond to many different requests.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The ACL token to use when saving the prepared query.\nThis overrides the token that the agent provides by default.\n"
                }
            },
            "requiredInputs": [
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PreparedQuery resources.\n",
                "properties": {
                    "connect": {
                        "type": "boolean",
                        "description": "When `true` the prepared query will return connect\nproxy services for a queried service.  Conditions such as `tags` in the\nprepared query will be matched against the proxy service. Defaults to false.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "dns": {
                        "$ref": "#/types/consul:/PreparedQueryDns:PreparedQueryDns",
                        "description": "Settings for controlling the DNS response details.\n"
                    },
                    "failover": {
                        "$ref": "#/types/consul:/PreparedQueryFailover:PreparedQueryFailover",
                        "description": "Options for controlling behavior when no healthy\nnodes are available in the local DC.\n"
                    },
                    "ignoreCheckIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of check IDs that should be\nignored when filtering unhealthy instances. This is mostly useful in an\nemergency or as a temporary measure when a health check is found to be\nunreliable. Being able to ignore it in centrally-defined queries can be\nsimpler than de-registering the check as an interim solution until the check\ncan be fixed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the prepared query. Used to identify\nthe prepared query during requests. Can be specified as an empty string\nto configure the query as a catch-all.\n"
                    },
                    "near": {
                        "type": "string",
                        "description": "Allows specifying the name of a node to sort results\nnear using Consul's distance sorting and network coordinates. The magic\n`_agent` value can be used to always sort nearest the node servicing the\nrequest.\n"
                    },
                    "nodeMeta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies a list of user-defined key/value pairs that\nwill be used for filtering the query results to nodes with the given metadata\nvalues present.\n"
                    },
                    "onlyPassing": {
                        "type": "boolean",
                        "description": "When `true`, the prepared query will only\nreturn nodes with passing health checks in the result.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The name of the service to query.\n"
                    },
                    "serviceMeta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies a list of user-defined key/value pairs\nthat will be used for filtering the query results to services with the given\nmetadata values present.\n"
                    },
                    "session": {
                        "type": "string",
                        "description": "The name of the Consul session to tie this query's\nlifetime to.  This is an advanced parameter that should not be used without a\ncomplete understanding of Consul sessions and the implications of their use\n(it is recommended to leave this blank in nearly all cases).  If this\nparameter is omitted the query will not expire.\n"
                    },
                    "storedToken": {
                        "type": "string",
                        "description": "The ACL token to store with the prepared\nquery. This token will be used by default whenever the query is executed.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of required and/or disallowed tags.  If a tag is\nin this list it must be present.  If the tag is preceded with a \"!\" then it is\ndisallowed.\n"
                    },
                    "template": {
                        "$ref": "#/types/consul:/PreparedQueryTemplate:PreparedQueryTemplate",
                        "description": "Query templating options. This is used to make a\nsingle prepared query respond to many different requests.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The ACL token to use when saving the prepared query.\nThis overrides the token that the agent provides by default.\n"
                    }
                },
                "type": "object"
            }
        },
        "consul:index/service:Service": {
            "description": "A high-level resource for creating a Service in Consul in the Consul catalog. This\nis appropriate for registering [external services](https://www.consul.io/docs/guides/external.html) and\ncan be used to create services addressable by Consul that cannot be registered\nwith a [local agent](https://www.consul.io/docs/agent/basics.html).\n\nIf the Consul agent is running on the node where this service is registered, it is\nnot recommended to use this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreating a new node with the service:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst compute = new consul.Node(\"compute\", {\n    address: \"www.google.com\",\n});\nconst google = new consul.Service(\"google\", {\n    node: compute.name,\n    port: 80,\n    tags: [\"tag0\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\ncompute = consul.Node(\"compute\", address=\"www.google.com\")\ngoogle = consul.Service(\"google\",\n    node=compute.name,\n    port=80,\n    tags=[\"tag0\"])\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var compute = new Consul.Node(\"compute\", new Consul.NodeArgs\n        {\n            Address = \"www.google.com\",\n        });\n        var google = new Consul.Service(\"google\", new Consul.ServiceArgs\n        {\n            Node = compute.Name,\n            Port = 80,\n            Tags = \n            {\n                \"tag0\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcompute, err := consul.NewNode(ctx, \"compute\", \u0026consul.NodeArgs{\n\t\t\tAddress: pulumi.String(\"www.google.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = consul.NewService(ctx, \"google\", \u0026consul.ServiceArgs{\n\t\t\tNode: compute.Name,\n\t\t\tPort: pulumi.Int(80),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag0\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nUtilizing an existing known node:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst google = new consul.Service(\"google\", {\n    node: \"google\",\n    port: 443,\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\ngoogle = consul.Service(\"google\",\n    node=\"google\",\n    port=443)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var google = new Consul.Service(\"google\", new Consul.ServiceArgs\n        {\n            Node = \"google\",\n            Port = 443,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewService(ctx, \"google\", \u0026consul.ServiceArgs{\n\t\t\tNode: pulumi.String(\"google\"),\n\t\t\tPort: pulumi.Int(443),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nRegister a health-check:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst redis = new consul.Service(\"redis\", {\n    checks: [{\n        checkId: \"service:redis1\",\n        deregisterCriticalServiceAfter: \"30s\",\n        headers: [\n            {\n                name: \"foo\",\n                values: [\"test\"],\n            },\n            {\n                name: \"bar\",\n                values: [\"test\"],\n            },\n        ],\n        http: \"https://www.hashicorptest.com\",\n        interval: \"5s\",\n        method: \"PUT\",\n        name: \"Redis health check\",\n        status: \"passing\",\n        timeout: \"1s\",\n        tlsSkipVerify: false,\n    }],\n    node: \"redis\",\n    port: 6379,\n});\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nredis = consul.Service(\"redis\",\n    checks=[{\n        \"checkId\": \"service:redis1\",\n        \"deregisterCriticalServiceAfter\": \"30s\",\n        \"headers\": [\n            {\n                \"name\": \"foo\",\n                \"value\": [\"test\"],\n            },\n            {\n                \"name\": \"bar\",\n                \"value\": [\"test\"],\n            },\n        ],\n        \"http\": \"https://www.hashicorptest.com\",\n        \"interval\": \"5s\",\n        \"method\": \"PUT\",\n        \"name\": \"Redis health check\",\n        \"status\": \"passing\",\n        \"timeout\": \"1s\",\n        \"tlsSkipVerify\": False,\n    }],\n    node=\"redis\",\n    port=6379)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var redis = new Consul.Service(\"redis\", new Consul.ServiceArgs\n        {\n            Checks = \n            {\n                new Consul.Inputs.ServiceCheckArgs\n                {\n                    CheckId = \"service:redis1\",\n                    DeregisterCriticalServiceAfter = \"30s\",\n                    Headers = \n                    {\n                        new Consul.Inputs.ServiceCheckHeaderArgs\n                        {\n                            Name = \"foo\",\n                            Value = \n                            {\n                                \"test\",\n                            },\n                        },\n                        new Consul.Inputs.ServiceCheckHeaderArgs\n                        {\n                            Name = \"bar\",\n                            Value = \n                            {\n                                \"test\",\n                            },\n                        },\n                    },\n                    Http = \"https://www.hashicorptest.com\",\n                    Interval = \"5s\",\n                    Method = \"PUT\",\n                    Name = \"Redis health check\",\n                    Status = \"passing\",\n                    Timeout = \"1s\",\n                    TlsSkipVerify = false,\n                },\n            },\n            Node = \"redis\",\n            Port = 6379,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := consul.NewService(ctx, \"redis\", \u0026consul.ServiceArgs{\n\t\t\tChecks: consul.ServiceCheckArray{\n\t\t\t\t\u0026consul.ServiceCheckArgs{\n\t\t\t\t\tCheckId:                        pulumi.String(\"service:redis1\"),\n\t\t\t\t\tDeregisterCriticalServiceAfter: pulumi.String(\"30s\"),\n\t\t\t\t\tHeaders: consul.ServiceCheckHeaderArray{\n\t\t\t\t\t\t\u0026consul.ServiceCheckHeaderArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"foo\"),\n\t\t\t\t\t\t\tValue: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026consul.ServiceCheckHeaderArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"bar\"),\n\t\t\t\t\t\t\tValue: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tHttp:          pulumi.String(\"https://www.hashicorptest.com\"),\n\t\t\t\t\tInterval:      pulumi.String(\"5s\"),\n\t\t\t\t\tMethod:        pulumi.String(\"PUT\"),\n\t\t\t\t\tName:          pulumi.String(\"Redis health check\"),\n\t\t\t\t\tStatus:        pulumi.String(\"passing\"),\n\t\t\t\t\tTimeout:       pulumi.String(\"1s\"),\n\t\t\t\t\tTlsSkipVerify: pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNode: pulumi.String(\"redis\"),\n\t\t\tPort: pulumi.Int(6379),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the service. Defaults to the\naddress of the node.\n"
                },
                "checks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/ServiceCheck:ServiceCheck"
                    }
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "enableTagOverride": {
                    "type": "boolean",
                    "description": "Specifies to disable the\nanti-entropy feature for this service's tags. Defaults to `false`.\n"
                },
                "external": {
                    "type": "boolean",
                    "deprecationMessage": "The external field has been deprecated and does nothing."
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary KV metadata linked to the service\ninstance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the health-check.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the service within.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The name of the node the to register the service on.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the service.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "- If the service ID is not provided, it will be defaulted to the value\nof the `name` attribute.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values that are opaque to Consul,\nbut can be used to distinguish between services or nodes.\n"
                }
            },
            "required": [
                "address",
                "datacenter",
                "name",
                "node",
                "serviceId"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The address of the service. Defaults to the\naddress of the node.\n"
                },
                "checks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/consul:/ServiceCheck:ServiceCheck"
                    }
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                },
                "enableTagOverride": {
                    "type": "boolean",
                    "description": "Specifies to disable the\nanti-entropy feature for this service's tags. Defaults to `false`.\n"
                },
                "external": {
                    "type": "boolean",
                    "deprecationMessage": "The external field has been deprecated and does nothing."
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary KV metadata linked to the service\ninstance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the health-check.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to create the service within.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The name of the node the to register the service on.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the service.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "- If the service ID is not provided, it will be defaulted to the value\nof the `name` attribute.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values that are opaque to Consul,\nbut can be used to distinguish between services or nodes.\n"
                }
            },
            "requiredInputs": [
                "node"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address of the service. Defaults to the\naddress of the node.\n"
                    },
                    "checks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/ServiceCheck:ServiceCheck"
                        }
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "enableTagOverride": {
                        "type": "boolean",
                        "description": "Specifies to disable the\nanti-entropy feature for this service's tags. Defaults to `false`.\n"
                    },
                    "external": {
                        "type": "boolean",
                        "deprecationMessage": "The external field has been deprecated and does nothing."
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of arbitrary KV metadata linked to the service\ninstance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the health-check.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to create the service within.\n"
                    },
                    "node": {
                        "type": "string",
                        "description": "The name of the node the to register the service on.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of the service.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "- If the service ID is not provided, it will be defaulted to the value\nof the `name` attribute.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of values that are opaque to Consul,\nbut can be used to distinguish between services or nodes.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "consul:index/getAclAuthMethod:getAclAuthMethod": {
            "description": "The `consul.AclAuthMethod` data source returns the information related to a\n[Consul Auth Method](https://www.consul.io/docs/acl/acl-auth-methods.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst test = consul.getAclAuthMethod({\n    name: \"minikube\",\n});\nexport const consulAclAuthMethod = test.then(test =\u003e test.config);\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\ntest = consul.get_acl_auth_method(name=\"minikube\")\npulumi.export(\"consulAclAuthMethod\", test.config)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Consul.GetAclAuthMethod.InvokeAsync(new Consul.GetAclAuthMethodArgs\n        {\n            Name = \"minikube\",\n        }));\n        this.ConsulAclAuthMethod = test.Apply(test =\u003e test.Config);\n    }\n\n    [Output(\"consulAclAuthMethod\")]\n    public Output\u003cstring\u003e ConsulAclAuthMethod { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := consul.LookupAclAuthMethod(ctx, \u0026consul.LookupAclAuthMethodArgs{\n\t\t\tName: \"minikube\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"consulAclAuthMethod\", test.Config)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAclAuthMethod.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the ACL Auth Method.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to lookup the auth method.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAclAuthMethod.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The configuration options of the ACL Auth Method. This attribute is\ndeprecated and will be removed in a future version. If the configuration is\ntoo complex to be represented as a map of strings, it will be blank.\n`config_json` should be used instead.\n",
                        "deprecationMessage": "The config attribute is deprecated, please use config_json instead."
                    },
                    "configJson": {
                        "type": "string",
                        "description": "The configuration options of the ACL Auth Method.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the ACL Auth Method.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "An optional name to use instead of the name attribute when\ndisplaying information about this auth method.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxTokenTtl": {
                        "type": "string",
                        "description": "The maximum life of any token created by this auth method.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "namespaceRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getAclAuthMethodNamespaceRule:getAclAuthMethodNamespaceRule"
                        },
                        "description": "(Enterprise Only) A set of rules that control which\nnamespace tokens created via this auth method will be created within\n"
                    },
                    "tokenLocality": {
                        "type": "string",
                        "description": "The kind of token that this auth method produces. This can\nbe either 'local' or 'global'.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the ACL Auth Method.\n"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "configJson",
                    "description",
                    "displayName",
                    "maxTokenTtl",
                    "name",
                    "namespaceRules",
                    "tokenLocality",
                    "type",
                    "id"
                ]
            }
        },
        "consul:index/getAclPolicy:getAclPolicy": {
            "description": "The `consul.AclPolicy` data source returns the information related to a\n[Consul ACL Policy](https://www.consul.io/docs/acl/acl-system.html#acl-policies).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst agent = consul.getAclPolicy({\n    name: \"agent\",\n});\nexport const consulAclPolicy = agent.then(agent =\u003e agent.rules);\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nagent = consul.get_acl_policy(name=\"agent\")\npulumi.export(\"consulAclPolicy\", agent.rules)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var agent = Output.Create(Consul.GetAclPolicy.InvokeAsync(new Consul.GetAclPolicyArgs\n        {\n            Name = \"agent\",\n        }));\n        this.ConsulAclPolicy = agent.Apply(agent =\u003e agent.Rules);\n    }\n\n    [Output(\"consulAclPolicy\")]\n    public Output\u003cstring\u003e ConsulAclPolicy { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tagent, err := consul.LookupAclPolicy(ctx, \u0026consul.LookupAclPolicyArgs{\n\t\t\tName: \"agent\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"consulAclPolicy\", agent.Rules)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAclPolicy.\n",
                "properties": {
                    "datacenters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The datacenters associated with the ACL Policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the ACL Policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ACL Policy.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to lookup the policy.\n"
                    },
                    "rules": {
                        "type": "string",
                        "description": "The rules associated with the ACL Policy.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAclPolicy.\n",
                "properties": {
                    "datacenters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The datacenters associated with the ACL Policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the ACL Policy.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "string",
                        "description": "The rules associated with the ACL Policy.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "consul:index/getAclRole:getAclRole": {
            "description": "The `consul.AclRole` data source returns the information related to a\n[Consul ACL Role](https://www.consul.io/api/acl/roles.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst test = consul.getAclRole({\n    name: \"example-role\",\n});\nexport const consulAclRole = test.then(test =\u003e test.id);\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\ntest = consul.get_acl_role(name=\"example-role\")\npulumi.export(\"consulAclRole\", test.id)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Consul.GetAclRole.InvokeAsync(new Consul.GetAclRoleArgs\n        {\n            Name = \"example-role\",\n        }));\n        this.ConsulAclRole = test.Apply(test =\u003e test.Id);\n    }\n\n    [Output(\"consulAclRole\")]\n    public Output\u003cstring\u003e ConsulAclRole { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := consul.LookupAclRole(ctx, \u0026consul.LookupAclRoleArgs{\n\t\t\tName: \"example-role\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"consulAclRole\", test.Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAclRole.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the ACL Role.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ACL Role.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to lookup the role.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getAclRolePolicy:getAclRolePolicy"
                        },
                        "description": "The list of policies associated with the ACL Role. Each entry has\nan `id` and a `name` attribute.\n"
                    },
                    "serviceIdentities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getAclRoleServiceIdentity:getAclRoleServiceIdentity"
                        },
                        "description": "The list of service identities associated with the ACL\nRole. Each entry has a `service_name` attribute and a list of `datacenters`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAclRole.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the ACL Role.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getAclRolePolicy:getAclRolePolicy"
                        },
                        "description": "The list of policies associated with the ACL Role. Each entry has\nan `id` and a `name` attribute.\n"
                    },
                    "serviceIdentities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getAclRoleServiceIdentity:getAclRoleServiceIdentity"
                        },
                        "description": "The list of service identities associated with the ACL\nRole. Each entry has a `service_name` attribute and a list of `datacenters`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "consul:index/getAclToken:getAclToken": {
            "description": "The `consul.AclToken` data source returns the information related to the\n`consul.AclToken` resource with the exception of its secret ID.\n\nIf you want to get the secret ID associated with a token, use the\n[`consul.getAclTokenSecretId` data source](https://www.terraform.io/docs/providers/consul/d/acl_token_secret_id.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst test = pulumi.output(consul.getAclToken({\n    accessorId: \"00000000-0000-0000-0000-000000000002\",\n}, { async: true }));\n\nexport const consulAclPolicies = test.policies!;\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\ntest = consul.get_acl_token(accessor_id=\"00000000-0000-0000-0000-000000000002\")\npulumi.export(\"consulAclPolicies\", test.policies)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Consul.GetAclToken.InvokeAsync(new Consul.GetAclTokenArgs\n        {\n            AccessorId = \"00000000-0000-0000-0000-000000000002\",\n        }));\n        this.ConsulAclPolicies = test.Apply(test =\u003e test.Policies);\n    }\n\n    [Output(\"consulAclPolicies\")]\n    public Output\u003cstring\u003e ConsulAclPolicies { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := consul.LookupAclToken(ctx, \u0026consul.LookupAclTokenArgs{\n\t\t\tAccessorId: \"00000000-0000-0000-0000-000000000002\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"consulAclPolicies\", test.Policies)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAclToken.\n",
                "properties": {
                    "accessorId": {
                        "type": "string",
                        "description": "The accessor ID of the ACL token.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the ACL token.\n"
                    },
                    "local": {
                        "type": "boolean",
                        "description": "Whether the ACL token is local to the datacenter it was created within.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to lookup the ACL token.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getAclTokenPolicy:getAclTokenPolicy"
                        },
                        "description": "A list of policies associated with the ACL token. Each entry has\nan `id` and a `name` attribute.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessorId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAclToken.\n",
                "properties": {
                    "accessorId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the ACL token.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "local": {
                        "type": "boolean",
                        "description": "Whether the ACL token is local to the datacenter it was created within.\n"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getAclTokenPolicy:getAclTokenPolicy"
                        },
                        "description": "A list of policies associated with the ACL token. Each entry has\nan `id` and a `name` attribute.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessorId",
                    "id"
                ]
            }
        },
        "consul:index/getAclTokenSecretId:getAclTokenSecretId": {
            "inputs": {
                "description": "A collection of arguments for invoking getAclTokenSecretId.\n",
                "properties": {
                    "accessorId": {
                        "type": "string",
                        "description": "The accessor ID of the ACL token.\n"
                    },
                    "pgpKey": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accessorId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAclTokenSecretId.\n",
                "properties": {
                    "accessorId": {
                        "type": "string"
                    },
                    "encryptedSecretId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "pgpKey": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "The secret ID of the ACL token if `pgp_key` has not been set.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessorId",
                    "encryptedSecretId",
                    "secretId",
                    "id"
                ]
            }
        },
        "consul:index/getAgentConfig:getAgentConfig": {
            "description": "\u003e **Note:** The `consul.getAgentConfig` resource differs from [`consul.getAgentSelf`](https://www.terraform.io/docs/providers/consul/d/agent_self.html),\nproviding less information but utilizing stable APIs. `consul.getAgentSelf` will be\ndeprecated in a future release.\n\nThe `consul.getAgentConfig` data source returns\n[configuration data](https://www.consul.io/api/agent.html#read-configuration)\nfrom the agent specified in the `provider`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst remoteAgent = pulumi.output(consul.getAgentConfig({ async: true }));\n\nexport const consulVersion = remoteAgent.version;\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nremote_agent = consul.get_agent_config()\npulumi.export(\"consulVersion\", remote_agent.version)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var remoteAgent = Output.Create(Consul.GetAgentConfig.InvokeAsync());\n        this.ConsulVersion = remoteAgent.Apply(remoteAgent =\u003e remoteAgent.Version);\n    }\n\n    [Output(\"consulVersion\")]\n    public Output\u003cstring\u003e ConsulVersion { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tremoteAgent, err := consul.GetAgentConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"consulVersion\", remoteAgent.Version)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAgentConfig.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter the agent is running in\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "The ID of the node the agent is running on\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node the agent is running on\n"
                    },
                    "revision": {
                        "type": "string",
                        "description": "The first 9 characters of the VCS revision of the build of Consul that is running\n"
                    },
                    "server": {
                        "type": "boolean",
                        "description": "Boolean if the agent is a server or not\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the build of Consul that is running\n"
                    }
                },
                "type": "object",
                "required": [
                    "datacenter",
                    "nodeId",
                    "nodeName",
                    "revision",
                    "server",
                    "version",
                    "id"
                ]
            }
        },
        "consul:index/getAgentSelf:getAgentSelf": {
            "description": "\u003e **Warning:** The `consul.getAgentSelf` resource has been deprecated and will be removed\nfrom a future release of the provider. Read the [upgrade instructions](https://www.terraform.io/docs/providers/consul/guides/upgrading.html#deprecation-of-consul_agent_self) for more information.\n\n\nThe `consul.getAgentSelf` data source returns\n[configuration and status data](https://www.consul.io/docs/agent/http/agent.html#agent_self)\nfrom the agent specified in the `provider`.\n",
            "outputs": {
                "description": "A collection of values returned by getAgentSelf.\n",
                "properties": {
                    "aclDatacenter": {
                        "type": "string"
                    },
                    "aclDefaultPolicy": {
                        "type": "string"
                    },
                    "aclDisabledTtl": {
                        "type": "string"
                    },
                    "aclDownPolicy": {
                        "type": "string"
                    },
                    "aclEnforce08Semantics": {
                        "type": "boolean"
                    },
                    "aclTtl": {
                        "type": "string"
                    },
                    "addresses": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "advertiseAddr": {
                        "type": "string"
                    },
                    "advertiseAddrWan": {
                        "type": "string"
                    },
                    "advertiseAddrs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "atlasJoin": {
                        "type": "boolean"
                    },
                    "bindAddr": {
                        "type": "string"
                    },
                    "bootstrapExpect": {
                        "type": "integer"
                    },
                    "bootstrapMode": {
                        "type": "boolean"
                    },
                    "checkDeregisterIntervalMin": {
                        "type": "string"
                    },
                    "checkReapInterval": {
                        "type": "string"
                    },
                    "checkUpdateInterval": {
                        "type": "string"
                    },
                    "clientAddr": {
                        "type": "string"
                    },
                    "dataDir": {
                        "type": "string"
                    },
                    "datacenter": {
                        "type": "string"
                    },
                    "devMode": {
                        "type": "boolean"
                    },
                    "dns": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of DNS configuration attributes.  See below for details on the\ncontents of the `dns` attribute.\n* [`dns_recursors`](https://www.consul.io/docs/agent/options.html#recursors) - A\nlist of all DNS recursors.\n* [`data_dir`](https://www.consul.io/docs/agent/options.html#_data_dir)\n* [`datacenter`](https://www.consul.io/docs/agent/options.html#_datacenter)\n* [`dev_mode`](https://www.consul.io/docs/agent/options.html#_dev)\n* [`domain`](https://www.consul.io/docs/agent/options.html#_domain)\n* [`enable_anonymous_signature`](https://www.consul.io/docs/agent/options.html#disable_anonymous_signature)\n* `enable_coordinates`\n* [`enable_debug`](https://www.consul.io/docs/agent/options.html#enable_debug)\n* [`enable_remote_exec`](https://www.consul.io/docs/agent/options.html#disable_remote_exec)\n* [`enable_syslog`](https://www.consul.io/docs/agent/options.html#_syslog)\n* [`enable_ui`](https://www.consul.io/docs/agent/options.html#_ui)\n* [`enable_update_check`](https://www.consul.io/docs/agent/options.html#disable_update_check)\n* [`id`](https://www.consul.io/docs/agent/options.html#_node_id)\n* [`leave_on_int`](https://www.consul.io/docs/agent/options.html#skip_leave_on_interrupt)\n* [`leave_on_term`](https://www.consul.io/docs/agent/options.html#leave_on_terminate)\n* [`log_level`](https://www.consul.io/docs/agent/options.html#_log_level)\n* [`name`](https://www.consul.io/docs/agent/options.html#_node)\n* [`performance`](https://www.consul.io/docs/agent/options.html#performance)\n* [`pid_file`](https://www.consul.io/docs/agent/options.html#_pid_file)\n* [`ports`](https://www.consul.io/docs/agent/options.html#ports)\n* [`protocol_version`](https://www.consul.io/docs/agent/options.html#_protocol)\n* [`reconnect_timeout_lan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout)\n* [`reconnect_timeout_wan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout_wan)\n* [`rejoin_after_leave`](https://www.consul.io/docs/agent/options.html#_rejoin)\n* [`retry_join`](https://www.consul.io/docs/agent/options.html#retry_join)\n* [`retry_join_ec2`](https://www.consul.io/docs/agent/options.html#retry_join_ec2) -\nA map of EC2 retry attributes.  See below for details on the available\ninformation.\n* [`retry_join_gce`](https://www.consul.io/docs/agent/options.html#retry_join_gce) -\nA map of GCE retry attributes.  See below for details on the available\ninformation.\n* [`retry_join_wan`](https://www.consul.io/docs/agent/options.html#_retry_join_wan)\n* [`retry_max_attempts`](https://www.consul.io/docs/agent/options.html#_retry_max)\n* [`retry_max_attempts_wan`](https://www.consul.io/docs/agent/options.html#_retry_max_wan)\n* [`serf_lan_bind_addr`](https://www.consul.io/docs/agent/options.html#_serf_lan_bind)\n* [`serf_wan_bind_addr`](https://www.consul.io/docs/agent/options.html#_serf_wan_bind)\n* [`server_mode`](https://www.consul.io/docs/agent/options.html#_server)\n* [`server_name`](https://www.consul.io/docs/agent/options.html#server_name)\n* [`session_ttl_min`](https://www.consul.io/docs/agent/options.html#session_ttl_min)\n* [`start_join`](https://www.consul.io/docs/agent/options.html#start_join)\n* [`start_join_wan`](https://www.consul.io/docs/agent/options.html#start_join_wan)\n* [`syslog_facility`](https://www.consul.io/docs/agent/options.html#syslog_facility)\n* [`tls_ca_file`](https://www.consul.io/docs/agent/options.html#ca_file)\n* [`tls_cert_file`](https://www.consul.io/docs/agent/options.html#cert_file)\n* [`tls_key_file`](https://www.consul.io/docs/agent/options.html#key_file)\n* [`tls_min_version`](https://www.consul.io/docs/agent/options.html#tls_min_version)\n* [`tls_verify_incoming`](https://www.consul.io/docs/agent/options.html#verify_incoming)\n* [`tls_verify_outgoing`](https://www.consul.io/docs/agent/options.html#verify_outgoing)\n* [`tls_verify_server_hostname`](https://www.consul.io/docs/agent/options.html#verify_server_hostname)\n* [`tagged_addresses`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)\n* [`telemetry`](https://www.consul.io/docs/agent/options.html#telemetry) - A map\nof telemetry configuration.\n* [`translate_wan_addrs`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)\n* [`ui_dir`](https://www.consul.io/docs/agent/options.html#ui_dir)\n* [`unix_sockets`](https://www.consul.io/docs/agent/options.html#unix_sockets)\n"
                    },
                    "dnsRecursors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "domain": {
                        "type": "string"
                    },
                    "enableAnonymousSignature": {
                        "type": "boolean"
                    },
                    "enableCoordinates": {
                        "type": "boolean"
                    },
                    "enableDebug": {
                        "type": "boolean"
                    },
                    "enableRemoteExec": {
                        "type": "boolean"
                    },
                    "enableSyslog": {
                        "type": "boolean"
                    },
                    "enableUi": {
                        "type": "boolean"
                    },
                    "enableUpdateCheck": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "leaveOnInt": {
                        "type": "boolean"
                    },
                    "leaveOnTerm": {
                        "type": "boolean"
                    },
                    "logLevel": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "performance": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "pidFile": {
                        "type": "string"
                    },
                    "ports": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        }
                    },
                    "protocolVersion": {
                        "type": "integer"
                    },
                    "reconnectTimeoutLan": {
                        "type": "string"
                    },
                    "reconnectTimeoutWan": {
                        "type": "string"
                    },
                    "rejoinAfterLeave": {
                        "type": "boolean"
                    },
                    "retryJoinEc2": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "retryJoinGce": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "retryJoinWans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "retryJoins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "retryMaxAttempts": {
                        "type": "integer"
                    },
                    "retryMaxAttemptsWan": {
                        "type": "integer"
                    },
                    "serfLanBindAddr": {
                        "type": "string"
                    },
                    "serfWanBindAddr": {
                        "type": "string"
                    },
                    "serverMode": {
                        "type": "boolean"
                    },
                    "serverName": {
                        "type": "string"
                    },
                    "sessionTtlMin": {
                        "type": "string"
                    },
                    "startJoinWans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "startJoins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "syslogFacility": {
                        "type": "string"
                    },
                    "taggedAddresses": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "telemetry": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tlsCaFile": {
                        "type": "string"
                    },
                    "tlsCertFile": {
                        "type": "string"
                    },
                    "tlsKeyFile": {
                        "type": "string"
                    },
                    "tlsMinVersion": {
                        "type": "string"
                    },
                    "tlsVerifyIncoming": {
                        "type": "boolean"
                    },
                    "tlsVerifyOutgoing": {
                        "type": "boolean"
                    },
                    "tlsVerifyServerHostname": {
                        "type": "boolean"
                    },
                    "translateWanAddrs": {
                        "type": "boolean"
                    },
                    "uiDir": {
                        "type": "string"
                    },
                    "unixSockets": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the Consul agent.\n* `version_prerelease`\n* `version_revision`\n"
                    },
                    "versionPrerelease": {
                        "type": "string"
                    },
                    "versionRevision": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "aclDatacenter",
                    "aclDefaultPolicy",
                    "aclDisabledTtl",
                    "aclDownPolicy",
                    "aclEnforce08Semantics",
                    "aclTtl",
                    "addresses",
                    "advertiseAddr",
                    "advertiseAddrWan",
                    "advertiseAddrs",
                    "atlasJoin",
                    "bindAddr",
                    "bootstrapExpect",
                    "bootstrapMode",
                    "checkDeregisterIntervalMin",
                    "checkReapInterval",
                    "checkUpdateInterval",
                    "clientAddr",
                    "dataDir",
                    "datacenter",
                    "devMode",
                    "dns",
                    "dnsRecursors",
                    "domain",
                    "enableAnonymousSignature",
                    "enableCoordinates",
                    "enableDebug",
                    "enableRemoteExec",
                    "enableSyslog",
                    "enableUi",
                    "enableUpdateCheck",
                    "id",
                    "leaveOnInt",
                    "leaveOnTerm",
                    "logLevel",
                    "name",
                    "performance",
                    "pidFile",
                    "ports",
                    "protocolVersion",
                    "reconnectTimeoutLan",
                    "reconnectTimeoutWan",
                    "rejoinAfterLeave",
                    "retryJoins",
                    "retryJoinEc2",
                    "retryJoinGce",
                    "retryJoinWans",
                    "retryMaxAttempts",
                    "retryMaxAttemptsWan",
                    "serfLanBindAddr",
                    "serfWanBindAddr",
                    "serverMode",
                    "serverName",
                    "sessionTtlMin",
                    "startJoins",
                    "startJoinWans",
                    "syslogFacility",
                    "taggedAddresses",
                    "telemetry",
                    "tlsCaFile",
                    "tlsCertFile",
                    "tlsKeyFile",
                    "tlsMinVersion",
                    "tlsVerifyIncoming",
                    "tlsVerifyOutgoing",
                    "tlsVerifyServerHostname",
                    "translateWanAddrs",
                    "uiDir",
                    "unixSockets",
                    "version",
                    "versionPrerelease",
                    "versionRevision"
                ]
            }
        },
        "consul:index/getAutopilotHealth:getAutopilotHealth": {
            "description": "The `consul.getAutopilotHealth` data source returns\n[autopilot health information](https://www.consul.io/api/operator/autopilot.html#read-health)\nabout the current Consul cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst read = pulumi.output(consul.getAutopilotHealth({ async: true }));\n\nexport const health = read.healthy;\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nread = consul.get_autopilot_health()\npulumi.export(\"health\", read.healthy)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var read = Output.Create(Consul.GetAutopilotHealth.InvokeAsync());\n        this.Health = read.Apply(read =\u003e read.Healthy);\n    }\n\n    [Output(\"health\")]\n    public Output\u003cstring\u003e Health { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tread, err := consul.GetAutopilotHealth(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"health\", read.Healthy)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAutopilotHealth.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the agent's\ndefault datacenter and the datacenter in the provider setup.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAutopilotHealth.\n",
                "properties": {
                    "datacenter": {
                        "type": "string"
                    },
                    "failureTolerance": {
                        "type": "integer",
                        "description": "The number of redundant healthy servers that could fail\nwithout causing an outage\n"
                    },
                    "healthy": {
                        "type": "boolean",
                        "description": "Whether the server is healthy according to the current Autopilot\nconfiguration\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getAutopilotHealthServer:getAutopilotHealthServer"
                        },
                        "description": "A list of server health information. See below for details on the\navailable information.\n"
                    }
                },
                "type": "object",
                "required": [
                    "failureTolerance",
                    "healthy",
                    "servers",
                    "id"
                ]
            }
        },
        "consul:index/getCatalogNodes:getCatalogNodes": {
            "inputs": {
                "description": "A collection of arguments for invoking getCatalogNodes.\n",
                "properties": {
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getCatalogNodesQueryOption:getCatalogNodesQueryOption"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCatalogNodes.\n",
                "properties": {
                    "datacenter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nodeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nodeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getCatalogNodesNode:getCatalogNodesNode"
                        }
                    },
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getCatalogNodesQueryOption:getCatalogNodesQueryOption"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "datacenter",
                    "nodeIds",
                    "nodeNames",
                    "nodes",
                    "id"
                ]
            }
        },
        "consul:index/getCatalogService:getCatalogService": {
            "inputs": {
                "description": "A collection of arguments for invoking getCatalogService.\n",
                "properties": {
                    "datacenter": {
                        "type": "string"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getCatalogServiceQueryOption:getCatalogServiceQueryOption"
                        }
                    },
                    "tag": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCatalogService.\n",
                "properties": {
                    "datacenter": {
                        "type": "string"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getCatalogServiceQueryOption:getCatalogServiceQueryOption"
                        }
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getCatalogServiceService:getCatalogServiceService"
                        }
                    },
                    "tag": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "services",
                    "id"
                ]
            }
        },
        "consul:index/getCatalogServices:getCatalogServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getCatalogServices.\n",
                "properties": {
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getCatalogServicesQueryOption:getCatalogServicesQueryOption"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCatalogServices.\n",
                "properties": {
                    "datacenter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getCatalogServicesQueryOption:getCatalogServicesQueryOption"
                        }
                    },
                    "services": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "datacenter",
                    "names",
                    "services",
                    "id"
                ]
            }
        },
        "consul:index/getKeyPrefix:getKeyPrefix": {
            "inputs": {
                "description": "A collection of arguments for invoking getKeyPrefix.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to create the keys within.\n"
                    },
                    "pathPrefix": {
                        "type": "string",
                        "description": "Specifies the common prefix shared by all keys\nthat will be read by this data source instance. In most cases, this will\nend with a slash to read a \"folder\" of subkeys.\n"
                    },
                    "subkeyCollection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getKeyPrefixSubkeyCollection:getKeyPrefixSubkeyCollection"
                        },
                        "description": "Specifies a subkey in Consul to be read. Supported\nvalues documented below. Multiple blocks supported.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                    }
                },
                "type": "object",
                "required": [
                    "pathPrefix"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKeyPrefix.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter the keys are being read from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "pathPrefix": {
                        "type": "string",
                        "description": "the common prefix shared by all keys being read.\n* `var.\u003cname\u003e` - For each name given, the corresponding attribute\nhas the value of the key.\n"
                    },
                    "subkeyCollection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getKeyPrefixSubkeyCollection:getKeyPrefixSubkeyCollection"
                        }
                    },
                    "subkeys": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of the subkeys and values is set if no `subkey`\nblock is provided.\n"
                    },
                    "token": {
                        "type": "string"
                    },
                    "var": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "datacenter",
                    "pathPrefix",
                    "subkeys",
                    "var",
                    "id"
                ]
            }
        },
        "consul:index/getKeys:getKeys": {
            "description": "The `consul.Keys` resource reads values from the Consul key/value store.\nThis is a powerful way dynamically set values in templates.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as consul from \"@pulumi/consul\";\n\nconst appKeys = pulumi.output(consul.getKeys({\n    datacenter: \"nyc1\",\n    // Read the launch AMI from Consul\n    keys: [{\n        default: \"ami-1234\",\n        name: \"ami\",\n        path: \"service/app/launch_ami\",\n    }],\n    token: \"abcd\",\n}, { async: true }));\n// Start our instance with the dynamic ami value\nconst appInstance = new aws.ec2.Instance(\"app\", {\n    ami: appKeys.var.ami,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_consul as consul\n\napp_keys = consul.get_keys(datacenter=\"nyc1\",\n    keys=[{\n        \"default\": \"ami-1234\",\n        \"name\": \"ami\",\n        \"path\": \"service/app/launch_ami\",\n    }],\n    token=\"abcd\")\n# Start our instance with the dynamic ami value\napp_instance = aws.ec2.Instance(\"appInstance\", ami=app_keys.var[\"ami\"])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var appKeys = Output.Create(Consul.GetKeys.InvokeAsync(new Consul.GetKeysArgs\n        {\n            Datacenter = \"nyc1\",\n            Keys = \n            {\n                new Consul.Inputs.GetKeysKeyArgs\n                {\n                    Default = \"ami-1234\",\n                    Name = \"ami\",\n                    Path = \"service/app/launch_ami\",\n                },\n            },\n            Token = \"abcd\",\n        }));\n        // Start our instance with the dynamic ami value\n        var appInstance = new Aws.Ec2.Instance(\"appInstance\", new Aws.Ec2.InstanceArgs\n        {\n            Ami = appKeys.Apply(appKeys =\u003e appKeys.Var.Ami),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v2/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"nyc1\"\n\t\topt1 := \"abcd\"\n\t\tappKeys, err := consul.LookupKeys(ctx, \u0026consul.LookupKeysArgs{\n\t\t\tDatacenter: \u0026opt0,\n\t\t\tKeys: []consul.GetKeysKey{\n\t\t\t\tconsul.GetKeysKey{\n\t\t\t\t\tDefault: \"ami-1234\",\n\t\t\t\t\tName:    \"ami\",\n\t\t\t\t\tPath:    \"service/app/launch_ami\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tToken: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ec2.NewInstance(ctx, \"appInstance\", \u0026ec2.InstanceArgs{\n\t\t\tAmi: pulumi.String(appKeys.Var.Ami),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKeys.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getKeysKey:getKeysKey"
                        },
                        "description": "Specifies a key in Consul to be read. Supported\nvalues documented below. Multiple blocks supported.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to lookup the keys.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKeys.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter the keys are being read from.\n* `var.\u003cname\u003e` - For each name given, the corresponding attribute\nhas the value of the key.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getKeysKey:getKeysKey"
                        }
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    },
                    "var": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "datacenter",
                    "var",
                    "id"
                ]
            }
        },
        "consul:index/getNetworkAreaMembers:getNetworkAreaMembers": {
            "description": "\u003e **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).\n\nThe `consul.getNetworkAreaMembers` data source provides a list of the Consul\nservers present in a specific network area.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkAreaMembers.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the area to list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkAreaMembers.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The node's Consul datacenter.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getNetworkAreaMembersMember:getNetworkAreaMembersMember"
                        },
                        "description": "The list of Consul servers in this network area\n"
                    },
                    "token": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the Network Area being queried.\n"
                    }
                },
                "type": "object",
                "required": [
                    "datacenter",
                    "members",
                    "uuid",
                    "id"
                ]
            }
        },
        "consul:index/getNetworkSegments:getNetworkSegments": {
            "description": "\u003e **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).\n\nThe `consul_network_segment` data source can be used to retrieve the network\nsegments defined in the configuration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\n\nconst segmentsNetworkSegments = consul.getNetworkSegments({});\nexport const segments = segmentsNetworkSegments.then(segmentsNetworkSegments =\u003e segmentsNetworkSegments.segments);\n```\n```python\nimport pulumi\nimport pulumi_consul as consul\n\nsegments_network_segments = consul.get_network_segments()\npulumi.export(\"segments\", segments_network_segments.segments)\n```\n```csharp\nusing Pulumi;\nusing Consul = Pulumi.Consul;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var segmentsNetworkSegments = Output.Create(Consul.GetNetworkSegments.InvokeAsync());\n        this.Segments = segmentsNetworkSegments.Apply(segmentsNetworkSegments =\u003e segmentsNetworkSegments.Segments);\n    }\n\n    [Output(\"segments\")]\n    public Output\u003cstring\u003e Segments { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-consul/sdk/v2/go/consul\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsegmentsNetworkSegments, err := consul.GetNetworkSegments(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"segments\", segmentsNetworkSegments.Segments)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkSegments.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkSegments.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter the segments are being read from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "segments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of network segments.\n"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "datacenter",
                    "segments",
                    "id"
                ]
            }
        },
        "consul:index/getNodes:getNodes": {
            "description": "The `consul.getNodes` data source returns a list of Consul nodes that have\nbeen registered with the Consul cluster in a given datacenter.  By specifying a\ndifferent datacenter in the `query_options` it is possible to retrieve a list of\nnodes from a different WAN-attached Consul datacenter.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodes.\n",
                "properties": {
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getNodesQueryOption:getNodesQueryOption"
                        },
                        "description": "See below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNodes.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter the keys are being read from to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nodeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the Consul node IDs.\n"
                    },
                    "nodeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the Consul node names.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getNodesNode:getNodesNode"
                        },
                        "description": "A list of nodes and details about each Consul agent.  The list of\nper-node attributes is detailed below.\n"
                    },
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getNodesQueryOption:getNodesQueryOption"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "datacenter",
                    "nodeIds",
                    "nodeNames",
                    "nodes",
                    "id"
                ]
            }
        },
        "consul:index/getService:getService": {
            "description": "`consul.Service` provides details about a specific Consul service in a\ngiven datacenter.  The results include a list of nodes advertising the specified\nservice, the node's IP address, port number, node ID, etc.  By specifying a\ndifferent datacenter in the `query_options` it is possible to retrieve a list of\nservices from a different WAN-attached Consul datacenter.\n\nThis data source is different from the `consul.getServices` (plural) data\nsource, which provides a summary of the current Consul services.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The Consul datacenter to query.  Defaults to the\nsame value found in `query_options` parameter specified below, or if that is\nempty, the `datacenter` value found in the Consul agent that this provider is\nconfigured to talk to.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "A filter expression to refine the query, see https://www.consul.io/api-docs/features/filtering\nand https://www.consul.io/api-docs/catalog#filtering-1.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The service name to select.\n"
                    },
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getServiceQueryOption:getServiceQueryOption"
                        },
                        "description": "See below.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A single tag that can be used to filter the list of nodes\nto return based on a single matching tag..\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter the keys are being read from to.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service\n"
                    },
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getServiceQueryOption:getServiceQueryOption"
                        }
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getServiceService:getServiceService"
                        },
                        "description": "A list of nodes and details about each endpoint advertising a\nservice.  Each element in the list is a map of attributes that correspond to\neach individual node.  The list of per-node attributes is detailed below.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The name of the tag used to filter the list of nodes in `service`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "services",
                    "id"
                ]
            }
        },
        "consul:index/getServiceHealth:getServiceHealth": {
            "description": "`consul.getServiceHealth` can be used to get the list of the instances that\nare currently healthy, according to their associated  health-checks.\nThe result includes the list of service instances, the node associated to each\ninstance and its health-checks.\n\nThis resource is likely to change as frequently as the health-checks are being\nupdated, you should expect different results in a frequent basis.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as consul from \"@pulumi/consul\";\nimport * as vault from \"@pulumi/vault\";\n\nconst vaultServiceHealth = pulumi.output(consul.getServiceHealth({\n    passing: true,\n    service: \"vault\",\n}, { async: true }));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceHealth.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The Consul datacenter to query.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "A filter expression to refine the list of results, see\nhttps://www.consul.io/api-docs/features/filtering and https://www.consul.io/api-docs/health#filtering-2.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The service name to select.\n"
                    },
                    "near": {
                        "type": "string",
                        "description": "Specifies a node name to sort the node list in ascending order\nbased on the estimated round trip time from that node.\n"
                    },
                    "nodeMeta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Filter the results to nodes with the specified key/value\npairs.\n"
                    },
                    "passing": {
                        "type": "boolean",
                        "description": "Whether to return only nodes with all checks in the\npassing state. Defaults to `true`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A single tag that can be used to filter the list to return\nbased on a single matching tag.\n"
                    },
                    "waitFor": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceHealth.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter in which the node is running.\n* [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -\nList of explicit LAN and WAN IP addresses for the agent.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this health-check.\n"
                    },
                    "near": {
                        "type": "string",
                        "description": "The node to which the result must be sorted to.\n"
                    },
                    "nodeMeta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The list of metadata to filter the nodes.\n"
                    },
                    "passing": {
                        "type": "boolean",
                        "description": "Whether to return only nodes with all checks in the\npassing state.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getServiceHealthResult:getServiceHealthResult"
                        },
                        "description": "A list of entries and details about each endpoint advertising a\nservice.  Each element in the list has three attributes: `node`, `service` and\n`checks`.  The list of the attributes of each one is detailed below.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The name of the tag used to filter the list.\n"
                    },
                    "waitFor": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "results",
                    "id"
                ]
            }
        },
        "consul:index/getServices:getServices": {
            "description": "The `consul.getServices` data source returns a list of Consul services that\nhave been registered with the Consul cluster in a given datacenter.  By\nspecifying a different datacenter in the `query_options` it is possible to\nretrieve a list of services from a different WAN-attached Consul datacenter.\n\nThis data source is different from the `consul.Service` (singular) data\nsource, which provides a detailed response about a specific Consul service.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServices.\n",
                "properties": {
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getServicesQueryOption:getServicesQueryOption"
                        },
                        "description": "See below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServices.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter the keys are being read from to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "queryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/consul:/getServicesQueryOption:getServicesQueryOption"
                        }
                    },
                    "services": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "datacenter",
                    "names",
                    "services",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "consul": "Consul"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing consul resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-consul)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-consul` repo](https://github.com/pulumi/pulumi-consul/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-consul` repo](https://github.com/terraform-providers/terraform-provider-consul/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-consul)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-consul` repo](https://github.com/pulumi/pulumi-consul/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-consul` repo](https://github.com/terraform-providers/terraform-provider-consul/issues).",
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}