// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [Intentions](https://www.consul.io/docs/connect/intentions.html) are used to define
// rules for which services may connect to one another when using [Consul Connect](https://www.consul.io/docs/connect/index.html).
//
// > **NOTE:** This resource is appropriate for managing legacy intentions in
// Consul version 1.8 and earlier. As of Consul 1.9, intentions should be managed
// using the [`service-intentions`](https://www.consul.io/docs/connect/intentions)
// configuration entry. It is recommended to migrate from the `Intention`
// resource to `ConfigEntry` when running Consul 1.9 and later.
//
// It is appropriate to either reference existing services, or specify non-existent services
// that will be created in the future when creating intentions. This resource can be used
// in conjunction with the `Service` datasource when referencing services
// registered on nodes that have a running Consul agent.
//
// ## Example Usage
//
// Create a simplest intention with static service names:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewIntention(ctx, "database", &consul.IntentionArgs{
//				Action:          pulumi.String("allow"),
//				DestinationName: pulumi.String("db"),
//				SourceName:      pulumi.String("api"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Referencing a known service via a datasource:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewIntention(ctx, "database", &consul.IntentionArgs{
//				Action:          pulumi.String("allow"),
//				DestinationName: pulumi.Any(consul_service.Pg.Name),
//				SourceName:      pulumi.String("api"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.LookupService(ctx, &GetServiceArgs{
//				Name: "postgresql",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `consul_intention` can be imported
//
// ```sh
//
//	$ pulumi import consul:index/intention:Intention database 657a57d6-0d56-57e2-31cb-e9f1ed3c18dd
//
// ```
type Intention struct {
	pulumi.CustomResourceState

	// The intention action. Must be one of `allow` or `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName pulumi.StringOutput `pulumi:"destinationName"`
	// The destination
	// namespace of the intention.
	DestinationNamespace pulumi.StringPtrOutput `pulumi:"destinationNamespace"`
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName pulumi.StringOutput `pulumi:"sourceName"`
	// The source namespace of the
	// intention.
	SourceNamespace pulumi.StringPtrOutput `pulumi:"sourceNamespace"`
}

// NewIntention registers a new resource with the given unique name, arguments, and options.
func NewIntention(ctx *pulumi.Context,
	name string, args *IntentionArgs, opts ...pulumi.ResourceOption) (*Intention, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.DestinationName == nil {
		return nil, errors.New("invalid value for required argument 'DestinationName'")
	}
	if args.SourceName == nil {
		return nil, errors.New("invalid value for required argument 'SourceName'")
	}
	var resource Intention
	err := ctx.RegisterResource("consul:index/intention:Intention", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntention gets an existing Intention resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntention(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntentionState, opts ...pulumi.ResourceOption) (*Intention, error) {
	var resource Intention
	err := ctx.ReadResource("consul:index/intention:Intention", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Intention resources.
type intentionState struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action *string `pulumi:"action"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description *string `pulumi:"description"`
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName *string `pulumi:"destinationName"`
	// The destination
	// namespace of the intention.
	DestinationNamespace *string `pulumi:"destinationNamespace"`
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta map[string]string `pulumi:"meta"`
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName *string `pulumi:"sourceName"`
	// The source namespace of the
	// intention.
	SourceNamespace *string `pulumi:"sourceNamespace"`
}

type IntentionState struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action pulumi.StringPtrInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description pulumi.StringPtrInput
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName pulumi.StringPtrInput
	// The destination
	// namespace of the intention.
	DestinationNamespace pulumi.StringPtrInput
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta pulumi.StringMapInput
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName pulumi.StringPtrInput
	// The source namespace of the
	// intention.
	SourceNamespace pulumi.StringPtrInput
}

func (IntentionState) ElementType() reflect.Type {
	return reflect.TypeOf((*intentionState)(nil)).Elem()
}

type intentionArgs struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action string `pulumi:"action"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description *string `pulumi:"description"`
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName string `pulumi:"destinationName"`
	// The destination
	// namespace of the intention.
	DestinationNamespace *string `pulumi:"destinationNamespace"`
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta map[string]string `pulumi:"meta"`
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName string `pulumi:"sourceName"`
	// The source namespace of the
	// intention.
	SourceNamespace *string `pulumi:"sourceNamespace"`
}

// The set of arguments for constructing a Intention resource.
type IntentionArgs struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action pulumi.StringInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description pulumi.StringPtrInput
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName pulumi.StringInput
	// The destination
	// namespace of the intention.
	DestinationNamespace pulumi.StringPtrInput
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta pulumi.StringMapInput
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName pulumi.StringInput
	// The source namespace of the
	// intention.
	SourceNamespace pulumi.StringPtrInput
}

func (IntentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*intentionArgs)(nil)).Elem()
}

type IntentionInput interface {
	pulumi.Input

	ToIntentionOutput() IntentionOutput
	ToIntentionOutputWithContext(ctx context.Context) IntentionOutput
}

func (*Intention) ElementType() reflect.Type {
	return reflect.TypeOf((**Intention)(nil)).Elem()
}

func (i *Intention) ToIntentionOutput() IntentionOutput {
	return i.ToIntentionOutputWithContext(context.Background())
}

func (i *Intention) ToIntentionOutputWithContext(ctx context.Context) IntentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntentionOutput)
}

// IntentionArrayInput is an input type that accepts IntentionArray and IntentionArrayOutput values.
// You can construct a concrete instance of `IntentionArrayInput` via:
//
//	IntentionArray{ IntentionArgs{...} }
type IntentionArrayInput interface {
	pulumi.Input

	ToIntentionArrayOutput() IntentionArrayOutput
	ToIntentionArrayOutputWithContext(context.Context) IntentionArrayOutput
}

type IntentionArray []IntentionInput

func (IntentionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Intention)(nil)).Elem()
}

func (i IntentionArray) ToIntentionArrayOutput() IntentionArrayOutput {
	return i.ToIntentionArrayOutputWithContext(context.Background())
}

func (i IntentionArray) ToIntentionArrayOutputWithContext(ctx context.Context) IntentionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntentionArrayOutput)
}

// IntentionMapInput is an input type that accepts IntentionMap and IntentionMapOutput values.
// You can construct a concrete instance of `IntentionMapInput` via:
//
//	IntentionMap{ "key": IntentionArgs{...} }
type IntentionMapInput interface {
	pulumi.Input

	ToIntentionMapOutput() IntentionMapOutput
	ToIntentionMapOutputWithContext(context.Context) IntentionMapOutput
}

type IntentionMap map[string]IntentionInput

func (IntentionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Intention)(nil)).Elem()
}

func (i IntentionMap) ToIntentionMapOutput() IntentionMapOutput {
	return i.ToIntentionMapOutputWithContext(context.Background())
}

func (i IntentionMap) ToIntentionMapOutputWithContext(ctx context.Context) IntentionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntentionMapOutput)
}

type IntentionOutput struct{ *pulumi.OutputState }

func (IntentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Intention)(nil)).Elem()
}

func (o IntentionOutput) ToIntentionOutput() IntentionOutput {
	return o
}

func (o IntentionOutput) ToIntentionOutputWithContext(ctx context.Context) IntentionOutput {
	return o
}

type IntentionArrayOutput struct{ *pulumi.OutputState }

func (IntentionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Intention)(nil)).Elem()
}

func (o IntentionArrayOutput) ToIntentionArrayOutput() IntentionArrayOutput {
	return o
}

func (o IntentionArrayOutput) ToIntentionArrayOutputWithContext(ctx context.Context) IntentionArrayOutput {
	return o
}

func (o IntentionArrayOutput) Index(i pulumi.IntInput) IntentionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Intention {
		return vs[0].([]*Intention)[vs[1].(int)]
	}).(IntentionOutput)
}

type IntentionMapOutput struct{ *pulumi.OutputState }

func (IntentionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Intention)(nil)).Elem()
}

func (o IntentionMapOutput) ToIntentionMapOutput() IntentionMapOutput {
	return o
}

func (o IntentionMapOutput) ToIntentionMapOutputWithContext(ctx context.Context) IntentionMapOutput {
	return o
}

func (o IntentionMapOutput) MapIndex(k pulumi.StringInput) IntentionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Intention {
		return vs[0].(map[string]*Intention)[vs[1].(string)]
	}).(IntentionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntentionInput)(nil)).Elem(), &Intention{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntentionArrayInput)(nil)).Elem(), IntentionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntentionMapInput)(nil)).Elem(), IntentionMap{})
	pulumi.RegisterOutputType(IntentionOutput{})
	pulumi.RegisterOutputType(IntentionArrayOutput{})
	pulumi.RegisterOutputType(IntentionMapOutput{})
}
