// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// [Intentions](https://www.consul.io/docs/connect/intentions.html) are used to define
// rules for which services may connect to one another when using [Consul Connect](https://www.consul.io/docs/connect/index.html).
//
// It is appropriate to either reference existing services or specify non-existent services
// that will be created in the future when creating intentions. This resource can be used
// in conjunction with the `Service` datasource when referencing services
// registered on nodes that have a running Consul agent.
//
// ## Example Usage
//
// Create a simplest intention with static service names:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewIntention(ctx, "database", &consul.IntentionArgs{
// 			Action:          pulumi.String("allow"),
// 			DestinationName: pulumi.String("db"),
// 			SourceName:      pulumi.String("api"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Referencing a known service via a datasource:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewIntention(ctx, "database", &consul.IntentionArgs{
// 			Action:          pulumi.String("allow"),
// 			DestinationName: pulumi.String(consul_service.Pg.Name),
// 			SourceName:      pulumi.String("api"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = consul.LookupService(ctx, &consul.LookupServiceArgs{
// 			Name: "postgresql",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Intention struct {
	pulumi.CustomResourceState

	// The intention action. Must be one of `allow` or `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName pulumi.StringOutput `pulumi:"destinationName"`
	// The destination
	// namespace of the intention.
	DestinationNamespace pulumi.StringPtrOutput `pulumi:"destinationNamespace"`
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName pulumi.StringOutput `pulumi:"sourceName"`
	// The source namespace of the
	// intention.
	SourceNamespace pulumi.StringPtrOutput `pulumi:"sourceNamespace"`
}

// NewIntention registers a new resource with the given unique name, arguments, and options.
func NewIntention(ctx *pulumi.Context,
	name string, args *IntentionArgs, opts ...pulumi.ResourceOption) (*Intention, error) {
	if args == nil || args.Action == nil {
		return nil, errors.New("missing required argument 'Action'")
	}
	if args == nil || args.DestinationName == nil {
		return nil, errors.New("missing required argument 'DestinationName'")
	}
	if args == nil || args.SourceName == nil {
		return nil, errors.New("missing required argument 'SourceName'")
	}
	if args == nil {
		args = &IntentionArgs{}
	}
	var resource Intention
	err := ctx.RegisterResource("consul:index/intention:Intention", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntention gets an existing Intention resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntention(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntentionState, opts ...pulumi.ResourceOption) (*Intention, error) {
	var resource Intention
	err := ctx.ReadResource("consul:index/intention:Intention", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Intention resources.
type intentionState struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action *string `pulumi:"action"`
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description *string `pulumi:"description"`
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName *string `pulumi:"destinationName"`
	// The destination
	// namespace of the intention.
	DestinationNamespace *string `pulumi:"destinationNamespace"`
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta map[string]string `pulumi:"meta"`
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName *string `pulumi:"sourceName"`
	// The source namespace of the
	// intention.
	SourceNamespace *string `pulumi:"sourceNamespace"`
}

type IntentionState struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action pulumi.StringPtrInput
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description pulumi.StringPtrInput
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName pulumi.StringPtrInput
	// The destination
	// namespace of the intention.
	DestinationNamespace pulumi.StringPtrInput
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta pulumi.StringMapInput
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName pulumi.StringPtrInput
	// The source namespace of the
	// intention.
	SourceNamespace pulumi.StringPtrInput
}

func (IntentionState) ElementType() reflect.Type {
	return reflect.TypeOf((*intentionState)(nil)).Elem()
}

type intentionArgs struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action string `pulumi:"action"`
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description *string `pulumi:"description"`
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName string `pulumi:"destinationName"`
	// The destination
	// namespace of the intention.
	DestinationNamespace *string `pulumi:"destinationNamespace"`
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta map[string]string `pulumi:"meta"`
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName string `pulumi:"sourceName"`
	// The source namespace of the
	// intention.
	SourceNamespace *string `pulumi:"sourceNamespace"`
}

// The set of arguments for constructing a Intention resource.
type IntentionArgs struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action pulumi.StringInput
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description pulumi.StringPtrInput
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName pulumi.StringInput
	// The destination
	// namespace of the intention.
	DestinationNamespace pulumi.StringPtrInput
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta pulumi.StringMapInput
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName pulumi.StringInput
	// The source namespace of the
	// intention.
	SourceNamespace pulumi.StringPtrInput
}

func (IntentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*intentionArgs)(nil)).Elem()
}
