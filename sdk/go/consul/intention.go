// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// [Intentions](https://www.consul.io/docs/connect/intentions.html) are used to define
// rules for which services may connect to one another when using [Consul Connect](https://www.consul.io/docs/connect/index.html).
// 
// It is appropriate to either reference existing services or specify non-existent services
// that will be created in the future when creating intentions. This resource can be used
// in conjunction with the `.Service` datasource when referencing services
// registered on nodes that have a running Consul agent.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/intention.html.markdown.
type Intention struct {
	s *pulumi.ResourceState
}

// NewIntention registers a new resource with the given unique name, arguments, and options.
func NewIntention(ctx *pulumi.Context,
	name string, args *IntentionArgs, opts ...pulumi.ResourceOpt) (*Intention, error) {
	if args == nil || args.Action == nil {
		return nil, errors.New("missing required argument 'Action'")
	}
	if args == nil || args.DestinationName == nil {
		return nil, errors.New("missing required argument 'DestinationName'")
	}
	if args == nil || args.SourceName == nil {
		return nil, errors.New("missing required argument 'SourceName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["action"] = nil
		inputs["description"] = nil
		inputs["destinationName"] = nil
		inputs["meta"] = nil
		inputs["sourceName"] = nil
	} else {
		inputs["action"] = args.Action
		inputs["description"] = args.Description
		inputs["destinationName"] = args.DestinationName
		inputs["meta"] = args.Meta
		inputs["sourceName"] = args.SourceName
	}
	s, err := ctx.RegisterResource("consul:index/intention:Intention", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Intention{s: s}, nil
}

// GetIntention gets an existing Intention resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntention(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IntentionState, opts ...pulumi.ResourceOpt) (*Intention, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["action"] = state.Action
		inputs["description"] = state.Description
		inputs["destinationName"] = state.DestinationName
		inputs["meta"] = state.Meta
		inputs["sourceName"] = state.SourceName
	}
	s, err := ctx.ReadResource("consul:index/intention:Intention", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Intention{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Intention) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Intention) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The intention action. Must be one of `allow` or `deny`.
func (r *Intention) Action() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["action"])
}

// Optional description that can be used by Consul
// tooling, but is not used internally.
func (r *Intention) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The name of the destination service for the intention. This
// service does not have to exist.
func (r *Intention) DestinationName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["destinationName"])
}

// Key/value pairs that are opaque to Consul and are associated
// with the intention.
func (r *Intention) Meta() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["meta"])
}

// The name of the source service for the intention. This
// service does not have to exist.
func (r *Intention) SourceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceName"])
}

// Input properties used for looking up and filtering Intention resources.
type IntentionState struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action interface{}
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description interface{}
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName interface{}
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta interface{}
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName interface{}
}

// The set of arguments for constructing a Intention resource.
type IntentionArgs struct {
	// The intention action. Must be one of `allow` or `deny`.
	Action interface{}
	// Optional description that can be used by Consul
	// tooling, but is not used internally.
	Description interface{}
	// The name of the destination service for the intention. This
	// service does not have to exist.
	DestinationName interface{}
	// Key/value pairs that are opaque to Consul and are associated
	// with the intention.
	Meta interface{}
	// The name of the source service for the intention. This
	// service does not have to exist.
	SourceName interface{}
}
