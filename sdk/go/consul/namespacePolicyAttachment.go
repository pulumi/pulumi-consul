// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// `consul_namespace_policy_attachment` can be imported. This is especially useful to manage the policies attached to the `default` namespace:
//
// ```sh
//
//	$ pulumi import consul:index/namespacePolicyAttachment:NamespacePolicyAttachment default default:policy_name
//
// ```
type NamespacePolicyAttachment struct {
	pulumi.CustomResourceState

	// The namespace to attach the policy to.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The name of the policy attached to the namespace.
	Policy pulumi.StringOutput `pulumi:"policy"`
}

// NewNamespacePolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewNamespacePolicyAttachment(ctx *pulumi.Context,
	name string, args *NamespacePolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*NamespacePolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NamespacePolicyAttachment
	err := ctx.RegisterResource("consul:index/namespacePolicyAttachment:NamespacePolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespacePolicyAttachment gets an existing NamespacePolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespacePolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespacePolicyAttachmentState, opts ...pulumi.ResourceOption) (*NamespacePolicyAttachment, error) {
	var resource NamespacePolicyAttachment
	err := ctx.ReadResource("consul:index/namespacePolicyAttachment:NamespacePolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespacePolicyAttachment resources.
type namespacePolicyAttachmentState struct {
	// The namespace to attach the policy to.
	Namespace *string `pulumi:"namespace"`
	// The name of the policy attached to the namespace.
	Policy *string `pulumi:"policy"`
}

type NamespacePolicyAttachmentState struct {
	// The namespace to attach the policy to.
	Namespace pulumi.StringPtrInput
	// The name of the policy attached to the namespace.
	Policy pulumi.StringPtrInput
}

func (NamespacePolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespacePolicyAttachmentState)(nil)).Elem()
}

type namespacePolicyAttachmentArgs struct {
	// The namespace to attach the policy to.
	Namespace string `pulumi:"namespace"`
	// The name of the policy attached to the namespace.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a NamespacePolicyAttachment resource.
type NamespacePolicyAttachmentArgs struct {
	// The namespace to attach the policy to.
	Namespace pulumi.StringInput
	// The name of the policy attached to the namespace.
	Policy pulumi.StringInput
}

func (NamespacePolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespacePolicyAttachmentArgs)(nil)).Elem()
}

type NamespacePolicyAttachmentInput interface {
	pulumi.Input

	ToNamespacePolicyAttachmentOutput() NamespacePolicyAttachmentOutput
	ToNamespacePolicyAttachmentOutputWithContext(ctx context.Context) NamespacePolicyAttachmentOutput
}

func (*NamespacePolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespacePolicyAttachment)(nil)).Elem()
}

func (i *NamespacePolicyAttachment) ToNamespacePolicyAttachmentOutput() NamespacePolicyAttachmentOutput {
	return i.ToNamespacePolicyAttachmentOutputWithContext(context.Background())
}

func (i *NamespacePolicyAttachment) ToNamespacePolicyAttachmentOutputWithContext(ctx context.Context) NamespacePolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePolicyAttachmentOutput)
}

// NamespacePolicyAttachmentArrayInput is an input type that accepts NamespacePolicyAttachmentArray and NamespacePolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `NamespacePolicyAttachmentArrayInput` via:
//
//	NamespacePolicyAttachmentArray{ NamespacePolicyAttachmentArgs{...} }
type NamespacePolicyAttachmentArrayInput interface {
	pulumi.Input

	ToNamespacePolicyAttachmentArrayOutput() NamespacePolicyAttachmentArrayOutput
	ToNamespacePolicyAttachmentArrayOutputWithContext(context.Context) NamespacePolicyAttachmentArrayOutput
}

type NamespacePolicyAttachmentArray []NamespacePolicyAttachmentInput

func (NamespacePolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespacePolicyAttachment)(nil)).Elem()
}

func (i NamespacePolicyAttachmentArray) ToNamespacePolicyAttachmentArrayOutput() NamespacePolicyAttachmentArrayOutput {
	return i.ToNamespacePolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i NamespacePolicyAttachmentArray) ToNamespacePolicyAttachmentArrayOutputWithContext(ctx context.Context) NamespacePolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePolicyAttachmentArrayOutput)
}

// NamespacePolicyAttachmentMapInput is an input type that accepts NamespacePolicyAttachmentMap and NamespacePolicyAttachmentMapOutput values.
// You can construct a concrete instance of `NamespacePolicyAttachmentMapInput` via:
//
//	NamespacePolicyAttachmentMap{ "key": NamespacePolicyAttachmentArgs{...} }
type NamespacePolicyAttachmentMapInput interface {
	pulumi.Input

	ToNamespacePolicyAttachmentMapOutput() NamespacePolicyAttachmentMapOutput
	ToNamespacePolicyAttachmentMapOutputWithContext(context.Context) NamespacePolicyAttachmentMapOutput
}

type NamespacePolicyAttachmentMap map[string]NamespacePolicyAttachmentInput

func (NamespacePolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespacePolicyAttachment)(nil)).Elem()
}

func (i NamespacePolicyAttachmentMap) ToNamespacePolicyAttachmentMapOutput() NamespacePolicyAttachmentMapOutput {
	return i.ToNamespacePolicyAttachmentMapOutputWithContext(context.Background())
}

func (i NamespacePolicyAttachmentMap) ToNamespacePolicyAttachmentMapOutputWithContext(ctx context.Context) NamespacePolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePolicyAttachmentMapOutput)
}

type NamespacePolicyAttachmentOutput struct{ *pulumi.OutputState }

func (NamespacePolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespacePolicyAttachment)(nil)).Elem()
}

func (o NamespacePolicyAttachmentOutput) ToNamespacePolicyAttachmentOutput() NamespacePolicyAttachmentOutput {
	return o
}

func (o NamespacePolicyAttachmentOutput) ToNamespacePolicyAttachmentOutputWithContext(ctx context.Context) NamespacePolicyAttachmentOutput {
	return o
}

// The namespace to attach the policy to.
func (o NamespacePolicyAttachmentOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespacePolicyAttachment) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// The name of the policy attached to the namespace.
func (o NamespacePolicyAttachmentOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespacePolicyAttachment) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

type NamespacePolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (NamespacePolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespacePolicyAttachment)(nil)).Elem()
}

func (o NamespacePolicyAttachmentArrayOutput) ToNamespacePolicyAttachmentArrayOutput() NamespacePolicyAttachmentArrayOutput {
	return o
}

func (o NamespacePolicyAttachmentArrayOutput) ToNamespacePolicyAttachmentArrayOutputWithContext(ctx context.Context) NamespacePolicyAttachmentArrayOutput {
	return o
}

func (o NamespacePolicyAttachmentArrayOutput) Index(i pulumi.IntInput) NamespacePolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NamespacePolicyAttachment {
		return vs[0].([]*NamespacePolicyAttachment)[vs[1].(int)]
	}).(NamespacePolicyAttachmentOutput)
}

type NamespacePolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (NamespacePolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespacePolicyAttachment)(nil)).Elem()
}

func (o NamespacePolicyAttachmentMapOutput) ToNamespacePolicyAttachmentMapOutput() NamespacePolicyAttachmentMapOutput {
	return o
}

func (o NamespacePolicyAttachmentMapOutput) ToNamespacePolicyAttachmentMapOutputWithContext(ctx context.Context) NamespacePolicyAttachmentMapOutput {
	return o
}

func (o NamespacePolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) NamespacePolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NamespacePolicyAttachment {
		return vs[0].(map[string]*NamespacePolicyAttachment)[vs[1].(string)]
	}).(NamespacePolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespacePolicyAttachmentInput)(nil)).Elem(), &NamespacePolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespacePolicyAttachmentArrayInput)(nil)).Elem(), NamespacePolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespacePolicyAttachmentMapInput)(nil)).Elem(), NamespacePolicyAttachmentMap{})
	pulumi.RegisterOutputType(NamespacePolicyAttachmentOutput{})
	pulumi.RegisterOutputType(NamespacePolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(NamespacePolicyAttachmentMapOutput{})
}
