// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Starting with Consul 1.5.0, the AclAuthMethod resource can be used to
// managed [Consul ACL auth methods](https://www.consul.io/docs/acl/auth-methods).
//
// ## Example Usage
//
// Define a `kubernetes` auth method:
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Host":              "https://192.0.2.42:8443",
//				"CACert":            "-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----\n",
//				"ServiceAccountJWT": "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = consul.NewAclAuthMethod(ctx, "minikube", &consul.AclAuthMethodArgs{
//				Type:        pulumi.String("kubernetes"),
//				Description: pulumi.String("dev minikube cluster"),
//				ConfigJson:  pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Define a `jwt` auth method:
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"JWKSURL":          "https://example.com/identity/oidc/.well-known/keys",
//				"JWTSupportedAlgs": "RS256",
//				"BoundIssuer":      "https://example.com",
//				"ClaimMappings": map[string]interface{}{
//					"subject": "subject",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = consul.NewAclAuthMethod(ctx, "minikube", &consul.AclAuthMethodArgs{
//				Type:       pulumi.String("jwt"),
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AclAuthMethod struct {
	pulumi.CustomResourceState

	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config pulumi.StringMapOutput `pulumi:"config"`
	// The raw configuration for this ACL auth method.
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	// A free form human readable description of the auth method.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl pulumi.StringPtrOutput `pulumi:"maxTokenTtl"`
	// The name of the ACL auth method.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace in which to create the auth method.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules AclAuthMethodNamespaceRuleArrayOutput `pulumi:"namespaceRules"`
	// The partition the ACL auth method is associated with.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality pulumi.StringPtrOutput `pulumi:"tokenLocality"`
	// The type of the ACL auth method.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAclAuthMethod registers a new resource with the given unique name, arguments, and options.
func NewAclAuthMethod(ctx *pulumi.Context,
	name string, args *AclAuthMethodArgs, opts ...pulumi.ResourceOption) (*AclAuthMethod, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclAuthMethod
	err := ctx.RegisterResource("consul:index/aclAuthMethod:AclAuthMethod", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclAuthMethod gets an existing AclAuthMethod resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclAuthMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclAuthMethodState, opts ...pulumi.ResourceOption) (*AclAuthMethod, error) {
	var resource AclAuthMethod
	err := ctx.ReadResource("consul:index/aclAuthMethod:AclAuthMethod", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclAuthMethod resources.
type aclAuthMethodState struct {
	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config map[string]string `pulumi:"config"`
	// The raw configuration for this ACL auth method.
	ConfigJson *string `pulumi:"configJson"`
	// A free form human readable description of the auth method.
	Description *string `pulumi:"description"`
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName *string `pulumi:"displayName"`
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl *string `pulumi:"maxTokenTtl"`
	// The name of the ACL auth method.
	Name *string `pulumi:"name"`
	// The namespace in which to create the auth method.
	Namespace *string `pulumi:"namespace"`
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules []AclAuthMethodNamespaceRule `pulumi:"namespaceRules"`
	// The partition the ACL auth method is associated with.
	Partition *string `pulumi:"partition"`
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality *string `pulumi:"tokenLocality"`
	// The type of the ACL auth method.
	Type *string `pulumi:"type"`
}

type AclAuthMethodState struct {
	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config pulumi.StringMapInput
	// The raw configuration for this ACL auth method.
	ConfigJson pulumi.StringPtrInput
	// A free form human readable description of the auth method.
	Description pulumi.StringPtrInput
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName pulumi.StringPtrInput
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl pulumi.StringPtrInput
	// The name of the ACL auth method.
	Name pulumi.StringPtrInput
	// The namespace in which to create the auth method.
	Namespace pulumi.StringPtrInput
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules AclAuthMethodNamespaceRuleArrayInput
	// The partition the ACL auth method is associated with.
	Partition pulumi.StringPtrInput
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality pulumi.StringPtrInput
	// The type of the ACL auth method.
	Type pulumi.StringPtrInput
}

func (AclAuthMethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclAuthMethodState)(nil)).Elem()
}

type aclAuthMethodArgs struct {
	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config map[string]string `pulumi:"config"`
	// The raw configuration for this ACL auth method.
	ConfigJson *string `pulumi:"configJson"`
	// A free form human readable description of the auth method.
	Description *string `pulumi:"description"`
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName *string `pulumi:"displayName"`
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl *string `pulumi:"maxTokenTtl"`
	// The name of the ACL auth method.
	Name *string `pulumi:"name"`
	// The namespace in which to create the auth method.
	Namespace *string `pulumi:"namespace"`
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules []AclAuthMethodNamespaceRule `pulumi:"namespaceRules"`
	// The partition the ACL auth method is associated with.
	Partition *string `pulumi:"partition"`
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality *string `pulumi:"tokenLocality"`
	// The type of the ACL auth method.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a AclAuthMethod resource.
type AclAuthMethodArgs struct {
	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config pulumi.StringMapInput
	// The raw configuration for this ACL auth method.
	ConfigJson pulumi.StringPtrInput
	// A free form human readable description of the auth method.
	Description pulumi.StringPtrInput
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName pulumi.StringPtrInput
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl pulumi.StringPtrInput
	// The name of the ACL auth method.
	Name pulumi.StringPtrInput
	// The namespace in which to create the auth method.
	Namespace pulumi.StringPtrInput
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules AclAuthMethodNamespaceRuleArrayInput
	// The partition the ACL auth method is associated with.
	Partition pulumi.StringPtrInput
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality pulumi.StringPtrInput
	// The type of the ACL auth method.
	Type pulumi.StringInput
}

func (AclAuthMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclAuthMethodArgs)(nil)).Elem()
}

type AclAuthMethodInput interface {
	pulumi.Input

	ToAclAuthMethodOutput() AclAuthMethodOutput
	ToAclAuthMethodOutputWithContext(ctx context.Context) AclAuthMethodOutput
}

func (*AclAuthMethod) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethod)(nil)).Elem()
}

func (i *AclAuthMethod) ToAclAuthMethodOutput() AclAuthMethodOutput {
	return i.ToAclAuthMethodOutputWithContext(context.Background())
}

func (i *AclAuthMethod) ToAclAuthMethodOutputWithContext(ctx context.Context) AclAuthMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodOutput)
}

func (i *AclAuthMethod) ToOutput(ctx context.Context) pulumix.Output[*AclAuthMethod] {
	return pulumix.Output[*AclAuthMethod]{
		OutputState: i.ToAclAuthMethodOutputWithContext(ctx).OutputState,
	}
}

// AclAuthMethodArrayInput is an input type that accepts AclAuthMethodArray and AclAuthMethodArrayOutput values.
// You can construct a concrete instance of `AclAuthMethodArrayInput` via:
//
//	AclAuthMethodArray{ AclAuthMethodArgs{...} }
type AclAuthMethodArrayInput interface {
	pulumi.Input

	ToAclAuthMethodArrayOutput() AclAuthMethodArrayOutput
	ToAclAuthMethodArrayOutputWithContext(context.Context) AclAuthMethodArrayOutput
}

type AclAuthMethodArray []AclAuthMethodInput

func (AclAuthMethodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclAuthMethod)(nil)).Elem()
}

func (i AclAuthMethodArray) ToAclAuthMethodArrayOutput() AclAuthMethodArrayOutput {
	return i.ToAclAuthMethodArrayOutputWithContext(context.Background())
}

func (i AclAuthMethodArray) ToAclAuthMethodArrayOutputWithContext(ctx context.Context) AclAuthMethodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodArrayOutput)
}

func (i AclAuthMethodArray) ToOutput(ctx context.Context) pulumix.Output[[]*AclAuthMethod] {
	return pulumix.Output[[]*AclAuthMethod]{
		OutputState: i.ToAclAuthMethodArrayOutputWithContext(ctx).OutputState,
	}
}

// AclAuthMethodMapInput is an input type that accepts AclAuthMethodMap and AclAuthMethodMapOutput values.
// You can construct a concrete instance of `AclAuthMethodMapInput` via:
//
//	AclAuthMethodMap{ "key": AclAuthMethodArgs{...} }
type AclAuthMethodMapInput interface {
	pulumi.Input

	ToAclAuthMethodMapOutput() AclAuthMethodMapOutput
	ToAclAuthMethodMapOutputWithContext(context.Context) AclAuthMethodMapOutput
}

type AclAuthMethodMap map[string]AclAuthMethodInput

func (AclAuthMethodMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclAuthMethod)(nil)).Elem()
}

func (i AclAuthMethodMap) ToAclAuthMethodMapOutput() AclAuthMethodMapOutput {
	return i.ToAclAuthMethodMapOutputWithContext(context.Background())
}

func (i AclAuthMethodMap) ToAclAuthMethodMapOutputWithContext(ctx context.Context) AclAuthMethodMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodMapOutput)
}

func (i AclAuthMethodMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AclAuthMethod] {
	return pulumix.Output[map[string]*AclAuthMethod]{
		OutputState: i.ToAclAuthMethodMapOutputWithContext(ctx).OutputState,
	}
}

type AclAuthMethodOutput struct{ *pulumi.OutputState }

func (AclAuthMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethod)(nil)).Elem()
}

func (o AclAuthMethodOutput) ToAclAuthMethodOutput() AclAuthMethodOutput {
	return o
}

func (o AclAuthMethodOutput) ToAclAuthMethodOutputWithContext(ctx context.Context) AclAuthMethodOutput {
	return o
}

func (o AclAuthMethodOutput) ToOutput(ctx context.Context) pulumix.Output[*AclAuthMethod] {
	return pulumix.Output[*AclAuthMethod]{
		OutputState: o.OutputState,
	}
}

// The raw configuration for this ACL auth method. This
// attribute is deprecated and will be removed in a future version. `configJson`
// should be used instead.
//
// Deprecated: The config attribute is deprecated, please use config_json instead.
func (o AclAuthMethodOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

// The raw configuration for this ACL auth method.
func (o AclAuthMethodOutput) ConfigJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringPtrOutput { return v.ConfigJson }).(pulumi.StringPtrOutput)
}

// A free form human readable description of the auth method.
func (o AclAuthMethodOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An optional name to use instead of the name
// attribute when displaying information about this auth method.
func (o AclAuthMethodOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The maximum life of any token created by this
// auth method.
func (o AclAuthMethodOutput) MaxTokenTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringPtrOutput { return v.MaxTokenTtl }).(pulumi.StringPtrOutput)
}

// The name of the ACL auth method.
func (o AclAuthMethodOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace in which to create the auth method.
func (o AclAuthMethodOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// A set of rules that control
// which namespace tokens created via this auth method will be created within.
func (o AclAuthMethodOutput) NamespaceRules() AclAuthMethodNamespaceRuleArrayOutput {
	return o.ApplyT(func(v *AclAuthMethod) AclAuthMethodNamespaceRuleArrayOutput { return v.NamespaceRules }).(AclAuthMethodNamespaceRuleArrayOutput)
}

// The partition the ACL auth method is associated with.
func (o AclAuthMethodOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// The kind of token that this auth method
// produces. This can be either 'local' or 'global'.
func (o AclAuthMethodOutput) TokenLocality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringPtrOutput { return v.TokenLocality }).(pulumi.StringPtrOutput)
}

// The type of the ACL auth method.
func (o AclAuthMethodOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AclAuthMethodArrayOutput struct{ *pulumi.OutputState }

func (AclAuthMethodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclAuthMethod)(nil)).Elem()
}

func (o AclAuthMethodArrayOutput) ToAclAuthMethodArrayOutput() AclAuthMethodArrayOutput {
	return o
}

func (o AclAuthMethodArrayOutput) ToAclAuthMethodArrayOutputWithContext(ctx context.Context) AclAuthMethodArrayOutput {
	return o
}

func (o AclAuthMethodArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AclAuthMethod] {
	return pulumix.Output[[]*AclAuthMethod]{
		OutputState: o.OutputState,
	}
}

func (o AclAuthMethodArrayOutput) Index(i pulumi.IntInput) AclAuthMethodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclAuthMethod {
		return vs[0].([]*AclAuthMethod)[vs[1].(int)]
	}).(AclAuthMethodOutput)
}

type AclAuthMethodMapOutput struct{ *pulumi.OutputState }

func (AclAuthMethodMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclAuthMethod)(nil)).Elem()
}

func (o AclAuthMethodMapOutput) ToAclAuthMethodMapOutput() AclAuthMethodMapOutput {
	return o
}

func (o AclAuthMethodMapOutput) ToAclAuthMethodMapOutputWithContext(ctx context.Context) AclAuthMethodMapOutput {
	return o
}

func (o AclAuthMethodMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AclAuthMethod] {
	return pulumix.Output[map[string]*AclAuthMethod]{
		OutputState: o.OutputState,
	}
}

func (o AclAuthMethodMapOutput) MapIndex(k pulumi.StringInput) AclAuthMethodOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclAuthMethod {
		return vs[0].(map[string]*AclAuthMethod)[vs[1].(string)]
	}).(AclAuthMethodOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodInput)(nil)).Elem(), &AclAuthMethod{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodArrayInput)(nil)).Elem(), AclAuthMethodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodMapInput)(nil)).Elem(), AclAuthMethodMap{})
	pulumi.RegisterOutputType(AclAuthMethodOutput{})
	pulumi.RegisterOutputType(AclAuthMethodArrayOutput{})
	pulumi.RegisterOutputType(AclAuthMethodMapOutput{})
}
