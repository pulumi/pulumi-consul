// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Starting with Consul 1.5.0, the AclAuthMethod resource can be used to
// managed [Consul ACL auth methods](https://www.consul.io/docs/acl/auth-methods).
//
// ## Example Usage
//
// Define a `kubernetes` auth method:
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"Host":              "https://192.0.2.42:8443",
// 			"CACert":            "-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----\n",
// 			"ServiceAccountJWT": "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := consul.NewAclAuthMethod(ctx, "minikube", &consul.AclAuthMethodArgs{
// 			Type:        pulumi.String("kubernetes"),
// 			Description: pulumi.String("dev minikube cluster"),
// 			ConfigJson:  pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Define a `jwt` auth method:
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"JWKSURL":          "https://example.com/identity/oidc/.well-known/keys",
// 			"JWTSupportedAlgs": "RS256",
// 			"BoundIssuer":      "https://example.com",
// 			"ClaimMappings": map[string]interface{}{
// 				"subject": "subject",
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := consul.NewAclAuthMethod(ctx, "minikube", &consul.AclAuthMethodArgs{
// 			Type:       pulumi.String("jwt"),
// 			ConfigJson: pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AclAuthMethod struct {
	pulumi.CustomResourceState

	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config pulumi.StringMapOutput `pulumi:"config"`
	// The raw configuration for this ACL auth method.
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	// A free form human readable description of the auth method.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl pulumi.StringPtrOutput `pulumi:"maxTokenTtl"`
	// The name of the ACL auth method.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to create the policy within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules AclAuthMethodNamespaceRuleArrayOutput `pulumi:"namespaceRules"`
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality pulumi.StringPtrOutput `pulumi:"tokenLocality"`
	// The type of the ACL auth method.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAclAuthMethod registers a new resource with the given unique name, arguments, and options.
func NewAclAuthMethod(ctx *pulumi.Context,
	name string, args *AclAuthMethodArgs, opts ...pulumi.ResourceOption) (*AclAuthMethod, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &AclAuthMethodArgs{}
	}
	var resource AclAuthMethod
	err := ctx.RegisterResource("consul:index/aclAuthMethod:AclAuthMethod", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclAuthMethod gets an existing AclAuthMethod resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclAuthMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclAuthMethodState, opts ...pulumi.ResourceOption) (*AclAuthMethod, error) {
	var resource AclAuthMethod
	err := ctx.ReadResource("consul:index/aclAuthMethod:AclAuthMethod", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclAuthMethod resources.
type aclAuthMethodState struct {
	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config map[string]string `pulumi:"config"`
	// The raw configuration for this ACL auth method.
	ConfigJson *string `pulumi:"configJson"`
	// A free form human readable description of the auth method.
	Description *string `pulumi:"description"`
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName *string `pulumi:"displayName"`
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl *string `pulumi:"maxTokenTtl"`
	// The name of the ACL auth method.
	Name *string `pulumi:"name"`
	// The namespace to create the policy within.
	Namespace *string `pulumi:"namespace"`
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules []AclAuthMethodNamespaceRule `pulumi:"namespaceRules"`
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality *string `pulumi:"tokenLocality"`
	// The type of the ACL auth method.
	Type *string `pulumi:"type"`
}

type AclAuthMethodState struct {
	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config pulumi.StringMapInput
	// The raw configuration for this ACL auth method.
	ConfigJson pulumi.StringPtrInput
	// A free form human readable description of the auth method.
	Description pulumi.StringPtrInput
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName pulumi.StringPtrInput
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl pulumi.StringPtrInput
	// The name of the ACL auth method.
	Name pulumi.StringPtrInput
	// The namespace to create the policy within.
	Namespace pulumi.StringPtrInput
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules AclAuthMethodNamespaceRuleArrayInput
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality pulumi.StringPtrInput
	// The type of the ACL auth method.
	Type pulumi.StringPtrInput
}

func (AclAuthMethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclAuthMethodState)(nil)).Elem()
}

type aclAuthMethodArgs struct {
	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config map[string]string `pulumi:"config"`
	// The raw configuration for this ACL auth method.
	ConfigJson *string `pulumi:"configJson"`
	// A free form human readable description of the auth method.
	Description *string `pulumi:"description"`
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName *string `pulumi:"displayName"`
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl *string `pulumi:"maxTokenTtl"`
	// The name of the ACL auth method.
	Name *string `pulumi:"name"`
	// The namespace to create the policy within.
	Namespace *string `pulumi:"namespace"`
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules []AclAuthMethodNamespaceRule `pulumi:"namespaceRules"`
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality *string `pulumi:"tokenLocality"`
	// The type of the ACL auth method.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a AclAuthMethod resource.
type AclAuthMethodArgs struct {
	// The raw configuration for this ACL auth method. This
	// attribute is deprecated and will be removed in a future version. `configJson`
	// should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config pulumi.StringMapInput
	// The raw configuration for this ACL auth method.
	ConfigJson pulumi.StringPtrInput
	// A free form human readable description of the auth method.
	Description pulumi.StringPtrInput
	// An optional name to use instead of the name
	// attribute when displaying information about this auth method.
	DisplayName pulumi.StringPtrInput
	// The maximum life of any token created by this
	// auth method.
	MaxTokenTtl pulumi.StringPtrInput
	// The name of the ACL auth method.
	Name pulumi.StringPtrInput
	// The namespace to create the policy within.
	Namespace pulumi.StringPtrInput
	// A set of rules that control
	// which namespace tokens created via this auth method will be created within.
	NamespaceRules AclAuthMethodNamespaceRuleArrayInput
	// The kind of token that this auth method
	// produces. This can be either 'local' or 'global'.
	TokenLocality pulumi.StringPtrInput
	// The type of the ACL auth method.
	Type pulumi.StringInput
}

func (AclAuthMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclAuthMethodArgs)(nil)).Elem()
}

type AclAuthMethodInput interface {
	pulumi.Input

	ToAclAuthMethodOutput() AclAuthMethodOutput
	ToAclAuthMethodOutputWithContext(ctx context.Context) AclAuthMethodOutput
}

func (AclAuthMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAuthMethod)(nil)).Elem()
}

func (i AclAuthMethod) ToAclAuthMethodOutput() AclAuthMethodOutput {
	return i.ToAclAuthMethodOutputWithContext(context.Background())
}

func (i AclAuthMethod) ToAclAuthMethodOutputWithContext(ctx context.Context) AclAuthMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodOutput)
}

type AclAuthMethodOutput struct {
	*pulumi.OutputState
}

func (AclAuthMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAuthMethodOutput)(nil)).Elem()
}

func (o AclAuthMethodOutput) ToAclAuthMethodOutput() AclAuthMethodOutput {
	return o
}

func (o AclAuthMethodOutput) ToAclAuthMethodOutputWithContext(ctx context.Context) AclAuthMethodOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AclAuthMethodOutput{})
}
