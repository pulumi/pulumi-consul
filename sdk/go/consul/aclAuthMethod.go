// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Starting with Consul 1.5.0, the .AclAuthMethod resource can be used to
// managed Consul ACL auth methods.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/acl_auth_method.html.markdown.
type AclAuthMethod struct {
	s *pulumi.ResourceState
}

// NewAclAuthMethod registers a new resource with the given unique name, arguments, and options.
func NewAclAuthMethod(ctx *pulumi.Context,
	name string, args *AclAuthMethodArgs, opts ...pulumi.ResourceOpt) (*AclAuthMethod, error) {
	if args == nil || args.Config == nil {
		return nil, errors.New("missing required argument 'Config'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["config"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["type"] = nil
	} else {
		inputs["config"] = args.Config
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("consul:index/aclAuthMethod:AclAuthMethod", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclAuthMethod{s: s}, nil
}

// GetAclAuthMethod gets an existing AclAuthMethod resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclAuthMethod(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AclAuthMethodState, opts ...pulumi.ResourceOpt) (*AclAuthMethod, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["config"] = state.Config
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("consul:index/aclAuthMethod:AclAuthMethod", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclAuthMethod{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AclAuthMethod) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AclAuthMethod) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The raw configuration for this ACL auth method.
func (r *AclAuthMethod) Config() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["config"])
}

// A free form human readable description of the auth method.
func (r *AclAuthMethod) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The name of the ACL auth method.
func (r *AclAuthMethod) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The type of the ACL auth method.
func (r *AclAuthMethod) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering AclAuthMethod resources.
type AclAuthMethodState struct {
	// The raw configuration for this ACL auth method.
	Config interface{}
	// A free form human readable description of the auth method.
	Description interface{}
	// The name of the ACL auth method.
	Name interface{}
	// The type of the ACL auth method.
	Type interface{}
}

// The set of arguments for constructing a AclAuthMethod resource.
type AclAuthMethodArgs struct {
	// The raw configuration for this ACL auth method.
	Config interface{}
	// A free form human readable description of the auth method.
	Description interface{}
	// The name of the ACL auth method.
	Name interface{}
	// The type of the ACL auth method.
	Type interface{}
}
