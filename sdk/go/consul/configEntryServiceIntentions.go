// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The `consulServiceIntentionsConfigEntry` resource configures [service intentions](https://developer.hashicorp.com/consul/docs/connect/config-entries/service-intentions) that are configurations for controlling access between services in the service mesh. A single service intentions configuration entry specifies one destination service and one or more L4 traffic sources, L7 traffic sources, or combination of traffic sources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"ClockSkewSeconds": 30,
//				"Issuer":           "test-issuer",
//				"JSONWebKeySet": map[string]interface{}{
//					"Remote": map[string]interface{}{
//						"URI":                 "https://127.0.0.1:9091",
//						"FetchAsynchronously": true,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			jwtProvider, err := consul.NewConfigEntry(ctx, "jwtProvider", &consul.ConfigEntryArgs{
//				Kind:       pulumi.String("jwt-provider"),
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.NewConfigEntryServiceIntentions(ctx, "web", &consul.ConfigEntryServiceIntentionsArgs{
//				Jwts: consul.ConfigEntryServiceIntentionsJwtArray{
//					&consul.ConfigEntryServiceIntentionsJwtArgs{
//						Providers: consul.ConfigEntryServiceIntentionsJwtProviderArray{
//							&consul.ConfigEntryServiceIntentionsJwtProviderArgs{
//								Name: jwtProvider.Name,
//								VerifyClaims: consul.ConfigEntryServiceIntentionsJwtProviderVerifyClaimArray{
//									&consul.ConfigEntryServiceIntentionsJwtProviderVerifyClaimArgs{
//										Paths: pulumi.StringArray{
//											pulumi.String("perms"),
//											pulumi.String("role"),
//										},
//										Value: pulumi.String("admin"),
//									},
//								},
//							},
//						},
//					},
//				},
//				Sources: consul.ConfigEntryServiceIntentionsSourceArray{
//					&consul.ConfigEntryServiceIntentionsSourceArgs{
//						Name:   pulumi.String("frontend-webapp"),
//						Type:   pulumi.String("consul"),
//						Action: pulumi.String("allow"),
//					},
//					&consul.ConfigEntryServiceIntentionsSourceArgs{
//						Name:   pulumi.String("nightly-cronjob"),
//						Type:   pulumi.String("consul"),
//						Action: pulumi.String("deny"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConfigEntryServiceIntentions struct {
	pulumi.CustomResourceState

	// Specifies a JSON Web Token provider configured in a JWT provider configuration entry, as well as additional configurations for verifying a service's JWT before authorizing communication between services
	Jwts ConfigEntryServiceIntentionsJwtArrayOutput `pulumi:"jwts"`
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the traffic source namespace that the intention allows or denies traffic from.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies the name of an admin partition that the intention allows or denies traffic from.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// List of configurations that define intention sources and the authorization granted to the sources.
	Sources ConfigEntryServiceIntentionsSourceArrayOutput `pulumi:"sources"`
}

// NewConfigEntryServiceIntentions registers a new resource with the given unique name, arguments, and options.
func NewConfigEntryServiceIntentions(ctx *pulumi.Context,
	name string, args *ConfigEntryServiceIntentionsArgs, opts ...pulumi.ResourceOption) (*ConfigEntryServiceIntentions, error) {
	if args == nil {
		args = &ConfigEntryServiceIntentionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigEntryServiceIntentions
	err := ctx.RegisterResource("consul:index/configEntryServiceIntentions:ConfigEntryServiceIntentions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEntryServiceIntentions gets an existing ConfigEntryServiceIntentions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEntryServiceIntentions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEntryServiceIntentionsState, opts ...pulumi.ResourceOption) (*ConfigEntryServiceIntentions, error) {
	var resource ConfigEntryServiceIntentions
	err := ctx.ReadResource("consul:index/configEntryServiceIntentions:ConfigEntryServiceIntentions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEntryServiceIntentions resources.
type configEntryServiceIntentionsState struct {
	// Specifies a JSON Web Token provider configured in a JWT provider configuration entry, as well as additional configurations for verifying a service's JWT before authorizing communication between services
	Jwts []ConfigEntryServiceIntentionsJwt `pulumi:"jwts"`
	// Specifies key-value pairs to add to the KV store.
	Meta map[string]string `pulumi:"meta"`
	// Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
	Name *string `pulumi:"name"`
	// Specifies the traffic source namespace that the intention allows or denies traffic from.
	Namespace *string `pulumi:"namespace"`
	// Specifies the name of an admin partition that the intention allows or denies traffic from.
	Partition *string `pulumi:"partition"`
	// List of configurations that define intention sources and the authorization granted to the sources.
	Sources []ConfigEntryServiceIntentionsSource `pulumi:"sources"`
}

type ConfigEntryServiceIntentionsState struct {
	// Specifies a JSON Web Token provider configured in a JWT provider configuration entry, as well as additional configurations for verifying a service's JWT before authorizing communication between services
	Jwts ConfigEntryServiceIntentionsJwtArrayInput
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapInput
	// Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
	Name pulumi.StringPtrInput
	// Specifies the traffic source namespace that the intention allows or denies traffic from.
	Namespace pulumi.StringPtrInput
	// Specifies the name of an admin partition that the intention allows or denies traffic from.
	Partition pulumi.StringPtrInput
	// List of configurations that define intention sources and the authorization granted to the sources.
	Sources ConfigEntryServiceIntentionsSourceArrayInput
}

func (ConfigEntryServiceIntentionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryServiceIntentionsState)(nil)).Elem()
}

type configEntryServiceIntentionsArgs struct {
	// Specifies a JSON Web Token provider configured in a JWT provider configuration entry, as well as additional configurations for verifying a service's JWT before authorizing communication between services
	Jwts []ConfigEntryServiceIntentionsJwt `pulumi:"jwts"`
	// Specifies key-value pairs to add to the KV store.
	Meta map[string]string `pulumi:"meta"`
	// Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
	Name *string `pulumi:"name"`
	// Specifies the traffic source namespace that the intention allows or denies traffic from.
	Namespace *string `pulumi:"namespace"`
	// Specifies the name of an admin partition that the intention allows or denies traffic from.
	Partition *string `pulumi:"partition"`
	// List of configurations that define intention sources and the authorization granted to the sources.
	Sources []ConfigEntryServiceIntentionsSource `pulumi:"sources"`
}

// The set of arguments for constructing a ConfigEntryServiceIntentions resource.
type ConfigEntryServiceIntentionsArgs struct {
	// Specifies a JSON Web Token provider configured in a JWT provider configuration entry, as well as additional configurations for verifying a service's JWT before authorizing communication between services
	Jwts ConfigEntryServiceIntentionsJwtArrayInput
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapInput
	// Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
	Name pulumi.StringPtrInput
	// Specifies the traffic source namespace that the intention allows or denies traffic from.
	Namespace pulumi.StringPtrInput
	// Specifies the name of an admin partition that the intention allows or denies traffic from.
	Partition pulumi.StringPtrInput
	// List of configurations that define intention sources and the authorization granted to the sources.
	Sources ConfigEntryServiceIntentionsSourceArrayInput
}

func (ConfigEntryServiceIntentionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryServiceIntentionsArgs)(nil)).Elem()
}

type ConfigEntryServiceIntentionsInput interface {
	pulumi.Input

	ToConfigEntryServiceIntentionsOutput() ConfigEntryServiceIntentionsOutput
	ToConfigEntryServiceIntentionsOutputWithContext(ctx context.Context) ConfigEntryServiceIntentionsOutput
}

func (*ConfigEntryServiceIntentions) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntryServiceIntentions)(nil)).Elem()
}

func (i *ConfigEntryServiceIntentions) ToConfigEntryServiceIntentionsOutput() ConfigEntryServiceIntentionsOutput {
	return i.ToConfigEntryServiceIntentionsOutputWithContext(context.Background())
}

func (i *ConfigEntryServiceIntentions) ToConfigEntryServiceIntentionsOutputWithContext(ctx context.Context) ConfigEntryServiceIntentionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceIntentionsOutput)
}

func (i *ConfigEntryServiceIntentions) ToOutput(ctx context.Context) pulumix.Output[*ConfigEntryServiceIntentions] {
	return pulumix.Output[*ConfigEntryServiceIntentions]{
		OutputState: i.ToConfigEntryServiceIntentionsOutputWithContext(ctx).OutputState,
	}
}

// ConfigEntryServiceIntentionsArrayInput is an input type that accepts ConfigEntryServiceIntentionsArray and ConfigEntryServiceIntentionsArrayOutput values.
// You can construct a concrete instance of `ConfigEntryServiceIntentionsArrayInput` via:
//
//	ConfigEntryServiceIntentionsArray{ ConfigEntryServiceIntentionsArgs{...} }
type ConfigEntryServiceIntentionsArrayInput interface {
	pulumi.Input

	ToConfigEntryServiceIntentionsArrayOutput() ConfigEntryServiceIntentionsArrayOutput
	ToConfigEntryServiceIntentionsArrayOutputWithContext(context.Context) ConfigEntryServiceIntentionsArrayOutput
}

type ConfigEntryServiceIntentionsArray []ConfigEntryServiceIntentionsInput

func (ConfigEntryServiceIntentionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntryServiceIntentions)(nil)).Elem()
}

func (i ConfigEntryServiceIntentionsArray) ToConfigEntryServiceIntentionsArrayOutput() ConfigEntryServiceIntentionsArrayOutput {
	return i.ToConfigEntryServiceIntentionsArrayOutputWithContext(context.Background())
}

func (i ConfigEntryServiceIntentionsArray) ToConfigEntryServiceIntentionsArrayOutputWithContext(ctx context.Context) ConfigEntryServiceIntentionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceIntentionsArrayOutput)
}

func (i ConfigEntryServiceIntentionsArray) ToOutput(ctx context.Context) pulumix.Output[[]*ConfigEntryServiceIntentions] {
	return pulumix.Output[[]*ConfigEntryServiceIntentions]{
		OutputState: i.ToConfigEntryServiceIntentionsArrayOutputWithContext(ctx).OutputState,
	}
}

// ConfigEntryServiceIntentionsMapInput is an input type that accepts ConfigEntryServiceIntentionsMap and ConfigEntryServiceIntentionsMapOutput values.
// You can construct a concrete instance of `ConfigEntryServiceIntentionsMapInput` via:
//
//	ConfigEntryServiceIntentionsMap{ "key": ConfigEntryServiceIntentionsArgs{...} }
type ConfigEntryServiceIntentionsMapInput interface {
	pulumi.Input

	ToConfigEntryServiceIntentionsMapOutput() ConfigEntryServiceIntentionsMapOutput
	ToConfigEntryServiceIntentionsMapOutputWithContext(context.Context) ConfigEntryServiceIntentionsMapOutput
}

type ConfigEntryServiceIntentionsMap map[string]ConfigEntryServiceIntentionsInput

func (ConfigEntryServiceIntentionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntryServiceIntentions)(nil)).Elem()
}

func (i ConfigEntryServiceIntentionsMap) ToConfigEntryServiceIntentionsMapOutput() ConfigEntryServiceIntentionsMapOutput {
	return i.ToConfigEntryServiceIntentionsMapOutputWithContext(context.Background())
}

func (i ConfigEntryServiceIntentionsMap) ToConfigEntryServiceIntentionsMapOutputWithContext(ctx context.Context) ConfigEntryServiceIntentionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceIntentionsMapOutput)
}

func (i ConfigEntryServiceIntentionsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConfigEntryServiceIntentions] {
	return pulumix.Output[map[string]*ConfigEntryServiceIntentions]{
		OutputState: i.ToConfigEntryServiceIntentionsMapOutputWithContext(ctx).OutputState,
	}
}

type ConfigEntryServiceIntentionsOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceIntentionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntryServiceIntentions)(nil)).Elem()
}

func (o ConfigEntryServiceIntentionsOutput) ToConfigEntryServiceIntentionsOutput() ConfigEntryServiceIntentionsOutput {
	return o
}

func (o ConfigEntryServiceIntentionsOutput) ToConfigEntryServiceIntentionsOutputWithContext(ctx context.Context) ConfigEntryServiceIntentionsOutput {
	return o
}

func (o ConfigEntryServiceIntentionsOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigEntryServiceIntentions] {
	return pulumix.Output[*ConfigEntryServiceIntentions]{
		OutputState: o.OutputState,
	}
}

// Specifies a JSON Web Token provider configured in a JWT provider configuration entry, as well as additional configurations for verifying a service's JWT before authorizing communication between services
func (o ConfigEntryServiceIntentionsOutput) Jwts() ConfigEntryServiceIntentionsJwtArrayOutput {
	return o.ApplyT(func(v *ConfigEntryServiceIntentions) ConfigEntryServiceIntentionsJwtArrayOutput { return v.Jwts }).(ConfigEntryServiceIntentionsJwtArrayOutput)
}

// Specifies key-value pairs to add to the KV store.
func (o ConfigEntryServiceIntentionsOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigEntryServiceIntentions) pulumi.StringMapOutput { return v.Meta }).(pulumi.StringMapOutput)
}

// Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
func (o ConfigEntryServiceIntentionsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEntryServiceIntentions) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the traffic source namespace that the intention allows or denies traffic from.
func (o ConfigEntryServiceIntentionsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceIntentions) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies the name of an admin partition that the intention allows or denies traffic from.
func (o ConfigEntryServiceIntentionsOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceIntentions) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// List of configurations that define intention sources and the authorization granted to the sources.
func (o ConfigEntryServiceIntentionsOutput) Sources() ConfigEntryServiceIntentionsSourceArrayOutput {
	return o.ApplyT(func(v *ConfigEntryServiceIntentions) ConfigEntryServiceIntentionsSourceArrayOutput { return v.Sources }).(ConfigEntryServiceIntentionsSourceArrayOutput)
}

type ConfigEntryServiceIntentionsArrayOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceIntentionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntryServiceIntentions)(nil)).Elem()
}

func (o ConfigEntryServiceIntentionsArrayOutput) ToConfigEntryServiceIntentionsArrayOutput() ConfigEntryServiceIntentionsArrayOutput {
	return o
}

func (o ConfigEntryServiceIntentionsArrayOutput) ToConfigEntryServiceIntentionsArrayOutputWithContext(ctx context.Context) ConfigEntryServiceIntentionsArrayOutput {
	return o
}

func (o ConfigEntryServiceIntentionsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ConfigEntryServiceIntentions] {
	return pulumix.Output[[]*ConfigEntryServiceIntentions]{
		OutputState: o.OutputState,
	}
}

func (o ConfigEntryServiceIntentionsArrayOutput) Index(i pulumi.IntInput) ConfigEntryServiceIntentionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigEntryServiceIntentions {
		return vs[0].([]*ConfigEntryServiceIntentions)[vs[1].(int)]
	}).(ConfigEntryServiceIntentionsOutput)
}

type ConfigEntryServiceIntentionsMapOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceIntentionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntryServiceIntentions)(nil)).Elem()
}

func (o ConfigEntryServiceIntentionsMapOutput) ToConfigEntryServiceIntentionsMapOutput() ConfigEntryServiceIntentionsMapOutput {
	return o
}

func (o ConfigEntryServiceIntentionsMapOutput) ToConfigEntryServiceIntentionsMapOutputWithContext(ctx context.Context) ConfigEntryServiceIntentionsMapOutput {
	return o
}

func (o ConfigEntryServiceIntentionsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConfigEntryServiceIntentions] {
	return pulumix.Output[map[string]*ConfigEntryServiceIntentions]{
		OutputState: o.OutputState,
	}
}

func (o ConfigEntryServiceIntentionsMapOutput) MapIndex(k pulumi.StringInput) ConfigEntryServiceIntentionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigEntryServiceIntentions {
		return vs[0].(map[string]*ConfigEntryServiceIntentions)[vs[1].(string)]
	}).(ConfigEntryServiceIntentionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceIntentionsInput)(nil)).Elem(), &ConfigEntryServiceIntentions{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceIntentionsArrayInput)(nil)).Elem(), ConfigEntryServiceIntentionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceIntentionsMapInput)(nil)).Elem(), ConfigEntryServiceIntentionsMap{})
	pulumi.RegisterOutputType(ConfigEntryServiceIntentionsOutput{})
	pulumi.RegisterOutputType(ConfigEntryServiceIntentionsArrayOutput{})
	pulumi.RegisterOutputType(ConfigEntryServiceIntentionsMapOutput{})
}
