// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/key_prefix.html.markdown.
type KeyPrefix struct {
	s *pulumi.ResourceState
}

// NewKeyPrefix registers a new resource with the given unique name, arguments, and options.
func NewKeyPrefix(ctx *pulumi.Context,
	name string, args *KeyPrefixArgs, opts ...pulumi.ResourceOpt) (*KeyPrefix, error) {
	if args == nil || args.PathPrefix == nil {
		return nil, errors.New("missing required argument 'PathPrefix'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["datacenter"] = nil
		inputs["pathPrefix"] = nil
		inputs["subkeyCollection"] = nil
		inputs["subkeys"] = nil
		inputs["token"] = nil
	} else {
		inputs["datacenter"] = args.Datacenter
		inputs["pathPrefix"] = args.PathPrefix
		inputs["subkeyCollection"] = args.SubkeyCollection
		inputs["subkeys"] = args.Subkeys
		inputs["token"] = args.Token
	}
	s, err := ctx.RegisterResource("consul:index/keyPrefix:KeyPrefix", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KeyPrefix{s: s}, nil
}

// GetKeyPrefix gets an existing KeyPrefix resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyPrefix(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KeyPrefixState, opts ...pulumi.ResourceOpt) (*KeyPrefix, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["datacenter"] = state.Datacenter
		inputs["pathPrefix"] = state.PathPrefix
		inputs["subkeyCollection"] = state.SubkeyCollection
		inputs["subkeys"] = state.Subkeys
		inputs["token"] = state.Token
	}
	s, err := ctx.ReadResource("consul:index/keyPrefix:KeyPrefix", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KeyPrefix{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *KeyPrefix) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *KeyPrefix) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The datacenter to use. This overrides the
// agent's default datacenter and the datacenter in the provider setup.
func (r *KeyPrefix) Datacenter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["datacenter"])
}

// Specifies the common prefix shared by all keys
// that will be managed by this resource instance. In most cases this will
// end with a slash, to manage a "folder" of keys.
func (r *KeyPrefix) PathPrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["pathPrefix"])
}

// A subkey to add. Supported values documented below.
// Multiple blocks supported.
func (r *KeyPrefix) SubkeyCollection() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subkeyCollection"])
}

// A mapping from subkey name (which will be appended
// to the given `pathPrefix`) to the value that should be stored at that key.
// Use slashes, as shown in the above example, to create "sub-folders" under
// the given path prefix.
func (r *KeyPrefix) Subkeys() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["subkeys"])
}

// The ACL token to use. This overrides the
// token that the agent provides by default.
func (r *KeyPrefix) Token() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["token"])
}

// Input properties used for looking up and filtering KeyPrefix resources.
type KeyPrefixState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Specifies the common prefix shared by all keys
	// that will be managed by this resource instance. In most cases this will
	// end with a slash, to manage a "folder" of keys.
	PathPrefix interface{}
	// A subkey to add. Supported values documented below.
	// Multiple blocks supported.
	SubkeyCollection interface{}
	// A mapping from subkey name (which will be appended
	// to the given `pathPrefix`) to the value that should be stored at that key.
	// Use slashes, as shown in the above example, to create "sub-folders" under
	// the given path prefix.
	Subkeys interface{}
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token interface{}
}

// The set of arguments for constructing a KeyPrefix resource.
type KeyPrefixArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Specifies the common prefix shared by all keys
	// that will be managed by this resource instance. In most cases this will
	// end with a slash, to manage a "folder" of keys.
	PathPrefix interface{}
	// A subkey to add. Supported values documented below.
	// Multiple blocks supported.
	SubkeyCollection interface{}
	// A mapping from subkey name (which will be appended
	// to the given `pathPrefix`) to the value that should be stored at that key.
	// Use slashes, as shown in the above example, to create "sub-folders" under
	// the given path prefix.
	Subkeys interface{}
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token interface{}
}
