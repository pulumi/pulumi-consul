// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewAclPolicy(ctx, "read-policy", &consul.AclPolicyArgs{
//				Name:  pulumi.String("read-policy"),
//				Rules: pulumi.String("node \"\" { policy = \"read\" }"),
//				Datacenters: pulumi.StringArray{
//					pulumi.String("dc1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.NewAclRole(ctx, "read", &consul.AclRoleArgs{
//				Name:        pulumi.String("foo"),
//				Description: pulumi.String("bar"),
//				Policies: pulumi.StringArray{
//					read_policy.ID(),
//				},
//				ServiceIdentities: consul.AclRoleServiceIdentityArray{
//					&consul.AclRoleServiceIdentityArgs{
//						ServiceName: pulumi.String("foo"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import consul:index/aclRole:AclRole read 816a195f-6cb1-2e8d-92af-3011ae706318
// ```
type AclRole struct {
	pulumi.CustomResourceState

	// A free form human readable description of the role.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the ACL role.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to create the role within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The list of node identities that should be applied to the role.
	NodeIdentities AclRoleNodeIdentityArrayOutput `pulumi:"nodeIdentities"`
	// The partition the ACL role is associated with.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
	// The list of service identities that should be applied to the role.
	ServiceIdentities AclRoleServiceIdentityArrayOutput `pulumi:"serviceIdentities"`
	// The list of templated policies that should be applied to the token.
	TemplatedPolicies AclRoleTemplatedPolicyArrayOutput `pulumi:"templatedPolicies"`
}

// NewAclRole registers a new resource with the given unique name, arguments, and options.
func NewAclRole(ctx *pulumi.Context,
	name string, args *AclRoleArgs, opts ...pulumi.ResourceOption) (*AclRole, error) {
	if args == nil {
		args = &AclRoleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclRole
	err := ctx.RegisterResource("consul:index/aclRole:AclRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclRole gets an existing AclRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclRoleState, opts ...pulumi.ResourceOption) (*AclRole, error) {
	var resource AclRole
	err := ctx.ReadResource("consul:index/aclRole:AclRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclRole resources.
type aclRoleState struct {
	// A free form human readable description of the role.
	Description *string `pulumi:"description"`
	// The name of the ACL role.
	Name *string `pulumi:"name"`
	// The namespace to create the role within.
	Namespace *string `pulumi:"namespace"`
	// The list of node identities that should be applied to the role.
	NodeIdentities []AclRoleNodeIdentity `pulumi:"nodeIdentities"`
	// The partition the ACL role is associated with.
	Partition *string `pulumi:"partition"`
	// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	Policies []string `pulumi:"policies"`
	// The list of service identities that should be applied to the role.
	ServiceIdentities []AclRoleServiceIdentity `pulumi:"serviceIdentities"`
	// The list of templated policies that should be applied to the token.
	TemplatedPolicies []AclRoleTemplatedPolicy `pulumi:"templatedPolicies"`
}

type AclRoleState struct {
	// A free form human readable description of the role.
	Description pulumi.StringPtrInput
	// The name of the ACL role.
	Name pulumi.StringPtrInput
	// The namespace to create the role within.
	Namespace pulumi.StringPtrInput
	// The list of node identities that should be applied to the role.
	NodeIdentities AclRoleNodeIdentityArrayInput
	// The partition the ACL role is associated with.
	Partition pulumi.StringPtrInput
	// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	Policies pulumi.StringArrayInput
	// The list of service identities that should be applied to the role.
	ServiceIdentities AclRoleServiceIdentityArrayInput
	// The list of templated policies that should be applied to the token.
	TemplatedPolicies AclRoleTemplatedPolicyArrayInput
}

func (AclRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRoleState)(nil)).Elem()
}

type aclRoleArgs struct {
	// A free form human readable description of the role.
	Description *string `pulumi:"description"`
	// The name of the ACL role.
	Name *string `pulumi:"name"`
	// The namespace to create the role within.
	Namespace *string `pulumi:"namespace"`
	// The list of node identities that should be applied to the role.
	NodeIdentities []AclRoleNodeIdentity `pulumi:"nodeIdentities"`
	// The partition the ACL role is associated with.
	Partition *string `pulumi:"partition"`
	// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	Policies []string `pulumi:"policies"`
	// The list of service identities that should be applied to the role.
	ServiceIdentities []AclRoleServiceIdentity `pulumi:"serviceIdentities"`
	// The list of templated policies that should be applied to the token.
	TemplatedPolicies []AclRoleTemplatedPolicy `pulumi:"templatedPolicies"`
}

// The set of arguments for constructing a AclRole resource.
type AclRoleArgs struct {
	// A free form human readable description of the role.
	Description pulumi.StringPtrInput
	// The name of the ACL role.
	Name pulumi.StringPtrInput
	// The namespace to create the role within.
	Namespace pulumi.StringPtrInput
	// The list of node identities that should be applied to the role.
	NodeIdentities AclRoleNodeIdentityArrayInput
	// The partition the ACL role is associated with.
	Partition pulumi.StringPtrInput
	// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	Policies pulumi.StringArrayInput
	// The list of service identities that should be applied to the role.
	ServiceIdentities AclRoleServiceIdentityArrayInput
	// The list of templated policies that should be applied to the token.
	TemplatedPolicies AclRoleTemplatedPolicyArrayInput
}

func (AclRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRoleArgs)(nil)).Elem()
}

type AclRoleInput interface {
	pulumi.Input

	ToAclRoleOutput() AclRoleOutput
	ToAclRoleOutputWithContext(ctx context.Context) AclRoleOutput
}

func (*AclRole) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRole)(nil)).Elem()
}

func (i *AclRole) ToAclRoleOutput() AclRoleOutput {
	return i.ToAclRoleOutputWithContext(context.Background())
}

func (i *AclRole) ToAclRoleOutputWithContext(ctx context.Context) AclRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRoleOutput)
}

// AclRoleArrayInput is an input type that accepts AclRoleArray and AclRoleArrayOutput values.
// You can construct a concrete instance of `AclRoleArrayInput` via:
//
//	AclRoleArray{ AclRoleArgs{...} }
type AclRoleArrayInput interface {
	pulumi.Input

	ToAclRoleArrayOutput() AclRoleArrayOutput
	ToAclRoleArrayOutputWithContext(context.Context) AclRoleArrayOutput
}

type AclRoleArray []AclRoleInput

func (AclRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRole)(nil)).Elem()
}

func (i AclRoleArray) ToAclRoleArrayOutput() AclRoleArrayOutput {
	return i.ToAclRoleArrayOutputWithContext(context.Background())
}

func (i AclRoleArray) ToAclRoleArrayOutputWithContext(ctx context.Context) AclRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRoleArrayOutput)
}

// AclRoleMapInput is an input type that accepts AclRoleMap and AclRoleMapOutput values.
// You can construct a concrete instance of `AclRoleMapInput` via:
//
//	AclRoleMap{ "key": AclRoleArgs{...} }
type AclRoleMapInput interface {
	pulumi.Input

	ToAclRoleMapOutput() AclRoleMapOutput
	ToAclRoleMapOutputWithContext(context.Context) AclRoleMapOutput
}

type AclRoleMap map[string]AclRoleInput

func (AclRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRole)(nil)).Elem()
}

func (i AclRoleMap) ToAclRoleMapOutput() AclRoleMapOutput {
	return i.ToAclRoleMapOutputWithContext(context.Background())
}

func (i AclRoleMap) ToAclRoleMapOutputWithContext(ctx context.Context) AclRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRoleMapOutput)
}

type AclRoleOutput struct{ *pulumi.OutputState }

func (AclRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRole)(nil)).Elem()
}

func (o AclRoleOutput) ToAclRoleOutput() AclRoleOutput {
	return o
}

func (o AclRoleOutput) ToAclRoleOutputWithContext(ctx context.Context) AclRoleOutput {
	return o
}

// A free form human readable description of the role.
func (o AclRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRole) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the ACL role.
func (o AclRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to create the role within.
func (o AclRoleOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRole) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The list of node identities that should be applied to the role.
func (o AclRoleOutput) NodeIdentities() AclRoleNodeIdentityArrayOutput {
	return o.ApplyT(func(v *AclRole) AclRoleNodeIdentityArrayOutput { return v.NodeIdentities }).(AclRoleNodeIdentityArrayOutput)
}

// The partition the ACL role is associated with.
func (o AclRoleOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRole) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
func (o AclRoleOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRole) pulumi.StringArrayOutput { return v.Policies }).(pulumi.StringArrayOutput)
}

// The list of service identities that should be applied to the role.
func (o AclRoleOutput) ServiceIdentities() AclRoleServiceIdentityArrayOutput {
	return o.ApplyT(func(v *AclRole) AclRoleServiceIdentityArrayOutput { return v.ServiceIdentities }).(AclRoleServiceIdentityArrayOutput)
}

// The list of templated policies that should be applied to the token.
func (o AclRoleOutput) TemplatedPolicies() AclRoleTemplatedPolicyArrayOutput {
	return o.ApplyT(func(v *AclRole) AclRoleTemplatedPolicyArrayOutput { return v.TemplatedPolicies }).(AclRoleTemplatedPolicyArrayOutput)
}

type AclRoleArrayOutput struct{ *pulumi.OutputState }

func (AclRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRole)(nil)).Elem()
}

func (o AclRoleArrayOutput) ToAclRoleArrayOutput() AclRoleArrayOutput {
	return o
}

func (o AclRoleArrayOutput) ToAclRoleArrayOutputWithContext(ctx context.Context) AclRoleArrayOutput {
	return o
}

func (o AclRoleArrayOutput) Index(i pulumi.IntInput) AclRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclRole {
		return vs[0].([]*AclRole)[vs[1].(int)]
	}).(AclRoleOutput)
}

type AclRoleMapOutput struct{ *pulumi.OutputState }

func (AclRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRole)(nil)).Elem()
}

func (o AclRoleMapOutput) ToAclRoleMapOutput() AclRoleMapOutput {
	return o
}

func (o AclRoleMapOutput) ToAclRoleMapOutputWithContext(ctx context.Context) AclRoleMapOutput {
	return o
}

func (o AclRoleMapOutput) MapIndex(k pulumi.StringInput) AclRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclRole {
		return vs[0].(map[string]*AclRole)[vs[1].(string)]
	}).(AclRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclRoleInput)(nil)).Elem(), &AclRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRoleArrayInput)(nil)).Elem(), AclRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRoleMapInput)(nil)).Elem(), AclRoleMap{})
	pulumi.RegisterOutputType(AclRoleOutput{})
	pulumi.RegisterOutputType(AclRoleArrayOutput{})
	pulumi.RegisterOutputType(AclRoleMapOutput{})
}
