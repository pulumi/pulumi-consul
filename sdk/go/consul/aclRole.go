// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Starting with Consul 1.5.0, the .AclRole can be used to managed Consul ACL roles.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/acl_role.html.markdown.
type AclRole struct {
	s *pulumi.ResourceState
}

// NewAclRole registers a new resource with the given unique name, arguments, and options.
func NewAclRole(ctx *pulumi.Context,
	name string, args *AclRoleArgs, opts ...pulumi.ResourceOpt) (*AclRole, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["policies"] = nil
		inputs["serviceIdentities"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["policies"] = args.Policies
		inputs["serviceIdentities"] = args.ServiceIdentities
	}
	s, err := ctx.RegisterResource("consul:index/aclRole:AclRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclRole{s: s}, nil
}

// GetAclRole gets an existing AclRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AclRoleState, opts ...pulumi.ResourceOpt) (*AclRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["policies"] = state.Policies
		inputs["serviceIdentities"] = state.ServiceIdentities
	}
	s, err := ctx.ReadResource("consul:index/aclRole:AclRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AclRole) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AclRole) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A free form human readable description of the role.
func (r *AclRole) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The name of the ACL role.
func (r *AclRole) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The list of policies that should be applied to the role.
func (r *AclRole) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

// The list of service identities that should
// be applied to the role.
func (r *AclRole) ServiceIdentities() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["serviceIdentities"])
}

// Input properties used for looking up and filtering AclRole resources.
type AclRoleState struct {
	// A free form human readable description of the role.
	Description interface{}
	// The name of the ACL role.
	Name interface{}
	// The list of policies that should be applied to the role.
	Policies interface{}
	// The list of service identities that should
	// be applied to the role.
	ServiceIdentities interface{}
}

// The set of arguments for constructing a AclRole resource.
type AclRoleArgs struct {
	// A free form human readable description of the role.
	Description interface{}
	// The name of the ACL role.
	Name interface{}
	// The list of policies that should be applied to the role.
	Policies interface{}
	// The list of service identities that should
	// be applied to the role.
	ServiceIdentities interface{}
}
