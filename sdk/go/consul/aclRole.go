// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Starting with Consul 1.5.0, the AclRole can be used to managed Consul ACL roles.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewAclPolicy(ctx, "read_policy", &consul.AclPolicyArgs{
// 			Datacenters: pulumi.StringArray{
// 				pulumi.String("dc1"),
// 			},
// 			Rules: pulumi.String("node \"\" { policy = \"read\" }"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = consul.NewAclRole(ctx, "read", &consul.AclRoleArgs{
// 			Description: pulumi.String("bar"),
// 			Policies: pulumi.StringArray{
// 				read_policy.ID(),
// 			},
// 			ServiceIdentities: consul.AclRoleServiceIdentityArray{
// 				&consul.AclRoleServiceIdentityArgs{
// 					ServiceName: pulumi.String("foo"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `consul_acl_role` can be imported
//
// ```sh
//  $ pulumi import consul:index/aclRole:AclRole read 816a195f-6cb1-2e8d-92af-3011ae706318
// ```
type AclRole struct {
	pulumi.CustomResourceState

	// A free form human readable description of the role.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the ACL role.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to create the role within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The list of policies that should be applied to the role.
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
	// The list of service identities that should
	// be applied to the role.
	ServiceIdentities AclRoleServiceIdentityArrayOutput `pulumi:"serviceIdentities"`
}

// NewAclRole registers a new resource with the given unique name, arguments, and options.
func NewAclRole(ctx *pulumi.Context,
	name string, args *AclRoleArgs, opts ...pulumi.ResourceOption) (*AclRole, error) {
	if args == nil {
		args = &AclRoleArgs{}
	}
	var resource AclRole
	err := ctx.RegisterResource("consul:index/aclRole:AclRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclRole gets an existing AclRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclRoleState, opts ...pulumi.ResourceOption) (*AclRole, error) {
	var resource AclRole
	err := ctx.ReadResource("consul:index/aclRole:AclRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclRole resources.
type aclRoleState struct {
	// A free form human readable description of the role.
	Description *string `pulumi:"description"`
	// The name of the ACL role.
	Name *string `pulumi:"name"`
	// The namespace to create the role within.
	Namespace *string `pulumi:"namespace"`
	// The list of policies that should be applied to the role.
	Policies []string `pulumi:"policies"`
	// The list of service identities that should
	// be applied to the role.
	ServiceIdentities []AclRoleServiceIdentity `pulumi:"serviceIdentities"`
}

type AclRoleState struct {
	// A free form human readable description of the role.
	Description pulumi.StringPtrInput
	// The name of the ACL role.
	Name pulumi.StringPtrInput
	// The namespace to create the role within.
	Namespace pulumi.StringPtrInput
	// The list of policies that should be applied to the role.
	Policies pulumi.StringArrayInput
	// The list of service identities that should
	// be applied to the role.
	ServiceIdentities AclRoleServiceIdentityArrayInput
}

func (AclRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRoleState)(nil)).Elem()
}

type aclRoleArgs struct {
	// A free form human readable description of the role.
	Description *string `pulumi:"description"`
	// The name of the ACL role.
	Name *string `pulumi:"name"`
	// The namespace to create the role within.
	Namespace *string `pulumi:"namespace"`
	// The list of policies that should be applied to the role.
	Policies []string `pulumi:"policies"`
	// The list of service identities that should
	// be applied to the role.
	ServiceIdentities []AclRoleServiceIdentity `pulumi:"serviceIdentities"`
}

// The set of arguments for constructing a AclRole resource.
type AclRoleArgs struct {
	// A free form human readable description of the role.
	Description pulumi.StringPtrInput
	// The name of the ACL role.
	Name pulumi.StringPtrInput
	// The namespace to create the role within.
	Namespace pulumi.StringPtrInput
	// The list of policies that should be applied to the role.
	Policies pulumi.StringArrayInput
	// The list of service identities that should
	// be applied to the role.
	ServiceIdentities AclRoleServiceIdentityArrayInput
}

func (AclRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRoleArgs)(nil)).Elem()
}

type AclRoleInput interface {
	pulumi.Input

	ToAclRoleOutput() AclRoleOutput
	ToAclRoleOutputWithContext(ctx context.Context) AclRoleOutput
}

func (AclRole) ElementType() reflect.Type {
	return reflect.TypeOf((*AclRole)(nil)).Elem()
}

func (i AclRole) ToAclRoleOutput() AclRoleOutput {
	return i.ToAclRoleOutputWithContext(context.Background())
}

func (i AclRole) ToAclRoleOutputWithContext(ctx context.Context) AclRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRoleOutput)
}

type AclRoleOutput struct {
	*pulumi.OutputState
}

func (AclRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclRoleOutput)(nil)).Elem()
}

func (o AclRoleOutput) ToAclRoleOutput() AclRoleOutput {
	return o
}

func (o AclRoleOutput) ToAclRoleOutputWithContext(ctx context.Context) AclRoleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AclRoleOutput{})
}
