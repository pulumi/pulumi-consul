// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getServices` data source returns a list of Consul services that
// have been registered with the Consul cluster in a given datacenter.  By
// specifying a different datacenter in the `queryOptions` it is possible to
// retrieve a list of services from a different WAN-attached Consul datacenter.
//
// This data source is different from the `Service` (singular) data
// source, which provides a detailed response about a specific Consul service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi-example/sdk/go/example"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.GetServices(ctx, &consul.GetServicesArgs{
//				QueryOptions: []consul.GetServicesQueryOption{
//					{
//						Datacenter: pulumi.StringRef("dc1"),
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Set the description to a whitespace delimited list of the services
//			_, err = example.NewResource(ctx, "app", &example.ResourceArgs{
//				Description: std.Join(ctx, &std.JoinArgs{
//					Separator: " ",
//					Input:     names,
//				}, nil).Result,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: getCatalogServices has been deprecated in favor of getServices
func GetCatalogServices(ctx *pulumi.Context, args *GetCatalogServicesArgs, opts ...pulumi.InvokeOption) (*GetCatalogServicesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCatalogServicesResult
	err := ctx.Invoke("consul:index/getCatalogServices:getCatalogServices", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCatalogServices.
type GetCatalogServicesArgs struct {
	// See below.
	QueryOptions []GetCatalogServicesQueryOption `pulumi:"queryOptions"`
}

// A collection of values returned by getCatalogServices.
type GetCatalogServicesResult struct {
	// The datacenter the keys are being read from to.
	Datacenter string `pulumi:"datacenter"`
	// The provider-assigned unique ID for this managed resource.
	Id           string                          `pulumi:"id"`
	Names        []string                        `pulumi:"names"`
	QueryOptions []GetCatalogServicesQueryOption `pulumi:"queryOptions"`
	Services     map[string]string               `pulumi:"services"`
	// A map of the tags found for each service.  If more than one service
	// shares the same tag, unique service names will be joined by whitespace (this
	// is the inverse of `services` and can be used to lookup the services that match
	// a single tag).
	Tags map[string]string `pulumi:"tags"`
}

func GetCatalogServicesOutput(ctx *pulumi.Context, args GetCatalogServicesOutputArgs, opts ...pulumi.InvokeOption) GetCatalogServicesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCatalogServicesResultOutput, error) {
			args := v.(GetCatalogServicesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetCatalogServicesResult
			secret, err := ctx.InvokePackageRaw("consul:index/getCatalogServices:getCatalogServices", args, &rv, "", opts...)
			if err != nil {
				return GetCatalogServicesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetCatalogServicesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetCatalogServicesResultOutput), nil
			}
			return output, nil
		}).(GetCatalogServicesResultOutput)
}

// A collection of arguments for invoking getCatalogServices.
type GetCatalogServicesOutputArgs struct {
	// See below.
	QueryOptions GetCatalogServicesQueryOptionArrayInput `pulumi:"queryOptions"`
}

func (GetCatalogServicesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogServicesArgs)(nil)).Elem()
}

// A collection of values returned by getCatalogServices.
type GetCatalogServicesResultOutput struct{ *pulumi.OutputState }

func (GetCatalogServicesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogServicesResult)(nil)).Elem()
}

func (o GetCatalogServicesResultOutput) ToGetCatalogServicesResultOutput() GetCatalogServicesResultOutput {
	return o
}

func (o GetCatalogServicesResultOutput) ToGetCatalogServicesResultOutputWithContext(ctx context.Context) GetCatalogServicesResultOutput {
	return o
}

// The datacenter the keys are being read from to.
func (o GetCatalogServicesResultOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServicesResult) string { return v.Datacenter }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCatalogServicesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServicesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCatalogServicesResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCatalogServicesResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetCatalogServicesResultOutput) QueryOptions() GetCatalogServicesQueryOptionArrayOutput {
	return o.ApplyT(func(v GetCatalogServicesResult) []GetCatalogServicesQueryOption { return v.QueryOptions }).(GetCatalogServicesQueryOptionArrayOutput)
}

func (o GetCatalogServicesResultOutput) Services() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogServicesResult) map[string]string { return v.Services }).(pulumi.StringMapOutput)
}

// A map of the tags found for each service.  If more than one service
// shares the same tag, unique service names will be joined by whitespace (this
// is the inverse of `services` and can be used to lookup the services that match
// a single tag).
func (o GetCatalogServicesResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogServicesResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCatalogServicesResultOutput{})
}
