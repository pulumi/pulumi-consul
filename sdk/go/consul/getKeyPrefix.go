// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		appKeyPrefix, err := consul.LookupKeyPrefix(ctx, &GetKeyPrefixArgs{
// 			Datacenter: pulumi.StringRef("nyc1"),
// 			PathPrefix: "myapp/config/",
// 			SubkeyCollection: []GetKeyPrefixSubkeyCollection{
// 				GetKeyPrefixSubkeyCollection{
// 					Default: pulumi.StringRef("ami-1234"),
// 					Name:    "ami",
// 					Path:    "app/launch_ami",
// 				},
// 			},
// 			Token: pulumi.StringRef("abcd"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ec2.NewInstance(ctx, "appInstance", &ec2.InstanceArgs{
// 			Ami: pulumi.String(appKeyPrefix.Var.Ami),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		webKeyPrefix, err := consul.LookupKeyPrefix(ctx, &GetKeyPrefixArgs{
// 			Datacenter: pulumi.StringRef("nyc1"),
// 			PathPrefix: "myapp/config/",
// 			Token:      pulumi.StringRef("efgh"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ec2.NewInstance(ctx, "webInstance", &ec2.InstanceArgs{
// 			Ami: pulumi.String(webKeyPrefix.Subkeys.App / launch_ami),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupKeyPrefix(ctx *pulumi.Context, args *LookupKeyPrefixArgs, opts ...pulumi.InvokeOption) (*LookupKeyPrefixResult, error) {
	var rv LookupKeyPrefixResult
	err := ctx.Invoke("consul:index/getKeyPrefix:getKeyPrefix", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeyPrefix.
type LookupKeyPrefixArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The namespace to create the keys within.
	Namespace *string `pulumi:"namespace"`
	// Specifies the common prefix shared by all keys
	// that will be read by this data source instance. In most cases, this will
	// end with a slash to read a "folder" of subkeys.
	PathPrefix string `pulumi:"pathPrefix"`
	// Specifies a subkey in Consul to be read. Supported
	// values documented below. Multiple blocks supported.
	SubkeyCollection []GetKeyPrefixSubkeyCollection `pulumi:"subkeyCollection"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token *string `pulumi:"token"`
}

// A collection of values returned by getKeyPrefix.
type LookupKeyPrefixResult struct {
	// The datacenter the keys are being read from.
	Datacenter string `pulumi:"datacenter"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	Namespace *string `pulumi:"namespace"`
	// the common prefix shared by all keys being read.
	// * `var.<name>` - For each name given, the corresponding attribute
	//   has the value of the key.
	PathPrefix       string                         `pulumi:"pathPrefix"`
	SubkeyCollection []GetKeyPrefixSubkeyCollection `pulumi:"subkeyCollection"`
	// A map of the subkeys and values is set if no `subkey`
	// block is provided.
	Subkeys map[string]string `pulumi:"subkeys"`
	Token   *string           `pulumi:"token"`
	Var     map[string]string `pulumi:"var"`
}

func LookupKeyPrefixOutput(ctx *pulumi.Context, args LookupKeyPrefixOutputArgs, opts ...pulumi.InvokeOption) LookupKeyPrefixResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKeyPrefixResult, error) {
			args := v.(LookupKeyPrefixArgs)
			r, err := LookupKeyPrefix(ctx, &args, opts...)
			return *r, err
		}).(LookupKeyPrefixResultOutput)
}

// A collection of arguments for invoking getKeyPrefix.
type LookupKeyPrefixOutputArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput `pulumi:"datacenter"`
	// The namespace to create the keys within.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specifies the common prefix shared by all keys
	// that will be read by this data source instance. In most cases, this will
	// end with a slash to read a "folder" of subkeys.
	PathPrefix pulumi.StringInput `pulumi:"pathPrefix"`
	// Specifies a subkey in Consul to be read. Supported
	// values documented below. Multiple blocks supported.
	SubkeyCollection GetKeyPrefixSubkeyCollectionArrayInput `pulumi:"subkeyCollection"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (LookupKeyPrefixOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyPrefixArgs)(nil)).Elem()
}

// A collection of values returned by getKeyPrefix.
type LookupKeyPrefixResultOutput struct{ *pulumi.OutputState }

func (LookupKeyPrefixResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyPrefixResult)(nil)).Elem()
}

func (o LookupKeyPrefixResultOutput) ToLookupKeyPrefixResultOutput() LookupKeyPrefixResultOutput {
	return o
}

func (o LookupKeyPrefixResultOutput) ToLookupKeyPrefixResultOutputWithContext(ctx context.Context) LookupKeyPrefixResultOutput {
	return o
}

// The datacenter the keys are being read from.
func (o LookupKeyPrefixResultOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyPrefixResult) string { return v.Datacenter }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKeyPrefixResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyPrefixResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupKeyPrefixResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeyPrefixResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// the common prefix shared by all keys being read.
// * `var.<name>` - For each name given, the corresponding attribute
//   has the value of the key.
func (o LookupKeyPrefixResultOutput) PathPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyPrefixResult) string { return v.PathPrefix }).(pulumi.StringOutput)
}

func (o LookupKeyPrefixResultOutput) SubkeyCollection() GetKeyPrefixSubkeyCollectionArrayOutput {
	return o.ApplyT(func(v LookupKeyPrefixResult) []GetKeyPrefixSubkeyCollection { return v.SubkeyCollection }).(GetKeyPrefixSubkeyCollectionArrayOutput)
}

// A map of the subkeys and values is set if no `subkey`
// block is provided.
func (o LookupKeyPrefixResultOutput) Subkeys() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKeyPrefixResult) map[string]string { return v.Subkeys }).(pulumi.StringMapOutput)
}

func (o LookupKeyPrefixResultOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeyPrefixResult) *string { return v.Token }).(pulumi.StringPtrOutput)
}

func (o LookupKeyPrefixResultOutput) Var() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKeyPrefixResult) map[string]string { return v.Var }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyPrefixResultOutput{})
}
