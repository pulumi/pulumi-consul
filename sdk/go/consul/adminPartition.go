// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **NOTE:** This feature requires Consul Enterprise.
//
// The `AdminPartition` resource manages [Consul Enterprise Admin Partitions](https://www.consul.io/docs/enterprise/admin-partitions).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewAdminPartition(ctx, "naWest", &consul.AdminPartitionArgs{
// 			Description: pulumi.String("Partition for North America West"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `consul_admin_partition` can be imported
//
// ```sh
//  $ pulumi import consul:index/adminPartition:AdminPartition na_west na-west
// ```
type AdminPartition struct {
	pulumi.CustomResourceState

	// Free form partition description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The partition name. This must be a valid DNS hostname label.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAdminPartition registers a new resource with the given unique name, arguments, and options.
func NewAdminPartition(ctx *pulumi.Context,
	name string, args *AdminPartitionArgs, opts ...pulumi.ResourceOption) (*AdminPartition, error) {
	if args == nil {
		args = &AdminPartitionArgs{}
	}

	var resource AdminPartition
	err := ctx.RegisterResource("consul:index/adminPartition:AdminPartition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminPartition gets an existing AdminPartition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminPartition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminPartitionState, opts ...pulumi.ResourceOption) (*AdminPartition, error) {
	var resource AdminPartition
	err := ctx.ReadResource("consul:index/adminPartition:AdminPartition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminPartition resources.
type adminPartitionState struct {
	// Free form partition description.
	Description *string `pulumi:"description"`
	// The partition name. This must be a valid DNS hostname label.
	Name *string `pulumi:"name"`
}

type AdminPartitionState struct {
	// Free form partition description.
	Description pulumi.StringPtrInput
	// The partition name. This must be a valid DNS hostname label.
	Name pulumi.StringPtrInput
}

func (AdminPartitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminPartitionState)(nil)).Elem()
}

type adminPartitionArgs struct {
	// Free form partition description.
	Description *string `pulumi:"description"`
	// The partition name. This must be a valid DNS hostname label.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AdminPartition resource.
type AdminPartitionArgs struct {
	// Free form partition description.
	Description pulumi.StringPtrInput
	// The partition name. This must be a valid DNS hostname label.
	Name pulumi.StringPtrInput
}

func (AdminPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminPartitionArgs)(nil)).Elem()
}

type AdminPartitionInput interface {
	pulumi.Input

	ToAdminPartitionOutput() AdminPartitionOutput
	ToAdminPartitionOutputWithContext(ctx context.Context) AdminPartitionOutput
}

func (*AdminPartition) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminPartition)(nil)).Elem()
}

func (i *AdminPartition) ToAdminPartitionOutput() AdminPartitionOutput {
	return i.ToAdminPartitionOutputWithContext(context.Background())
}

func (i *AdminPartition) ToAdminPartitionOutputWithContext(ctx context.Context) AdminPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminPartitionOutput)
}

// AdminPartitionArrayInput is an input type that accepts AdminPartitionArray and AdminPartitionArrayOutput values.
// You can construct a concrete instance of `AdminPartitionArrayInput` via:
//
//          AdminPartitionArray{ AdminPartitionArgs{...} }
type AdminPartitionArrayInput interface {
	pulumi.Input

	ToAdminPartitionArrayOutput() AdminPartitionArrayOutput
	ToAdminPartitionArrayOutputWithContext(context.Context) AdminPartitionArrayOutput
}

type AdminPartitionArray []AdminPartitionInput

func (AdminPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminPartition)(nil)).Elem()
}

func (i AdminPartitionArray) ToAdminPartitionArrayOutput() AdminPartitionArrayOutput {
	return i.ToAdminPartitionArrayOutputWithContext(context.Background())
}

func (i AdminPartitionArray) ToAdminPartitionArrayOutputWithContext(ctx context.Context) AdminPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminPartitionArrayOutput)
}

// AdminPartitionMapInput is an input type that accepts AdminPartitionMap and AdminPartitionMapOutput values.
// You can construct a concrete instance of `AdminPartitionMapInput` via:
//
//          AdminPartitionMap{ "key": AdminPartitionArgs{...} }
type AdminPartitionMapInput interface {
	pulumi.Input

	ToAdminPartitionMapOutput() AdminPartitionMapOutput
	ToAdminPartitionMapOutputWithContext(context.Context) AdminPartitionMapOutput
}

type AdminPartitionMap map[string]AdminPartitionInput

func (AdminPartitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminPartition)(nil)).Elem()
}

func (i AdminPartitionMap) ToAdminPartitionMapOutput() AdminPartitionMapOutput {
	return i.ToAdminPartitionMapOutputWithContext(context.Background())
}

func (i AdminPartitionMap) ToAdminPartitionMapOutputWithContext(ctx context.Context) AdminPartitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminPartitionMapOutput)
}

type AdminPartitionOutput struct{ *pulumi.OutputState }

func (AdminPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminPartition)(nil)).Elem()
}

func (o AdminPartitionOutput) ToAdminPartitionOutput() AdminPartitionOutput {
	return o
}

func (o AdminPartitionOutput) ToAdminPartitionOutputWithContext(ctx context.Context) AdminPartitionOutput {
	return o
}

type AdminPartitionArrayOutput struct{ *pulumi.OutputState }

func (AdminPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminPartition)(nil)).Elem()
}

func (o AdminPartitionArrayOutput) ToAdminPartitionArrayOutput() AdminPartitionArrayOutput {
	return o
}

func (o AdminPartitionArrayOutput) ToAdminPartitionArrayOutputWithContext(ctx context.Context) AdminPartitionArrayOutput {
	return o
}

func (o AdminPartitionArrayOutput) Index(i pulumi.IntInput) AdminPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdminPartition {
		return vs[0].([]*AdminPartition)[vs[1].(int)]
	}).(AdminPartitionOutput)
}

type AdminPartitionMapOutput struct{ *pulumi.OutputState }

func (AdminPartitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminPartition)(nil)).Elem()
}

func (o AdminPartitionMapOutput) ToAdminPartitionMapOutput() AdminPartitionMapOutput {
	return o
}

func (o AdminPartitionMapOutput) ToAdminPartitionMapOutputWithContext(ctx context.Context) AdminPartitionMapOutput {
	return o
}

func (o AdminPartitionMapOutput) MapIndex(k pulumi.StringInput) AdminPartitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdminPartition {
		return vs[0].(map[string]*AdminPartition)[vs[1].(string)]
	}).(AdminPartitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminPartitionInput)(nil)).Elem(), &AdminPartition{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminPartitionArrayInput)(nil)).Elem(), AdminPartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminPartitionMapInput)(nil)).Elem(), AdminPartitionMap{})
	pulumi.RegisterOutputType(AdminPartitionOutput{})
	pulumi.RegisterOutputType(AdminPartitionArrayOutput{})
	pulumi.RegisterOutputType(AdminPartitionMapOutput{})
}
