// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides access to Node data in Consul. This can be used to define a
// node. Currently, defining health checks is not supported.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/node.html.markdown.
type Node struct {
	s *pulumi.ResourceState
}

// NewNode registers a new resource with the given unique name, arguments, and options.
func NewNode(ctx *pulumi.Context,
	name string, args *NodeArgs, opts ...pulumi.ResourceOpt) (*Node, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["datacenter"] = nil
		inputs["meta"] = nil
		inputs["name"] = nil
		inputs["token"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["datacenter"] = args.Datacenter
		inputs["meta"] = args.Meta
		inputs["name"] = args.Name
		inputs["token"] = args.Token
	}
	s, err := ctx.RegisterResource("consul:index/node:Node", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Node{s: s}, nil
}

// GetNode gets an existing Node resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNode(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NodeState, opts ...pulumi.ResourceOpt) (*Node, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["datacenter"] = state.Datacenter
		inputs["meta"] = state.Meta
		inputs["name"] = state.Name
		inputs["token"] = state.Token
	}
	s, err := ctx.ReadResource("consul:index/node:Node", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Node{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Node) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Node) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The address of the node being added to,
// or referenced in the catalog.
func (r *Node) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// The datacenter to use. This overrides the agent's
// default datacenter and the datacenter in the provider setup.
func (r *Node) Datacenter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["datacenter"])
}

// Key/value pairs that are associated with the node.
func (r *Node) Meta() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["meta"])
}

// The name of the node being added to, or
// referenced in the catalog.
func (r *Node) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Node) Token() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["token"])
}

// Input properties used for looking up and filtering Node resources.
type NodeState struct {
	// The address of the node being added to,
	// or referenced in the catalog.
	Address interface{}
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Key/value pairs that are associated with the node.
	Meta interface{}
	// The name of the node being added to, or
	// referenced in the catalog.
	Name interface{}
	Token interface{}
}

// The set of arguments for constructing a Node resource.
type NodeArgs struct {
	// The address of the node being added to,
	// or referenced in the catalog.
	Address interface{}
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Key/value pairs that are associated with the node.
	Meta interface{}
	// The name of the node being added to, or
	// referenced in the catalog.
	Name interface{}
	Token interface{}
}
