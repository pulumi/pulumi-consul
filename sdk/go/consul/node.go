// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides access to Node data in Consul. This can be used to define a
// node. Currently, defining health checks is not supported.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewNode(ctx, "foobar", &consul.NodeArgs{
//				Address: pulumi.String("192.168.10.10"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `consul_node` resource can be imported
//
// ```sh
//
//	$ pulumi import consul:index/node:Node example node-name
//
// ```
type Node struct {
	pulumi.CustomResourceState

	// The address of the node being added to, or referenced in the catalog.
	Address pulumi.StringOutput `pulumi:"address"`
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// Key/value pairs that are associated with the node.
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// The name of the node being added to, or referenced in the catalog.
	Name pulumi.StringOutput `pulumi:"name"`
	// The partition the node is associated with.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrOutput `pulumi:"token"`
}

// NewNode registers a new resource with the given unique name, arguments, and options.
func NewNode(ctx *pulumi.Context,
	name string, args *NodeArgs, opts ...pulumi.ResourceOption) (*Node, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Node
	err := ctx.RegisterResource("consul:index/node:Node", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNode gets an existing Node resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeState, opts ...pulumi.ResourceOption) (*Node, error) {
	var resource Node
	err := ctx.ReadResource("consul:index/node:Node", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Node resources.
type nodeState struct {
	// The address of the node being added to, or referenced in the catalog.
	Address *string `pulumi:"address"`
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Key/value pairs that are associated with the node.
	Meta map[string]string `pulumi:"meta"`
	// The name of the node being added to, or referenced in the catalog.
	Name *string `pulumi:"name"`
	// The partition the node is associated with.
	Partition *string `pulumi:"partition"`
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
}

type NodeState struct {
	// The address of the node being added to, or referenced in the catalog.
	Address pulumi.StringPtrInput
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Key/value pairs that are associated with the node.
	Meta pulumi.StringMapInput
	// The name of the node being added to, or referenced in the catalog.
	Name pulumi.StringPtrInput
	// The partition the node is associated with.
	Partition pulumi.StringPtrInput
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
}

func (NodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeState)(nil)).Elem()
}

type nodeArgs struct {
	// The address of the node being added to, or referenced in the catalog.
	Address string `pulumi:"address"`
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Key/value pairs that are associated with the node.
	Meta map[string]string `pulumi:"meta"`
	// The name of the node being added to, or referenced in the catalog.
	Name *string `pulumi:"name"`
	// The partition the node is associated with.
	Partition *string `pulumi:"partition"`
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a Node resource.
type NodeArgs struct {
	// The address of the node being added to, or referenced in the catalog.
	Address pulumi.StringInput
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Key/value pairs that are associated with the node.
	Meta pulumi.StringMapInput
	// The name of the node being added to, or referenced in the catalog.
	Name pulumi.StringPtrInput
	// The partition the node is associated with.
	Partition pulumi.StringPtrInput
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
}

func (NodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeArgs)(nil)).Elem()
}

type NodeInput interface {
	pulumi.Input

	ToNodeOutput() NodeOutput
	ToNodeOutputWithContext(ctx context.Context) NodeOutput
}

func (*Node) ElementType() reflect.Type {
	return reflect.TypeOf((**Node)(nil)).Elem()
}

func (i *Node) ToNodeOutput() NodeOutput {
	return i.ToNodeOutputWithContext(context.Background())
}

func (i *Node) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeOutput)
}

// NodeArrayInput is an input type that accepts NodeArray and NodeArrayOutput values.
// You can construct a concrete instance of `NodeArrayInput` via:
//
//	NodeArray{ NodeArgs{...} }
type NodeArrayInput interface {
	pulumi.Input

	ToNodeArrayOutput() NodeArrayOutput
	ToNodeArrayOutputWithContext(context.Context) NodeArrayOutput
}

type NodeArray []NodeInput

func (NodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Node)(nil)).Elem()
}

func (i NodeArray) ToNodeArrayOutput() NodeArrayOutput {
	return i.ToNodeArrayOutputWithContext(context.Background())
}

func (i NodeArray) ToNodeArrayOutputWithContext(ctx context.Context) NodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeArrayOutput)
}

// NodeMapInput is an input type that accepts NodeMap and NodeMapOutput values.
// You can construct a concrete instance of `NodeMapInput` via:
//
//	NodeMap{ "key": NodeArgs{...} }
type NodeMapInput interface {
	pulumi.Input

	ToNodeMapOutput() NodeMapOutput
	ToNodeMapOutputWithContext(context.Context) NodeMapOutput
}

type NodeMap map[string]NodeInput

func (NodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Node)(nil)).Elem()
}

func (i NodeMap) ToNodeMapOutput() NodeMapOutput {
	return i.ToNodeMapOutputWithContext(context.Background())
}

func (i NodeMap) ToNodeMapOutputWithContext(ctx context.Context) NodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeMapOutput)
}

type NodeOutput struct{ *pulumi.OutputState }

func (NodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Node)(nil)).Elem()
}

func (o NodeOutput) ToNodeOutput() NodeOutput {
	return o
}

func (o NodeOutput) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return o
}

// The address of the node being added to, or referenced in the catalog.
func (o NodeOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
func (o NodeOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Datacenter }).(pulumi.StringOutput)
}

// Key/value pairs that are associated with the node.
func (o NodeOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Node) pulumi.StringMapOutput { return v.Meta }).(pulumi.StringMapOutput)
}

// The name of the node being added to, or referenced in the catalog.
func (o NodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The partition the node is associated with.
func (o NodeOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// Deprecated: The token argument has been deprecated and will be removed in a future release.
// Please use the token argument in the provider configuration
func (o NodeOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

type NodeArrayOutput struct{ *pulumi.OutputState }

func (NodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Node)(nil)).Elem()
}

func (o NodeArrayOutput) ToNodeArrayOutput() NodeArrayOutput {
	return o
}

func (o NodeArrayOutput) ToNodeArrayOutputWithContext(ctx context.Context) NodeArrayOutput {
	return o
}

func (o NodeArrayOutput) Index(i pulumi.IntInput) NodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Node {
		return vs[0].([]*Node)[vs[1].(int)]
	}).(NodeOutput)
}

type NodeMapOutput struct{ *pulumi.OutputState }

func (NodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Node)(nil)).Elem()
}

func (o NodeMapOutput) ToNodeMapOutput() NodeMapOutput {
	return o
}

func (o NodeMapOutput) ToNodeMapOutputWithContext(ctx context.Context) NodeMapOutput {
	return o
}

func (o NodeMapOutput) MapIndex(k pulumi.StringInput) NodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Node {
		return vs[0].(map[string]*Node)[vs[1].(string)]
	}).(NodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeInput)(nil)).Elem(), &Node{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeArrayInput)(nil)).Elem(), NodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeMapInput)(nil)).Elem(), NodeMap{})
	pulumi.RegisterOutputType(NodeOutput{})
	pulumi.RegisterOutputType(NodeArrayOutput{})
	pulumi.RegisterOutputType(NodeMapOutput{})
}
