// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The `.AclToken` resource writes an ACL token into Consul.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/acl_token.html.markdown.
type AclToken struct {
	s *pulumi.ResourceState
}

// NewAclToken registers a new resource with the given unique name, arguments, and options.
func NewAclToken(ctx *pulumi.Context,
	name string, args *AclTokenArgs, opts ...pulumi.ResourceOpt) (*AclToken, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessorId"] = nil
		inputs["description"] = nil
		inputs["local"] = nil
		inputs["policies"] = nil
	} else {
		inputs["accessorId"] = args.AccessorId
		inputs["description"] = args.Description
		inputs["local"] = args.Local
		inputs["policies"] = args.Policies
	}
	s, err := ctx.RegisterResource("consul:index/aclToken:AclToken", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclToken{s: s}, nil
}

// GetAclToken gets an existing AclToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclToken(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AclTokenState, opts ...pulumi.ResourceOpt) (*AclToken, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessorId"] = state.AccessorId
		inputs["description"] = state.Description
		inputs["local"] = state.Local
		inputs["policies"] = state.Policies
	}
	s, err := ctx.ReadResource("consul:index/aclToken:AclToken", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclToken{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AclToken) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AclToken) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The uuid of the token. If omitted, Consul will
// generate a random uuid.
func (r *AclToken) AccessorId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessorId"])
}

// The description of the token.
func (r *AclToken) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The flag to set the token local to the current datacenter.
func (r *AclToken) Local() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["local"])
}

// The list of policies attached to the token.
func (r *AclToken) Policies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["policies"])
}

// Input properties used for looking up and filtering AclToken resources.
type AclTokenState struct {
	// The uuid of the token. If omitted, Consul will
	// generate a random uuid.
	AccessorId interface{}
	// The description of the token.
	Description interface{}
	// The flag to set the token local to the current datacenter.
	Local interface{}
	// The list of policies attached to the token.
	Policies interface{}
}

// The set of arguments for constructing a AclToken resource.
type AclTokenArgs struct {
	// The uuid of the token. If omitted, Consul will
	// generate a random uuid.
	AccessorId interface{}
	// The description of the token.
	Description interface{}
	// The flag to set the token local to the current datacenter.
	Local interface{}
	// The list of policies attached to the token.
	Policies interface{}
}
