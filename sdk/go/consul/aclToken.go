// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package consul

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The `.AclToken` resource writes an ACL token into Consul.
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/acl_token.html.markdown.
type AclToken struct {
	pulumi.CustomResourceState

	// The uuid of the token. If omitted, Consul will
	// generate a random uuid.
	AccessorId pulumi.StringOutput `pulumi:"accessorId"`
	// The description of the token.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The flag to set the token local to the current datacenter.
	Local pulumi.BoolPtrOutput `pulumi:"local"`
	// The list of policies attached to the token.
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
}

// NewAclToken registers a new resource with the given unique name, arguments, and options.
func NewAclToken(ctx *pulumi.Context,
	name string, args *AclTokenArgs, opts ...pulumi.ResourceOption) (*AclToken, error) {
	if args == nil {
		args = &AclTokenArgs{}
	}
	var resource AclToken
	err := ctx.RegisterResource("consul:index/aclToken:AclToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclToken gets an existing AclToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclTokenState, opts ...pulumi.ResourceOption) (*AclToken, error) {
	var resource AclToken
	err := ctx.ReadResource("consul:index/aclToken:AclToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclToken resources.
type aclTokenState struct {
	// The uuid of the token. If omitted, Consul will
	// generate a random uuid.
	AccessorId *string `pulumi:"accessorId"`
	// The description of the token.
	Description *string `pulumi:"description"`
	// The flag to set the token local to the current datacenter.
	Local *bool `pulumi:"local"`
	// The list of policies attached to the token.
	Policies []string `pulumi:"policies"`
}

type AclTokenState struct {
	// The uuid of the token. If omitted, Consul will
	// generate a random uuid.
	AccessorId pulumi.StringPtrInput
	// The description of the token.
	Description pulumi.StringPtrInput
	// The flag to set the token local to the current datacenter.
	Local pulumi.BoolPtrInput
	// The list of policies attached to the token.
	Policies pulumi.StringArrayInput
}

func (AclTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclTokenState)(nil)).Elem()
}

type aclTokenArgs struct {
	// The uuid of the token. If omitted, Consul will
	// generate a random uuid.
	AccessorId *string `pulumi:"accessorId"`
	// The description of the token.
	Description *string `pulumi:"description"`
	// The flag to set the token local to the current datacenter.
	Local *bool `pulumi:"local"`
	// The list of policies attached to the token.
	Policies []string `pulumi:"policies"`
}

// The set of arguments for constructing a AclToken resource.
type AclTokenArgs struct {
	// The uuid of the token. If omitted, Consul will
	// generate a random uuid.
	AccessorId pulumi.StringPtrInput
	// The description of the token.
	Description pulumi.StringPtrInput
	// The flag to set the token local to the current datacenter.
	Local pulumi.BoolPtrInput
	// The list of policies attached to the token.
	Policies pulumi.StringArrayInput
}

func (AclTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclTokenArgs)(nil)).Elem()
}

