// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AclRoleServiceIdentity struct {
	// The datacenters the effective policy is valid within.
	Datacenters []string `pulumi:"datacenters"`
	// The name of the service.
	ServiceName string `pulumi:"serviceName"`
}

// AclRoleServiceIdentityInput is an input type that accepts AclRoleServiceIdentityArgs and AclRoleServiceIdentityOutput values.
// You can construct a concrete instance of `AclRoleServiceIdentityInput` via:
//
// 		 AclRoleServiceIdentityArgs{...}
//
type AclRoleServiceIdentityInput interface {
	pulumi.Input

	ToAclRoleServiceIdentityOutput() AclRoleServiceIdentityOutput
	ToAclRoleServiceIdentityOutputWithContext(context.Context) AclRoleServiceIdentityOutput
}

type AclRoleServiceIdentityArgs struct {
	// The datacenters the effective policy is valid within.
	Datacenters pulumi.StringArrayInput `pulumi:"datacenters"`
	// The name of the service.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (AclRoleServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclRoleServiceIdentity)(nil)).Elem()
}

func (i AclRoleServiceIdentityArgs) ToAclRoleServiceIdentityOutput() AclRoleServiceIdentityOutput {
	return i.ToAclRoleServiceIdentityOutputWithContext(context.Background())
}

func (i AclRoleServiceIdentityArgs) ToAclRoleServiceIdentityOutputWithContext(ctx context.Context) AclRoleServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRoleServiceIdentityOutput)
}

// AclRoleServiceIdentityArrayInput is an input type that accepts AclRoleServiceIdentityArray and AclRoleServiceIdentityArrayOutput values.
// You can construct a concrete instance of `AclRoleServiceIdentityArrayInput` via:
//
// 		 AclRoleServiceIdentityArray{ AclRoleServiceIdentityArgs{...} }
//
type AclRoleServiceIdentityArrayInput interface {
	pulumi.Input

	ToAclRoleServiceIdentityArrayOutput() AclRoleServiceIdentityArrayOutput
	ToAclRoleServiceIdentityArrayOutputWithContext(context.Context) AclRoleServiceIdentityArrayOutput
}

type AclRoleServiceIdentityArray []AclRoleServiceIdentityInput

func (AclRoleServiceIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclRoleServiceIdentity)(nil)).Elem()
}

func (i AclRoleServiceIdentityArray) ToAclRoleServiceIdentityArrayOutput() AclRoleServiceIdentityArrayOutput {
	return i.ToAclRoleServiceIdentityArrayOutputWithContext(context.Background())
}

func (i AclRoleServiceIdentityArray) ToAclRoleServiceIdentityArrayOutputWithContext(ctx context.Context) AclRoleServiceIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRoleServiceIdentityArrayOutput)
}

type AclRoleServiceIdentityOutput struct{ *pulumi.OutputState }

func (AclRoleServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclRoleServiceIdentity)(nil)).Elem()
}

func (o AclRoleServiceIdentityOutput) ToAclRoleServiceIdentityOutput() AclRoleServiceIdentityOutput {
	return o
}

func (o AclRoleServiceIdentityOutput) ToAclRoleServiceIdentityOutputWithContext(ctx context.Context) AclRoleServiceIdentityOutput {
	return o
}

// The datacenters the effective policy is valid within.
func (o AclRoleServiceIdentityOutput) Datacenters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclRoleServiceIdentity) []string { return v.Datacenters }).(pulumi.StringArrayOutput)
}

// The name of the service.
func (o AclRoleServiceIdentityOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v AclRoleServiceIdentity) string { return v.ServiceName }).(pulumi.StringOutput)
}

type AclRoleServiceIdentityArrayOutput struct{ *pulumi.OutputState }

func (AclRoleServiceIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclRoleServiceIdentity)(nil)).Elem()
}

func (o AclRoleServiceIdentityArrayOutput) ToAclRoleServiceIdentityArrayOutput() AclRoleServiceIdentityArrayOutput {
	return o
}

func (o AclRoleServiceIdentityArrayOutput) ToAclRoleServiceIdentityArrayOutputWithContext(ctx context.Context) AclRoleServiceIdentityArrayOutput {
	return o
}

func (o AclRoleServiceIdentityArrayOutput) Index(i pulumi.IntInput) AclRoleServiceIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclRoleServiceIdentity {
		return vs[0].([]AclRoleServiceIdentity)[vs[1].(int)]
	}).(AclRoleServiceIdentityOutput)
}

type CatalogEntryService struct {
	// The address of the service. Defaults to the
	// node address.
	Address *string `pulumi:"address"`
	// The ID of the service. Defaults to the `name`.
	Id *string `pulumi:"id"`
	// The name of the service
	Name string `pulumi:"name"`
	// The port of the service.
	Port *int `pulumi:"port"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags []string `pulumi:"tags"`
}

// CatalogEntryServiceInput is an input type that accepts CatalogEntryServiceArgs and CatalogEntryServiceOutput values.
// You can construct a concrete instance of `CatalogEntryServiceInput` via:
//
// 		 CatalogEntryServiceArgs{...}
//
type CatalogEntryServiceInput interface {
	pulumi.Input

	ToCatalogEntryServiceOutput() CatalogEntryServiceOutput
	ToCatalogEntryServiceOutputWithContext(context.Context) CatalogEntryServiceOutput
}

type CatalogEntryServiceArgs struct {
	// The address of the service. Defaults to the
	// node address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the service. Defaults to the `name`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the service
	Name pulumi.StringInput `pulumi:"name"`
	// The port of the service.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (CatalogEntryServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogEntryService)(nil)).Elem()
}

func (i CatalogEntryServiceArgs) ToCatalogEntryServiceOutput() CatalogEntryServiceOutput {
	return i.ToCatalogEntryServiceOutputWithContext(context.Background())
}

func (i CatalogEntryServiceArgs) ToCatalogEntryServiceOutputWithContext(ctx context.Context) CatalogEntryServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogEntryServiceOutput)
}

// CatalogEntryServiceArrayInput is an input type that accepts CatalogEntryServiceArray and CatalogEntryServiceArrayOutput values.
// You can construct a concrete instance of `CatalogEntryServiceArrayInput` via:
//
// 		 CatalogEntryServiceArray{ CatalogEntryServiceArgs{...} }
//
type CatalogEntryServiceArrayInput interface {
	pulumi.Input

	ToCatalogEntryServiceArrayOutput() CatalogEntryServiceArrayOutput
	ToCatalogEntryServiceArrayOutputWithContext(context.Context) CatalogEntryServiceArrayOutput
}

type CatalogEntryServiceArray []CatalogEntryServiceInput

func (CatalogEntryServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogEntryService)(nil)).Elem()
}

func (i CatalogEntryServiceArray) ToCatalogEntryServiceArrayOutput() CatalogEntryServiceArrayOutput {
	return i.ToCatalogEntryServiceArrayOutputWithContext(context.Background())
}

func (i CatalogEntryServiceArray) ToCatalogEntryServiceArrayOutputWithContext(ctx context.Context) CatalogEntryServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogEntryServiceArrayOutput)
}

type CatalogEntryServiceOutput struct{ *pulumi.OutputState }

func (CatalogEntryServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogEntryService)(nil)).Elem()
}

func (o CatalogEntryServiceOutput) ToCatalogEntryServiceOutput() CatalogEntryServiceOutput {
	return o
}

func (o CatalogEntryServiceOutput) ToCatalogEntryServiceOutputWithContext(ctx context.Context) CatalogEntryServiceOutput {
	return o
}

// The address of the service. Defaults to the
// node address.
func (o CatalogEntryServiceOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogEntryService) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the service. Defaults to the `name`.
func (o CatalogEntryServiceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogEntryService) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the service
func (o CatalogEntryServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogEntryService) string { return v.Name }).(pulumi.StringOutput)
}

// The port of the service.
func (o CatalogEntryServiceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CatalogEntryService) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A list of values that are opaque to Consul,
// but can be used to distinguish between services or nodes.
func (o CatalogEntryServiceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CatalogEntryService) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type CatalogEntryServiceArrayOutput struct{ *pulumi.OutputState }

func (CatalogEntryServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogEntryService)(nil)).Elem()
}

func (o CatalogEntryServiceArrayOutput) ToCatalogEntryServiceArrayOutput() CatalogEntryServiceArrayOutput {
	return o
}

func (o CatalogEntryServiceArrayOutput) ToCatalogEntryServiceArrayOutputWithContext(ctx context.Context) CatalogEntryServiceArrayOutput {
	return o
}

func (o CatalogEntryServiceArrayOutput) Index(i pulumi.IntInput) CatalogEntryServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CatalogEntryService {
		return vs[0].([]CatalogEntryService)[vs[1].(int)]
	}).(CatalogEntryServiceOutput)
}

type KeyPrefixSubkeyCollection struct {
	// An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
	// to attach to the key (defaults to 0).
	Flags *int `pulumi:"flags"`
	// This is the path (which will be appended to the given
	// `pathPrefix`) in Consul that should be written to.
	Path string `pulumi:"path"`
	// The value to write to the given path.
	Value string `pulumi:"value"`
}

// KeyPrefixSubkeyCollectionInput is an input type that accepts KeyPrefixSubkeyCollectionArgs and KeyPrefixSubkeyCollectionOutput values.
// You can construct a concrete instance of `KeyPrefixSubkeyCollectionInput` via:
//
// 		 KeyPrefixSubkeyCollectionArgs{...}
//
type KeyPrefixSubkeyCollectionInput interface {
	pulumi.Input

	ToKeyPrefixSubkeyCollectionOutput() KeyPrefixSubkeyCollectionOutput
	ToKeyPrefixSubkeyCollectionOutputWithContext(context.Context) KeyPrefixSubkeyCollectionOutput
}

type KeyPrefixSubkeyCollectionArgs struct {
	// An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
	// to attach to the key (defaults to 0).
	Flags pulumi.IntPtrInput `pulumi:"flags"`
	// This is the path (which will be appended to the given
	// `pathPrefix`) in Consul that should be written to.
	Path pulumi.StringInput `pulumi:"path"`
	// The value to write to the given path.
	Value pulumi.StringInput `pulumi:"value"`
}

func (KeyPrefixSubkeyCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPrefixSubkeyCollection)(nil)).Elem()
}

func (i KeyPrefixSubkeyCollectionArgs) ToKeyPrefixSubkeyCollectionOutput() KeyPrefixSubkeyCollectionOutput {
	return i.ToKeyPrefixSubkeyCollectionOutputWithContext(context.Background())
}

func (i KeyPrefixSubkeyCollectionArgs) ToKeyPrefixSubkeyCollectionOutputWithContext(ctx context.Context) KeyPrefixSubkeyCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPrefixSubkeyCollectionOutput)
}

// KeyPrefixSubkeyCollectionArrayInput is an input type that accepts KeyPrefixSubkeyCollectionArray and KeyPrefixSubkeyCollectionArrayOutput values.
// You can construct a concrete instance of `KeyPrefixSubkeyCollectionArrayInput` via:
//
// 		 KeyPrefixSubkeyCollectionArray{ KeyPrefixSubkeyCollectionArgs{...} }
//
type KeyPrefixSubkeyCollectionArrayInput interface {
	pulumi.Input

	ToKeyPrefixSubkeyCollectionArrayOutput() KeyPrefixSubkeyCollectionArrayOutput
	ToKeyPrefixSubkeyCollectionArrayOutputWithContext(context.Context) KeyPrefixSubkeyCollectionArrayOutput
}

type KeyPrefixSubkeyCollectionArray []KeyPrefixSubkeyCollectionInput

func (KeyPrefixSubkeyCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyPrefixSubkeyCollection)(nil)).Elem()
}

func (i KeyPrefixSubkeyCollectionArray) ToKeyPrefixSubkeyCollectionArrayOutput() KeyPrefixSubkeyCollectionArrayOutput {
	return i.ToKeyPrefixSubkeyCollectionArrayOutputWithContext(context.Background())
}

func (i KeyPrefixSubkeyCollectionArray) ToKeyPrefixSubkeyCollectionArrayOutputWithContext(ctx context.Context) KeyPrefixSubkeyCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPrefixSubkeyCollectionArrayOutput)
}

type KeyPrefixSubkeyCollectionOutput struct{ *pulumi.OutputState }

func (KeyPrefixSubkeyCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPrefixSubkeyCollection)(nil)).Elem()
}

func (o KeyPrefixSubkeyCollectionOutput) ToKeyPrefixSubkeyCollectionOutput() KeyPrefixSubkeyCollectionOutput {
	return o
}

func (o KeyPrefixSubkeyCollectionOutput) ToKeyPrefixSubkeyCollectionOutputWithContext(ctx context.Context) KeyPrefixSubkeyCollectionOutput {
	return o
}

// An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
// to attach to the key (defaults to 0).
func (o KeyPrefixSubkeyCollectionOutput) Flags() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KeyPrefixSubkeyCollection) *int { return v.Flags }).(pulumi.IntPtrOutput)
}

// This is the path (which will be appended to the given
// `pathPrefix`) in Consul that should be written to.
func (o KeyPrefixSubkeyCollectionOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPrefixSubkeyCollection) string { return v.Path }).(pulumi.StringOutput)
}

// The value to write to the given path.
func (o KeyPrefixSubkeyCollectionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPrefixSubkeyCollection) string { return v.Value }).(pulumi.StringOutput)
}

type KeyPrefixSubkeyCollectionArrayOutput struct{ *pulumi.OutputState }

func (KeyPrefixSubkeyCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyPrefixSubkeyCollection)(nil)).Elem()
}

func (o KeyPrefixSubkeyCollectionArrayOutput) ToKeyPrefixSubkeyCollectionArrayOutput() KeyPrefixSubkeyCollectionArrayOutput {
	return o
}

func (o KeyPrefixSubkeyCollectionArrayOutput) ToKeyPrefixSubkeyCollectionArrayOutputWithContext(ctx context.Context) KeyPrefixSubkeyCollectionArrayOutput {
	return o
}

func (o KeyPrefixSubkeyCollectionArrayOutput) Index(i pulumi.IntInput) KeyPrefixSubkeyCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyPrefixSubkeyCollection {
		return vs[0].([]KeyPrefixSubkeyCollection)[vs[1].(int)]
	}).(KeyPrefixSubkeyCollectionOutput)
}

type KeysKey struct {
	Default *string `pulumi:"default"`
	// If true, then the key will be deleted when
	// either its configuration block is removed from the configuration or
	// the entire resource is destroyed. Otherwise, it will be left in Consul.
	// Defaults to false.
	Delete *bool `pulumi:"delete"`
	// An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
	// to attach to the key (defaults to 0).
	Flags *int    `pulumi:"flags"`
	Name  *string `pulumi:"name"`
	// This is the path in Consul that should be written to.
	Path string `pulumi:"path"`
	// The value to write to the given path.
	Value *string `pulumi:"value"`
}

// KeysKeyInput is an input type that accepts KeysKeyArgs and KeysKeyOutput values.
// You can construct a concrete instance of `KeysKeyInput` via:
//
// 		 KeysKeyArgs{...}
//
type KeysKeyInput interface {
	pulumi.Input

	ToKeysKeyOutput() KeysKeyOutput
	ToKeysKeyOutputWithContext(context.Context) KeysKeyOutput
}

type KeysKeyArgs struct {
	Default pulumi.StringPtrInput `pulumi:"default"`
	// If true, then the key will be deleted when
	// either its configuration block is removed from the configuration or
	// the entire resource is destroyed. Otherwise, it will be left in Consul.
	// Defaults to false.
	Delete pulumi.BoolPtrInput `pulumi:"delete"`
	// An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
	// to attach to the key (defaults to 0).
	Flags pulumi.IntPtrInput    `pulumi:"flags"`
	Name  pulumi.StringPtrInput `pulumi:"name"`
	// This is the path in Consul that should be written to.
	Path pulumi.StringInput `pulumi:"path"`
	// The value to write to the given path.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (KeysKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKey)(nil)).Elem()
}

func (i KeysKeyArgs) ToKeysKeyOutput() KeysKeyOutput {
	return i.ToKeysKeyOutputWithContext(context.Background())
}

func (i KeysKeyArgs) ToKeysKeyOutputWithContext(ctx context.Context) KeysKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyOutput)
}

// KeysKeyArrayInput is an input type that accepts KeysKeyArray and KeysKeyArrayOutput values.
// You can construct a concrete instance of `KeysKeyArrayInput` via:
//
// 		 KeysKeyArray{ KeysKeyArgs{...} }
//
type KeysKeyArrayInput interface {
	pulumi.Input

	ToKeysKeyArrayOutput() KeysKeyArrayOutput
	ToKeysKeyArrayOutputWithContext(context.Context) KeysKeyArrayOutput
}

type KeysKeyArray []KeysKeyInput

func (KeysKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKey)(nil)).Elem()
}

func (i KeysKeyArray) ToKeysKeyArrayOutput() KeysKeyArrayOutput {
	return i.ToKeysKeyArrayOutputWithContext(context.Background())
}

func (i KeysKeyArray) ToKeysKeyArrayOutputWithContext(ctx context.Context) KeysKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyArrayOutput)
}

type KeysKeyOutput struct{ *pulumi.OutputState }

func (KeysKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKey)(nil)).Elem()
}

func (o KeysKeyOutput) ToKeysKeyOutput() KeysKeyOutput {
	return o
}

func (o KeysKeyOutput) ToKeysKeyOutputWithContext(ctx context.Context) KeysKeyOutput {
	return o
}

func (o KeysKeyOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeysKey) *string { return v.Default }).(pulumi.StringPtrOutput)
}

// If true, then the key will be deleted when
// either its configuration block is removed from the configuration or
// the entire resource is destroyed. Otherwise, it will be left in Consul.
// Defaults to false.
func (o KeysKeyOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeysKey) *bool { return v.Delete }).(pulumi.BoolPtrOutput)
}

// An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
// to attach to the key (defaults to 0).
func (o KeysKeyOutput) Flags() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KeysKey) *int { return v.Flags }).(pulumi.IntPtrOutput)
}

func (o KeysKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeysKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This is the path in Consul that should be written to.
func (o KeysKeyOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.Path }).(pulumi.StringOutput)
}

// The value to write to the given path.
func (o KeysKeyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeysKey) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type KeysKeyArrayOutput struct{ *pulumi.OutputState }

func (KeysKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKey)(nil)).Elem()
}

func (o KeysKeyArrayOutput) ToKeysKeyArrayOutput() KeysKeyArrayOutput {
	return o
}

func (o KeysKeyArrayOutput) ToKeysKeyArrayOutputWithContext(ctx context.Context) KeysKeyArrayOutput {
	return o
}

func (o KeysKeyArrayOutput) Index(i pulumi.IntInput) KeysKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeysKey {
		return vs[0].([]KeysKey)[vs[1].(int)]
	}).(KeysKeyOutput)
}

type PreparedQueryDns struct {
	// The TTL to send when returning DNS results.
	Ttl *string `pulumi:"ttl"`
}

// PreparedQueryDnsInput is an input type that accepts PreparedQueryDnsArgs and PreparedQueryDnsOutput values.
// You can construct a concrete instance of `PreparedQueryDnsInput` via:
//
// 		 PreparedQueryDnsArgs{...}
//
type PreparedQueryDnsInput interface {
	pulumi.Input

	ToPreparedQueryDnsOutput() PreparedQueryDnsOutput
	ToPreparedQueryDnsOutputWithContext(context.Context) PreparedQueryDnsOutput
}

type PreparedQueryDnsArgs struct {
	// The TTL to send when returning DNS results.
	Ttl pulumi.StringPtrInput `pulumi:"ttl"`
}

func (PreparedQueryDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreparedQueryDns)(nil)).Elem()
}

func (i PreparedQueryDnsArgs) ToPreparedQueryDnsOutput() PreparedQueryDnsOutput {
	return i.ToPreparedQueryDnsOutputWithContext(context.Background())
}

func (i PreparedQueryDnsArgs) ToPreparedQueryDnsOutputWithContext(ctx context.Context) PreparedQueryDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryDnsOutput)
}

func (i PreparedQueryDnsArgs) ToPreparedQueryDnsPtrOutput() PreparedQueryDnsPtrOutput {
	return i.ToPreparedQueryDnsPtrOutputWithContext(context.Background())
}

func (i PreparedQueryDnsArgs) ToPreparedQueryDnsPtrOutputWithContext(ctx context.Context) PreparedQueryDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryDnsOutput).ToPreparedQueryDnsPtrOutputWithContext(ctx)
}

// PreparedQueryDnsPtrInput is an input type that accepts PreparedQueryDnsArgs, PreparedQueryDnsPtr and PreparedQueryDnsPtrOutput values.
// You can construct a concrete instance of `PreparedQueryDnsPtrInput` via:
//
// 		 PreparedQueryDnsArgs{...}
//
//  or:
//
// 		 nil
//
type PreparedQueryDnsPtrInput interface {
	pulumi.Input

	ToPreparedQueryDnsPtrOutput() PreparedQueryDnsPtrOutput
	ToPreparedQueryDnsPtrOutputWithContext(context.Context) PreparedQueryDnsPtrOutput
}

type preparedQueryDnsPtrType PreparedQueryDnsArgs

func PreparedQueryDnsPtr(v *PreparedQueryDnsArgs) PreparedQueryDnsPtrInput {
	return (*preparedQueryDnsPtrType)(v)
}

func (*preparedQueryDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQueryDns)(nil)).Elem()
}

func (i *preparedQueryDnsPtrType) ToPreparedQueryDnsPtrOutput() PreparedQueryDnsPtrOutput {
	return i.ToPreparedQueryDnsPtrOutputWithContext(context.Background())
}

func (i *preparedQueryDnsPtrType) ToPreparedQueryDnsPtrOutputWithContext(ctx context.Context) PreparedQueryDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryDnsPtrOutput)
}

type PreparedQueryDnsOutput struct{ *pulumi.OutputState }

func (PreparedQueryDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreparedQueryDns)(nil)).Elem()
}

func (o PreparedQueryDnsOutput) ToPreparedQueryDnsOutput() PreparedQueryDnsOutput {
	return o
}

func (o PreparedQueryDnsOutput) ToPreparedQueryDnsOutputWithContext(ctx context.Context) PreparedQueryDnsOutput {
	return o
}

func (o PreparedQueryDnsOutput) ToPreparedQueryDnsPtrOutput() PreparedQueryDnsPtrOutput {
	return o.ToPreparedQueryDnsPtrOutputWithContext(context.Background())
}

func (o PreparedQueryDnsOutput) ToPreparedQueryDnsPtrOutputWithContext(ctx context.Context) PreparedQueryDnsPtrOutput {
	return o.ApplyT(func(v PreparedQueryDns) *PreparedQueryDns {
		return &v
	}).(PreparedQueryDnsPtrOutput)
}

// The TTL to send when returning DNS results.
func (o PreparedQueryDnsOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PreparedQueryDns) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

type PreparedQueryDnsPtrOutput struct{ *pulumi.OutputState }

func (PreparedQueryDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQueryDns)(nil)).Elem()
}

func (o PreparedQueryDnsPtrOutput) ToPreparedQueryDnsPtrOutput() PreparedQueryDnsPtrOutput {
	return o
}

func (o PreparedQueryDnsPtrOutput) ToPreparedQueryDnsPtrOutputWithContext(ctx context.Context) PreparedQueryDnsPtrOutput {
	return o
}

func (o PreparedQueryDnsPtrOutput) Elem() PreparedQueryDnsOutput {
	return o.ApplyT(func(v *PreparedQueryDns) PreparedQueryDns { return *v }).(PreparedQueryDnsOutput)
}

// The TTL to send when returning DNS results.
func (o PreparedQueryDnsPtrOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PreparedQueryDns) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

type PreparedQueryFailover struct {
	// Remote datacenters to return results from.
	Datacenters []string `pulumi:"datacenters"`
	// Return results from this many datacenters,
	// sorted in ascending order of estimated RTT.
	NearestN *int `pulumi:"nearestN"`
}

// PreparedQueryFailoverInput is an input type that accepts PreparedQueryFailoverArgs and PreparedQueryFailoverOutput values.
// You can construct a concrete instance of `PreparedQueryFailoverInput` via:
//
// 		 PreparedQueryFailoverArgs{...}
//
type PreparedQueryFailoverInput interface {
	pulumi.Input

	ToPreparedQueryFailoverOutput() PreparedQueryFailoverOutput
	ToPreparedQueryFailoverOutputWithContext(context.Context) PreparedQueryFailoverOutput
}

type PreparedQueryFailoverArgs struct {
	// Remote datacenters to return results from.
	Datacenters pulumi.StringArrayInput `pulumi:"datacenters"`
	// Return results from this many datacenters,
	// sorted in ascending order of estimated RTT.
	NearestN pulumi.IntPtrInput `pulumi:"nearestN"`
}

func (PreparedQueryFailoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreparedQueryFailover)(nil)).Elem()
}

func (i PreparedQueryFailoverArgs) ToPreparedQueryFailoverOutput() PreparedQueryFailoverOutput {
	return i.ToPreparedQueryFailoverOutputWithContext(context.Background())
}

func (i PreparedQueryFailoverArgs) ToPreparedQueryFailoverOutputWithContext(ctx context.Context) PreparedQueryFailoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryFailoverOutput)
}

func (i PreparedQueryFailoverArgs) ToPreparedQueryFailoverPtrOutput() PreparedQueryFailoverPtrOutput {
	return i.ToPreparedQueryFailoverPtrOutputWithContext(context.Background())
}

func (i PreparedQueryFailoverArgs) ToPreparedQueryFailoverPtrOutputWithContext(ctx context.Context) PreparedQueryFailoverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryFailoverOutput).ToPreparedQueryFailoverPtrOutputWithContext(ctx)
}

// PreparedQueryFailoverPtrInput is an input type that accepts PreparedQueryFailoverArgs, PreparedQueryFailoverPtr and PreparedQueryFailoverPtrOutput values.
// You can construct a concrete instance of `PreparedQueryFailoverPtrInput` via:
//
// 		 PreparedQueryFailoverArgs{...}
//
//  or:
//
// 		 nil
//
type PreparedQueryFailoverPtrInput interface {
	pulumi.Input

	ToPreparedQueryFailoverPtrOutput() PreparedQueryFailoverPtrOutput
	ToPreparedQueryFailoverPtrOutputWithContext(context.Context) PreparedQueryFailoverPtrOutput
}

type preparedQueryFailoverPtrType PreparedQueryFailoverArgs

func PreparedQueryFailoverPtr(v *PreparedQueryFailoverArgs) PreparedQueryFailoverPtrInput {
	return (*preparedQueryFailoverPtrType)(v)
}

func (*preparedQueryFailoverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQueryFailover)(nil)).Elem()
}

func (i *preparedQueryFailoverPtrType) ToPreparedQueryFailoverPtrOutput() PreparedQueryFailoverPtrOutput {
	return i.ToPreparedQueryFailoverPtrOutputWithContext(context.Background())
}

func (i *preparedQueryFailoverPtrType) ToPreparedQueryFailoverPtrOutputWithContext(ctx context.Context) PreparedQueryFailoverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryFailoverPtrOutput)
}

type PreparedQueryFailoverOutput struct{ *pulumi.OutputState }

func (PreparedQueryFailoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreparedQueryFailover)(nil)).Elem()
}

func (o PreparedQueryFailoverOutput) ToPreparedQueryFailoverOutput() PreparedQueryFailoverOutput {
	return o
}

func (o PreparedQueryFailoverOutput) ToPreparedQueryFailoverOutputWithContext(ctx context.Context) PreparedQueryFailoverOutput {
	return o
}

func (o PreparedQueryFailoverOutput) ToPreparedQueryFailoverPtrOutput() PreparedQueryFailoverPtrOutput {
	return o.ToPreparedQueryFailoverPtrOutputWithContext(context.Background())
}

func (o PreparedQueryFailoverOutput) ToPreparedQueryFailoverPtrOutputWithContext(ctx context.Context) PreparedQueryFailoverPtrOutput {
	return o.ApplyT(func(v PreparedQueryFailover) *PreparedQueryFailover {
		return &v
	}).(PreparedQueryFailoverPtrOutput)
}

// Remote datacenters to return results from.
func (o PreparedQueryFailoverOutput) Datacenters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PreparedQueryFailover) []string { return v.Datacenters }).(pulumi.StringArrayOutput)
}

// Return results from this many datacenters,
// sorted in ascending order of estimated RTT.
func (o PreparedQueryFailoverOutput) NearestN() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PreparedQueryFailover) *int { return v.NearestN }).(pulumi.IntPtrOutput)
}

type PreparedQueryFailoverPtrOutput struct{ *pulumi.OutputState }

func (PreparedQueryFailoverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQueryFailover)(nil)).Elem()
}

func (o PreparedQueryFailoverPtrOutput) ToPreparedQueryFailoverPtrOutput() PreparedQueryFailoverPtrOutput {
	return o
}

func (o PreparedQueryFailoverPtrOutput) ToPreparedQueryFailoverPtrOutputWithContext(ctx context.Context) PreparedQueryFailoverPtrOutput {
	return o
}

func (o PreparedQueryFailoverPtrOutput) Elem() PreparedQueryFailoverOutput {
	return o.ApplyT(func(v *PreparedQueryFailover) PreparedQueryFailover { return *v }).(PreparedQueryFailoverOutput)
}

// Remote datacenters to return results from.
func (o PreparedQueryFailoverPtrOutput) Datacenters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PreparedQueryFailover) []string { return v.Datacenters }).(pulumi.StringArrayOutput)
}

// Return results from this many datacenters,
// sorted in ascending order of estimated RTT.
func (o PreparedQueryFailoverPtrOutput) NearestN() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PreparedQueryFailover) *int { return v.NearestN }).(pulumi.IntPtrOutput)
}

type PreparedQueryTemplate struct {
	// The regular expression to match with. When using
	// `namePrefixMatch`, this regex is applied against the query name.
	Regexp string `pulumi:"regexp"`
	// The type of template matching to perform. Currently
	// only `namePrefixMatch` is supported.
	Type string `pulumi:"type"`
}

// PreparedQueryTemplateInput is an input type that accepts PreparedQueryTemplateArgs and PreparedQueryTemplateOutput values.
// You can construct a concrete instance of `PreparedQueryTemplateInput` via:
//
// 		 PreparedQueryTemplateArgs{...}
//
type PreparedQueryTemplateInput interface {
	pulumi.Input

	ToPreparedQueryTemplateOutput() PreparedQueryTemplateOutput
	ToPreparedQueryTemplateOutputWithContext(context.Context) PreparedQueryTemplateOutput
}

type PreparedQueryTemplateArgs struct {
	// The regular expression to match with. When using
	// `namePrefixMatch`, this regex is applied against the query name.
	Regexp pulumi.StringInput `pulumi:"regexp"`
	// The type of template matching to perform. Currently
	// only `namePrefixMatch` is supported.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PreparedQueryTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreparedQueryTemplate)(nil)).Elem()
}

func (i PreparedQueryTemplateArgs) ToPreparedQueryTemplateOutput() PreparedQueryTemplateOutput {
	return i.ToPreparedQueryTemplateOutputWithContext(context.Background())
}

func (i PreparedQueryTemplateArgs) ToPreparedQueryTemplateOutputWithContext(ctx context.Context) PreparedQueryTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryTemplateOutput)
}

func (i PreparedQueryTemplateArgs) ToPreparedQueryTemplatePtrOutput() PreparedQueryTemplatePtrOutput {
	return i.ToPreparedQueryTemplatePtrOutputWithContext(context.Background())
}

func (i PreparedQueryTemplateArgs) ToPreparedQueryTemplatePtrOutputWithContext(ctx context.Context) PreparedQueryTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryTemplateOutput).ToPreparedQueryTemplatePtrOutputWithContext(ctx)
}

// PreparedQueryTemplatePtrInput is an input type that accepts PreparedQueryTemplateArgs, PreparedQueryTemplatePtr and PreparedQueryTemplatePtrOutput values.
// You can construct a concrete instance of `PreparedQueryTemplatePtrInput` via:
//
// 		 PreparedQueryTemplateArgs{...}
//
//  or:
//
// 		 nil
//
type PreparedQueryTemplatePtrInput interface {
	pulumi.Input

	ToPreparedQueryTemplatePtrOutput() PreparedQueryTemplatePtrOutput
	ToPreparedQueryTemplatePtrOutputWithContext(context.Context) PreparedQueryTemplatePtrOutput
}

type preparedQueryTemplatePtrType PreparedQueryTemplateArgs

func PreparedQueryTemplatePtr(v *PreparedQueryTemplateArgs) PreparedQueryTemplatePtrInput {
	return (*preparedQueryTemplatePtrType)(v)
}

func (*preparedQueryTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQueryTemplate)(nil)).Elem()
}

func (i *preparedQueryTemplatePtrType) ToPreparedQueryTemplatePtrOutput() PreparedQueryTemplatePtrOutput {
	return i.ToPreparedQueryTemplatePtrOutputWithContext(context.Background())
}

func (i *preparedQueryTemplatePtrType) ToPreparedQueryTemplatePtrOutputWithContext(ctx context.Context) PreparedQueryTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryTemplatePtrOutput)
}

type PreparedQueryTemplateOutput struct{ *pulumi.OutputState }

func (PreparedQueryTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreparedQueryTemplate)(nil)).Elem()
}

func (o PreparedQueryTemplateOutput) ToPreparedQueryTemplateOutput() PreparedQueryTemplateOutput {
	return o
}

func (o PreparedQueryTemplateOutput) ToPreparedQueryTemplateOutputWithContext(ctx context.Context) PreparedQueryTemplateOutput {
	return o
}

func (o PreparedQueryTemplateOutput) ToPreparedQueryTemplatePtrOutput() PreparedQueryTemplatePtrOutput {
	return o.ToPreparedQueryTemplatePtrOutputWithContext(context.Background())
}

func (o PreparedQueryTemplateOutput) ToPreparedQueryTemplatePtrOutputWithContext(ctx context.Context) PreparedQueryTemplatePtrOutput {
	return o.ApplyT(func(v PreparedQueryTemplate) *PreparedQueryTemplate {
		return &v
	}).(PreparedQueryTemplatePtrOutput)
}

// The regular expression to match with. When using
// `namePrefixMatch`, this regex is applied against the query name.
func (o PreparedQueryTemplateOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v PreparedQueryTemplate) string { return v.Regexp }).(pulumi.StringOutput)
}

// The type of template matching to perform. Currently
// only `namePrefixMatch` is supported.
func (o PreparedQueryTemplateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PreparedQueryTemplate) string { return v.Type }).(pulumi.StringOutput)
}

type PreparedQueryTemplatePtrOutput struct{ *pulumi.OutputState }

func (PreparedQueryTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQueryTemplate)(nil)).Elem()
}

func (o PreparedQueryTemplatePtrOutput) ToPreparedQueryTemplatePtrOutput() PreparedQueryTemplatePtrOutput {
	return o
}

func (o PreparedQueryTemplatePtrOutput) ToPreparedQueryTemplatePtrOutputWithContext(ctx context.Context) PreparedQueryTemplatePtrOutput {
	return o
}

func (o PreparedQueryTemplatePtrOutput) Elem() PreparedQueryTemplateOutput {
	return o.ApplyT(func(v *PreparedQueryTemplate) PreparedQueryTemplate { return *v }).(PreparedQueryTemplateOutput)
}

// The regular expression to match with. When using
// `namePrefixMatch`, this regex is applied against the query name.
func (o PreparedQueryTemplatePtrOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v PreparedQueryTemplate) string { return v.Regexp }).(pulumi.StringOutput)
}

// The type of template matching to perform. Currently
// only `namePrefixMatch` is supported.
func (o PreparedQueryTemplatePtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PreparedQueryTemplate) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceCheck struct {
	// An ID, *unique per agent*. Will default to *name*
	// if not set.
	CheckId string `pulumi:"checkId"`
	// The time after which
	// the service is automatically deregistered when in the `critical` state.
	// Defaults to `30s`.
	DeregisterCriticalServiceAfter *string `pulumi:"deregisterCriticalServiceAfter"`
	// The headers to send for an HTTP check.
	// The attributes of each header is given below.
	Headers []ServiceCheckHeader `pulumi:"headers"`
	// The HTTP endpoint to call for an HTTP check.
	Http *string `pulumi:"http"`
	// The interval to wait between each health-check
	// invocation.
	Interval string `pulumi:"interval"`
	// The method to use for HTTP health-checks. Defaults
	// to `GET`.
	Method *string `pulumi:"method"`
	// The name of the health-check.
	Name string `pulumi:"name"`
	// An opaque field meant to hold human readable text.
	Notes *string `pulumi:"notes"`
	// The initial health-check status.
	Status *string `pulumi:"status"`
	// The TCP address and port to connect to for a TCP check.
	Tcp *string `pulumi:"tcp"`
	// The timeout value for HTTP checks.
	Timeout string `pulumi:"timeout"`
	// Whether to deactivate certificate
	// verification for HTTP health-checks. Defaults to `false`.
	TlsSkipVerify *bool `pulumi:"tlsSkipVerify"`
}

// ServiceCheckInput is an input type that accepts ServiceCheckArgs and ServiceCheckOutput values.
// You can construct a concrete instance of `ServiceCheckInput` via:
//
// 		 ServiceCheckArgs{...}
//
type ServiceCheckInput interface {
	pulumi.Input

	ToServiceCheckOutput() ServiceCheckOutput
	ToServiceCheckOutputWithContext(context.Context) ServiceCheckOutput
}

type ServiceCheckArgs struct {
	// An ID, *unique per agent*. Will default to *name*
	// if not set.
	CheckId pulumi.StringInput `pulumi:"checkId"`
	// The time after which
	// the service is automatically deregistered when in the `critical` state.
	// Defaults to `30s`.
	DeregisterCriticalServiceAfter pulumi.StringPtrInput `pulumi:"deregisterCriticalServiceAfter"`
	// The headers to send for an HTTP check.
	// The attributes of each header is given below.
	Headers ServiceCheckHeaderArrayInput `pulumi:"headers"`
	// The HTTP endpoint to call for an HTTP check.
	Http pulumi.StringPtrInput `pulumi:"http"`
	// The interval to wait between each health-check
	// invocation.
	Interval pulumi.StringInput `pulumi:"interval"`
	// The method to use for HTTP health-checks. Defaults
	// to `GET`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The name of the health-check.
	Name pulumi.StringInput `pulumi:"name"`
	// An opaque field meant to hold human readable text.
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// The initial health-check status.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The TCP address and port to connect to for a TCP check.
	Tcp pulumi.StringPtrInput `pulumi:"tcp"`
	// The timeout value for HTTP checks.
	Timeout pulumi.StringInput `pulumi:"timeout"`
	// Whether to deactivate certificate
	// verification for HTTP health-checks. Defaults to `false`.
	TlsSkipVerify pulumi.BoolPtrInput `pulumi:"tlsSkipVerify"`
}

func (ServiceCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCheck)(nil)).Elem()
}

func (i ServiceCheckArgs) ToServiceCheckOutput() ServiceCheckOutput {
	return i.ToServiceCheckOutputWithContext(context.Background())
}

func (i ServiceCheckArgs) ToServiceCheckOutputWithContext(ctx context.Context) ServiceCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCheckOutput)
}

// ServiceCheckArrayInput is an input type that accepts ServiceCheckArray and ServiceCheckArrayOutput values.
// You can construct a concrete instance of `ServiceCheckArrayInput` via:
//
// 		 ServiceCheckArray{ ServiceCheckArgs{...} }
//
type ServiceCheckArrayInput interface {
	pulumi.Input

	ToServiceCheckArrayOutput() ServiceCheckArrayOutput
	ToServiceCheckArrayOutputWithContext(context.Context) ServiceCheckArrayOutput
}

type ServiceCheckArray []ServiceCheckInput

func (ServiceCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCheck)(nil)).Elem()
}

func (i ServiceCheckArray) ToServiceCheckArrayOutput() ServiceCheckArrayOutput {
	return i.ToServiceCheckArrayOutputWithContext(context.Background())
}

func (i ServiceCheckArray) ToServiceCheckArrayOutputWithContext(ctx context.Context) ServiceCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCheckArrayOutput)
}

type ServiceCheckOutput struct{ *pulumi.OutputState }

func (ServiceCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCheck)(nil)).Elem()
}

func (o ServiceCheckOutput) ToServiceCheckOutput() ServiceCheckOutput {
	return o
}

func (o ServiceCheckOutput) ToServiceCheckOutputWithContext(ctx context.Context) ServiceCheckOutput {
	return o
}

// An ID, *unique per agent*. Will default to *name*
// if not set.
func (o ServiceCheckOutput) CheckId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCheck) string { return v.CheckId }).(pulumi.StringOutput)
}

// The time after which
// the service is automatically deregistered when in the `critical` state.
// Defaults to `30s`.
func (o ServiceCheckOutput) DeregisterCriticalServiceAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCheck) *string { return v.DeregisterCriticalServiceAfter }).(pulumi.StringPtrOutput)
}

// The headers to send for an HTTP check.
// The attributes of each header is given below.
func (o ServiceCheckOutput) Headers() ServiceCheckHeaderArrayOutput {
	return o.ApplyT(func(v ServiceCheck) []ServiceCheckHeader { return v.Headers }).(ServiceCheckHeaderArrayOutput)
}

// The HTTP endpoint to call for an HTTP check.
func (o ServiceCheckOutput) Http() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCheck) *string { return v.Http }).(pulumi.StringPtrOutput)
}

// The interval to wait between each health-check
// invocation.
func (o ServiceCheckOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCheck) string { return v.Interval }).(pulumi.StringOutput)
}

// The method to use for HTTP health-checks. Defaults
// to `GET`.
func (o ServiceCheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The name of the health-check.
func (o ServiceCheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCheck) string { return v.Name }).(pulumi.StringOutput)
}

// An opaque field meant to hold human readable text.
func (o ServiceCheckOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCheck) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// The initial health-check status.
func (o ServiceCheckOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCheck) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The TCP address and port to connect to for a TCP check.
func (o ServiceCheckOutput) Tcp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCheck) *string { return v.Tcp }).(pulumi.StringPtrOutput)
}

// The timeout value for HTTP checks.
func (o ServiceCheckOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCheck) string { return v.Timeout }).(pulumi.StringOutput)
}

// Whether to deactivate certificate
// verification for HTTP health-checks. Defaults to `false`.
func (o ServiceCheckOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceCheck) *bool { return v.TlsSkipVerify }).(pulumi.BoolPtrOutput)
}

type ServiceCheckArrayOutput struct{ *pulumi.OutputState }

func (ServiceCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCheck)(nil)).Elem()
}

func (o ServiceCheckArrayOutput) ToServiceCheckArrayOutput() ServiceCheckArrayOutput {
	return o
}

func (o ServiceCheckArrayOutput) ToServiceCheckArrayOutputWithContext(ctx context.Context) ServiceCheckArrayOutput {
	return o
}

func (o ServiceCheckArrayOutput) Index(i pulumi.IntInput) ServiceCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCheck {
		return vs[0].([]ServiceCheck)[vs[1].(int)]
	}).(ServiceCheckOutput)
}

type ServiceCheckHeader struct {
	// The name of the header.
	Name string `pulumi:"name"`
	// The header's list of values.
	Values []string `pulumi:"values"`
}

// ServiceCheckHeaderInput is an input type that accepts ServiceCheckHeaderArgs and ServiceCheckHeaderOutput values.
// You can construct a concrete instance of `ServiceCheckHeaderInput` via:
//
// 		 ServiceCheckHeaderArgs{...}
//
type ServiceCheckHeaderInput interface {
	pulumi.Input

	ToServiceCheckHeaderOutput() ServiceCheckHeaderOutput
	ToServiceCheckHeaderOutputWithContext(context.Context) ServiceCheckHeaderOutput
}

type ServiceCheckHeaderArgs struct {
	// The name of the header.
	Name pulumi.StringInput `pulumi:"name"`
	// The header's list of values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ServiceCheckHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCheckHeader)(nil)).Elem()
}

func (i ServiceCheckHeaderArgs) ToServiceCheckHeaderOutput() ServiceCheckHeaderOutput {
	return i.ToServiceCheckHeaderOutputWithContext(context.Background())
}

func (i ServiceCheckHeaderArgs) ToServiceCheckHeaderOutputWithContext(ctx context.Context) ServiceCheckHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCheckHeaderOutput)
}

// ServiceCheckHeaderArrayInput is an input type that accepts ServiceCheckHeaderArray and ServiceCheckHeaderArrayOutput values.
// You can construct a concrete instance of `ServiceCheckHeaderArrayInput` via:
//
// 		 ServiceCheckHeaderArray{ ServiceCheckHeaderArgs{...} }
//
type ServiceCheckHeaderArrayInput interface {
	pulumi.Input

	ToServiceCheckHeaderArrayOutput() ServiceCheckHeaderArrayOutput
	ToServiceCheckHeaderArrayOutputWithContext(context.Context) ServiceCheckHeaderArrayOutput
}

type ServiceCheckHeaderArray []ServiceCheckHeaderInput

func (ServiceCheckHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCheckHeader)(nil)).Elem()
}

func (i ServiceCheckHeaderArray) ToServiceCheckHeaderArrayOutput() ServiceCheckHeaderArrayOutput {
	return i.ToServiceCheckHeaderArrayOutputWithContext(context.Background())
}

func (i ServiceCheckHeaderArray) ToServiceCheckHeaderArrayOutputWithContext(ctx context.Context) ServiceCheckHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCheckHeaderArrayOutput)
}

type ServiceCheckHeaderOutput struct{ *pulumi.OutputState }

func (ServiceCheckHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCheckHeader)(nil)).Elem()
}

func (o ServiceCheckHeaderOutput) ToServiceCheckHeaderOutput() ServiceCheckHeaderOutput {
	return o
}

func (o ServiceCheckHeaderOutput) ToServiceCheckHeaderOutputWithContext(ctx context.Context) ServiceCheckHeaderOutput {
	return o
}

// The name of the header.
func (o ServiceCheckHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCheckHeader) string { return v.Name }).(pulumi.StringOutput)
}

// The header's list of values.
func (o ServiceCheckHeaderOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceCheckHeader) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ServiceCheckHeaderArrayOutput struct{ *pulumi.OutputState }

func (ServiceCheckHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCheckHeader)(nil)).Elem()
}

func (o ServiceCheckHeaderArrayOutput) ToServiceCheckHeaderArrayOutput() ServiceCheckHeaderArrayOutput {
	return o
}

func (o ServiceCheckHeaderArrayOutput) ToServiceCheckHeaderArrayOutputWithContext(ctx context.Context) ServiceCheckHeaderArrayOutput {
	return o
}

func (o ServiceCheckHeaderArrayOutput) Index(i pulumi.IntInput) ServiceCheckHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCheckHeader {
		return vs[0].([]ServiceCheckHeader)[vs[1].(int)]
	}).(ServiceCheckHeaderOutput)
}

type GetAclRolePolicy struct {
	Id string `pulumi:"id"`
	// The name of the ACL Role.
	Name string `pulumi:"name"`
}

// GetAclRolePolicyInput is an input type that accepts GetAclRolePolicyArgs and GetAclRolePolicyOutput values.
// You can construct a concrete instance of `GetAclRolePolicyInput` via:
//
// 		 GetAclRolePolicyArgs{...}
//
type GetAclRolePolicyInput interface {
	pulumi.Input

	ToGetAclRolePolicyOutput() GetAclRolePolicyOutput
	ToGetAclRolePolicyOutputWithContext(context.Context) GetAclRolePolicyOutput
}

type GetAclRolePolicyArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the ACL Role.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAclRolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRolePolicy)(nil)).Elem()
}

func (i GetAclRolePolicyArgs) ToGetAclRolePolicyOutput() GetAclRolePolicyOutput {
	return i.ToGetAclRolePolicyOutputWithContext(context.Background())
}

func (i GetAclRolePolicyArgs) ToGetAclRolePolicyOutputWithContext(ctx context.Context) GetAclRolePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRolePolicyOutput)
}

// GetAclRolePolicyArrayInput is an input type that accepts GetAclRolePolicyArray and GetAclRolePolicyArrayOutput values.
// You can construct a concrete instance of `GetAclRolePolicyArrayInput` via:
//
// 		 GetAclRolePolicyArray{ GetAclRolePolicyArgs{...} }
//
type GetAclRolePolicyArrayInput interface {
	pulumi.Input

	ToGetAclRolePolicyArrayOutput() GetAclRolePolicyArrayOutput
	ToGetAclRolePolicyArrayOutputWithContext(context.Context) GetAclRolePolicyArrayOutput
}

type GetAclRolePolicyArray []GetAclRolePolicyInput

func (GetAclRolePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRolePolicy)(nil)).Elem()
}

func (i GetAclRolePolicyArray) ToGetAclRolePolicyArrayOutput() GetAclRolePolicyArrayOutput {
	return i.ToGetAclRolePolicyArrayOutputWithContext(context.Background())
}

func (i GetAclRolePolicyArray) ToGetAclRolePolicyArrayOutputWithContext(ctx context.Context) GetAclRolePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRolePolicyArrayOutput)
}

type GetAclRolePolicyOutput struct{ *pulumi.OutputState }

func (GetAclRolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRolePolicy)(nil)).Elem()
}

func (o GetAclRolePolicyOutput) ToGetAclRolePolicyOutput() GetAclRolePolicyOutput {
	return o
}

func (o GetAclRolePolicyOutput) ToGetAclRolePolicyOutputWithContext(ctx context.Context) GetAclRolePolicyOutput {
	return o
}

func (o GetAclRolePolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclRolePolicy) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the ACL Role.
func (o GetAclRolePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclRolePolicy) string { return v.Name }).(pulumi.StringOutput)
}

type GetAclRolePolicyArrayOutput struct{ *pulumi.OutputState }

func (GetAclRolePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRolePolicy)(nil)).Elem()
}

func (o GetAclRolePolicyArrayOutput) ToGetAclRolePolicyArrayOutput() GetAclRolePolicyArrayOutput {
	return o
}

func (o GetAclRolePolicyArrayOutput) ToGetAclRolePolicyArrayOutputWithContext(ctx context.Context) GetAclRolePolicyArrayOutput {
	return o
}

func (o GetAclRolePolicyArrayOutput) Index(i pulumi.IntInput) GetAclRolePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclRolePolicy {
		return vs[0].([]GetAclRolePolicy)[vs[1].(int)]
	}).(GetAclRolePolicyOutput)
}

type GetAclRoleServiceIdentity struct {
	Datacenters []string `pulumi:"datacenters"`
	ServiceName *string  `pulumi:"serviceName"`
}

// GetAclRoleServiceIdentityInput is an input type that accepts GetAclRoleServiceIdentityArgs and GetAclRoleServiceIdentityOutput values.
// You can construct a concrete instance of `GetAclRoleServiceIdentityInput` via:
//
// 		 GetAclRoleServiceIdentityArgs{...}
//
type GetAclRoleServiceIdentityInput interface {
	pulumi.Input

	ToGetAclRoleServiceIdentityOutput() GetAclRoleServiceIdentityOutput
	ToGetAclRoleServiceIdentityOutputWithContext(context.Context) GetAclRoleServiceIdentityOutput
}

type GetAclRoleServiceIdentityArgs struct {
	Datacenters pulumi.StringArrayInput `pulumi:"datacenters"`
	ServiceName pulumi.StringPtrInput   `pulumi:"serviceName"`
}

func (GetAclRoleServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRoleServiceIdentity)(nil)).Elem()
}

func (i GetAclRoleServiceIdentityArgs) ToGetAclRoleServiceIdentityOutput() GetAclRoleServiceIdentityOutput {
	return i.ToGetAclRoleServiceIdentityOutputWithContext(context.Background())
}

func (i GetAclRoleServiceIdentityArgs) ToGetAclRoleServiceIdentityOutputWithContext(ctx context.Context) GetAclRoleServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRoleServiceIdentityOutput)
}

// GetAclRoleServiceIdentityArrayInput is an input type that accepts GetAclRoleServiceIdentityArray and GetAclRoleServiceIdentityArrayOutput values.
// You can construct a concrete instance of `GetAclRoleServiceIdentityArrayInput` via:
//
// 		 GetAclRoleServiceIdentityArray{ GetAclRoleServiceIdentityArgs{...} }
//
type GetAclRoleServiceIdentityArrayInput interface {
	pulumi.Input

	ToGetAclRoleServiceIdentityArrayOutput() GetAclRoleServiceIdentityArrayOutput
	ToGetAclRoleServiceIdentityArrayOutputWithContext(context.Context) GetAclRoleServiceIdentityArrayOutput
}

type GetAclRoleServiceIdentityArray []GetAclRoleServiceIdentityInput

func (GetAclRoleServiceIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRoleServiceIdentity)(nil)).Elem()
}

func (i GetAclRoleServiceIdentityArray) ToGetAclRoleServiceIdentityArrayOutput() GetAclRoleServiceIdentityArrayOutput {
	return i.ToGetAclRoleServiceIdentityArrayOutputWithContext(context.Background())
}

func (i GetAclRoleServiceIdentityArray) ToGetAclRoleServiceIdentityArrayOutputWithContext(ctx context.Context) GetAclRoleServiceIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRoleServiceIdentityArrayOutput)
}

type GetAclRoleServiceIdentityOutput struct{ *pulumi.OutputState }

func (GetAclRoleServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRoleServiceIdentity)(nil)).Elem()
}

func (o GetAclRoleServiceIdentityOutput) ToGetAclRoleServiceIdentityOutput() GetAclRoleServiceIdentityOutput {
	return o
}

func (o GetAclRoleServiceIdentityOutput) ToGetAclRoleServiceIdentityOutputWithContext(ctx context.Context) GetAclRoleServiceIdentityOutput {
	return o
}

func (o GetAclRoleServiceIdentityOutput) Datacenters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAclRoleServiceIdentity) []string { return v.Datacenters }).(pulumi.StringArrayOutput)
}

func (o GetAclRoleServiceIdentityOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAclRoleServiceIdentity) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type GetAclRoleServiceIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetAclRoleServiceIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRoleServiceIdentity)(nil)).Elem()
}

func (o GetAclRoleServiceIdentityArrayOutput) ToGetAclRoleServiceIdentityArrayOutput() GetAclRoleServiceIdentityArrayOutput {
	return o
}

func (o GetAclRoleServiceIdentityArrayOutput) ToGetAclRoleServiceIdentityArrayOutputWithContext(ctx context.Context) GetAclRoleServiceIdentityArrayOutput {
	return o
}

func (o GetAclRoleServiceIdentityArrayOutput) Index(i pulumi.IntInput) GetAclRoleServiceIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclRoleServiceIdentity {
		return vs[0].([]GetAclRoleServiceIdentity)[vs[1].(int)]
	}).(GetAclRoleServiceIdentityOutput)
}

type GetAclTokenPolicy struct {
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetAclTokenPolicyInput is an input type that accepts GetAclTokenPolicyArgs and GetAclTokenPolicyOutput values.
// You can construct a concrete instance of `GetAclTokenPolicyInput` via:
//
// 		 GetAclTokenPolicyArgs{...}
//
type GetAclTokenPolicyInput interface {
	pulumi.Input

	ToGetAclTokenPolicyOutput() GetAclTokenPolicyOutput
	ToGetAclTokenPolicyOutputWithContext(context.Context) GetAclTokenPolicyOutput
}

type GetAclTokenPolicyArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAclTokenPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokenPolicy)(nil)).Elem()
}

func (i GetAclTokenPolicyArgs) ToGetAclTokenPolicyOutput() GetAclTokenPolicyOutput {
	return i.ToGetAclTokenPolicyOutputWithContext(context.Background())
}

func (i GetAclTokenPolicyArgs) ToGetAclTokenPolicyOutputWithContext(ctx context.Context) GetAclTokenPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokenPolicyOutput)
}

// GetAclTokenPolicyArrayInput is an input type that accepts GetAclTokenPolicyArray and GetAclTokenPolicyArrayOutput values.
// You can construct a concrete instance of `GetAclTokenPolicyArrayInput` via:
//
// 		 GetAclTokenPolicyArray{ GetAclTokenPolicyArgs{...} }
//
type GetAclTokenPolicyArrayInput interface {
	pulumi.Input

	ToGetAclTokenPolicyArrayOutput() GetAclTokenPolicyArrayOutput
	ToGetAclTokenPolicyArrayOutputWithContext(context.Context) GetAclTokenPolicyArrayOutput
}

type GetAclTokenPolicyArray []GetAclTokenPolicyInput

func (GetAclTokenPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokenPolicy)(nil)).Elem()
}

func (i GetAclTokenPolicyArray) ToGetAclTokenPolicyArrayOutput() GetAclTokenPolicyArrayOutput {
	return i.ToGetAclTokenPolicyArrayOutputWithContext(context.Background())
}

func (i GetAclTokenPolicyArray) ToGetAclTokenPolicyArrayOutputWithContext(ctx context.Context) GetAclTokenPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokenPolicyArrayOutput)
}

type GetAclTokenPolicyOutput struct{ *pulumi.OutputState }

func (GetAclTokenPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokenPolicy)(nil)).Elem()
}

func (o GetAclTokenPolicyOutput) ToGetAclTokenPolicyOutput() GetAclTokenPolicyOutput {
	return o
}

func (o GetAclTokenPolicyOutput) ToGetAclTokenPolicyOutputWithContext(ctx context.Context) GetAclTokenPolicyOutput {
	return o
}

func (o GetAclTokenPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokenPolicy) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAclTokenPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokenPolicy) string { return v.Name }).(pulumi.StringOutput)
}

type GetAclTokenPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetAclTokenPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokenPolicy)(nil)).Elem()
}

func (o GetAclTokenPolicyArrayOutput) ToGetAclTokenPolicyArrayOutput() GetAclTokenPolicyArrayOutput {
	return o
}

func (o GetAclTokenPolicyArrayOutput) ToGetAclTokenPolicyArrayOutputWithContext(ctx context.Context) GetAclTokenPolicyArrayOutput {
	return o
}

func (o GetAclTokenPolicyArrayOutput) Index(i pulumi.IntInput) GetAclTokenPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclTokenPolicy {
		return vs[0].([]GetAclTokenPolicy)[vs[1].(int)]
	}).(GetAclTokenPolicyOutput)
}

type GetAutopilotHealthServer struct {
	// The address of the server
	Address string `pulumi:"address"`
	// Whether the server is healthy according to the current Autopilot
	// configuration
	Healthy bool `pulumi:"healthy"`
	// The Raft ID of the server
	Id string `pulumi:"id"`
	// The time elapsed since the server's last contact with
	// the leader
	LastContact string `pulumi:"lastContact"`
	// The index of the server's last committed Raft log entry
	LastIndex int `pulumi:"lastIndex"`
	// The server's last known Raft leader term
	LastTerm int `pulumi:"lastTerm"`
	// Whether the server is currently leader
	Leader bool `pulumi:"leader"`
	// The node name of the server
	Name string `pulumi:"name"`
	// The status of the SerfHealth check of the server
	SerfStatus string `pulumi:"serfStatus"`
	// The time this server has been in its current ``Healthy``
	// state
	StableSince string `pulumi:"stableSince"`
	// The Consul version of the server
	Version string `pulumi:"version"`
	// Whether the server is a voting member of the Raft cluster
	Voter bool `pulumi:"voter"`
}

// GetAutopilotHealthServerInput is an input type that accepts GetAutopilotHealthServerArgs and GetAutopilotHealthServerOutput values.
// You can construct a concrete instance of `GetAutopilotHealthServerInput` via:
//
// 		 GetAutopilotHealthServerArgs{...}
//
type GetAutopilotHealthServerInput interface {
	pulumi.Input

	ToGetAutopilotHealthServerOutput() GetAutopilotHealthServerOutput
	ToGetAutopilotHealthServerOutputWithContext(context.Context) GetAutopilotHealthServerOutput
}

type GetAutopilotHealthServerArgs struct {
	// The address of the server
	Address pulumi.StringInput `pulumi:"address"`
	// Whether the server is healthy according to the current Autopilot
	// configuration
	Healthy pulumi.BoolInput `pulumi:"healthy"`
	// The Raft ID of the server
	Id pulumi.StringInput `pulumi:"id"`
	// The time elapsed since the server's last contact with
	// the leader
	LastContact pulumi.StringInput `pulumi:"lastContact"`
	// The index of the server's last committed Raft log entry
	LastIndex pulumi.IntInput `pulumi:"lastIndex"`
	// The server's last known Raft leader term
	LastTerm pulumi.IntInput `pulumi:"lastTerm"`
	// Whether the server is currently leader
	Leader pulumi.BoolInput `pulumi:"leader"`
	// The node name of the server
	Name pulumi.StringInput `pulumi:"name"`
	// The status of the SerfHealth check of the server
	SerfStatus pulumi.StringInput `pulumi:"serfStatus"`
	// The time this server has been in its current ``Healthy``
	// state
	StableSince pulumi.StringInput `pulumi:"stableSince"`
	// The Consul version of the server
	Version pulumi.StringInput `pulumi:"version"`
	// Whether the server is a voting member of the Raft cluster
	Voter pulumi.BoolInput `pulumi:"voter"`
}

func (GetAutopilotHealthServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAutopilotHealthServer)(nil)).Elem()
}

func (i GetAutopilotHealthServerArgs) ToGetAutopilotHealthServerOutput() GetAutopilotHealthServerOutput {
	return i.ToGetAutopilotHealthServerOutputWithContext(context.Background())
}

func (i GetAutopilotHealthServerArgs) ToGetAutopilotHealthServerOutputWithContext(ctx context.Context) GetAutopilotHealthServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAutopilotHealthServerOutput)
}

// GetAutopilotHealthServerArrayInput is an input type that accepts GetAutopilotHealthServerArray and GetAutopilotHealthServerArrayOutput values.
// You can construct a concrete instance of `GetAutopilotHealthServerArrayInput` via:
//
// 		 GetAutopilotHealthServerArray{ GetAutopilotHealthServerArgs{...} }
//
type GetAutopilotHealthServerArrayInput interface {
	pulumi.Input

	ToGetAutopilotHealthServerArrayOutput() GetAutopilotHealthServerArrayOutput
	ToGetAutopilotHealthServerArrayOutputWithContext(context.Context) GetAutopilotHealthServerArrayOutput
}

type GetAutopilotHealthServerArray []GetAutopilotHealthServerInput

func (GetAutopilotHealthServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAutopilotHealthServer)(nil)).Elem()
}

func (i GetAutopilotHealthServerArray) ToGetAutopilotHealthServerArrayOutput() GetAutopilotHealthServerArrayOutput {
	return i.ToGetAutopilotHealthServerArrayOutputWithContext(context.Background())
}

func (i GetAutopilotHealthServerArray) ToGetAutopilotHealthServerArrayOutputWithContext(ctx context.Context) GetAutopilotHealthServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAutopilotHealthServerArrayOutput)
}

type GetAutopilotHealthServerOutput struct{ *pulumi.OutputState }

func (GetAutopilotHealthServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAutopilotHealthServer)(nil)).Elem()
}

func (o GetAutopilotHealthServerOutput) ToGetAutopilotHealthServerOutput() GetAutopilotHealthServerOutput {
	return o
}

func (o GetAutopilotHealthServerOutput) ToGetAutopilotHealthServerOutputWithContext(ctx context.Context) GetAutopilotHealthServerOutput {
	return o
}

// The address of the server
func (o GetAutopilotHealthServerOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) string { return v.Address }).(pulumi.StringOutput)
}

// Whether the server is healthy according to the current Autopilot
// configuration
func (o GetAutopilotHealthServerOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) bool { return v.Healthy }).(pulumi.BoolOutput)
}

// The Raft ID of the server
func (o GetAutopilotHealthServerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) string { return v.Id }).(pulumi.StringOutput)
}

// The time elapsed since the server's last contact with
// the leader
func (o GetAutopilotHealthServerOutput) LastContact() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) string { return v.LastContact }).(pulumi.StringOutput)
}

// The index of the server's last committed Raft log entry
func (o GetAutopilotHealthServerOutput) LastIndex() pulumi.IntOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) int { return v.LastIndex }).(pulumi.IntOutput)
}

// The server's last known Raft leader term
func (o GetAutopilotHealthServerOutput) LastTerm() pulumi.IntOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) int { return v.LastTerm }).(pulumi.IntOutput)
}

// Whether the server is currently leader
func (o GetAutopilotHealthServerOutput) Leader() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) bool { return v.Leader }).(pulumi.BoolOutput)
}

// The node name of the server
func (o GetAutopilotHealthServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the SerfHealth check of the server
func (o GetAutopilotHealthServerOutput) SerfStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) string { return v.SerfStatus }).(pulumi.StringOutput)
}

// The time this server has been in its current ``Healthy``
// state
func (o GetAutopilotHealthServerOutput) StableSince() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) string { return v.StableSince }).(pulumi.StringOutput)
}

// The Consul version of the server
func (o GetAutopilotHealthServerOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) string { return v.Version }).(pulumi.StringOutput)
}

// Whether the server is a voting member of the Raft cluster
func (o GetAutopilotHealthServerOutput) Voter() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAutopilotHealthServer) bool { return v.Voter }).(pulumi.BoolOutput)
}

type GetAutopilotHealthServerArrayOutput struct{ *pulumi.OutputState }

func (GetAutopilotHealthServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAutopilotHealthServer)(nil)).Elem()
}

func (o GetAutopilotHealthServerArrayOutput) ToGetAutopilotHealthServerArrayOutput() GetAutopilotHealthServerArrayOutput {
	return o
}

func (o GetAutopilotHealthServerArrayOutput) ToGetAutopilotHealthServerArrayOutputWithContext(ctx context.Context) GetAutopilotHealthServerArrayOutput {
	return o
}

func (o GetAutopilotHealthServerArrayOutput) Index(i pulumi.IntInput) GetAutopilotHealthServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAutopilotHealthServer {
		return vs[0].([]GetAutopilotHealthServer)[vs[1].(int)]
	}).(GetAutopilotHealthServerOutput)
}

type GetCatalogNodesNode struct {
	Address         string            `pulumi:"address"`
	Id              string            `pulumi:"id"`
	Meta            map[string]string `pulumi:"meta"`
	Name            string            `pulumi:"name"`
	TaggedAddresses map[string]string `pulumi:"taggedAddresses"`
}

// GetCatalogNodesNodeInput is an input type that accepts GetCatalogNodesNodeArgs and GetCatalogNodesNodeOutput values.
// You can construct a concrete instance of `GetCatalogNodesNodeInput` via:
//
// 		 GetCatalogNodesNodeArgs{...}
//
type GetCatalogNodesNodeInput interface {
	pulumi.Input

	ToGetCatalogNodesNodeOutput() GetCatalogNodesNodeOutput
	ToGetCatalogNodesNodeOutputWithContext(context.Context) GetCatalogNodesNodeOutput
}

type GetCatalogNodesNodeArgs struct {
	Address         pulumi.StringInput    `pulumi:"address"`
	Id              pulumi.StringInput    `pulumi:"id"`
	Meta            pulumi.StringMapInput `pulumi:"meta"`
	Name            pulumi.StringInput    `pulumi:"name"`
	TaggedAddresses pulumi.StringMapInput `pulumi:"taggedAddresses"`
}

func (GetCatalogNodesNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogNodesNode)(nil)).Elem()
}

func (i GetCatalogNodesNodeArgs) ToGetCatalogNodesNodeOutput() GetCatalogNodesNodeOutput {
	return i.ToGetCatalogNodesNodeOutputWithContext(context.Background())
}

func (i GetCatalogNodesNodeArgs) ToGetCatalogNodesNodeOutputWithContext(ctx context.Context) GetCatalogNodesNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogNodesNodeOutput)
}

// GetCatalogNodesNodeArrayInput is an input type that accepts GetCatalogNodesNodeArray and GetCatalogNodesNodeArrayOutput values.
// You can construct a concrete instance of `GetCatalogNodesNodeArrayInput` via:
//
// 		 GetCatalogNodesNodeArray{ GetCatalogNodesNodeArgs{...} }
//
type GetCatalogNodesNodeArrayInput interface {
	pulumi.Input

	ToGetCatalogNodesNodeArrayOutput() GetCatalogNodesNodeArrayOutput
	ToGetCatalogNodesNodeArrayOutputWithContext(context.Context) GetCatalogNodesNodeArrayOutput
}

type GetCatalogNodesNodeArray []GetCatalogNodesNodeInput

func (GetCatalogNodesNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogNodesNode)(nil)).Elem()
}

func (i GetCatalogNodesNodeArray) ToGetCatalogNodesNodeArrayOutput() GetCatalogNodesNodeArrayOutput {
	return i.ToGetCatalogNodesNodeArrayOutputWithContext(context.Background())
}

func (i GetCatalogNodesNodeArray) ToGetCatalogNodesNodeArrayOutputWithContext(ctx context.Context) GetCatalogNodesNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogNodesNodeArrayOutput)
}

type GetCatalogNodesNodeOutput struct{ *pulumi.OutputState }

func (GetCatalogNodesNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogNodesNode)(nil)).Elem()
}

func (o GetCatalogNodesNodeOutput) ToGetCatalogNodesNodeOutput() GetCatalogNodesNodeOutput {
	return o
}

func (o GetCatalogNodesNodeOutput) ToGetCatalogNodesNodeOutputWithContext(ctx context.Context) GetCatalogNodesNodeOutput {
	return o
}

func (o GetCatalogNodesNodeOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogNodesNode) string { return v.Address }).(pulumi.StringOutput)
}

func (o GetCatalogNodesNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogNodesNode) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCatalogNodesNodeOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogNodesNode) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

func (o GetCatalogNodesNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogNodesNode) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetCatalogNodesNodeOutput) TaggedAddresses() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogNodesNode) map[string]string { return v.TaggedAddresses }).(pulumi.StringMapOutput)
}

type GetCatalogNodesNodeArrayOutput struct{ *pulumi.OutputState }

func (GetCatalogNodesNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogNodesNode)(nil)).Elem()
}

func (o GetCatalogNodesNodeArrayOutput) ToGetCatalogNodesNodeArrayOutput() GetCatalogNodesNodeArrayOutput {
	return o
}

func (o GetCatalogNodesNodeArrayOutput) ToGetCatalogNodesNodeArrayOutputWithContext(ctx context.Context) GetCatalogNodesNodeArrayOutput {
	return o
}

func (o GetCatalogNodesNodeArrayOutput) Index(i pulumi.IntInput) GetCatalogNodesNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCatalogNodesNode {
		return vs[0].([]GetCatalogNodesNode)[vs[1].(int)]
	}).(GetCatalogNodesNodeOutput)
}

type GetCatalogNodesQueryOption struct {
	AllowStale        *bool             `pulumi:"allowStale"`
	Datacenter        *string           `pulumi:"datacenter"`
	Near              *string           `pulumi:"near"`
	NodeMeta          map[string]string `pulumi:"nodeMeta"`
	RequireConsistent *bool             `pulumi:"requireConsistent"`
	Token             *string           `pulumi:"token"`
	WaitIndex         *int              `pulumi:"waitIndex"`
	WaitTime          *string           `pulumi:"waitTime"`
}

// GetCatalogNodesQueryOptionInput is an input type that accepts GetCatalogNodesQueryOptionArgs and GetCatalogNodesQueryOptionOutput values.
// You can construct a concrete instance of `GetCatalogNodesQueryOptionInput` via:
//
// 		 GetCatalogNodesQueryOptionArgs{...}
//
type GetCatalogNodesQueryOptionInput interface {
	pulumi.Input

	ToGetCatalogNodesQueryOptionOutput() GetCatalogNodesQueryOptionOutput
	ToGetCatalogNodesQueryOptionOutputWithContext(context.Context) GetCatalogNodesQueryOptionOutput
}

type GetCatalogNodesQueryOptionArgs struct {
	AllowStale        pulumi.BoolPtrInput   `pulumi:"allowStale"`
	Datacenter        pulumi.StringPtrInput `pulumi:"datacenter"`
	Near              pulumi.StringPtrInput `pulumi:"near"`
	NodeMeta          pulumi.StringMapInput `pulumi:"nodeMeta"`
	RequireConsistent pulumi.BoolPtrInput   `pulumi:"requireConsistent"`
	Token             pulumi.StringPtrInput `pulumi:"token"`
	WaitIndex         pulumi.IntPtrInput    `pulumi:"waitIndex"`
	WaitTime          pulumi.StringPtrInput `pulumi:"waitTime"`
}

func (GetCatalogNodesQueryOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogNodesQueryOption)(nil)).Elem()
}

func (i GetCatalogNodesQueryOptionArgs) ToGetCatalogNodesQueryOptionOutput() GetCatalogNodesQueryOptionOutput {
	return i.ToGetCatalogNodesQueryOptionOutputWithContext(context.Background())
}

func (i GetCatalogNodesQueryOptionArgs) ToGetCatalogNodesQueryOptionOutputWithContext(ctx context.Context) GetCatalogNodesQueryOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogNodesQueryOptionOutput)
}

// GetCatalogNodesQueryOptionArrayInput is an input type that accepts GetCatalogNodesQueryOptionArray and GetCatalogNodesQueryOptionArrayOutput values.
// You can construct a concrete instance of `GetCatalogNodesQueryOptionArrayInput` via:
//
// 		 GetCatalogNodesQueryOptionArray{ GetCatalogNodesQueryOptionArgs{...} }
//
type GetCatalogNodesQueryOptionArrayInput interface {
	pulumi.Input

	ToGetCatalogNodesQueryOptionArrayOutput() GetCatalogNodesQueryOptionArrayOutput
	ToGetCatalogNodesQueryOptionArrayOutputWithContext(context.Context) GetCatalogNodesQueryOptionArrayOutput
}

type GetCatalogNodesQueryOptionArray []GetCatalogNodesQueryOptionInput

func (GetCatalogNodesQueryOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogNodesQueryOption)(nil)).Elem()
}

func (i GetCatalogNodesQueryOptionArray) ToGetCatalogNodesQueryOptionArrayOutput() GetCatalogNodesQueryOptionArrayOutput {
	return i.ToGetCatalogNodesQueryOptionArrayOutputWithContext(context.Background())
}

func (i GetCatalogNodesQueryOptionArray) ToGetCatalogNodesQueryOptionArrayOutputWithContext(ctx context.Context) GetCatalogNodesQueryOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogNodesQueryOptionArrayOutput)
}

type GetCatalogNodesQueryOptionOutput struct{ *pulumi.OutputState }

func (GetCatalogNodesQueryOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogNodesQueryOption)(nil)).Elem()
}

func (o GetCatalogNodesQueryOptionOutput) ToGetCatalogNodesQueryOptionOutput() GetCatalogNodesQueryOptionOutput {
	return o
}

func (o GetCatalogNodesQueryOptionOutput) ToGetCatalogNodesQueryOptionOutputWithContext(ctx context.Context) GetCatalogNodesQueryOptionOutput {
	return o
}

func (o GetCatalogNodesQueryOptionOutput) AllowStale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCatalogNodesQueryOption) *bool { return v.AllowStale }).(pulumi.BoolPtrOutput)
}

func (o GetCatalogNodesQueryOptionOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogNodesQueryOption) *string { return v.Datacenter }).(pulumi.StringPtrOutput)
}

func (o GetCatalogNodesQueryOptionOutput) Near() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogNodesQueryOption) *string { return v.Near }).(pulumi.StringPtrOutput)
}

func (o GetCatalogNodesQueryOptionOutput) NodeMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogNodesQueryOption) map[string]string { return v.NodeMeta }).(pulumi.StringMapOutput)
}

func (o GetCatalogNodesQueryOptionOutput) RequireConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCatalogNodesQueryOption) *bool { return v.RequireConsistent }).(pulumi.BoolPtrOutput)
}

func (o GetCatalogNodesQueryOptionOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogNodesQueryOption) *string { return v.Token }).(pulumi.StringPtrOutput)
}

func (o GetCatalogNodesQueryOptionOutput) WaitIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetCatalogNodesQueryOption) *int { return v.WaitIndex }).(pulumi.IntPtrOutput)
}

func (o GetCatalogNodesQueryOptionOutput) WaitTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogNodesQueryOption) *string { return v.WaitTime }).(pulumi.StringPtrOutput)
}

type GetCatalogNodesQueryOptionArrayOutput struct{ *pulumi.OutputState }

func (GetCatalogNodesQueryOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogNodesQueryOption)(nil)).Elem()
}

func (o GetCatalogNodesQueryOptionArrayOutput) ToGetCatalogNodesQueryOptionArrayOutput() GetCatalogNodesQueryOptionArrayOutput {
	return o
}

func (o GetCatalogNodesQueryOptionArrayOutput) ToGetCatalogNodesQueryOptionArrayOutputWithContext(ctx context.Context) GetCatalogNodesQueryOptionArrayOutput {
	return o
}

func (o GetCatalogNodesQueryOptionArrayOutput) Index(i pulumi.IntInput) GetCatalogNodesQueryOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCatalogNodesQueryOption {
		return vs[0].([]GetCatalogNodesQueryOption)[vs[1].(int)]
	}).(GetCatalogNodesQueryOptionOutput)
}

type GetCatalogServiceQueryOption struct {
	AllowStale        *bool             `pulumi:"allowStale"`
	Datacenter        *string           `pulumi:"datacenter"`
	Namespace         *string           `pulumi:"namespace"`
	Near              *string           `pulumi:"near"`
	NodeMeta          map[string]string `pulumi:"nodeMeta"`
	RequireConsistent *bool             `pulumi:"requireConsistent"`
	Token             *string           `pulumi:"token"`
	WaitIndex         *int              `pulumi:"waitIndex"`
	WaitTime          *string           `pulumi:"waitTime"`
}

// GetCatalogServiceQueryOptionInput is an input type that accepts GetCatalogServiceQueryOptionArgs and GetCatalogServiceQueryOptionOutput values.
// You can construct a concrete instance of `GetCatalogServiceQueryOptionInput` via:
//
// 		 GetCatalogServiceQueryOptionArgs{...}
//
type GetCatalogServiceQueryOptionInput interface {
	pulumi.Input

	ToGetCatalogServiceQueryOptionOutput() GetCatalogServiceQueryOptionOutput
	ToGetCatalogServiceQueryOptionOutputWithContext(context.Context) GetCatalogServiceQueryOptionOutput
}

type GetCatalogServiceQueryOptionArgs struct {
	AllowStale        pulumi.BoolPtrInput   `pulumi:"allowStale"`
	Datacenter        pulumi.StringPtrInput `pulumi:"datacenter"`
	Namespace         pulumi.StringPtrInput `pulumi:"namespace"`
	Near              pulumi.StringPtrInput `pulumi:"near"`
	NodeMeta          pulumi.StringMapInput `pulumi:"nodeMeta"`
	RequireConsistent pulumi.BoolPtrInput   `pulumi:"requireConsistent"`
	Token             pulumi.StringPtrInput `pulumi:"token"`
	WaitIndex         pulumi.IntPtrInput    `pulumi:"waitIndex"`
	WaitTime          pulumi.StringPtrInput `pulumi:"waitTime"`
}

func (GetCatalogServiceQueryOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogServiceQueryOption)(nil)).Elem()
}

func (i GetCatalogServiceQueryOptionArgs) ToGetCatalogServiceQueryOptionOutput() GetCatalogServiceQueryOptionOutput {
	return i.ToGetCatalogServiceQueryOptionOutputWithContext(context.Background())
}

func (i GetCatalogServiceQueryOptionArgs) ToGetCatalogServiceQueryOptionOutputWithContext(ctx context.Context) GetCatalogServiceQueryOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogServiceQueryOptionOutput)
}

// GetCatalogServiceQueryOptionArrayInput is an input type that accepts GetCatalogServiceQueryOptionArray and GetCatalogServiceQueryOptionArrayOutput values.
// You can construct a concrete instance of `GetCatalogServiceQueryOptionArrayInput` via:
//
// 		 GetCatalogServiceQueryOptionArray{ GetCatalogServiceQueryOptionArgs{...} }
//
type GetCatalogServiceQueryOptionArrayInput interface {
	pulumi.Input

	ToGetCatalogServiceQueryOptionArrayOutput() GetCatalogServiceQueryOptionArrayOutput
	ToGetCatalogServiceQueryOptionArrayOutputWithContext(context.Context) GetCatalogServiceQueryOptionArrayOutput
}

type GetCatalogServiceQueryOptionArray []GetCatalogServiceQueryOptionInput

func (GetCatalogServiceQueryOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogServiceQueryOption)(nil)).Elem()
}

func (i GetCatalogServiceQueryOptionArray) ToGetCatalogServiceQueryOptionArrayOutput() GetCatalogServiceQueryOptionArrayOutput {
	return i.ToGetCatalogServiceQueryOptionArrayOutputWithContext(context.Background())
}

func (i GetCatalogServiceQueryOptionArray) ToGetCatalogServiceQueryOptionArrayOutputWithContext(ctx context.Context) GetCatalogServiceQueryOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogServiceQueryOptionArrayOutput)
}

type GetCatalogServiceQueryOptionOutput struct{ *pulumi.OutputState }

func (GetCatalogServiceQueryOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogServiceQueryOption)(nil)).Elem()
}

func (o GetCatalogServiceQueryOptionOutput) ToGetCatalogServiceQueryOptionOutput() GetCatalogServiceQueryOptionOutput {
	return o
}

func (o GetCatalogServiceQueryOptionOutput) ToGetCatalogServiceQueryOptionOutputWithContext(ctx context.Context) GetCatalogServiceQueryOptionOutput {
	return o
}

func (o GetCatalogServiceQueryOptionOutput) AllowStale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCatalogServiceQueryOption) *bool { return v.AllowStale }).(pulumi.BoolPtrOutput)
}

func (o GetCatalogServiceQueryOptionOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServiceQueryOption) *string { return v.Datacenter }).(pulumi.StringPtrOutput)
}

func (o GetCatalogServiceQueryOptionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServiceQueryOption) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetCatalogServiceQueryOptionOutput) Near() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServiceQueryOption) *string { return v.Near }).(pulumi.StringPtrOutput)
}

func (o GetCatalogServiceQueryOptionOutput) NodeMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogServiceQueryOption) map[string]string { return v.NodeMeta }).(pulumi.StringMapOutput)
}

func (o GetCatalogServiceQueryOptionOutput) RequireConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCatalogServiceQueryOption) *bool { return v.RequireConsistent }).(pulumi.BoolPtrOutput)
}

func (o GetCatalogServiceQueryOptionOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServiceQueryOption) *string { return v.Token }).(pulumi.StringPtrOutput)
}

func (o GetCatalogServiceQueryOptionOutput) WaitIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetCatalogServiceQueryOption) *int { return v.WaitIndex }).(pulumi.IntPtrOutput)
}

func (o GetCatalogServiceQueryOptionOutput) WaitTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServiceQueryOption) *string { return v.WaitTime }).(pulumi.StringPtrOutput)
}

type GetCatalogServiceQueryOptionArrayOutput struct{ *pulumi.OutputState }

func (GetCatalogServiceQueryOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogServiceQueryOption)(nil)).Elem()
}

func (o GetCatalogServiceQueryOptionArrayOutput) ToGetCatalogServiceQueryOptionArrayOutput() GetCatalogServiceQueryOptionArrayOutput {
	return o
}

func (o GetCatalogServiceQueryOptionArrayOutput) ToGetCatalogServiceQueryOptionArrayOutputWithContext(ctx context.Context) GetCatalogServiceQueryOptionArrayOutput {
	return o
}

func (o GetCatalogServiceQueryOptionArrayOutput) Index(i pulumi.IntInput) GetCatalogServiceQueryOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCatalogServiceQueryOption {
		return vs[0].([]GetCatalogServiceQueryOption)[vs[1].(int)]
	}).(GetCatalogServiceQueryOptionOutput)
}

type GetCatalogServiceService struct {
	Address           string            `pulumi:"address"`
	CreateIndex       string            `pulumi:"createIndex"`
	EnableTagOverride string            `pulumi:"enableTagOverride"`
	Id                string            `pulumi:"id"`
	Meta              map[string]string `pulumi:"meta"`
	ModifyIndex       string            `pulumi:"modifyIndex"`
	Name              string            `pulumi:"name"`
	NodeAddress       string            `pulumi:"nodeAddress"`
	NodeId            string            `pulumi:"nodeId"`
	NodeMeta          map[string]string `pulumi:"nodeMeta"`
	NodeName          string            `pulumi:"nodeName"`
	Port              string            `pulumi:"port"`
	TaggedAddresses   map[string]string `pulumi:"taggedAddresses"`
	Tags              []string          `pulumi:"tags"`
}

// GetCatalogServiceServiceInput is an input type that accepts GetCatalogServiceServiceArgs and GetCatalogServiceServiceOutput values.
// You can construct a concrete instance of `GetCatalogServiceServiceInput` via:
//
// 		 GetCatalogServiceServiceArgs{...}
//
type GetCatalogServiceServiceInput interface {
	pulumi.Input

	ToGetCatalogServiceServiceOutput() GetCatalogServiceServiceOutput
	ToGetCatalogServiceServiceOutputWithContext(context.Context) GetCatalogServiceServiceOutput
}

type GetCatalogServiceServiceArgs struct {
	Address           pulumi.StringInput      `pulumi:"address"`
	CreateIndex       pulumi.StringInput      `pulumi:"createIndex"`
	EnableTagOverride pulumi.StringInput      `pulumi:"enableTagOverride"`
	Id                pulumi.StringInput      `pulumi:"id"`
	Meta              pulumi.StringMapInput   `pulumi:"meta"`
	ModifyIndex       pulumi.StringInput      `pulumi:"modifyIndex"`
	Name              pulumi.StringInput      `pulumi:"name"`
	NodeAddress       pulumi.StringInput      `pulumi:"nodeAddress"`
	NodeId            pulumi.StringInput      `pulumi:"nodeId"`
	NodeMeta          pulumi.StringMapInput   `pulumi:"nodeMeta"`
	NodeName          pulumi.StringInput      `pulumi:"nodeName"`
	Port              pulumi.StringInput      `pulumi:"port"`
	TaggedAddresses   pulumi.StringMapInput   `pulumi:"taggedAddresses"`
	Tags              pulumi.StringArrayInput `pulumi:"tags"`
}

func (GetCatalogServiceServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogServiceService)(nil)).Elem()
}

func (i GetCatalogServiceServiceArgs) ToGetCatalogServiceServiceOutput() GetCatalogServiceServiceOutput {
	return i.ToGetCatalogServiceServiceOutputWithContext(context.Background())
}

func (i GetCatalogServiceServiceArgs) ToGetCatalogServiceServiceOutputWithContext(ctx context.Context) GetCatalogServiceServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogServiceServiceOutput)
}

// GetCatalogServiceServiceArrayInput is an input type that accepts GetCatalogServiceServiceArray and GetCatalogServiceServiceArrayOutput values.
// You can construct a concrete instance of `GetCatalogServiceServiceArrayInput` via:
//
// 		 GetCatalogServiceServiceArray{ GetCatalogServiceServiceArgs{...} }
//
type GetCatalogServiceServiceArrayInput interface {
	pulumi.Input

	ToGetCatalogServiceServiceArrayOutput() GetCatalogServiceServiceArrayOutput
	ToGetCatalogServiceServiceArrayOutputWithContext(context.Context) GetCatalogServiceServiceArrayOutput
}

type GetCatalogServiceServiceArray []GetCatalogServiceServiceInput

func (GetCatalogServiceServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogServiceService)(nil)).Elem()
}

func (i GetCatalogServiceServiceArray) ToGetCatalogServiceServiceArrayOutput() GetCatalogServiceServiceArrayOutput {
	return i.ToGetCatalogServiceServiceArrayOutputWithContext(context.Background())
}

func (i GetCatalogServiceServiceArray) ToGetCatalogServiceServiceArrayOutputWithContext(ctx context.Context) GetCatalogServiceServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogServiceServiceArrayOutput)
}

type GetCatalogServiceServiceOutput struct{ *pulumi.OutputState }

func (GetCatalogServiceServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogServiceService)(nil)).Elem()
}

func (o GetCatalogServiceServiceOutput) ToGetCatalogServiceServiceOutput() GetCatalogServiceServiceOutput {
	return o
}

func (o GetCatalogServiceServiceOutput) ToGetCatalogServiceServiceOutputWithContext(ctx context.Context) GetCatalogServiceServiceOutput {
	return o
}

func (o GetCatalogServiceServiceOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.Address }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) CreateIndex() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.CreateIndex }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) EnableTagOverride() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.EnableTagOverride }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogServiceService) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

func (o GetCatalogServiceServiceOutput) ModifyIndex() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.ModifyIndex }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) NodeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.NodeAddress }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.NodeId }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) NodeMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogServiceService) map[string]string { return v.NodeMeta }).(pulumi.StringMapOutput)
}

func (o GetCatalogServiceServiceOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.NodeName }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogServiceService) string { return v.Port }).(pulumi.StringOutput)
}

func (o GetCatalogServiceServiceOutput) TaggedAddresses() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogServiceService) map[string]string { return v.TaggedAddresses }).(pulumi.StringMapOutput)
}

func (o GetCatalogServiceServiceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCatalogServiceService) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type GetCatalogServiceServiceArrayOutput struct{ *pulumi.OutputState }

func (GetCatalogServiceServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogServiceService)(nil)).Elem()
}

func (o GetCatalogServiceServiceArrayOutput) ToGetCatalogServiceServiceArrayOutput() GetCatalogServiceServiceArrayOutput {
	return o
}

func (o GetCatalogServiceServiceArrayOutput) ToGetCatalogServiceServiceArrayOutputWithContext(ctx context.Context) GetCatalogServiceServiceArrayOutput {
	return o
}

func (o GetCatalogServiceServiceArrayOutput) Index(i pulumi.IntInput) GetCatalogServiceServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCatalogServiceService {
		return vs[0].([]GetCatalogServiceService)[vs[1].(int)]
	}).(GetCatalogServiceServiceOutput)
}

type GetCatalogServicesQueryOption struct {
	AllowStale        *bool             `pulumi:"allowStale"`
	Datacenter        *string           `pulumi:"datacenter"`
	Namespace         *string           `pulumi:"namespace"`
	Near              *string           `pulumi:"near"`
	NodeMeta          map[string]string `pulumi:"nodeMeta"`
	RequireConsistent *bool             `pulumi:"requireConsistent"`
	Token             *string           `pulumi:"token"`
	WaitIndex         *int              `pulumi:"waitIndex"`
	WaitTime          *string           `pulumi:"waitTime"`
}

// GetCatalogServicesQueryOptionInput is an input type that accepts GetCatalogServicesQueryOptionArgs and GetCatalogServicesQueryOptionOutput values.
// You can construct a concrete instance of `GetCatalogServicesQueryOptionInput` via:
//
// 		 GetCatalogServicesQueryOptionArgs{...}
//
type GetCatalogServicesQueryOptionInput interface {
	pulumi.Input

	ToGetCatalogServicesQueryOptionOutput() GetCatalogServicesQueryOptionOutput
	ToGetCatalogServicesQueryOptionOutputWithContext(context.Context) GetCatalogServicesQueryOptionOutput
}

type GetCatalogServicesQueryOptionArgs struct {
	AllowStale        pulumi.BoolPtrInput   `pulumi:"allowStale"`
	Datacenter        pulumi.StringPtrInput `pulumi:"datacenter"`
	Namespace         pulumi.StringPtrInput `pulumi:"namespace"`
	Near              pulumi.StringPtrInput `pulumi:"near"`
	NodeMeta          pulumi.StringMapInput `pulumi:"nodeMeta"`
	RequireConsistent pulumi.BoolPtrInput   `pulumi:"requireConsistent"`
	Token             pulumi.StringPtrInput `pulumi:"token"`
	WaitIndex         pulumi.IntPtrInput    `pulumi:"waitIndex"`
	WaitTime          pulumi.StringPtrInput `pulumi:"waitTime"`
}

func (GetCatalogServicesQueryOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogServicesQueryOption)(nil)).Elem()
}

func (i GetCatalogServicesQueryOptionArgs) ToGetCatalogServicesQueryOptionOutput() GetCatalogServicesQueryOptionOutput {
	return i.ToGetCatalogServicesQueryOptionOutputWithContext(context.Background())
}

func (i GetCatalogServicesQueryOptionArgs) ToGetCatalogServicesQueryOptionOutputWithContext(ctx context.Context) GetCatalogServicesQueryOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogServicesQueryOptionOutput)
}

// GetCatalogServicesQueryOptionArrayInput is an input type that accepts GetCatalogServicesQueryOptionArray and GetCatalogServicesQueryOptionArrayOutput values.
// You can construct a concrete instance of `GetCatalogServicesQueryOptionArrayInput` via:
//
// 		 GetCatalogServicesQueryOptionArray{ GetCatalogServicesQueryOptionArgs{...} }
//
type GetCatalogServicesQueryOptionArrayInput interface {
	pulumi.Input

	ToGetCatalogServicesQueryOptionArrayOutput() GetCatalogServicesQueryOptionArrayOutput
	ToGetCatalogServicesQueryOptionArrayOutputWithContext(context.Context) GetCatalogServicesQueryOptionArrayOutput
}

type GetCatalogServicesQueryOptionArray []GetCatalogServicesQueryOptionInput

func (GetCatalogServicesQueryOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogServicesQueryOption)(nil)).Elem()
}

func (i GetCatalogServicesQueryOptionArray) ToGetCatalogServicesQueryOptionArrayOutput() GetCatalogServicesQueryOptionArrayOutput {
	return i.ToGetCatalogServicesQueryOptionArrayOutputWithContext(context.Background())
}

func (i GetCatalogServicesQueryOptionArray) ToGetCatalogServicesQueryOptionArrayOutputWithContext(ctx context.Context) GetCatalogServicesQueryOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogServicesQueryOptionArrayOutput)
}

type GetCatalogServicesQueryOptionOutput struct{ *pulumi.OutputState }

func (GetCatalogServicesQueryOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogServicesQueryOption)(nil)).Elem()
}

func (o GetCatalogServicesQueryOptionOutput) ToGetCatalogServicesQueryOptionOutput() GetCatalogServicesQueryOptionOutput {
	return o
}

func (o GetCatalogServicesQueryOptionOutput) ToGetCatalogServicesQueryOptionOutputWithContext(ctx context.Context) GetCatalogServicesQueryOptionOutput {
	return o
}

func (o GetCatalogServicesQueryOptionOutput) AllowStale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCatalogServicesQueryOption) *bool { return v.AllowStale }).(pulumi.BoolPtrOutput)
}

func (o GetCatalogServicesQueryOptionOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServicesQueryOption) *string { return v.Datacenter }).(pulumi.StringPtrOutput)
}

func (o GetCatalogServicesQueryOptionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServicesQueryOption) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetCatalogServicesQueryOptionOutput) Near() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServicesQueryOption) *string { return v.Near }).(pulumi.StringPtrOutput)
}

func (o GetCatalogServicesQueryOptionOutput) NodeMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCatalogServicesQueryOption) map[string]string { return v.NodeMeta }).(pulumi.StringMapOutput)
}

func (o GetCatalogServicesQueryOptionOutput) RequireConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCatalogServicesQueryOption) *bool { return v.RequireConsistent }).(pulumi.BoolPtrOutput)
}

func (o GetCatalogServicesQueryOptionOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServicesQueryOption) *string { return v.Token }).(pulumi.StringPtrOutput)
}

func (o GetCatalogServicesQueryOptionOutput) WaitIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetCatalogServicesQueryOption) *int { return v.WaitIndex }).(pulumi.IntPtrOutput)
}

func (o GetCatalogServicesQueryOptionOutput) WaitTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCatalogServicesQueryOption) *string { return v.WaitTime }).(pulumi.StringPtrOutput)
}

type GetCatalogServicesQueryOptionArrayOutput struct{ *pulumi.OutputState }

func (GetCatalogServicesQueryOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogServicesQueryOption)(nil)).Elem()
}

func (o GetCatalogServicesQueryOptionArrayOutput) ToGetCatalogServicesQueryOptionArrayOutput() GetCatalogServicesQueryOptionArrayOutput {
	return o
}

func (o GetCatalogServicesQueryOptionArrayOutput) ToGetCatalogServicesQueryOptionArrayOutputWithContext(ctx context.Context) GetCatalogServicesQueryOptionArrayOutput {
	return o
}

func (o GetCatalogServicesQueryOptionArrayOutput) Index(i pulumi.IntInput) GetCatalogServicesQueryOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCatalogServicesQueryOption {
		return vs[0].([]GetCatalogServicesQueryOption)[vs[1].(int)]
	}).(GetCatalogServicesQueryOptionOutput)
}

type GetKeyPrefixSubkeyCollection struct {
	// This is the default value to set for `var.<name>`
	// if the key does not exist in Consul. Defaults to an empty string.
	Default *string `pulumi:"default"`
	// This is the name of the key. This value of the
	// key is exposed as `var.<name>`. This is not the path of the subkey
	// in Consul.
	Name string `pulumi:"name"`
	// This is the subkey path in Consul (which will be appended
	// to the given `pathPrefix`) to construct the full key that will be used
	// to read the value.
	Path string `pulumi:"path"`
}

// GetKeyPrefixSubkeyCollectionInput is an input type that accepts GetKeyPrefixSubkeyCollectionArgs and GetKeyPrefixSubkeyCollectionOutput values.
// You can construct a concrete instance of `GetKeyPrefixSubkeyCollectionInput` via:
//
// 		 GetKeyPrefixSubkeyCollectionArgs{...}
//
type GetKeyPrefixSubkeyCollectionInput interface {
	pulumi.Input

	ToGetKeyPrefixSubkeyCollectionOutput() GetKeyPrefixSubkeyCollectionOutput
	ToGetKeyPrefixSubkeyCollectionOutputWithContext(context.Context) GetKeyPrefixSubkeyCollectionOutput
}

type GetKeyPrefixSubkeyCollectionArgs struct {
	// This is the default value to set for `var.<name>`
	// if the key does not exist in Consul. Defaults to an empty string.
	Default pulumi.StringPtrInput `pulumi:"default"`
	// This is the name of the key. This value of the
	// key is exposed as `var.<name>`. This is not the path of the subkey
	// in Consul.
	Name pulumi.StringInput `pulumi:"name"`
	// This is the subkey path in Consul (which will be appended
	// to the given `pathPrefix`) to construct the full key that will be used
	// to read the value.
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetKeyPrefixSubkeyCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyPrefixSubkeyCollection)(nil)).Elem()
}

func (i GetKeyPrefixSubkeyCollectionArgs) ToGetKeyPrefixSubkeyCollectionOutput() GetKeyPrefixSubkeyCollectionOutput {
	return i.ToGetKeyPrefixSubkeyCollectionOutputWithContext(context.Background())
}

func (i GetKeyPrefixSubkeyCollectionArgs) ToGetKeyPrefixSubkeyCollectionOutputWithContext(ctx context.Context) GetKeyPrefixSubkeyCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyPrefixSubkeyCollectionOutput)
}

// GetKeyPrefixSubkeyCollectionArrayInput is an input type that accepts GetKeyPrefixSubkeyCollectionArray and GetKeyPrefixSubkeyCollectionArrayOutput values.
// You can construct a concrete instance of `GetKeyPrefixSubkeyCollectionArrayInput` via:
//
// 		 GetKeyPrefixSubkeyCollectionArray{ GetKeyPrefixSubkeyCollectionArgs{...} }
//
type GetKeyPrefixSubkeyCollectionArrayInput interface {
	pulumi.Input

	ToGetKeyPrefixSubkeyCollectionArrayOutput() GetKeyPrefixSubkeyCollectionArrayOutput
	ToGetKeyPrefixSubkeyCollectionArrayOutputWithContext(context.Context) GetKeyPrefixSubkeyCollectionArrayOutput
}

type GetKeyPrefixSubkeyCollectionArray []GetKeyPrefixSubkeyCollectionInput

func (GetKeyPrefixSubkeyCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyPrefixSubkeyCollection)(nil)).Elem()
}

func (i GetKeyPrefixSubkeyCollectionArray) ToGetKeyPrefixSubkeyCollectionArrayOutput() GetKeyPrefixSubkeyCollectionArrayOutput {
	return i.ToGetKeyPrefixSubkeyCollectionArrayOutputWithContext(context.Background())
}

func (i GetKeyPrefixSubkeyCollectionArray) ToGetKeyPrefixSubkeyCollectionArrayOutputWithContext(ctx context.Context) GetKeyPrefixSubkeyCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyPrefixSubkeyCollectionArrayOutput)
}

type GetKeyPrefixSubkeyCollectionOutput struct{ *pulumi.OutputState }

func (GetKeyPrefixSubkeyCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyPrefixSubkeyCollection)(nil)).Elem()
}

func (o GetKeyPrefixSubkeyCollectionOutput) ToGetKeyPrefixSubkeyCollectionOutput() GetKeyPrefixSubkeyCollectionOutput {
	return o
}

func (o GetKeyPrefixSubkeyCollectionOutput) ToGetKeyPrefixSubkeyCollectionOutputWithContext(ctx context.Context) GetKeyPrefixSubkeyCollectionOutput {
	return o
}

// This is the default value to set for `var.<name>`
// if the key does not exist in Consul. Defaults to an empty string.
func (o GetKeyPrefixSubkeyCollectionOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeyPrefixSubkeyCollection) *string { return v.Default }).(pulumi.StringPtrOutput)
}

// This is the name of the key. This value of the
// key is exposed as `var.<name>`. This is not the path of the subkey
// in Consul.
func (o GetKeyPrefixSubkeyCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPrefixSubkeyCollection) string { return v.Name }).(pulumi.StringOutput)
}

// This is the subkey path in Consul (which will be appended
// to the given `pathPrefix`) to construct the full key that will be used
// to read the value.
func (o GetKeyPrefixSubkeyCollectionOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPrefixSubkeyCollection) string { return v.Path }).(pulumi.StringOutput)
}

type GetKeyPrefixSubkeyCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetKeyPrefixSubkeyCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyPrefixSubkeyCollection)(nil)).Elem()
}

func (o GetKeyPrefixSubkeyCollectionArrayOutput) ToGetKeyPrefixSubkeyCollectionArrayOutput() GetKeyPrefixSubkeyCollectionArrayOutput {
	return o
}

func (o GetKeyPrefixSubkeyCollectionArrayOutput) ToGetKeyPrefixSubkeyCollectionArrayOutputWithContext(ctx context.Context) GetKeyPrefixSubkeyCollectionArrayOutput {
	return o
}

func (o GetKeyPrefixSubkeyCollectionArrayOutput) Index(i pulumi.IntInput) GetKeyPrefixSubkeyCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeyPrefixSubkeyCollection {
		return vs[0].([]GetKeyPrefixSubkeyCollection)[vs[1].(int)]
	}).(GetKeyPrefixSubkeyCollectionOutput)
}

type GetKeysKey struct {
	// This is the default value to set for `var.<name>`
	// if the key does not exist in Consul. Defaults to an empty string.
	Default *string `pulumi:"default"`
	// This is the name of the key. This value of the
	// key is exposed as `var.<name>`. This is not the path of the key
	// in Consul.
	Name string `pulumi:"name"`
	// This is the path in Consul that should be read
	// or written to.
	Path string `pulumi:"path"`
}

// GetKeysKeyInput is an input type that accepts GetKeysKeyArgs and GetKeysKeyOutput values.
// You can construct a concrete instance of `GetKeysKeyInput` via:
//
// 		 GetKeysKeyArgs{...}
//
type GetKeysKeyInput interface {
	pulumi.Input

	ToGetKeysKeyOutput() GetKeysKeyOutput
	ToGetKeysKeyOutputWithContext(context.Context) GetKeysKeyOutput
}

type GetKeysKeyArgs struct {
	// This is the default value to set for `var.<name>`
	// if the key does not exist in Consul. Defaults to an empty string.
	Default pulumi.StringPtrInput `pulumi:"default"`
	// This is the name of the key. This value of the
	// key is exposed as `var.<name>`. This is not the path of the key
	// in Consul.
	Name pulumi.StringInput `pulumi:"name"`
	// This is the path in Consul that should be read
	// or written to.
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetKeysKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKey)(nil)).Elem()
}

func (i GetKeysKeyArgs) ToGetKeysKeyOutput() GetKeysKeyOutput {
	return i.ToGetKeysKeyOutputWithContext(context.Background())
}

func (i GetKeysKeyArgs) ToGetKeysKeyOutputWithContext(ctx context.Context) GetKeysKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyOutput)
}

// GetKeysKeyArrayInput is an input type that accepts GetKeysKeyArray and GetKeysKeyArrayOutput values.
// You can construct a concrete instance of `GetKeysKeyArrayInput` via:
//
// 		 GetKeysKeyArray{ GetKeysKeyArgs{...} }
//
type GetKeysKeyArrayInput interface {
	pulumi.Input

	ToGetKeysKeyArrayOutput() GetKeysKeyArrayOutput
	ToGetKeysKeyArrayOutputWithContext(context.Context) GetKeysKeyArrayOutput
}

type GetKeysKeyArray []GetKeysKeyInput

func (GetKeysKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKey)(nil)).Elem()
}

func (i GetKeysKeyArray) ToGetKeysKeyArrayOutput() GetKeysKeyArrayOutput {
	return i.ToGetKeysKeyArrayOutputWithContext(context.Background())
}

func (i GetKeysKeyArray) ToGetKeysKeyArrayOutputWithContext(ctx context.Context) GetKeysKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyArrayOutput)
}

type GetKeysKeyOutput struct{ *pulumi.OutputState }

func (GetKeysKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKey)(nil)).Elem()
}

func (o GetKeysKeyOutput) ToGetKeysKeyOutput() GetKeysKeyOutput {
	return o
}

func (o GetKeysKeyOutput) ToGetKeysKeyOutputWithContext(ctx context.Context) GetKeysKeyOutput {
	return o
}

// This is the default value to set for `var.<name>`
// if the key does not exist in Consul. Defaults to an empty string.
func (o GetKeysKeyOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeysKey) *string { return v.Default }).(pulumi.StringPtrOutput)
}

// This is the name of the key. This value of the
// key is exposed as `var.<name>`. This is not the path of the key
// in Consul.
func (o GetKeysKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.Name }).(pulumi.StringOutput)
}

// This is the path in Consul that should be read
// or written to.
func (o GetKeysKeyOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.Path }).(pulumi.StringOutput)
}

type GetKeysKeyArrayOutput struct{ *pulumi.OutputState }

func (GetKeysKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKey)(nil)).Elem()
}

func (o GetKeysKeyArrayOutput) ToGetKeysKeyArrayOutput() GetKeysKeyArrayOutput {
	return o
}

func (o GetKeysKeyArrayOutput) ToGetKeysKeyArrayOutputWithContext(ctx context.Context) GetKeysKeyArrayOutput {
	return o
}

func (o GetKeysKeyArrayOutput) Index(i pulumi.IntInput) GetKeysKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeysKey {
		return vs[0].([]GetKeysKey)[vs[1].(int)]
	}).(GetKeysKeyOutput)
}

type GetNodesNode struct {
	Address string `pulumi:"address"`
	// The Node ID of the Consul agent.
	// * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta
	// data tag information, if any.
	// * [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name
	// of the Consul node.
	// * [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The
	// IP address the node is advertising to the Consul cluster.
	// * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
	// List of explicit LAN and WAN IP addresses for the agent.
	Id              string            `pulumi:"id"`
	Meta            map[string]string `pulumi:"meta"`
	Name            string            `pulumi:"name"`
	TaggedAddresses map[string]string `pulumi:"taggedAddresses"`
}

// GetNodesNodeInput is an input type that accepts GetNodesNodeArgs and GetNodesNodeOutput values.
// You can construct a concrete instance of `GetNodesNodeInput` via:
//
// 		 GetNodesNodeArgs{...}
//
type GetNodesNodeInput interface {
	pulumi.Input

	ToGetNodesNodeOutput() GetNodesNodeOutput
	ToGetNodesNodeOutputWithContext(context.Context) GetNodesNodeOutput
}

type GetNodesNodeArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// The Node ID of the Consul agent.
	// * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta
	// data tag information, if any.
	// * [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name
	// of the Consul node.
	// * [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The
	// IP address the node is advertising to the Consul cluster.
	// * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
	// List of explicit LAN and WAN IP addresses for the agent.
	Id              pulumi.StringInput    `pulumi:"id"`
	Meta            pulumi.StringMapInput `pulumi:"meta"`
	Name            pulumi.StringInput    `pulumi:"name"`
	TaggedAddresses pulumi.StringMapInput `pulumi:"taggedAddresses"`
}

func (GetNodesNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNode)(nil)).Elem()
}

func (i GetNodesNodeArgs) ToGetNodesNodeOutput() GetNodesNodeOutput {
	return i.ToGetNodesNodeOutputWithContext(context.Background())
}

func (i GetNodesNodeArgs) ToGetNodesNodeOutputWithContext(ctx context.Context) GetNodesNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeOutput)
}

// GetNodesNodeArrayInput is an input type that accepts GetNodesNodeArray and GetNodesNodeArrayOutput values.
// You can construct a concrete instance of `GetNodesNodeArrayInput` via:
//
// 		 GetNodesNodeArray{ GetNodesNodeArgs{...} }
//
type GetNodesNodeArrayInput interface {
	pulumi.Input

	ToGetNodesNodeArrayOutput() GetNodesNodeArrayOutput
	ToGetNodesNodeArrayOutputWithContext(context.Context) GetNodesNodeArrayOutput
}

type GetNodesNodeArray []GetNodesNodeInput

func (GetNodesNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNode)(nil)).Elem()
}

func (i GetNodesNodeArray) ToGetNodesNodeArrayOutput() GetNodesNodeArrayOutput {
	return i.ToGetNodesNodeArrayOutputWithContext(context.Background())
}

func (i GetNodesNodeArray) ToGetNodesNodeArrayOutputWithContext(ctx context.Context) GetNodesNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeArrayOutput)
}

type GetNodesNodeOutput struct{ *pulumi.OutputState }

func (GetNodesNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNode)(nil)).Elem()
}

func (o GetNodesNodeOutput) ToGetNodesNodeOutput() GetNodesNodeOutput {
	return o
}

func (o GetNodesNodeOutput) ToGetNodesNodeOutputWithContext(ctx context.Context) GetNodesNodeOutput {
	return o
}

func (o GetNodesNodeOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Address }).(pulumi.StringOutput)
}

// The Node ID of the Consul agent.
// * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta
// data tag information, if any.
// * [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name
// of the Consul node.
// * [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The
// IP address the node is advertising to the Consul cluster.
// * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
// List of explicit LAN and WAN IP addresses for the agent.
func (o GetNodesNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodesNode) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

func (o GetNodesNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) TaggedAddresses() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodesNode) map[string]string { return v.TaggedAddresses }).(pulumi.StringMapOutput)
}

type GetNodesNodeArrayOutput struct{ *pulumi.OutputState }

func (GetNodesNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNode)(nil)).Elem()
}

func (o GetNodesNodeArrayOutput) ToGetNodesNodeArrayOutput() GetNodesNodeArrayOutput {
	return o
}

func (o GetNodesNodeArrayOutput) ToGetNodesNodeArrayOutputWithContext(ctx context.Context) GetNodesNodeArrayOutput {
	return o
}

func (o GetNodesNodeArrayOutput) Index(i pulumi.IntInput) GetNodesNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodesNode {
		return vs[0].([]GetNodesNode)[vs[1].(int)]
	}).(GetNodesNodeOutput)
}

type GetNodesQueryOption struct {
	// When `true`, the default, allow responses from
	// Consul servers that are followers.
	AllowStale *bool `pulumi:"allowStale"`
	// The Consul datacenter to query.  Defaults to the
	// same value found in `queryOptions` parameter specified below, or if that is
	// empty, the `datacenter` value found in the Consul agent that this provider is
	// configured to talk to then the datacenter in the provider setup.
	Datacenter *string           `pulumi:"datacenter"`
	Near       *string           `pulumi:"near"`
	NodeMeta   map[string]string `pulumi:"nodeMeta"`
	// When `true` force the client to perform a
	// read on at least quorum servers and verify the result is the same.  Defaults
	// to `false`.
	RequireConsistent *bool `pulumi:"requireConsistent"`
	// Specify the Consul ACL token to use when performing the
	// request.  This defaults to the same API token configured by the `consul`
	// provider but may be overriden if necessary.
	Token *string `pulumi:"token"`
	// Index number used to enable blocking quereis.
	WaitIndex *int `pulumi:"waitIndex"`
	// Max time the client should wait for a blocking query
	// to return.
	WaitTime *string `pulumi:"waitTime"`
}

// GetNodesQueryOptionInput is an input type that accepts GetNodesQueryOptionArgs and GetNodesQueryOptionOutput values.
// You can construct a concrete instance of `GetNodesQueryOptionInput` via:
//
// 		 GetNodesQueryOptionArgs{...}
//
type GetNodesQueryOptionInput interface {
	pulumi.Input

	ToGetNodesQueryOptionOutput() GetNodesQueryOptionOutput
	ToGetNodesQueryOptionOutputWithContext(context.Context) GetNodesQueryOptionOutput
}

type GetNodesQueryOptionArgs struct {
	// When `true`, the default, allow responses from
	// Consul servers that are followers.
	AllowStale pulumi.BoolPtrInput `pulumi:"allowStale"`
	// The Consul datacenter to query.  Defaults to the
	// same value found in `queryOptions` parameter specified below, or if that is
	// empty, the `datacenter` value found in the Consul agent that this provider is
	// configured to talk to then the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput `pulumi:"datacenter"`
	Near       pulumi.StringPtrInput `pulumi:"near"`
	NodeMeta   pulumi.StringMapInput `pulumi:"nodeMeta"`
	// When `true` force the client to perform a
	// read on at least quorum servers and verify the result is the same.  Defaults
	// to `false`.
	RequireConsistent pulumi.BoolPtrInput `pulumi:"requireConsistent"`
	// Specify the Consul ACL token to use when performing the
	// request.  This defaults to the same API token configured by the `consul`
	// provider but may be overriden if necessary.
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Index number used to enable blocking quereis.
	WaitIndex pulumi.IntPtrInput `pulumi:"waitIndex"`
	// Max time the client should wait for a blocking query
	// to return.
	WaitTime pulumi.StringPtrInput `pulumi:"waitTime"`
}

func (GetNodesQueryOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesQueryOption)(nil)).Elem()
}

func (i GetNodesQueryOptionArgs) ToGetNodesQueryOptionOutput() GetNodesQueryOptionOutput {
	return i.ToGetNodesQueryOptionOutputWithContext(context.Background())
}

func (i GetNodesQueryOptionArgs) ToGetNodesQueryOptionOutputWithContext(ctx context.Context) GetNodesQueryOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesQueryOptionOutput)
}

// GetNodesQueryOptionArrayInput is an input type that accepts GetNodesQueryOptionArray and GetNodesQueryOptionArrayOutput values.
// You can construct a concrete instance of `GetNodesQueryOptionArrayInput` via:
//
// 		 GetNodesQueryOptionArray{ GetNodesQueryOptionArgs{...} }
//
type GetNodesQueryOptionArrayInput interface {
	pulumi.Input

	ToGetNodesQueryOptionArrayOutput() GetNodesQueryOptionArrayOutput
	ToGetNodesQueryOptionArrayOutputWithContext(context.Context) GetNodesQueryOptionArrayOutput
}

type GetNodesQueryOptionArray []GetNodesQueryOptionInput

func (GetNodesQueryOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesQueryOption)(nil)).Elem()
}

func (i GetNodesQueryOptionArray) ToGetNodesQueryOptionArrayOutput() GetNodesQueryOptionArrayOutput {
	return i.ToGetNodesQueryOptionArrayOutputWithContext(context.Background())
}

func (i GetNodesQueryOptionArray) ToGetNodesQueryOptionArrayOutputWithContext(ctx context.Context) GetNodesQueryOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesQueryOptionArrayOutput)
}

type GetNodesQueryOptionOutput struct{ *pulumi.OutputState }

func (GetNodesQueryOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesQueryOption)(nil)).Elem()
}

func (o GetNodesQueryOptionOutput) ToGetNodesQueryOptionOutput() GetNodesQueryOptionOutput {
	return o
}

func (o GetNodesQueryOptionOutput) ToGetNodesQueryOptionOutputWithContext(ctx context.Context) GetNodesQueryOptionOutput {
	return o
}

// When `true`, the default, allow responses from
// Consul servers that are followers.
func (o GetNodesQueryOptionOutput) AllowStale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNodesQueryOption) *bool { return v.AllowStale }).(pulumi.BoolPtrOutput)
}

// The Consul datacenter to query.  Defaults to the
// same value found in `queryOptions` parameter specified below, or if that is
// empty, the `datacenter` value found in the Consul agent that this provider is
// configured to talk to then the datacenter in the provider setup.
func (o GetNodesQueryOptionOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesQueryOption) *string { return v.Datacenter }).(pulumi.StringPtrOutput)
}

func (o GetNodesQueryOptionOutput) Near() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesQueryOption) *string { return v.Near }).(pulumi.StringPtrOutput)
}

func (o GetNodesQueryOptionOutput) NodeMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodesQueryOption) map[string]string { return v.NodeMeta }).(pulumi.StringMapOutput)
}

// When `true` force the client to perform a
// read on at least quorum servers and verify the result is the same.  Defaults
// to `false`.
func (o GetNodesQueryOptionOutput) RequireConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNodesQueryOption) *bool { return v.RequireConsistent }).(pulumi.BoolPtrOutput)
}

// Specify the Consul ACL token to use when performing the
// request.  This defaults to the same API token configured by the `consul`
// provider but may be overriden if necessary.
func (o GetNodesQueryOptionOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesQueryOption) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Index number used to enable blocking quereis.
func (o GetNodesQueryOptionOutput) WaitIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetNodesQueryOption) *int { return v.WaitIndex }).(pulumi.IntPtrOutput)
}

// Max time the client should wait for a blocking query
// to return.
func (o GetNodesQueryOptionOutput) WaitTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesQueryOption) *string { return v.WaitTime }).(pulumi.StringPtrOutput)
}

type GetNodesQueryOptionArrayOutput struct{ *pulumi.OutputState }

func (GetNodesQueryOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesQueryOption)(nil)).Elem()
}

func (o GetNodesQueryOptionArrayOutput) ToGetNodesQueryOptionArrayOutput() GetNodesQueryOptionArrayOutput {
	return o
}

func (o GetNodesQueryOptionArrayOutput) ToGetNodesQueryOptionArrayOutputWithContext(ctx context.Context) GetNodesQueryOptionArrayOutput {
	return o
}

func (o GetNodesQueryOptionArrayOutput) Index(i pulumi.IntInput) GetNodesQueryOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodesQueryOption {
		return vs[0].([]GetNodesQueryOption)[vs[1].(int)]
	}).(GetNodesQueryOptionOutput)
}

type GetServiceHealthResultType struct {
	Checks []GetServiceHealthResultCheck `pulumi:"checks"`
	// The name of the node associated with this health-check.
	Node    GetServiceHealthResultNode    `pulumi:"node"`
	Service GetServiceHealthResultService `pulumi:"service"`
}

// GetServiceHealthResultTypeInput is an input type that accepts GetServiceHealthResultTypeArgs and GetServiceHealthResultTypeOutput values.
// You can construct a concrete instance of `GetServiceHealthResultTypeInput` via:
//
// 		 GetServiceHealthResultTypeArgs{...}
//
type GetServiceHealthResultTypeInput interface {
	pulumi.Input

	ToGetServiceHealthResultTypeOutput() GetServiceHealthResultTypeOutput
	ToGetServiceHealthResultTypeOutputWithContext(context.Context) GetServiceHealthResultTypeOutput
}

type GetServiceHealthResultTypeArgs struct {
	Checks GetServiceHealthResultCheckArrayInput `pulumi:"checks"`
	// The name of the node associated with this health-check.
	Node    GetServiceHealthResultNodeInput    `pulumi:"node"`
	Service GetServiceHealthResultServiceInput `pulumi:"service"`
}

func (GetServiceHealthResultTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthResultType)(nil)).Elem()
}

func (i GetServiceHealthResultTypeArgs) ToGetServiceHealthResultTypeOutput() GetServiceHealthResultTypeOutput {
	return i.ToGetServiceHealthResultTypeOutputWithContext(context.Background())
}

func (i GetServiceHealthResultTypeArgs) ToGetServiceHealthResultTypeOutputWithContext(ctx context.Context) GetServiceHealthResultTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceHealthResultTypeOutput)
}

// GetServiceHealthResultTypeArrayInput is an input type that accepts GetServiceHealthResultTypeArray and GetServiceHealthResultTypeArrayOutput values.
// You can construct a concrete instance of `GetServiceHealthResultTypeArrayInput` via:
//
// 		 GetServiceHealthResultTypeArray{ GetServiceHealthResultTypeArgs{...} }
//
type GetServiceHealthResultTypeArrayInput interface {
	pulumi.Input

	ToGetServiceHealthResultTypeArrayOutput() GetServiceHealthResultTypeArrayOutput
	ToGetServiceHealthResultTypeArrayOutputWithContext(context.Context) GetServiceHealthResultTypeArrayOutput
}

type GetServiceHealthResultTypeArray []GetServiceHealthResultTypeInput

func (GetServiceHealthResultTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceHealthResultType)(nil)).Elem()
}

func (i GetServiceHealthResultTypeArray) ToGetServiceHealthResultTypeArrayOutput() GetServiceHealthResultTypeArrayOutput {
	return i.ToGetServiceHealthResultTypeArrayOutputWithContext(context.Background())
}

func (i GetServiceHealthResultTypeArray) ToGetServiceHealthResultTypeArrayOutputWithContext(ctx context.Context) GetServiceHealthResultTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceHealthResultTypeArrayOutput)
}

type GetServiceHealthResultTypeOutput struct{ *pulumi.OutputState }

func (GetServiceHealthResultTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthResultType)(nil)).Elem()
}

func (o GetServiceHealthResultTypeOutput) ToGetServiceHealthResultTypeOutput() GetServiceHealthResultTypeOutput {
	return o
}

func (o GetServiceHealthResultTypeOutput) ToGetServiceHealthResultTypeOutputWithContext(ctx context.Context) GetServiceHealthResultTypeOutput {
	return o
}

func (o GetServiceHealthResultTypeOutput) Checks() GetServiceHealthResultCheckArrayOutput {
	return o.ApplyT(func(v GetServiceHealthResultType) []GetServiceHealthResultCheck { return v.Checks }).(GetServiceHealthResultCheckArrayOutput)
}

// The name of the node associated with this health-check.
func (o GetServiceHealthResultTypeOutput) Node() GetServiceHealthResultNodeOutput {
	return o.ApplyT(func(v GetServiceHealthResultType) GetServiceHealthResultNode { return v.Node }).(GetServiceHealthResultNodeOutput)
}

func (o GetServiceHealthResultTypeOutput) Service() GetServiceHealthResultServiceOutput {
	return o.ApplyT(func(v GetServiceHealthResultType) GetServiceHealthResultService { return v.Service }).(GetServiceHealthResultServiceOutput)
}

type GetServiceHealthResultTypeArrayOutput struct{ *pulumi.OutputState }

func (GetServiceHealthResultTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceHealthResultType)(nil)).Elem()
}

func (o GetServiceHealthResultTypeArrayOutput) ToGetServiceHealthResultTypeArrayOutput() GetServiceHealthResultTypeArrayOutput {
	return o
}

func (o GetServiceHealthResultTypeArrayOutput) ToGetServiceHealthResultTypeArrayOutputWithContext(ctx context.Context) GetServiceHealthResultTypeArrayOutput {
	return o
}

func (o GetServiceHealthResultTypeArrayOutput) Index(i pulumi.IntInput) GetServiceHealthResultTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceHealthResultType {
		return vs[0].([]GetServiceHealthResultType)[vs[1].(int)]
	}).(GetServiceHealthResultTypeOutput)
}

type GetServiceHealthResultCheck struct {
	// The ID of this health-check.
	Id string `pulumi:"id"`
	// The service name to select.
	Name string `pulumi:"name"`
	// The name of the node associated with this health-check.
	Node string `pulumi:"node"`
	// A human readable description of the current state of the health-check.
	Notes string `pulumi:"notes"`
	// The output of the health-check.
	Output string `pulumi:"output"`
	// The ID of the service associated to this health-check.
	ServiceId string `pulumi:"serviceId"`
	// The name of the service associated with this health-check.
	ServiceName string `pulumi:"serviceName"`
	// The list of tags associated with this health-check.
	ServiceTags []string `pulumi:"serviceTags"`
	// The status of this health-check.
	Status string `pulumi:"status"`
}

// GetServiceHealthResultCheckInput is an input type that accepts GetServiceHealthResultCheckArgs and GetServiceHealthResultCheckOutput values.
// You can construct a concrete instance of `GetServiceHealthResultCheckInput` via:
//
// 		 GetServiceHealthResultCheckArgs{...}
//
type GetServiceHealthResultCheckInput interface {
	pulumi.Input

	ToGetServiceHealthResultCheckOutput() GetServiceHealthResultCheckOutput
	ToGetServiceHealthResultCheckOutputWithContext(context.Context) GetServiceHealthResultCheckOutput
}

type GetServiceHealthResultCheckArgs struct {
	// The ID of this health-check.
	Id pulumi.StringInput `pulumi:"id"`
	// The service name to select.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the node associated with this health-check.
	Node pulumi.StringInput `pulumi:"node"`
	// A human readable description of the current state of the health-check.
	Notes pulumi.StringInput `pulumi:"notes"`
	// The output of the health-check.
	Output pulumi.StringInput `pulumi:"output"`
	// The ID of the service associated to this health-check.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
	// The name of the service associated with this health-check.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// The list of tags associated with this health-check.
	ServiceTags pulumi.StringArrayInput `pulumi:"serviceTags"`
	// The status of this health-check.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetServiceHealthResultCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthResultCheck)(nil)).Elem()
}

func (i GetServiceHealthResultCheckArgs) ToGetServiceHealthResultCheckOutput() GetServiceHealthResultCheckOutput {
	return i.ToGetServiceHealthResultCheckOutputWithContext(context.Background())
}

func (i GetServiceHealthResultCheckArgs) ToGetServiceHealthResultCheckOutputWithContext(ctx context.Context) GetServiceHealthResultCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceHealthResultCheckOutput)
}

// GetServiceHealthResultCheckArrayInput is an input type that accepts GetServiceHealthResultCheckArray and GetServiceHealthResultCheckArrayOutput values.
// You can construct a concrete instance of `GetServiceHealthResultCheckArrayInput` via:
//
// 		 GetServiceHealthResultCheckArray{ GetServiceHealthResultCheckArgs{...} }
//
type GetServiceHealthResultCheckArrayInput interface {
	pulumi.Input

	ToGetServiceHealthResultCheckArrayOutput() GetServiceHealthResultCheckArrayOutput
	ToGetServiceHealthResultCheckArrayOutputWithContext(context.Context) GetServiceHealthResultCheckArrayOutput
}

type GetServiceHealthResultCheckArray []GetServiceHealthResultCheckInput

func (GetServiceHealthResultCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceHealthResultCheck)(nil)).Elem()
}

func (i GetServiceHealthResultCheckArray) ToGetServiceHealthResultCheckArrayOutput() GetServiceHealthResultCheckArrayOutput {
	return i.ToGetServiceHealthResultCheckArrayOutputWithContext(context.Background())
}

func (i GetServiceHealthResultCheckArray) ToGetServiceHealthResultCheckArrayOutputWithContext(ctx context.Context) GetServiceHealthResultCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceHealthResultCheckArrayOutput)
}

type GetServiceHealthResultCheckOutput struct{ *pulumi.OutputState }

func (GetServiceHealthResultCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthResultCheck)(nil)).Elem()
}

func (o GetServiceHealthResultCheckOutput) ToGetServiceHealthResultCheckOutput() GetServiceHealthResultCheckOutput {
	return o
}

func (o GetServiceHealthResultCheckOutput) ToGetServiceHealthResultCheckOutputWithContext(ctx context.Context) GetServiceHealthResultCheckOutput {
	return o
}

// The ID of this health-check.
func (o GetServiceHealthResultCheckOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultCheck) string { return v.Id }).(pulumi.StringOutput)
}

// The service name to select.
func (o GetServiceHealthResultCheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultCheck) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the node associated with this health-check.
func (o GetServiceHealthResultCheckOutput) Node() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultCheck) string { return v.Node }).(pulumi.StringOutput)
}

// A human readable description of the current state of the health-check.
func (o GetServiceHealthResultCheckOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultCheck) string { return v.Notes }).(pulumi.StringOutput)
}

// The output of the health-check.
func (o GetServiceHealthResultCheckOutput) Output() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultCheck) string { return v.Output }).(pulumi.StringOutput)
}

// The ID of the service associated to this health-check.
func (o GetServiceHealthResultCheckOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultCheck) string { return v.ServiceId }).(pulumi.StringOutput)
}

// The name of the service associated with this health-check.
func (o GetServiceHealthResultCheckOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultCheck) string { return v.ServiceName }).(pulumi.StringOutput)
}

// The list of tags associated with this health-check.
func (o GetServiceHealthResultCheckOutput) ServiceTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServiceHealthResultCheck) []string { return v.ServiceTags }).(pulumi.StringArrayOutput)
}

// The status of this health-check.
func (o GetServiceHealthResultCheckOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultCheck) string { return v.Status }).(pulumi.StringOutput)
}

type GetServiceHealthResultCheckArrayOutput struct{ *pulumi.OutputState }

func (GetServiceHealthResultCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceHealthResultCheck)(nil)).Elem()
}

func (o GetServiceHealthResultCheckArrayOutput) ToGetServiceHealthResultCheckArrayOutput() GetServiceHealthResultCheckArrayOutput {
	return o
}

func (o GetServiceHealthResultCheckArrayOutput) ToGetServiceHealthResultCheckArrayOutputWithContext(ctx context.Context) GetServiceHealthResultCheckArrayOutput {
	return o
}

func (o GetServiceHealthResultCheckArrayOutput) Index(i pulumi.IntInput) GetServiceHealthResultCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceHealthResultCheck {
		return vs[0].([]GetServiceHealthResultCheck)[vs[1].(int)]
	}).(GetServiceHealthResultCheckOutput)
}

type GetServiceHealthResultNode struct {
	// The address of this instance.
	Address string `pulumi:"address"`
	// The Consul datacenter to query.
	Datacenter string `pulumi:"datacenter"`
	// The ID of this health-check.
	Id string `pulumi:"id"`
	// Service metadata tag information, if any.
	Meta map[string]string `pulumi:"meta"`
	// The service name to select.
	Name            string            `pulumi:"name"`
	TaggedAddresses map[string]string `pulumi:"taggedAddresses"`
}

// GetServiceHealthResultNodeInput is an input type that accepts GetServiceHealthResultNodeArgs and GetServiceHealthResultNodeOutput values.
// You can construct a concrete instance of `GetServiceHealthResultNodeInput` via:
//
// 		 GetServiceHealthResultNodeArgs{...}
//
type GetServiceHealthResultNodeInput interface {
	pulumi.Input

	ToGetServiceHealthResultNodeOutput() GetServiceHealthResultNodeOutput
	ToGetServiceHealthResultNodeOutputWithContext(context.Context) GetServiceHealthResultNodeOutput
}

type GetServiceHealthResultNodeArgs struct {
	// The address of this instance.
	Address pulumi.StringInput `pulumi:"address"`
	// The Consul datacenter to query.
	Datacenter pulumi.StringInput `pulumi:"datacenter"`
	// The ID of this health-check.
	Id pulumi.StringInput `pulumi:"id"`
	// Service metadata tag information, if any.
	Meta pulumi.StringMapInput `pulumi:"meta"`
	// The service name to select.
	Name            pulumi.StringInput    `pulumi:"name"`
	TaggedAddresses pulumi.StringMapInput `pulumi:"taggedAddresses"`
}

func (GetServiceHealthResultNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthResultNode)(nil)).Elem()
}

func (i GetServiceHealthResultNodeArgs) ToGetServiceHealthResultNodeOutput() GetServiceHealthResultNodeOutput {
	return i.ToGetServiceHealthResultNodeOutputWithContext(context.Background())
}

func (i GetServiceHealthResultNodeArgs) ToGetServiceHealthResultNodeOutputWithContext(ctx context.Context) GetServiceHealthResultNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceHealthResultNodeOutput)
}

type GetServiceHealthResultNodeOutput struct{ *pulumi.OutputState }

func (GetServiceHealthResultNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthResultNode)(nil)).Elem()
}

func (o GetServiceHealthResultNodeOutput) ToGetServiceHealthResultNodeOutput() GetServiceHealthResultNodeOutput {
	return o
}

func (o GetServiceHealthResultNodeOutput) ToGetServiceHealthResultNodeOutputWithContext(ctx context.Context) GetServiceHealthResultNodeOutput {
	return o
}

// The address of this instance.
func (o GetServiceHealthResultNodeOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultNode) string { return v.Address }).(pulumi.StringOutput)
}

// The Consul datacenter to query.
func (o GetServiceHealthResultNodeOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultNode) string { return v.Datacenter }).(pulumi.StringOutput)
}

// The ID of this health-check.
func (o GetServiceHealthResultNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultNode) string { return v.Id }).(pulumi.StringOutput)
}

// Service metadata tag information, if any.
func (o GetServiceHealthResultNodeOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServiceHealthResultNode) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

// The service name to select.
func (o GetServiceHealthResultNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultNode) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServiceHealthResultNodeOutput) TaggedAddresses() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServiceHealthResultNode) map[string]string { return v.TaggedAddresses }).(pulumi.StringMapOutput)
}

type GetServiceHealthResultService struct {
	// The address of this instance.
	Address string `pulumi:"address"`
	// The ID of this health-check.
	Id string `pulumi:"id"`
	// Service metadata tag information, if any.
	Meta map[string]string `pulumi:"meta"`
	// The service name to select.
	Name string `pulumi:"name"`
	// The port of this instance.
	Port int `pulumi:"port"`
	// The list of tags associated with this instance.
	Tags []string `pulumi:"tags"`
}

// GetServiceHealthResultServiceInput is an input type that accepts GetServiceHealthResultServiceArgs and GetServiceHealthResultServiceOutput values.
// You can construct a concrete instance of `GetServiceHealthResultServiceInput` via:
//
// 		 GetServiceHealthResultServiceArgs{...}
//
type GetServiceHealthResultServiceInput interface {
	pulumi.Input

	ToGetServiceHealthResultServiceOutput() GetServiceHealthResultServiceOutput
	ToGetServiceHealthResultServiceOutputWithContext(context.Context) GetServiceHealthResultServiceOutput
}

type GetServiceHealthResultServiceArgs struct {
	// The address of this instance.
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of this health-check.
	Id pulumi.StringInput `pulumi:"id"`
	// Service metadata tag information, if any.
	Meta pulumi.StringMapInput `pulumi:"meta"`
	// The service name to select.
	Name pulumi.StringInput `pulumi:"name"`
	// The port of this instance.
	Port pulumi.IntInput `pulumi:"port"`
	// The list of tags associated with this instance.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (GetServiceHealthResultServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthResultService)(nil)).Elem()
}

func (i GetServiceHealthResultServiceArgs) ToGetServiceHealthResultServiceOutput() GetServiceHealthResultServiceOutput {
	return i.ToGetServiceHealthResultServiceOutputWithContext(context.Background())
}

func (i GetServiceHealthResultServiceArgs) ToGetServiceHealthResultServiceOutputWithContext(ctx context.Context) GetServiceHealthResultServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceHealthResultServiceOutput)
}

type GetServiceHealthResultServiceOutput struct{ *pulumi.OutputState }

func (GetServiceHealthResultServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthResultService)(nil)).Elem()
}

func (o GetServiceHealthResultServiceOutput) ToGetServiceHealthResultServiceOutput() GetServiceHealthResultServiceOutput {
	return o
}

func (o GetServiceHealthResultServiceOutput) ToGetServiceHealthResultServiceOutputWithContext(ctx context.Context) GetServiceHealthResultServiceOutput {
	return o
}

// The address of this instance.
func (o GetServiceHealthResultServiceOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultService) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of this health-check.
func (o GetServiceHealthResultServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultService) string { return v.Id }).(pulumi.StringOutput)
}

// Service metadata tag information, if any.
func (o GetServiceHealthResultServiceOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServiceHealthResultService) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

// The service name to select.
func (o GetServiceHealthResultServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceHealthResultService) string { return v.Name }).(pulumi.StringOutput)
}

// The port of this instance.
func (o GetServiceHealthResultServiceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceHealthResultService) int { return v.Port }).(pulumi.IntOutput)
}

// The list of tags associated with this instance.
func (o GetServiceHealthResultServiceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServiceHealthResultService) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type GetServiceQueryOption struct {
	// When `true`, the default, allow responses from
	// Consul servers that are followers.
	AllowStale *bool `pulumi:"allowStale"`
	// The Consul datacenter to query.  Defaults to the
	// same value found in `queryOptions` parameter specified below, or if that is
	// empty, the `datacenter` value found in the Consul agent that this provider is
	// configured to talk to.
	Datacenter *string `pulumi:"datacenter"`
	// The namespace to lookup the service.
	Namespace *string           `pulumi:"namespace"`
	Near      *string           `pulumi:"near"`
	NodeMeta  map[string]string `pulumi:"nodeMeta"`
	// When `true` force the client to perform a
	// read on at least quorum servers and verify the result is the same.  Defaults
	// to `false`.
	RequireConsistent *bool `pulumi:"requireConsistent"`
	// Specify the Consul ACL token to use when performing the
	// request.  This defaults to the same API token configured by the `consul`
	// provider but may be overriden if necessary.
	Token *string `pulumi:"token"`
	// Index number used to enable blocking quereis.
	WaitIndex *int `pulumi:"waitIndex"`
	// Max time the client should wait for a blocking query
	// to return.
	WaitTime *string `pulumi:"waitTime"`
}

// GetServiceQueryOptionInput is an input type that accepts GetServiceQueryOptionArgs and GetServiceQueryOptionOutput values.
// You can construct a concrete instance of `GetServiceQueryOptionInput` via:
//
// 		 GetServiceQueryOptionArgs{...}
//
type GetServiceQueryOptionInput interface {
	pulumi.Input

	ToGetServiceQueryOptionOutput() GetServiceQueryOptionOutput
	ToGetServiceQueryOptionOutputWithContext(context.Context) GetServiceQueryOptionOutput
}

type GetServiceQueryOptionArgs struct {
	// When `true`, the default, allow responses from
	// Consul servers that are followers.
	AllowStale pulumi.BoolPtrInput `pulumi:"allowStale"`
	// The Consul datacenter to query.  Defaults to the
	// same value found in `queryOptions` parameter specified below, or if that is
	// empty, the `datacenter` value found in the Consul agent that this provider is
	// configured to talk to.
	Datacenter pulumi.StringPtrInput `pulumi:"datacenter"`
	// The namespace to lookup the service.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Near      pulumi.StringPtrInput `pulumi:"near"`
	NodeMeta  pulumi.StringMapInput `pulumi:"nodeMeta"`
	// When `true` force the client to perform a
	// read on at least quorum servers and verify the result is the same.  Defaults
	// to `false`.
	RequireConsistent pulumi.BoolPtrInput `pulumi:"requireConsistent"`
	// Specify the Consul ACL token to use when performing the
	// request.  This defaults to the same API token configured by the `consul`
	// provider but may be overriden if necessary.
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Index number used to enable blocking quereis.
	WaitIndex pulumi.IntPtrInput `pulumi:"waitIndex"`
	// Max time the client should wait for a blocking query
	// to return.
	WaitTime pulumi.StringPtrInput `pulumi:"waitTime"`
}

func (GetServiceQueryOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceQueryOption)(nil)).Elem()
}

func (i GetServiceQueryOptionArgs) ToGetServiceQueryOptionOutput() GetServiceQueryOptionOutput {
	return i.ToGetServiceQueryOptionOutputWithContext(context.Background())
}

func (i GetServiceQueryOptionArgs) ToGetServiceQueryOptionOutputWithContext(ctx context.Context) GetServiceQueryOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceQueryOptionOutput)
}

// GetServiceQueryOptionArrayInput is an input type that accepts GetServiceQueryOptionArray and GetServiceQueryOptionArrayOutput values.
// You can construct a concrete instance of `GetServiceQueryOptionArrayInput` via:
//
// 		 GetServiceQueryOptionArray{ GetServiceQueryOptionArgs{...} }
//
type GetServiceQueryOptionArrayInput interface {
	pulumi.Input

	ToGetServiceQueryOptionArrayOutput() GetServiceQueryOptionArrayOutput
	ToGetServiceQueryOptionArrayOutputWithContext(context.Context) GetServiceQueryOptionArrayOutput
}

type GetServiceQueryOptionArray []GetServiceQueryOptionInput

func (GetServiceQueryOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceQueryOption)(nil)).Elem()
}

func (i GetServiceQueryOptionArray) ToGetServiceQueryOptionArrayOutput() GetServiceQueryOptionArrayOutput {
	return i.ToGetServiceQueryOptionArrayOutputWithContext(context.Background())
}

func (i GetServiceQueryOptionArray) ToGetServiceQueryOptionArrayOutputWithContext(ctx context.Context) GetServiceQueryOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceQueryOptionArrayOutput)
}

type GetServiceQueryOptionOutput struct{ *pulumi.OutputState }

func (GetServiceQueryOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceQueryOption)(nil)).Elem()
}

func (o GetServiceQueryOptionOutput) ToGetServiceQueryOptionOutput() GetServiceQueryOptionOutput {
	return o
}

func (o GetServiceQueryOptionOutput) ToGetServiceQueryOptionOutputWithContext(ctx context.Context) GetServiceQueryOptionOutput {
	return o
}

// When `true`, the default, allow responses from
// Consul servers that are followers.
func (o GetServiceQueryOptionOutput) AllowStale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetServiceQueryOption) *bool { return v.AllowStale }).(pulumi.BoolPtrOutput)
}

// The Consul datacenter to query.  Defaults to the
// same value found in `queryOptions` parameter specified below, or if that is
// empty, the `datacenter` value found in the Consul agent that this provider is
// configured to talk to.
func (o GetServiceQueryOptionOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceQueryOption) *string { return v.Datacenter }).(pulumi.StringPtrOutput)
}

// The namespace to lookup the service.
func (o GetServiceQueryOptionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceQueryOption) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetServiceQueryOptionOutput) Near() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceQueryOption) *string { return v.Near }).(pulumi.StringPtrOutput)
}

func (o GetServiceQueryOptionOutput) NodeMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServiceQueryOption) map[string]string { return v.NodeMeta }).(pulumi.StringMapOutput)
}

// When `true` force the client to perform a
// read on at least quorum servers and verify the result is the same.  Defaults
// to `false`.
func (o GetServiceQueryOptionOutput) RequireConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetServiceQueryOption) *bool { return v.RequireConsistent }).(pulumi.BoolPtrOutput)
}

// Specify the Consul ACL token to use when performing the
// request.  This defaults to the same API token configured by the `consul`
// provider but may be overriden if necessary.
func (o GetServiceQueryOptionOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceQueryOption) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Index number used to enable blocking quereis.
func (o GetServiceQueryOptionOutput) WaitIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetServiceQueryOption) *int { return v.WaitIndex }).(pulumi.IntPtrOutput)
}

// Max time the client should wait for a blocking query
// to return.
func (o GetServiceQueryOptionOutput) WaitTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceQueryOption) *string { return v.WaitTime }).(pulumi.StringPtrOutput)
}

type GetServiceQueryOptionArrayOutput struct{ *pulumi.OutputState }

func (GetServiceQueryOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceQueryOption)(nil)).Elem()
}

func (o GetServiceQueryOptionArrayOutput) ToGetServiceQueryOptionArrayOutput() GetServiceQueryOptionArrayOutput {
	return o
}

func (o GetServiceQueryOptionArrayOutput) ToGetServiceQueryOptionArrayOutputWithContext(ctx context.Context) GetServiceQueryOptionArrayOutput {
	return o
}

func (o GetServiceQueryOptionArrayOutput) Index(i pulumi.IntInput) GetServiceQueryOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceQueryOption {
		return vs[0].([]GetServiceQueryOption)[vs[1].(int)]
	}).(GetServiceQueryOptionOutput)
}

type GetServiceService struct {
	Address           string            `pulumi:"address"`
	CreateIndex       string            `pulumi:"createIndex"`
	EnableTagOverride string            `pulumi:"enableTagOverride"`
	Id                string            `pulumi:"id"`
	Meta              map[string]string `pulumi:"meta"`
	ModifyIndex       string            `pulumi:"modifyIndex"`
	// The service name to select.
	Name        string `pulumi:"name"`
	NodeAddress string `pulumi:"nodeAddress"`
	// The Node ID of the Consul agent advertising the service.
	// * [`nodeMeta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node
	// meta data tag information, if any.
	// * [`nodeName`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The
	// name of the Consul node.
	// * [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -
	// The IP address of the service.  If the `ServiceAddress` in the Consul catalog
	// is empty, this value is automatically populated with the `nodeAddress` (the
	// `Address` in the Consul Catalog).
	// * [`enableTagOverride`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -
	// Whether service tags can be overridden on this service.
	// * [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A
	// unique service instance identifier.
	// * [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The
	// name of the service.
	// * [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -
	// Port number of the service.
	// * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
	// List of explicit LAN and WAN IP addresses for the agent.
	// * [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -
	// List of tags for the service.
	// * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta
	// data tag information, if any.
	NodeId          string            `pulumi:"nodeId"`
	NodeMeta        map[string]string `pulumi:"nodeMeta"`
	NodeName        string            `pulumi:"nodeName"`
	Port            string            `pulumi:"port"`
	TaggedAddresses map[string]string `pulumi:"taggedAddresses"`
	Tags            []string          `pulumi:"tags"`
}

// GetServiceServiceInput is an input type that accepts GetServiceServiceArgs and GetServiceServiceOutput values.
// You can construct a concrete instance of `GetServiceServiceInput` via:
//
// 		 GetServiceServiceArgs{...}
//
type GetServiceServiceInput interface {
	pulumi.Input

	ToGetServiceServiceOutput() GetServiceServiceOutput
	ToGetServiceServiceOutputWithContext(context.Context) GetServiceServiceOutput
}

type GetServiceServiceArgs struct {
	Address           pulumi.StringInput    `pulumi:"address"`
	CreateIndex       pulumi.StringInput    `pulumi:"createIndex"`
	EnableTagOverride pulumi.StringInput    `pulumi:"enableTagOverride"`
	Id                pulumi.StringInput    `pulumi:"id"`
	Meta              pulumi.StringMapInput `pulumi:"meta"`
	ModifyIndex       pulumi.StringInput    `pulumi:"modifyIndex"`
	// The service name to select.
	Name        pulumi.StringInput `pulumi:"name"`
	NodeAddress pulumi.StringInput `pulumi:"nodeAddress"`
	// The Node ID of the Consul agent advertising the service.
	// * [`nodeMeta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node
	// meta data tag information, if any.
	// * [`nodeName`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The
	// name of the Consul node.
	// * [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -
	// The IP address of the service.  If the `ServiceAddress` in the Consul catalog
	// is empty, this value is automatically populated with the `nodeAddress` (the
	// `Address` in the Consul Catalog).
	// * [`enableTagOverride`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -
	// Whether service tags can be overridden on this service.
	// * [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A
	// unique service instance identifier.
	// * [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The
	// name of the service.
	// * [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -
	// Port number of the service.
	// * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
	// List of explicit LAN and WAN IP addresses for the agent.
	// * [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -
	// List of tags for the service.
	// * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta
	// data tag information, if any.
	NodeId          pulumi.StringInput      `pulumi:"nodeId"`
	NodeMeta        pulumi.StringMapInput   `pulumi:"nodeMeta"`
	NodeName        pulumi.StringInput      `pulumi:"nodeName"`
	Port            pulumi.StringInput      `pulumi:"port"`
	TaggedAddresses pulumi.StringMapInput   `pulumi:"taggedAddresses"`
	Tags            pulumi.StringArrayInput `pulumi:"tags"`
}

func (GetServiceServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceService)(nil)).Elem()
}

func (i GetServiceServiceArgs) ToGetServiceServiceOutput() GetServiceServiceOutput {
	return i.ToGetServiceServiceOutputWithContext(context.Background())
}

func (i GetServiceServiceArgs) ToGetServiceServiceOutputWithContext(ctx context.Context) GetServiceServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceServiceOutput)
}

// GetServiceServiceArrayInput is an input type that accepts GetServiceServiceArray and GetServiceServiceArrayOutput values.
// You can construct a concrete instance of `GetServiceServiceArrayInput` via:
//
// 		 GetServiceServiceArray{ GetServiceServiceArgs{...} }
//
type GetServiceServiceArrayInput interface {
	pulumi.Input

	ToGetServiceServiceArrayOutput() GetServiceServiceArrayOutput
	ToGetServiceServiceArrayOutputWithContext(context.Context) GetServiceServiceArrayOutput
}

type GetServiceServiceArray []GetServiceServiceInput

func (GetServiceServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceService)(nil)).Elem()
}

func (i GetServiceServiceArray) ToGetServiceServiceArrayOutput() GetServiceServiceArrayOutput {
	return i.ToGetServiceServiceArrayOutputWithContext(context.Background())
}

func (i GetServiceServiceArray) ToGetServiceServiceArrayOutputWithContext(ctx context.Context) GetServiceServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceServiceArrayOutput)
}

type GetServiceServiceOutput struct{ *pulumi.OutputState }

func (GetServiceServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceService)(nil)).Elem()
}

func (o GetServiceServiceOutput) ToGetServiceServiceOutput() GetServiceServiceOutput {
	return o
}

func (o GetServiceServiceOutput) ToGetServiceServiceOutputWithContext(ctx context.Context) GetServiceServiceOutput {
	return o
}

func (o GetServiceServiceOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.Address }).(pulumi.StringOutput)
}

func (o GetServiceServiceOutput) CreateIndex() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.CreateIndex }).(pulumi.StringOutput)
}

func (o GetServiceServiceOutput) EnableTagOverride() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.EnableTagOverride }).(pulumi.StringOutput)
}

func (o GetServiceServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServiceServiceOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServiceService) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

func (o GetServiceServiceOutput) ModifyIndex() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.ModifyIndex }).(pulumi.StringOutput)
}

// The service name to select.
func (o GetServiceServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServiceServiceOutput) NodeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.NodeAddress }).(pulumi.StringOutput)
}

// The Node ID of the Consul agent advertising the service.
// * [`nodeMeta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node
// meta data tag information, if any.
// * [`nodeName`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The
// name of the Consul node.
// * [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -
// The IP address of the service.  If the `ServiceAddress` in the Consul catalog
// is empty, this value is automatically populated with the `nodeAddress` (the
// `Address` in the Consul Catalog).
// * [`enableTagOverride`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -
// Whether service tags can be overridden on this service.
// * [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A
// unique service instance identifier.
// * [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The
// name of the service.
// * [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -
// Port number of the service.
// * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
// List of explicit LAN and WAN IP addresses for the agent.
// * [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -
// List of tags for the service.
// * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta
// data tag information, if any.
func (o GetServiceServiceOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.NodeId }).(pulumi.StringOutput)
}

func (o GetServiceServiceOutput) NodeMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServiceService) map[string]string { return v.NodeMeta }).(pulumi.StringMapOutput)
}

func (o GetServiceServiceOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.NodeName }).(pulumi.StringOutput)
}

func (o GetServiceServiceOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceService) string { return v.Port }).(pulumi.StringOutput)
}

func (o GetServiceServiceOutput) TaggedAddresses() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServiceService) map[string]string { return v.TaggedAddresses }).(pulumi.StringMapOutput)
}

func (o GetServiceServiceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServiceService) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type GetServiceServiceArrayOutput struct{ *pulumi.OutputState }

func (GetServiceServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceService)(nil)).Elem()
}

func (o GetServiceServiceArrayOutput) ToGetServiceServiceArrayOutput() GetServiceServiceArrayOutput {
	return o
}

func (o GetServiceServiceArrayOutput) ToGetServiceServiceArrayOutputWithContext(ctx context.Context) GetServiceServiceArrayOutput {
	return o
}

func (o GetServiceServiceArrayOutput) Index(i pulumi.IntInput) GetServiceServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceService {
		return vs[0].([]GetServiceService)[vs[1].(int)]
	}).(GetServiceServiceOutput)
}

type GetServicesQueryOption struct {
	// When `true`, the default, allow responses from
	// Consul servers that are followers.
	AllowStale *bool `pulumi:"allowStale"`
	// The Consul datacenter to query.  Defaults to the
	// same value found in `queryOptions` parameter specified below, or if that is
	// empty, the `datacenter` value found in the Consul agent that this provider is
	// configured to talk to.
	Datacenter *string `pulumi:"datacenter"`
	// The namespace to lookup the services.
	Namespace *string           `pulumi:"namespace"`
	Near      *string           `pulumi:"near"`
	NodeMeta  map[string]string `pulumi:"nodeMeta"`
	// When `true` force the client to perform a
	// read on at least quorum servers and verify the result is the same.  Defaults
	// to `false`.
	RequireConsistent *bool `pulumi:"requireConsistent"`
	// Specify the Consul ACL token to use when performing the
	// request.  This defaults to the same API token configured by the `consul`
	// provider but may be overriden if necessary.
	Token *string `pulumi:"token"`
	// Index number used to enable blocking quereis.
	WaitIndex *int `pulumi:"waitIndex"`
	// Max time the client should wait for a blocking query
	// to return.
	WaitTime *string `pulumi:"waitTime"`
}

// GetServicesQueryOptionInput is an input type that accepts GetServicesQueryOptionArgs and GetServicesQueryOptionOutput values.
// You can construct a concrete instance of `GetServicesQueryOptionInput` via:
//
// 		 GetServicesQueryOptionArgs{...}
//
type GetServicesQueryOptionInput interface {
	pulumi.Input

	ToGetServicesQueryOptionOutput() GetServicesQueryOptionOutput
	ToGetServicesQueryOptionOutputWithContext(context.Context) GetServicesQueryOptionOutput
}

type GetServicesQueryOptionArgs struct {
	// When `true`, the default, allow responses from
	// Consul servers that are followers.
	AllowStale pulumi.BoolPtrInput `pulumi:"allowStale"`
	// The Consul datacenter to query.  Defaults to the
	// same value found in `queryOptions` parameter specified below, or if that is
	// empty, the `datacenter` value found in the Consul agent that this provider is
	// configured to talk to.
	Datacenter pulumi.StringPtrInput `pulumi:"datacenter"`
	// The namespace to lookup the services.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Near      pulumi.StringPtrInput `pulumi:"near"`
	NodeMeta  pulumi.StringMapInput `pulumi:"nodeMeta"`
	// When `true` force the client to perform a
	// read on at least quorum servers and verify the result is the same.  Defaults
	// to `false`.
	RequireConsistent pulumi.BoolPtrInput `pulumi:"requireConsistent"`
	// Specify the Consul ACL token to use when performing the
	// request.  This defaults to the same API token configured by the `consul`
	// provider but may be overriden if necessary.
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Index number used to enable blocking quereis.
	WaitIndex pulumi.IntPtrInput `pulumi:"waitIndex"`
	// Max time the client should wait for a blocking query
	// to return.
	WaitTime pulumi.StringPtrInput `pulumi:"waitTime"`
}

func (GetServicesQueryOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicesQueryOption)(nil)).Elem()
}

func (i GetServicesQueryOptionArgs) ToGetServicesQueryOptionOutput() GetServicesQueryOptionOutput {
	return i.ToGetServicesQueryOptionOutputWithContext(context.Background())
}

func (i GetServicesQueryOptionArgs) ToGetServicesQueryOptionOutputWithContext(ctx context.Context) GetServicesQueryOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicesQueryOptionOutput)
}

// GetServicesQueryOptionArrayInput is an input type that accepts GetServicesQueryOptionArray and GetServicesQueryOptionArrayOutput values.
// You can construct a concrete instance of `GetServicesQueryOptionArrayInput` via:
//
// 		 GetServicesQueryOptionArray{ GetServicesQueryOptionArgs{...} }
//
type GetServicesQueryOptionArrayInput interface {
	pulumi.Input

	ToGetServicesQueryOptionArrayOutput() GetServicesQueryOptionArrayOutput
	ToGetServicesQueryOptionArrayOutputWithContext(context.Context) GetServicesQueryOptionArrayOutput
}

type GetServicesQueryOptionArray []GetServicesQueryOptionInput

func (GetServicesQueryOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicesQueryOption)(nil)).Elem()
}

func (i GetServicesQueryOptionArray) ToGetServicesQueryOptionArrayOutput() GetServicesQueryOptionArrayOutput {
	return i.ToGetServicesQueryOptionArrayOutputWithContext(context.Background())
}

func (i GetServicesQueryOptionArray) ToGetServicesQueryOptionArrayOutputWithContext(ctx context.Context) GetServicesQueryOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicesQueryOptionArrayOutput)
}

type GetServicesQueryOptionOutput struct{ *pulumi.OutputState }

func (GetServicesQueryOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicesQueryOption)(nil)).Elem()
}

func (o GetServicesQueryOptionOutput) ToGetServicesQueryOptionOutput() GetServicesQueryOptionOutput {
	return o
}

func (o GetServicesQueryOptionOutput) ToGetServicesQueryOptionOutputWithContext(ctx context.Context) GetServicesQueryOptionOutput {
	return o
}

// When `true`, the default, allow responses from
// Consul servers that are followers.
func (o GetServicesQueryOptionOutput) AllowStale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetServicesQueryOption) *bool { return v.AllowStale }).(pulumi.BoolPtrOutput)
}

// The Consul datacenter to query.  Defaults to the
// same value found in `queryOptions` parameter specified below, or if that is
// empty, the `datacenter` value found in the Consul agent that this provider is
// configured to talk to.
func (o GetServicesQueryOptionOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServicesQueryOption) *string { return v.Datacenter }).(pulumi.StringPtrOutput)
}

// The namespace to lookup the services.
func (o GetServicesQueryOptionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServicesQueryOption) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetServicesQueryOptionOutput) Near() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServicesQueryOption) *string { return v.Near }).(pulumi.StringPtrOutput)
}

func (o GetServicesQueryOptionOutput) NodeMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServicesQueryOption) map[string]string { return v.NodeMeta }).(pulumi.StringMapOutput)
}

// When `true` force the client to perform a
// read on at least quorum servers and verify the result is the same.  Defaults
// to `false`.
func (o GetServicesQueryOptionOutput) RequireConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetServicesQueryOption) *bool { return v.RequireConsistent }).(pulumi.BoolPtrOutput)
}

// Specify the Consul ACL token to use when performing the
// request.  This defaults to the same API token configured by the `consul`
// provider but may be overriden if necessary.
func (o GetServicesQueryOptionOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServicesQueryOption) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Index number used to enable blocking quereis.
func (o GetServicesQueryOptionOutput) WaitIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetServicesQueryOption) *int { return v.WaitIndex }).(pulumi.IntPtrOutput)
}

// Max time the client should wait for a blocking query
// to return.
func (o GetServicesQueryOptionOutput) WaitTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServicesQueryOption) *string { return v.WaitTime }).(pulumi.StringPtrOutput)
}

type GetServicesQueryOptionArrayOutput struct{ *pulumi.OutputState }

func (GetServicesQueryOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicesQueryOption)(nil)).Elem()
}

func (o GetServicesQueryOptionArrayOutput) ToGetServicesQueryOptionArrayOutput() GetServicesQueryOptionArrayOutput {
	return o
}

func (o GetServicesQueryOptionArrayOutput) ToGetServicesQueryOptionArrayOutputWithContext(ctx context.Context) GetServicesQueryOptionArrayOutput {
	return o
}

func (o GetServicesQueryOptionArrayOutput) Index(i pulumi.IntInput) GetServicesQueryOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicesQueryOption {
		return vs[0].([]GetServicesQueryOption)[vs[1].(int)]
	}).(GetServicesQueryOptionOutput)
}

func init() {
	pulumi.RegisterOutputType(AclRoleServiceIdentityOutput{})
	pulumi.RegisterOutputType(AclRoleServiceIdentityArrayOutput{})
	pulumi.RegisterOutputType(CatalogEntryServiceOutput{})
	pulumi.RegisterOutputType(CatalogEntryServiceArrayOutput{})
	pulumi.RegisterOutputType(KeyPrefixSubkeyCollectionOutput{})
	pulumi.RegisterOutputType(KeyPrefixSubkeyCollectionArrayOutput{})
	pulumi.RegisterOutputType(KeysKeyOutput{})
	pulumi.RegisterOutputType(KeysKeyArrayOutput{})
	pulumi.RegisterOutputType(PreparedQueryDnsOutput{})
	pulumi.RegisterOutputType(PreparedQueryDnsPtrOutput{})
	pulumi.RegisterOutputType(PreparedQueryFailoverOutput{})
	pulumi.RegisterOutputType(PreparedQueryFailoverPtrOutput{})
	pulumi.RegisterOutputType(PreparedQueryTemplateOutput{})
	pulumi.RegisterOutputType(PreparedQueryTemplatePtrOutput{})
	pulumi.RegisterOutputType(ServiceCheckOutput{})
	pulumi.RegisterOutputType(ServiceCheckArrayOutput{})
	pulumi.RegisterOutputType(ServiceCheckHeaderOutput{})
	pulumi.RegisterOutputType(ServiceCheckHeaderArrayOutput{})
	pulumi.RegisterOutputType(GetAclRolePolicyOutput{})
	pulumi.RegisterOutputType(GetAclRolePolicyArrayOutput{})
	pulumi.RegisterOutputType(GetAclRoleServiceIdentityOutput{})
	pulumi.RegisterOutputType(GetAclRoleServiceIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetAclTokenPolicyOutput{})
	pulumi.RegisterOutputType(GetAclTokenPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetAutopilotHealthServerOutput{})
	pulumi.RegisterOutputType(GetAutopilotHealthServerArrayOutput{})
	pulumi.RegisterOutputType(GetCatalogNodesNodeOutput{})
	pulumi.RegisterOutputType(GetCatalogNodesNodeArrayOutput{})
	pulumi.RegisterOutputType(GetCatalogNodesQueryOptionOutput{})
	pulumi.RegisterOutputType(GetCatalogNodesQueryOptionArrayOutput{})
	pulumi.RegisterOutputType(GetCatalogServiceQueryOptionOutput{})
	pulumi.RegisterOutputType(GetCatalogServiceQueryOptionArrayOutput{})
	pulumi.RegisterOutputType(GetCatalogServiceServiceOutput{})
	pulumi.RegisterOutputType(GetCatalogServiceServiceArrayOutput{})
	pulumi.RegisterOutputType(GetCatalogServicesQueryOptionOutput{})
	pulumi.RegisterOutputType(GetCatalogServicesQueryOptionArrayOutput{})
	pulumi.RegisterOutputType(GetKeyPrefixSubkeyCollectionOutput{})
	pulumi.RegisterOutputType(GetKeyPrefixSubkeyCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetKeysKeyOutput{})
	pulumi.RegisterOutputType(GetKeysKeyArrayOutput{})
	pulumi.RegisterOutputType(GetNodesNodeOutput{})
	pulumi.RegisterOutputType(GetNodesNodeArrayOutput{})
	pulumi.RegisterOutputType(GetNodesQueryOptionOutput{})
	pulumi.RegisterOutputType(GetNodesQueryOptionArrayOutput{})
	pulumi.RegisterOutputType(GetServiceHealthResultTypeOutput{})
	pulumi.RegisterOutputType(GetServiceHealthResultTypeArrayOutput{})
	pulumi.RegisterOutputType(GetServiceHealthResultCheckOutput{})
	pulumi.RegisterOutputType(GetServiceHealthResultCheckArrayOutput{})
	pulumi.RegisterOutputType(GetServiceHealthResultNodeOutput{})
	pulumi.RegisterOutputType(GetServiceHealthResultServiceOutput{})
	pulumi.RegisterOutputType(GetServiceQueryOptionOutput{})
	pulumi.RegisterOutputType(GetServiceQueryOptionArrayOutput{})
	pulumi.RegisterOutputType(GetServiceServiceOutput{})
	pulumi.RegisterOutputType(GetServiceServiceArrayOutput{})
	pulumi.RegisterOutputType(GetServicesQueryOptionOutput{})
	pulumi.RegisterOutputType(GetServicesQueryOptionArrayOutput{})
}
