// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// `consul_prepared_query` can be imported with the query's ID in the Consul HTTP API.
//
// ```sh
//  $ pulumi import consul:index/preparedQuery:PreparedQuery my_service 71ecfb82-717a-4258-b4b6-2fb75144d856
// ```
type PreparedQuery struct {
	pulumi.CustomResourceState

	// When `true` the prepared query will return connect
	// proxy services for a queried service.  Conditions such as `tags` in the
	// prepared query will be matched against the proxy service. Defaults to false.
	Connect pulumi.BoolPtrOutput `pulumi:"connect"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrOutput `pulumi:"datacenter"`
	// Settings for controlling the DNS response details.
	Dns PreparedQueryDnsPtrOutput `pulumi:"dns"`
	// Options for controlling behavior when no healthy
	// nodes are available in the local DC.
	Failover PreparedQueryFailoverPtrOutput `pulumi:"failover"`
	// Specifies a list of check IDs that should be
	// ignored when filtering unhealthy instances. This is mostly useful in an
	// emergency or as a temporary measure when a health check is found to be
	// unreliable. Being able to ignore it in centrally-defined queries can be
	// simpler than de-registering the check as an interim solution until the check
	// can be fixed.
	IgnoreCheckIds pulumi.StringArrayOutput `pulumi:"ignoreCheckIds"`
	// The name of the prepared query. Used to identify
	// the prepared query during requests. Can be specified as an empty string
	// to configure the query as a catch-all.
	Name pulumi.StringOutput `pulumi:"name"`
	// Allows specifying the name of a node to sort results
	// near using Consul's distance sorting and network coordinates. The magic
	// `_agent` value can be used to always sort nearest the node servicing the
	// request.
	Near pulumi.StringPtrOutput `pulumi:"near"`
	// Specifies a list of user-defined key/value pairs that
	// will be used for filtering the query results to nodes with the given metadata
	// values present.
	NodeMeta pulumi.StringMapOutput `pulumi:"nodeMeta"`
	// When `true`, the prepared query will only
	// return nodes with passing health checks in the result.
	OnlyPassing pulumi.BoolPtrOutput `pulumi:"onlyPassing"`
	// The name of the service to query.
	Service pulumi.StringOutput `pulumi:"service"`
	// Specifies a list of user-defined key/value pairs
	// that will be used for filtering the query results to services with the given
	// metadata values present.
	ServiceMeta pulumi.StringMapOutput `pulumi:"serviceMeta"`
	// The name of the Consul session to tie this query's
	// lifetime to.  This is an advanced parameter that should not be used without a
	// complete understanding of Consul sessions and the implications of their use
	// (it is recommended to leave this blank in nearly all cases).  If this
	// parameter is omitted the query will not expire.
	Session pulumi.StringPtrOutput `pulumi:"session"`
	// The ACL token to store with the prepared
	// query. This token will be used by default whenever the query is executed.
	StoredToken pulumi.StringPtrOutput `pulumi:"storedToken"`
	// The list of required and/or disallowed tags.  If a tag is
	// in this list it must be present.  If the tag is preceded with a "!" then it is
	// disallowed.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Query templating options. This is used to make a
	// single prepared query respond to many different requests.
	Template PreparedQueryTemplatePtrOutput `pulumi:"template"`
	// The ACL token to use when saving the prepared query.
	// This overrides the token that the agent provides by default.
	Token pulumi.StringPtrOutput `pulumi:"token"`
}

// NewPreparedQuery registers a new resource with the given unique name, arguments, and options.
func NewPreparedQuery(ctx *pulumi.Context,
	name string, args *PreparedQueryArgs, opts ...pulumi.ResourceOption) (*PreparedQuery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	var resource PreparedQuery
	err := ctx.RegisterResource("consul:index/preparedQuery:PreparedQuery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreparedQuery gets an existing PreparedQuery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreparedQuery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreparedQueryState, opts ...pulumi.ResourceOption) (*PreparedQuery, error) {
	var resource PreparedQuery
	err := ctx.ReadResource("consul:index/preparedQuery:PreparedQuery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreparedQuery resources.
type preparedQueryState struct {
	// When `true` the prepared query will return connect
	// proxy services for a queried service.  Conditions such as `tags` in the
	// prepared query will be matched against the proxy service. Defaults to false.
	Connect *bool `pulumi:"connect"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Settings for controlling the DNS response details.
	Dns *PreparedQueryDns `pulumi:"dns"`
	// Options for controlling behavior when no healthy
	// nodes are available in the local DC.
	Failover *PreparedQueryFailover `pulumi:"failover"`
	// Specifies a list of check IDs that should be
	// ignored when filtering unhealthy instances. This is mostly useful in an
	// emergency or as a temporary measure when a health check is found to be
	// unreliable. Being able to ignore it in centrally-defined queries can be
	// simpler than de-registering the check as an interim solution until the check
	// can be fixed.
	IgnoreCheckIds []string `pulumi:"ignoreCheckIds"`
	// The name of the prepared query. Used to identify
	// the prepared query during requests. Can be specified as an empty string
	// to configure the query as a catch-all.
	Name *string `pulumi:"name"`
	// Allows specifying the name of a node to sort results
	// near using Consul's distance sorting and network coordinates. The magic
	// `_agent` value can be used to always sort nearest the node servicing the
	// request.
	Near *string `pulumi:"near"`
	// Specifies a list of user-defined key/value pairs that
	// will be used for filtering the query results to nodes with the given metadata
	// values present.
	NodeMeta map[string]string `pulumi:"nodeMeta"`
	// When `true`, the prepared query will only
	// return nodes with passing health checks in the result.
	OnlyPassing *bool `pulumi:"onlyPassing"`
	// The name of the service to query.
	Service *string `pulumi:"service"`
	// Specifies a list of user-defined key/value pairs
	// that will be used for filtering the query results to services with the given
	// metadata values present.
	ServiceMeta map[string]string `pulumi:"serviceMeta"`
	// The name of the Consul session to tie this query's
	// lifetime to.  This is an advanced parameter that should not be used without a
	// complete understanding of Consul sessions and the implications of their use
	// (it is recommended to leave this blank in nearly all cases).  If this
	// parameter is omitted the query will not expire.
	Session *string `pulumi:"session"`
	// The ACL token to store with the prepared
	// query. This token will be used by default whenever the query is executed.
	StoredToken *string `pulumi:"storedToken"`
	// The list of required and/or disallowed tags.  If a tag is
	// in this list it must be present.  If the tag is preceded with a "!" then it is
	// disallowed.
	Tags []string `pulumi:"tags"`
	// Query templating options. This is used to make a
	// single prepared query respond to many different requests.
	Template *PreparedQueryTemplate `pulumi:"template"`
	// The ACL token to use when saving the prepared query.
	// This overrides the token that the agent provides by default.
	Token *string `pulumi:"token"`
}

type PreparedQueryState struct {
	// When `true` the prepared query will return connect
	// proxy services for a queried service.  Conditions such as `tags` in the
	// prepared query will be matched against the proxy service. Defaults to false.
	Connect pulumi.BoolPtrInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Settings for controlling the DNS response details.
	Dns PreparedQueryDnsPtrInput
	// Options for controlling behavior when no healthy
	// nodes are available in the local DC.
	Failover PreparedQueryFailoverPtrInput
	// Specifies a list of check IDs that should be
	// ignored when filtering unhealthy instances. This is mostly useful in an
	// emergency or as a temporary measure when a health check is found to be
	// unreliable. Being able to ignore it in centrally-defined queries can be
	// simpler than de-registering the check as an interim solution until the check
	// can be fixed.
	IgnoreCheckIds pulumi.StringArrayInput
	// The name of the prepared query. Used to identify
	// the prepared query during requests. Can be specified as an empty string
	// to configure the query as a catch-all.
	Name pulumi.StringPtrInput
	// Allows specifying the name of a node to sort results
	// near using Consul's distance sorting and network coordinates. The magic
	// `_agent` value can be used to always sort nearest the node servicing the
	// request.
	Near pulumi.StringPtrInput
	// Specifies a list of user-defined key/value pairs that
	// will be used for filtering the query results to nodes with the given metadata
	// values present.
	NodeMeta pulumi.StringMapInput
	// When `true`, the prepared query will only
	// return nodes with passing health checks in the result.
	OnlyPassing pulumi.BoolPtrInput
	// The name of the service to query.
	Service pulumi.StringPtrInput
	// Specifies a list of user-defined key/value pairs
	// that will be used for filtering the query results to services with the given
	// metadata values present.
	ServiceMeta pulumi.StringMapInput
	// The name of the Consul session to tie this query's
	// lifetime to.  This is an advanced parameter that should not be used without a
	// complete understanding of Consul sessions and the implications of their use
	// (it is recommended to leave this blank in nearly all cases).  If this
	// parameter is omitted the query will not expire.
	Session pulumi.StringPtrInput
	// The ACL token to store with the prepared
	// query. This token will be used by default whenever the query is executed.
	StoredToken pulumi.StringPtrInput
	// The list of required and/or disallowed tags.  If a tag is
	// in this list it must be present.  If the tag is preceded with a "!" then it is
	// disallowed.
	Tags pulumi.StringArrayInput
	// Query templating options. This is used to make a
	// single prepared query respond to many different requests.
	Template PreparedQueryTemplatePtrInput
	// The ACL token to use when saving the prepared query.
	// This overrides the token that the agent provides by default.
	Token pulumi.StringPtrInput
}

func (PreparedQueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*preparedQueryState)(nil)).Elem()
}

type preparedQueryArgs struct {
	// When `true` the prepared query will return connect
	// proxy services for a queried service.  Conditions such as `tags` in the
	// prepared query will be matched against the proxy service. Defaults to false.
	Connect *bool `pulumi:"connect"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Settings for controlling the DNS response details.
	Dns *PreparedQueryDns `pulumi:"dns"`
	// Options for controlling behavior when no healthy
	// nodes are available in the local DC.
	Failover *PreparedQueryFailover `pulumi:"failover"`
	// Specifies a list of check IDs that should be
	// ignored when filtering unhealthy instances. This is mostly useful in an
	// emergency or as a temporary measure when a health check is found to be
	// unreliable. Being able to ignore it in centrally-defined queries can be
	// simpler than de-registering the check as an interim solution until the check
	// can be fixed.
	IgnoreCheckIds []string `pulumi:"ignoreCheckIds"`
	// The name of the prepared query. Used to identify
	// the prepared query during requests. Can be specified as an empty string
	// to configure the query as a catch-all.
	Name *string `pulumi:"name"`
	// Allows specifying the name of a node to sort results
	// near using Consul's distance sorting and network coordinates. The magic
	// `_agent` value can be used to always sort nearest the node servicing the
	// request.
	Near *string `pulumi:"near"`
	// Specifies a list of user-defined key/value pairs that
	// will be used for filtering the query results to nodes with the given metadata
	// values present.
	NodeMeta map[string]string `pulumi:"nodeMeta"`
	// When `true`, the prepared query will only
	// return nodes with passing health checks in the result.
	OnlyPassing *bool `pulumi:"onlyPassing"`
	// The name of the service to query.
	Service string `pulumi:"service"`
	// Specifies a list of user-defined key/value pairs
	// that will be used for filtering the query results to services with the given
	// metadata values present.
	ServiceMeta map[string]string `pulumi:"serviceMeta"`
	// The name of the Consul session to tie this query's
	// lifetime to.  This is an advanced parameter that should not be used without a
	// complete understanding of Consul sessions and the implications of their use
	// (it is recommended to leave this blank in nearly all cases).  If this
	// parameter is omitted the query will not expire.
	Session *string `pulumi:"session"`
	// The ACL token to store with the prepared
	// query. This token will be used by default whenever the query is executed.
	StoredToken *string `pulumi:"storedToken"`
	// The list of required and/or disallowed tags.  If a tag is
	// in this list it must be present.  If the tag is preceded with a "!" then it is
	// disallowed.
	Tags []string `pulumi:"tags"`
	// Query templating options. This is used to make a
	// single prepared query respond to many different requests.
	Template *PreparedQueryTemplate `pulumi:"template"`
	// The ACL token to use when saving the prepared query.
	// This overrides the token that the agent provides by default.
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a PreparedQuery resource.
type PreparedQueryArgs struct {
	// When `true` the prepared query will return connect
	// proxy services for a queried service.  Conditions such as `tags` in the
	// prepared query will be matched against the proxy service. Defaults to false.
	Connect pulumi.BoolPtrInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Settings for controlling the DNS response details.
	Dns PreparedQueryDnsPtrInput
	// Options for controlling behavior when no healthy
	// nodes are available in the local DC.
	Failover PreparedQueryFailoverPtrInput
	// Specifies a list of check IDs that should be
	// ignored when filtering unhealthy instances. This is mostly useful in an
	// emergency or as a temporary measure when a health check is found to be
	// unreliable. Being able to ignore it in centrally-defined queries can be
	// simpler than de-registering the check as an interim solution until the check
	// can be fixed.
	IgnoreCheckIds pulumi.StringArrayInput
	// The name of the prepared query. Used to identify
	// the prepared query during requests. Can be specified as an empty string
	// to configure the query as a catch-all.
	Name pulumi.StringPtrInput
	// Allows specifying the name of a node to sort results
	// near using Consul's distance sorting and network coordinates. The magic
	// `_agent` value can be used to always sort nearest the node servicing the
	// request.
	Near pulumi.StringPtrInput
	// Specifies a list of user-defined key/value pairs that
	// will be used for filtering the query results to nodes with the given metadata
	// values present.
	NodeMeta pulumi.StringMapInput
	// When `true`, the prepared query will only
	// return nodes with passing health checks in the result.
	OnlyPassing pulumi.BoolPtrInput
	// The name of the service to query.
	Service pulumi.StringInput
	// Specifies a list of user-defined key/value pairs
	// that will be used for filtering the query results to services with the given
	// metadata values present.
	ServiceMeta pulumi.StringMapInput
	// The name of the Consul session to tie this query's
	// lifetime to.  This is an advanced parameter that should not be used without a
	// complete understanding of Consul sessions and the implications of their use
	// (it is recommended to leave this blank in nearly all cases).  If this
	// parameter is omitted the query will not expire.
	Session pulumi.StringPtrInput
	// The ACL token to store with the prepared
	// query. This token will be used by default whenever the query is executed.
	StoredToken pulumi.StringPtrInput
	// The list of required and/or disallowed tags.  If a tag is
	// in this list it must be present.  If the tag is preceded with a "!" then it is
	// disallowed.
	Tags pulumi.StringArrayInput
	// Query templating options. This is used to make a
	// single prepared query respond to many different requests.
	Template PreparedQueryTemplatePtrInput
	// The ACL token to use when saving the prepared query.
	// This overrides the token that the agent provides by default.
	Token pulumi.StringPtrInput
}

func (PreparedQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preparedQueryArgs)(nil)).Elem()
}

type PreparedQueryInput interface {
	pulumi.Input

	ToPreparedQueryOutput() PreparedQueryOutput
	ToPreparedQueryOutputWithContext(ctx context.Context) PreparedQueryOutput
}

func (*PreparedQuery) ElementType() reflect.Type {
	return reflect.TypeOf((*PreparedQuery)(nil))
}

func (i *PreparedQuery) ToPreparedQueryOutput() PreparedQueryOutput {
	return i.ToPreparedQueryOutputWithContext(context.Background())
}

func (i *PreparedQuery) ToPreparedQueryOutputWithContext(ctx context.Context) PreparedQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryOutput)
}

func (i *PreparedQuery) ToPreparedQueryPtrOutput() PreparedQueryPtrOutput {
	return i.ToPreparedQueryPtrOutputWithContext(context.Background())
}

func (i *PreparedQuery) ToPreparedQueryPtrOutputWithContext(ctx context.Context) PreparedQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryPtrOutput)
}

type PreparedQueryPtrInput interface {
	pulumi.Input

	ToPreparedQueryPtrOutput() PreparedQueryPtrOutput
	ToPreparedQueryPtrOutputWithContext(ctx context.Context) PreparedQueryPtrOutput
}

type preparedQueryPtrType PreparedQueryArgs

func (*preparedQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQuery)(nil))
}

func (i *preparedQueryPtrType) ToPreparedQueryPtrOutput() PreparedQueryPtrOutput {
	return i.ToPreparedQueryPtrOutputWithContext(context.Background())
}

func (i *preparedQueryPtrType) ToPreparedQueryPtrOutputWithContext(ctx context.Context) PreparedQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryPtrOutput)
}

// PreparedQueryArrayInput is an input type that accepts PreparedQueryArray and PreparedQueryArrayOutput values.
// You can construct a concrete instance of `PreparedQueryArrayInput` via:
//
//          PreparedQueryArray{ PreparedQueryArgs{...} }
type PreparedQueryArrayInput interface {
	pulumi.Input

	ToPreparedQueryArrayOutput() PreparedQueryArrayOutput
	ToPreparedQueryArrayOutputWithContext(context.Context) PreparedQueryArrayOutput
}

type PreparedQueryArray []PreparedQueryInput

func (PreparedQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*PreparedQuery)(nil))
}

func (i PreparedQueryArray) ToPreparedQueryArrayOutput() PreparedQueryArrayOutput {
	return i.ToPreparedQueryArrayOutputWithContext(context.Background())
}

func (i PreparedQueryArray) ToPreparedQueryArrayOutputWithContext(ctx context.Context) PreparedQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryArrayOutput)
}

// PreparedQueryMapInput is an input type that accepts PreparedQueryMap and PreparedQueryMapOutput values.
// You can construct a concrete instance of `PreparedQueryMapInput` via:
//
//          PreparedQueryMap{ "key": PreparedQueryArgs{...} }
type PreparedQueryMapInput interface {
	pulumi.Input

	ToPreparedQueryMapOutput() PreparedQueryMapOutput
	ToPreparedQueryMapOutputWithContext(context.Context) PreparedQueryMapOutput
}

type PreparedQueryMap map[string]PreparedQueryInput

func (PreparedQueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*PreparedQuery)(nil))
}

func (i PreparedQueryMap) ToPreparedQueryMapOutput() PreparedQueryMapOutput {
	return i.ToPreparedQueryMapOutputWithContext(context.Background())
}

func (i PreparedQueryMap) ToPreparedQueryMapOutputWithContext(ctx context.Context) PreparedQueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryMapOutput)
}

type PreparedQueryOutput struct {
	*pulumi.OutputState
}

func (PreparedQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreparedQuery)(nil))
}

func (o PreparedQueryOutput) ToPreparedQueryOutput() PreparedQueryOutput {
	return o
}

func (o PreparedQueryOutput) ToPreparedQueryOutputWithContext(ctx context.Context) PreparedQueryOutput {
	return o
}

func (o PreparedQueryOutput) ToPreparedQueryPtrOutput() PreparedQueryPtrOutput {
	return o.ToPreparedQueryPtrOutputWithContext(context.Background())
}

func (o PreparedQueryOutput) ToPreparedQueryPtrOutputWithContext(ctx context.Context) PreparedQueryPtrOutput {
	return o.ApplyT(func(v PreparedQuery) *PreparedQuery {
		return &v
	}).(PreparedQueryPtrOutput)
}

type PreparedQueryPtrOutput struct {
	*pulumi.OutputState
}

func (PreparedQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQuery)(nil))
}

func (o PreparedQueryPtrOutput) ToPreparedQueryPtrOutput() PreparedQueryPtrOutput {
	return o
}

func (o PreparedQueryPtrOutput) ToPreparedQueryPtrOutputWithContext(ctx context.Context) PreparedQueryPtrOutput {
	return o
}

type PreparedQueryArrayOutput struct{ *pulumi.OutputState }

func (PreparedQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PreparedQuery)(nil))
}

func (o PreparedQueryArrayOutput) ToPreparedQueryArrayOutput() PreparedQueryArrayOutput {
	return o
}

func (o PreparedQueryArrayOutput) ToPreparedQueryArrayOutputWithContext(ctx context.Context) PreparedQueryArrayOutput {
	return o
}

func (o PreparedQueryArrayOutput) Index(i pulumi.IntInput) PreparedQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PreparedQuery {
		return vs[0].([]PreparedQuery)[vs[1].(int)]
	}).(PreparedQueryOutput)
}

type PreparedQueryMapOutput struct{ *pulumi.OutputState }

func (PreparedQueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PreparedQuery)(nil))
}

func (o PreparedQueryMapOutput) ToPreparedQueryMapOutput() PreparedQueryMapOutput {
	return o
}

func (o PreparedQueryMapOutput) ToPreparedQueryMapOutputWithContext(ctx context.Context) PreparedQueryMapOutput {
	return o
}

func (o PreparedQueryMapOutput) MapIndex(k pulumi.StringInput) PreparedQueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PreparedQuery {
		return vs[0].(map[string]PreparedQuery)[vs[1].(string)]
	}).(PreparedQueryOutput)
}

func init() {
	pulumi.RegisterOutputType(PreparedQueryOutput{})
	pulumi.RegisterOutputType(PreparedQueryPtrOutput{})
	pulumi.RegisterOutputType(PreparedQueryArrayOutput{})
	pulumi.RegisterOutputType(PreparedQueryMapOutput{})
}
