// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/prepared_query.html.markdown.
type PreparedQuery struct {
	s *pulumi.ResourceState
}

// NewPreparedQuery registers a new resource with the given unique name, arguments, and options.
func NewPreparedQuery(ctx *pulumi.Context,
	name string, args *PreparedQueryArgs, opts ...pulumi.ResourceOpt) (*PreparedQuery, error) {
	if args == nil || args.Service == nil {
		return nil, errors.New("missing required argument 'Service'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["connect"] = nil
		inputs["datacenter"] = nil
		inputs["dns"] = nil
		inputs["failover"] = nil
		inputs["name"] = nil
		inputs["near"] = nil
		inputs["onlyPassing"] = nil
		inputs["service"] = nil
		inputs["session"] = nil
		inputs["storedToken"] = nil
		inputs["tags"] = nil
		inputs["template"] = nil
		inputs["token"] = nil
	} else {
		inputs["connect"] = args.Connect
		inputs["datacenter"] = args.Datacenter
		inputs["dns"] = args.Dns
		inputs["failover"] = args.Failover
		inputs["name"] = args.Name
		inputs["near"] = args.Near
		inputs["onlyPassing"] = args.OnlyPassing
		inputs["service"] = args.Service
		inputs["session"] = args.Session
		inputs["storedToken"] = args.StoredToken
		inputs["tags"] = args.Tags
		inputs["template"] = args.Template
		inputs["token"] = args.Token
	}
	s, err := ctx.RegisterResource("consul:index/preparedQuery:PreparedQuery", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PreparedQuery{s: s}, nil
}

// GetPreparedQuery gets an existing PreparedQuery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreparedQuery(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PreparedQueryState, opts ...pulumi.ResourceOpt) (*PreparedQuery, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["connect"] = state.Connect
		inputs["datacenter"] = state.Datacenter
		inputs["dns"] = state.Dns
		inputs["failover"] = state.Failover
		inputs["name"] = state.Name
		inputs["near"] = state.Near
		inputs["onlyPassing"] = state.OnlyPassing
		inputs["service"] = state.Service
		inputs["session"] = state.Session
		inputs["storedToken"] = state.StoredToken
		inputs["tags"] = state.Tags
		inputs["template"] = state.Template
		inputs["token"] = state.Token
	}
	s, err := ctx.ReadResource("consul:index/preparedQuery:PreparedQuery", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PreparedQuery{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PreparedQuery) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PreparedQuery) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// When `true` the prepared query will return connect
// proxy services for a queried service.  Conditions such as `tags` in the
// prepared query will be matched against the proxy service. Defaults to false.
func (r *PreparedQuery) Connect() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["connect"])
}

// The datacenter to use. This overrides the
// agent's default datacenter and the datacenter in the provider setup.
func (r *PreparedQuery) Datacenter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["datacenter"])
}

// Settings for controlling the DNS response details.
func (r *PreparedQuery) Dns() *pulumi.Output {
	return r.s.State["dns"]
}

// Options for controlling behavior when no healthy
// nodes are available in the local DC.
func (r *PreparedQuery) Failover() *pulumi.Output {
	return r.s.State["failover"]
}

// The name of the prepared query. Used to identify
// the prepared query during requests. Can be specified as an empty string
// to configure the query as a catch-all.
func (r *PreparedQuery) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Allows specifying the name of a node to sort results
// near using Consul's distance sorting and network coordinates. The magic
// `_agent` value can be used to always sort nearest the node servicing the
// request.
func (r *PreparedQuery) Near() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["near"])
}

// When `true`, the prepared query will only
// return nodes with passing health checks in the result.
func (r *PreparedQuery) OnlyPassing() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["onlyPassing"])
}

// The name of the service to query.
func (r *PreparedQuery) Service() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["service"])
}

// The name of the Consul session to tie this query's
// lifetime to.  This is an advanced parameter that should not be used without a
// complete understanding of Consul sessions and the implications of their use
// (it is recommended to leave this blank in nearly all cases).  If this
// parameter is omitted the query will not expire.
func (r *PreparedQuery) Session() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["session"])
}

// The ACL token to store with the prepared
// query. This token will be used by default whenever the query is executed.
func (r *PreparedQuery) StoredToken() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["storedToken"])
}

// The list of required and/or disallowed tags.  If a tag is
// in this list it must be present.  If the tag is preceded with a "!" then it is
// disallowed.
func (r *PreparedQuery) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// Query templating options. This is used to make a
// single prepared query respond to many different requests.
func (r *PreparedQuery) Template() *pulumi.Output {
	return r.s.State["template"]
}

// The ACL token to use when saving the prepared query.
// This overrides the token that the agent provides by default.
func (r *PreparedQuery) Token() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["token"])
}

// Input properties used for looking up and filtering PreparedQuery resources.
type PreparedQueryState struct {
	// When `true` the prepared query will return connect
	// proxy services for a queried service.  Conditions such as `tags` in the
	// prepared query will be matched against the proxy service. Defaults to false.
	Connect interface{}
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Settings for controlling the DNS response details.
	Dns interface{}
	// Options for controlling behavior when no healthy
	// nodes are available in the local DC.
	Failover interface{}
	// The name of the prepared query. Used to identify
	// the prepared query during requests. Can be specified as an empty string
	// to configure the query as a catch-all.
	Name interface{}
	// Allows specifying the name of a node to sort results
	// near using Consul's distance sorting and network coordinates. The magic
	// `_agent` value can be used to always sort nearest the node servicing the
	// request.
	Near interface{}
	// When `true`, the prepared query will only
	// return nodes with passing health checks in the result.
	OnlyPassing interface{}
	// The name of the service to query.
	Service interface{}
	// The name of the Consul session to tie this query's
	// lifetime to.  This is an advanced parameter that should not be used without a
	// complete understanding of Consul sessions and the implications of their use
	// (it is recommended to leave this blank in nearly all cases).  If this
	// parameter is omitted the query will not expire.
	Session interface{}
	// The ACL token to store with the prepared
	// query. This token will be used by default whenever the query is executed.
	StoredToken interface{}
	// The list of required and/or disallowed tags.  If a tag is
	// in this list it must be present.  If the tag is preceded with a "!" then it is
	// disallowed.
	Tags interface{}
	// Query templating options. This is used to make a
	// single prepared query respond to many different requests.
	Template interface{}
	// The ACL token to use when saving the prepared query.
	// This overrides the token that the agent provides by default.
	Token interface{}
}

// The set of arguments for constructing a PreparedQuery resource.
type PreparedQueryArgs struct {
	// When `true` the prepared query will return connect
	// proxy services for a queried service.  Conditions such as `tags` in the
	// prepared query will be matched against the proxy service. Defaults to false.
	Connect interface{}
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Settings for controlling the DNS response details.
	Dns interface{}
	// Options for controlling behavior when no healthy
	// nodes are available in the local DC.
	Failover interface{}
	// The name of the prepared query. Used to identify
	// the prepared query during requests. Can be specified as an empty string
	// to configure the query as a catch-all.
	Name interface{}
	// Allows specifying the name of a node to sort results
	// near using Consul's distance sorting and network coordinates. The magic
	// `_agent` value can be used to always sort nearest the node servicing the
	// request.
	Near interface{}
	// When `true`, the prepared query will only
	// return nodes with passing health checks in the result.
	OnlyPassing interface{}
	// The name of the service to query.
	Service interface{}
	// The name of the Consul session to tie this query's
	// lifetime to.  This is an advanced parameter that should not be used without a
	// complete understanding of Consul sessions and the implications of their use
	// (it is recommended to leave this blank in nearly all cases).  If this
	// parameter is omitted the query will not expire.
	Session interface{}
	// The ACL token to store with the prepared
	// query. This token will be used by default whenever the query is executed.
	StoredToken interface{}
	// The list of required and/or disallowed tags.  If a tag is
	// in this list it must be present.  If the tag is preceded with a "!" then it is
	// disallowed.
	Tags interface{}
	// Query templating options. This is used to make a
	// single prepared query respond to many different requests.
	Template interface{}
	// The ACL token to use when saving the prepared query.
	// This overrides the token that the agent provides by default.
	Token interface{}
}
