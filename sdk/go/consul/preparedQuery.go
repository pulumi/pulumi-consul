// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Creates a prepared query myquery.query.consul that finds the nearest
//			// healthy myapp.service.consul instance that has the active tag and not
//			// the standby tag.
//			_, err := consul.NewPreparedQuery(ctx, "myapp-query", &consul.PreparedQueryArgs{
//				Name:        pulumi.String("myquery"),
//				Datacenter:  pulumi.String("us-central1"),
//				Token:       pulumi.String("abcd"),
//				StoredToken: pulumi.String("wxyz"),
//				OnlyPassing: pulumi.Bool(true),
//				Near:        pulumi.String("_agent"),
//				Service:     pulumi.String("myapp"),
//				Tags: pulumi.StringArray{
//					pulumi.String("active"),
//					pulumi.String("!standby"),
//				},
//				Failover: &consul.PreparedQueryFailoverArgs{
//					NearestN: pulumi.Int(3),
//					Datacenters: pulumi.StringArray{
//						pulumi.String("us-west1"),
//						pulumi.String("us-east-2"),
//						pulumi.String("asia-east1"),
//					},
//				},
//				Dns: &consul.PreparedQueryDnsArgs{
//					Ttl: pulumi.String("30s"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Creates a Prepared Query Template that matches *-near-self.query.consul
//			// and finds the nearest service that matches the glob character (e.g.
//			// foo-near-self.query.consul will find the nearest healthy foo.service.consul).
//			_, err = consul.NewPreparedQuery(ctx, "service-near-self", &consul.PreparedQueryArgs{
//				Datacenter:  pulumi.String("nyc1"),
//				Token:       pulumi.String("abcd"),
//				StoredToken: pulumi.String("wxyz"),
//				Name:        pulumi.String(""),
//				OnlyPassing: pulumi.Bool(true),
//				Connect:     pulumi.Bool(true),
//				Near:        pulumi.String("_agent"),
//				Template: &consul.PreparedQueryTemplateArgs{
//					Type:   pulumi.String("name_prefix_match"),
//					Regexp: pulumi.String("^(.*)-near-self$"),
//				},
//				Service: pulumi.String("${match(1)}"),
//				Failover: &consul.PreparedQueryFailoverArgs{
//					NearestN: pulumi.Int(3),
//					Datacenters: pulumi.StringArray{
//						pulumi.String("dc2"),
//						pulumi.String("dc3"),
//						pulumi.String("dc4"),
//					},
//				},
//				Dns: &consul.PreparedQueryDnsArgs{
//					Ttl: pulumi.String("5m"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import consul:index/preparedQuery:PreparedQuery my_service 71ecfb82-717a-4258-b4b6-2fb75144d856
// ```
type PreparedQuery struct {
	pulumi.CustomResourceState

	// When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
	Connect pulumi.BoolPtrOutput `pulumi:"connect"`
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrOutput `pulumi:"datacenter"`
	// Settings for controlling the DNS response details.
	Dns PreparedQueryDnsPtrOutput `pulumi:"dns"`
	// Options for controlling behavior when no healthy nodes are available in the local DC.
	Failover PreparedQueryFailoverPtrOutput `pulumi:"failover"`
	// Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
	IgnoreCheckIds pulumi.StringArrayOutput `pulumi:"ignoreCheckIds"`
	// The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
	Name pulumi.StringOutput `pulumi:"name"`
	// Allows specifying the name of a node to sort results near using Consul's distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
	Near pulumi.StringPtrOutput `pulumi:"near"`
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
	NodeMeta pulumi.StringMapOutput `pulumi:"nodeMeta"`
	// When `true`, the prepared query will only return nodes with passing health checks in the result.
	OnlyPassing pulumi.BoolPtrOutput `pulumi:"onlyPassing"`
	// The name of the service to query
	Service pulumi.StringOutput `pulumi:"service"`
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
	ServiceMeta pulumi.StringMapOutput `pulumi:"serviceMeta"`
	// The name of the Consul session to tie this query's lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
	Session pulumi.StringPtrOutput `pulumi:"session"`
	// The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
	StoredToken pulumi.StringPtrOutput `pulumi:"storedToken"`
	// The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a "!" then it is disallowed.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Query templating options. This is used to make a single prepared query respond to many different requests
	Template PreparedQueryTemplatePtrOutput `pulumi:"template"`
	// The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrOutput `pulumi:"token"`
}

// NewPreparedQuery registers a new resource with the given unique name, arguments, and options.
func NewPreparedQuery(ctx *pulumi.Context,
	name string, args *PreparedQueryArgs, opts ...pulumi.ResourceOption) (*PreparedQuery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreparedQuery
	err := ctx.RegisterResource("consul:index/preparedQuery:PreparedQuery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreparedQuery gets an existing PreparedQuery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreparedQuery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreparedQueryState, opts ...pulumi.ResourceOption) (*PreparedQuery, error) {
	var resource PreparedQuery
	err := ctx.ReadResource("consul:index/preparedQuery:PreparedQuery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreparedQuery resources.
type preparedQueryState struct {
	// When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
	Connect *bool `pulumi:"connect"`
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Settings for controlling the DNS response details.
	Dns *PreparedQueryDns `pulumi:"dns"`
	// Options for controlling behavior when no healthy nodes are available in the local DC.
	Failover *PreparedQueryFailover `pulumi:"failover"`
	// Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
	IgnoreCheckIds []string `pulumi:"ignoreCheckIds"`
	// The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
	Name *string `pulumi:"name"`
	// Allows specifying the name of a node to sort results near using Consul's distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
	Near *string `pulumi:"near"`
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
	NodeMeta map[string]string `pulumi:"nodeMeta"`
	// When `true`, the prepared query will only return nodes with passing health checks in the result.
	OnlyPassing *bool `pulumi:"onlyPassing"`
	// The name of the service to query
	Service *string `pulumi:"service"`
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
	ServiceMeta map[string]string `pulumi:"serviceMeta"`
	// The name of the Consul session to tie this query's lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
	Session *string `pulumi:"session"`
	// The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
	StoredToken *string `pulumi:"storedToken"`
	// The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a "!" then it is disallowed.
	Tags []string `pulumi:"tags"`
	// Query templating options. This is used to make a single prepared query respond to many different requests
	Template *PreparedQueryTemplate `pulumi:"template"`
	// The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
}

type PreparedQueryState struct {
	// When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
	Connect pulumi.BoolPtrInput
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Settings for controlling the DNS response details.
	Dns PreparedQueryDnsPtrInput
	// Options for controlling behavior when no healthy nodes are available in the local DC.
	Failover PreparedQueryFailoverPtrInput
	// Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
	IgnoreCheckIds pulumi.StringArrayInput
	// The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
	Name pulumi.StringPtrInput
	// Allows specifying the name of a node to sort results near using Consul's distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
	Near pulumi.StringPtrInput
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
	NodeMeta pulumi.StringMapInput
	// When `true`, the prepared query will only return nodes with passing health checks in the result.
	OnlyPassing pulumi.BoolPtrInput
	// The name of the service to query
	Service pulumi.StringPtrInput
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
	ServiceMeta pulumi.StringMapInput
	// The name of the Consul session to tie this query's lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
	Session pulumi.StringPtrInput
	// The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
	StoredToken pulumi.StringPtrInput
	// The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a "!" then it is disallowed.
	Tags pulumi.StringArrayInput
	// Query templating options. This is used to make a single prepared query respond to many different requests
	Template PreparedQueryTemplatePtrInput
	// The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
}

func (PreparedQueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*preparedQueryState)(nil)).Elem()
}

type preparedQueryArgs struct {
	// When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
	Connect *bool `pulumi:"connect"`
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Settings for controlling the DNS response details.
	Dns *PreparedQueryDns `pulumi:"dns"`
	// Options for controlling behavior when no healthy nodes are available in the local DC.
	Failover *PreparedQueryFailover `pulumi:"failover"`
	// Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
	IgnoreCheckIds []string `pulumi:"ignoreCheckIds"`
	// The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
	Name *string `pulumi:"name"`
	// Allows specifying the name of a node to sort results near using Consul's distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
	Near *string `pulumi:"near"`
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
	NodeMeta map[string]string `pulumi:"nodeMeta"`
	// When `true`, the prepared query will only return nodes with passing health checks in the result.
	OnlyPassing *bool `pulumi:"onlyPassing"`
	// The name of the service to query
	Service string `pulumi:"service"`
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
	ServiceMeta map[string]string `pulumi:"serviceMeta"`
	// The name of the Consul session to tie this query's lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
	Session *string `pulumi:"session"`
	// The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
	StoredToken *string `pulumi:"storedToken"`
	// The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a "!" then it is disallowed.
	Tags []string `pulumi:"tags"`
	// Query templating options. This is used to make a single prepared query respond to many different requests
	Template *PreparedQueryTemplate `pulumi:"template"`
	// The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a PreparedQuery resource.
type PreparedQueryArgs struct {
	// When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
	Connect pulumi.BoolPtrInput
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Settings for controlling the DNS response details.
	Dns PreparedQueryDnsPtrInput
	// Options for controlling behavior when no healthy nodes are available in the local DC.
	Failover PreparedQueryFailoverPtrInput
	// Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
	IgnoreCheckIds pulumi.StringArrayInput
	// The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
	Name pulumi.StringPtrInput
	// Allows specifying the name of a node to sort results near using Consul's distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
	Near pulumi.StringPtrInput
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
	NodeMeta pulumi.StringMapInput
	// When `true`, the prepared query will only return nodes with passing health checks in the result.
	OnlyPassing pulumi.BoolPtrInput
	// The name of the service to query
	Service pulumi.StringInput
	// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
	ServiceMeta pulumi.StringMapInput
	// The name of the Consul session to tie this query's lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
	Session pulumi.StringPtrInput
	// The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
	StoredToken pulumi.StringPtrInput
	// The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a "!" then it is disallowed.
	Tags pulumi.StringArrayInput
	// Query templating options. This is used to make a single prepared query respond to many different requests
	Template PreparedQueryTemplatePtrInput
	// The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
}

func (PreparedQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preparedQueryArgs)(nil)).Elem()
}

type PreparedQueryInput interface {
	pulumi.Input

	ToPreparedQueryOutput() PreparedQueryOutput
	ToPreparedQueryOutputWithContext(ctx context.Context) PreparedQueryOutput
}

func (*PreparedQuery) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQuery)(nil)).Elem()
}

func (i *PreparedQuery) ToPreparedQueryOutput() PreparedQueryOutput {
	return i.ToPreparedQueryOutputWithContext(context.Background())
}

func (i *PreparedQuery) ToPreparedQueryOutputWithContext(ctx context.Context) PreparedQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryOutput)
}

// PreparedQueryArrayInput is an input type that accepts PreparedQueryArray and PreparedQueryArrayOutput values.
// You can construct a concrete instance of `PreparedQueryArrayInput` via:
//
//	PreparedQueryArray{ PreparedQueryArgs{...} }
type PreparedQueryArrayInput interface {
	pulumi.Input

	ToPreparedQueryArrayOutput() PreparedQueryArrayOutput
	ToPreparedQueryArrayOutputWithContext(context.Context) PreparedQueryArrayOutput
}

type PreparedQueryArray []PreparedQueryInput

func (PreparedQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreparedQuery)(nil)).Elem()
}

func (i PreparedQueryArray) ToPreparedQueryArrayOutput() PreparedQueryArrayOutput {
	return i.ToPreparedQueryArrayOutputWithContext(context.Background())
}

func (i PreparedQueryArray) ToPreparedQueryArrayOutputWithContext(ctx context.Context) PreparedQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryArrayOutput)
}

// PreparedQueryMapInput is an input type that accepts PreparedQueryMap and PreparedQueryMapOutput values.
// You can construct a concrete instance of `PreparedQueryMapInput` via:
//
//	PreparedQueryMap{ "key": PreparedQueryArgs{...} }
type PreparedQueryMapInput interface {
	pulumi.Input

	ToPreparedQueryMapOutput() PreparedQueryMapOutput
	ToPreparedQueryMapOutputWithContext(context.Context) PreparedQueryMapOutput
}

type PreparedQueryMap map[string]PreparedQueryInput

func (PreparedQueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreparedQuery)(nil)).Elem()
}

func (i PreparedQueryMap) ToPreparedQueryMapOutput() PreparedQueryMapOutput {
	return i.ToPreparedQueryMapOutputWithContext(context.Background())
}

func (i PreparedQueryMap) ToPreparedQueryMapOutputWithContext(ctx context.Context) PreparedQueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedQueryMapOutput)
}

type PreparedQueryOutput struct{ *pulumi.OutputState }

func (PreparedQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedQuery)(nil)).Elem()
}

func (o PreparedQueryOutput) ToPreparedQueryOutput() PreparedQueryOutput {
	return o
}

func (o PreparedQueryOutput) ToPreparedQueryOutputWithContext(ctx context.Context) PreparedQueryOutput {
	return o
}

// When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
func (o PreparedQueryOutput) Connect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.BoolPtrOutput { return v.Connect }).(pulumi.BoolPtrOutput)
}

// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
func (o PreparedQueryOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringPtrOutput { return v.Datacenter }).(pulumi.StringPtrOutput)
}

// Settings for controlling the DNS response details.
func (o PreparedQueryOutput) Dns() PreparedQueryDnsPtrOutput {
	return o.ApplyT(func(v *PreparedQuery) PreparedQueryDnsPtrOutput { return v.Dns }).(PreparedQueryDnsPtrOutput)
}

// Options for controlling behavior when no healthy nodes are available in the local DC.
func (o PreparedQueryOutput) Failover() PreparedQueryFailoverPtrOutput {
	return o.ApplyT(func(v *PreparedQuery) PreparedQueryFailoverPtrOutput { return v.Failover }).(PreparedQueryFailoverPtrOutput)
}

// Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
func (o PreparedQueryOutput) IgnoreCheckIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringArrayOutput { return v.IgnoreCheckIds }).(pulumi.StringArrayOutput)
}

// The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
func (o PreparedQueryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Allows specifying the name of a node to sort results near using Consul's distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
func (o PreparedQueryOutput) Near() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringPtrOutput { return v.Near }).(pulumi.StringPtrOutput)
}

// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
func (o PreparedQueryOutput) NodeMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringMapOutput { return v.NodeMeta }).(pulumi.StringMapOutput)
}

// When `true`, the prepared query will only return nodes with passing health checks in the result.
func (o PreparedQueryOutput) OnlyPassing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.BoolPtrOutput { return v.OnlyPassing }).(pulumi.BoolPtrOutput)
}

// The name of the service to query
func (o PreparedQueryOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
func (o PreparedQueryOutput) ServiceMeta() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringMapOutput { return v.ServiceMeta }).(pulumi.StringMapOutput)
}

// The name of the Consul session to tie this query's lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
func (o PreparedQueryOutput) Session() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringPtrOutput { return v.Session }).(pulumi.StringPtrOutput)
}

// The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
func (o PreparedQueryOutput) StoredToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringPtrOutput { return v.StoredToken }).(pulumi.StringPtrOutput)
}

// The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a "!" then it is disallowed.
func (o PreparedQueryOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Query templating options. This is used to make a single prepared query respond to many different requests
func (o PreparedQueryOutput) Template() PreparedQueryTemplatePtrOutput {
	return o.ApplyT(func(v *PreparedQuery) PreparedQueryTemplatePtrOutput { return v.Template }).(PreparedQueryTemplatePtrOutput)
}

// The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
//
// Deprecated: The token argument has been deprecated and will be removed in a future release.
// Please use the token argument in the provider configuration
func (o PreparedQueryOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreparedQuery) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

type PreparedQueryArrayOutput struct{ *pulumi.OutputState }

func (PreparedQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreparedQuery)(nil)).Elem()
}

func (o PreparedQueryArrayOutput) ToPreparedQueryArrayOutput() PreparedQueryArrayOutput {
	return o
}

func (o PreparedQueryArrayOutput) ToPreparedQueryArrayOutputWithContext(ctx context.Context) PreparedQueryArrayOutput {
	return o
}

func (o PreparedQueryArrayOutput) Index(i pulumi.IntInput) PreparedQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreparedQuery {
		return vs[0].([]*PreparedQuery)[vs[1].(int)]
	}).(PreparedQueryOutput)
}

type PreparedQueryMapOutput struct{ *pulumi.OutputState }

func (PreparedQueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreparedQuery)(nil)).Elem()
}

func (o PreparedQueryMapOutput) ToPreparedQueryMapOutput() PreparedQueryMapOutput {
	return o
}

func (o PreparedQueryMapOutput) ToPreparedQueryMapOutputWithContext(ctx context.Context) PreparedQueryMapOutput {
	return o
}

func (o PreparedQueryMapOutput) MapIndex(k pulumi.StringInput) PreparedQueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreparedQuery {
		return vs[0].(map[string]*PreparedQuery)[vs[1].(string)]
	}).(PreparedQueryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreparedQueryInput)(nil)).Elem(), &PreparedQuery{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreparedQueryArrayInput)(nil)).Elem(), PreparedQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreparedQueryMapInput)(nil)).Elem(), PreparedQueryMap{})
	pulumi.RegisterOutputType(PreparedQueryOutput{})
	pulumi.RegisterOutputType(PreparedQueryArrayOutput{})
	pulumi.RegisterOutputType(PreparedQueryMapOutput{})
}
