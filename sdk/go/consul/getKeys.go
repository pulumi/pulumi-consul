// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Keys` datasource reads values from the Consul key/value store. This is a powerful way to dynamically set values in templates.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			app, err := consul.LookupKeys(ctx, &consul.LookupKeysArgs{
//				Datacenter: pulumi.StringRef("nyc1"),
//				Keys: []consul.GetKeysKey{
//					{
//						Name:    "ami",
//						Path:    "service/app/launch_ami",
//						Default: pulumi.StringRef("ami-1234"),
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Start our instance with the dynamic ami value
//			_, err = aws.NewInstance(ctx, "app", &aws.InstanceArgs{
//				Ami: app.Var.Ami,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupKeys(ctx *pulumi.Context, args *LookupKeysArgs, opts ...pulumi.InvokeOption) (*LookupKeysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeysResult
	err := ctx.Invoke("consul:index/getKeys:getKeys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeys.
type LookupKeysArgs struct {
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Whether to return an error when a key is absent from the KV store and no default is configured. This defaults to `false`.
	ErrorOnMissingKeys *bool `pulumi:"errorOnMissingKeys"`
	// Specifies a key in Consul to be read. Supported values documented below. Multiple blocks supported.
	Keys []GetKeysKey `pulumi:"keys"`
	// The namespace to lookup the keys.
	Namespace *string `pulumi:"namespace"`
	// The partition to lookup the keys.
	Partition *string `pulumi:"partition"`
	// The ACL token to use. This overrides the token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
}

// A collection of values returned by getKeys.
type LookupKeysResult struct {
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter string `pulumi:"datacenter"`
	// Whether to return an error when a key is absent from the KV store and no default is configured. This defaults to `false`.
	ErrorOnMissingKeys *bool `pulumi:"errorOnMissingKeys"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Specifies a key in Consul to be read. Supported values documented below. Multiple blocks supported.
	Keys []GetKeysKey `pulumi:"keys"`
	// The namespace to lookup the keys.
	Namespace *string `pulumi:"namespace"`
	// The partition to lookup the keys.
	Partition *string `pulumi:"partition"`
	// The ACL token to use. This overrides the token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
	// For each name given, the corresponding attribute has the value of the key.
	Var map[string]string `pulumi:"var"`
}

func LookupKeysOutput(ctx *pulumi.Context, args LookupKeysOutputArgs, opts ...pulumi.InvokeOption) LookupKeysResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKeysResult, error) {
			args := v.(LookupKeysArgs)
			r, err := LookupKeys(ctx, &args, opts...)
			var s LookupKeysResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKeysResultOutput)
}

// A collection of arguments for invoking getKeys.
type LookupKeysOutputArgs struct {
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput `pulumi:"datacenter"`
	// Whether to return an error when a key is absent from the KV store and no default is configured. This defaults to `false`.
	ErrorOnMissingKeys pulumi.BoolPtrInput `pulumi:"errorOnMissingKeys"`
	// Specifies a key in Consul to be read. Supported values documented below. Multiple blocks supported.
	Keys GetKeysKeyArrayInput `pulumi:"keys"`
	// The namespace to lookup the keys.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The partition to lookup the keys.
	Partition pulumi.StringPtrInput `pulumi:"partition"`
	// The ACL token to use. This overrides the token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (LookupKeysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeysArgs)(nil)).Elem()
}

// A collection of values returned by getKeys.
type LookupKeysResultOutput struct{ *pulumi.OutputState }

func (LookupKeysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeysResult)(nil)).Elem()
}

func (o LookupKeysResultOutput) ToLookupKeysResultOutput() LookupKeysResultOutput {
	return o
}

func (o LookupKeysResultOutput) ToLookupKeysResultOutputWithContext(ctx context.Context) LookupKeysResultOutput {
	return o
}

// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
func (o LookupKeysResultOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeysResult) string { return v.Datacenter }).(pulumi.StringOutput)
}

// Whether to return an error when a key is absent from the KV store and no default is configured. This defaults to `false`.
func (o LookupKeysResultOutput) ErrorOnMissingKeys() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupKeysResult) *bool { return v.ErrorOnMissingKeys }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKeysResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeysResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies a key in Consul to be read. Supported values documented below. Multiple blocks supported.
func (o LookupKeysResultOutput) Keys() GetKeysKeyArrayOutput {
	return o.ApplyT(func(v LookupKeysResult) []GetKeysKey { return v.Keys }).(GetKeysKeyArrayOutput)
}

// The namespace to lookup the keys.
func (o LookupKeysResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeysResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The partition to lookup the keys.
func (o LookupKeysResultOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeysResult) *string { return v.Partition }).(pulumi.StringPtrOutput)
}

// The ACL token to use. This overrides the token that the agent provides by default.
//
// Deprecated: The token argument has been deprecated and will be removed in a future release.
// Please use the token argument in the provider configuration
func (o LookupKeysResultOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeysResult) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// For each name given, the corresponding attribute has the value of the key.
func (o LookupKeysResultOutput) Var() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKeysResult) map[string]string { return v.Var }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeysResultOutput{})
}
