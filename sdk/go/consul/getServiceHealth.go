// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `.getServiceHealth` can be used to get the list of the instances that
// are currently healthy, according to their associated  health-checks.
// The result includes the list of service instances, the node associated to each
// instance and its health-checks.
// 
// This resource is likely to change as frequently as the health-checks are being
// updated, you should expect different results in a frequent basis.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/d/service_health.html.markdown.
func LookupServiceHealth(ctx *pulumi.Context, args *GetServiceHealthArgs) (*GetServiceHealthResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["datacenter"] = args.Datacenter
		inputs["name"] = args.Name
		inputs["near"] = args.Near
		inputs["nodeMeta"] = args.NodeMeta
		inputs["passing"] = args.Passing
		inputs["tag"] = args.Tag
		inputs["waitFor"] = args.WaitFor
	}
	outputs, err := ctx.Invoke("consul:index/getServiceHealth:getServiceHealth", inputs)
	if err != nil {
		return nil, err
	}
	return &GetServiceHealthResult{
		Datacenter: outputs["datacenter"],
		Name: outputs["name"],
		Near: outputs["near"],
		NodeMeta: outputs["nodeMeta"],
		Passing: outputs["passing"],
		Results: outputs["results"],
		Tag: outputs["tag"],
		WaitFor: outputs["waitFor"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getServiceHealth.
type GetServiceHealthArgs struct {
	// The Consul datacenter to query.
	Datacenter interface{}
	// The service name to select.
	Name interface{}
	// Specifies a node name to sort the node list in ascending order
	// based on the estimated round trip time from that node.
	Near interface{}
	// Filter the results to nodes with the specified key/value
	// pairs.
	NodeMeta interface{}
	// Whether to return only nodes with all checks in the
	// passing state. Defaults to `true`.
	Passing interface{}
	// A single tag that can be used to filter the list to return
	// based on a single matching tag.
	Tag interface{}
	WaitFor interface{}
}

// A collection of values returned by getServiceHealth.
type GetServiceHealthResult struct {
	// The datacenter in which the node is running.
	// * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
	// List of explicit LAN and WAN IP addresses for the agent.
	Datacenter interface{}
	// The name of this health-check.
	Name interface{}
	// The node to which the result must be sorted to.
	Near interface{}
	// The list of metadata to filter the nodes.
	NodeMeta interface{}
	// Whether to return only nodes with all checks in the
	// passing state.
	Passing interface{}
	// A list of entries and details about each endpoint advertising a
	// service.  Each element in the list has three attributes: `node`, `service` and
	// `checks`.  The list of the attributes of each one is detailed below.
	Results interface{}
	// The name of the tag used to filter the list.
	Tag interface{}
	WaitFor interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
