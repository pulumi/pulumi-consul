// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Starting with Consul 1.5.0, the AclBindingRule resource can be used to managed Consul ACL binding rules.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			minikube, err := consul.NewAclAuthMethod(ctx, "minikube", &consul.AclAuthMethodArgs{
//				Name:        pulumi.String("minikube"),
//				Type:        pulumi.String("kubernetes"),
//				Description: pulumi.String("dev minikube cluster"),
//				Config: pulumi.StringMap{
//					"Host":              pulumi.String("https://192.0.2.42:8443"),
//					"CACert":            pulumi.String("-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----\n"),
//					"ServiceAccountJWT": pulumi.String("eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9..."),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.NewAclBindingRule(ctx, "test", &consul.AclBindingRuleArgs{
//				AuthMethod:  minikube.Name,
//				Description: pulumi.String("foobar"),
//				Selector:    pulumi.String("serviceaccount.namespace==default"),
//				BindType:    pulumi.String("service"),
//				BindName:    pulumi.String("minikube"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type AclBindingRule struct {
	pulumi.CustomResourceState

	// The name of the ACL auth method this rule apply.
	AuthMethod pulumi.StringOutput `pulumi:"authMethod"`
	// The name to bind to a token at login-time.
	BindName pulumi.StringOutput `pulumi:"bindName"`
	// Specifies the way the binding rule affects a token created at login.
	BindType pulumi.StringOutput `pulumi:"bindType"`
	// The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
	BindVars AclBindingRuleBindVarsPtrOutput `pulumi:"bindVars"`
	// A free form human readable description of the binding rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The namespace to create the binding rule within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The partition the ACL binding rule is associated with.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// The expression used to match this rule against valid identities returned from an auth method validation.
	Selector pulumi.StringPtrOutput `pulumi:"selector"`
}

// NewAclBindingRule registers a new resource with the given unique name, arguments, and options.
func NewAclBindingRule(ctx *pulumi.Context,
	name string, args *AclBindingRuleArgs, opts ...pulumi.ResourceOption) (*AclBindingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthMethod == nil {
		return nil, errors.New("invalid value for required argument 'AuthMethod'")
	}
	if args.BindName == nil {
		return nil, errors.New("invalid value for required argument 'BindName'")
	}
	if args.BindType == nil {
		return nil, errors.New("invalid value for required argument 'BindType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclBindingRule
	err := ctx.RegisterResource("consul:index/aclBindingRule:AclBindingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclBindingRule gets an existing AclBindingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclBindingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclBindingRuleState, opts ...pulumi.ResourceOption) (*AclBindingRule, error) {
	var resource AclBindingRule
	err := ctx.ReadResource("consul:index/aclBindingRule:AclBindingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclBindingRule resources.
type aclBindingRuleState struct {
	// The name of the ACL auth method this rule apply.
	AuthMethod *string `pulumi:"authMethod"`
	// The name to bind to a token at login-time.
	BindName *string `pulumi:"bindName"`
	// Specifies the way the binding rule affects a token created at login.
	BindType *string `pulumi:"bindType"`
	// The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
	BindVars *AclBindingRuleBindVars `pulumi:"bindVars"`
	// A free form human readable description of the binding rule.
	Description *string `pulumi:"description"`
	// The namespace to create the binding rule within.
	Namespace *string `pulumi:"namespace"`
	// The partition the ACL binding rule is associated with.
	Partition *string `pulumi:"partition"`
	// The expression used to match this rule against valid identities returned from an auth method validation.
	Selector *string `pulumi:"selector"`
}

type AclBindingRuleState struct {
	// The name of the ACL auth method this rule apply.
	AuthMethod pulumi.StringPtrInput
	// The name to bind to a token at login-time.
	BindName pulumi.StringPtrInput
	// Specifies the way the binding rule affects a token created at login.
	BindType pulumi.StringPtrInput
	// The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
	BindVars AclBindingRuleBindVarsPtrInput
	// A free form human readable description of the binding rule.
	Description pulumi.StringPtrInput
	// The namespace to create the binding rule within.
	Namespace pulumi.StringPtrInput
	// The partition the ACL binding rule is associated with.
	Partition pulumi.StringPtrInput
	// The expression used to match this rule against valid identities returned from an auth method validation.
	Selector pulumi.StringPtrInput
}

func (AclBindingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclBindingRuleState)(nil)).Elem()
}

type aclBindingRuleArgs struct {
	// The name of the ACL auth method this rule apply.
	AuthMethod string `pulumi:"authMethod"`
	// The name to bind to a token at login-time.
	BindName string `pulumi:"bindName"`
	// Specifies the way the binding rule affects a token created at login.
	BindType string `pulumi:"bindType"`
	// The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
	BindVars *AclBindingRuleBindVars `pulumi:"bindVars"`
	// A free form human readable description of the binding rule.
	Description *string `pulumi:"description"`
	// The namespace to create the binding rule within.
	Namespace *string `pulumi:"namespace"`
	// The partition the ACL binding rule is associated with.
	Partition *string `pulumi:"partition"`
	// The expression used to match this rule against valid identities returned from an auth method validation.
	Selector *string `pulumi:"selector"`
}

// The set of arguments for constructing a AclBindingRule resource.
type AclBindingRuleArgs struct {
	// The name of the ACL auth method this rule apply.
	AuthMethod pulumi.StringInput
	// The name to bind to a token at login-time.
	BindName pulumi.StringInput
	// Specifies the way the binding rule affects a token created at login.
	BindType pulumi.StringInput
	// The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
	BindVars AclBindingRuleBindVarsPtrInput
	// A free form human readable description of the binding rule.
	Description pulumi.StringPtrInput
	// The namespace to create the binding rule within.
	Namespace pulumi.StringPtrInput
	// The partition the ACL binding rule is associated with.
	Partition pulumi.StringPtrInput
	// The expression used to match this rule against valid identities returned from an auth method validation.
	Selector pulumi.StringPtrInput
}

func (AclBindingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclBindingRuleArgs)(nil)).Elem()
}

type AclBindingRuleInput interface {
	pulumi.Input

	ToAclBindingRuleOutput() AclBindingRuleOutput
	ToAclBindingRuleOutputWithContext(ctx context.Context) AclBindingRuleOutput
}

func (*AclBindingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AclBindingRule)(nil)).Elem()
}

func (i *AclBindingRule) ToAclBindingRuleOutput() AclBindingRuleOutput {
	return i.ToAclBindingRuleOutputWithContext(context.Background())
}

func (i *AclBindingRule) ToAclBindingRuleOutputWithContext(ctx context.Context) AclBindingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclBindingRuleOutput)
}

// AclBindingRuleArrayInput is an input type that accepts AclBindingRuleArray and AclBindingRuleArrayOutput values.
// You can construct a concrete instance of `AclBindingRuleArrayInput` via:
//
//	AclBindingRuleArray{ AclBindingRuleArgs{...} }
type AclBindingRuleArrayInput interface {
	pulumi.Input

	ToAclBindingRuleArrayOutput() AclBindingRuleArrayOutput
	ToAclBindingRuleArrayOutputWithContext(context.Context) AclBindingRuleArrayOutput
}

type AclBindingRuleArray []AclBindingRuleInput

func (AclBindingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclBindingRule)(nil)).Elem()
}

func (i AclBindingRuleArray) ToAclBindingRuleArrayOutput() AclBindingRuleArrayOutput {
	return i.ToAclBindingRuleArrayOutputWithContext(context.Background())
}

func (i AclBindingRuleArray) ToAclBindingRuleArrayOutputWithContext(ctx context.Context) AclBindingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclBindingRuleArrayOutput)
}

// AclBindingRuleMapInput is an input type that accepts AclBindingRuleMap and AclBindingRuleMapOutput values.
// You can construct a concrete instance of `AclBindingRuleMapInput` via:
//
//	AclBindingRuleMap{ "key": AclBindingRuleArgs{...} }
type AclBindingRuleMapInput interface {
	pulumi.Input

	ToAclBindingRuleMapOutput() AclBindingRuleMapOutput
	ToAclBindingRuleMapOutputWithContext(context.Context) AclBindingRuleMapOutput
}

type AclBindingRuleMap map[string]AclBindingRuleInput

func (AclBindingRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclBindingRule)(nil)).Elem()
}

func (i AclBindingRuleMap) ToAclBindingRuleMapOutput() AclBindingRuleMapOutput {
	return i.ToAclBindingRuleMapOutputWithContext(context.Background())
}

func (i AclBindingRuleMap) ToAclBindingRuleMapOutputWithContext(ctx context.Context) AclBindingRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclBindingRuleMapOutput)
}

type AclBindingRuleOutput struct{ *pulumi.OutputState }

func (AclBindingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclBindingRule)(nil)).Elem()
}

func (o AclBindingRuleOutput) ToAclBindingRuleOutput() AclBindingRuleOutput {
	return o
}

func (o AclBindingRuleOutput) ToAclBindingRuleOutputWithContext(ctx context.Context) AclBindingRuleOutput {
	return o
}

// The name of the ACL auth method this rule apply.
func (o AclBindingRuleOutput) AuthMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringOutput { return v.AuthMethod }).(pulumi.StringOutput)
}

// The name to bind to a token at login-time.
func (o AclBindingRuleOutput) BindName() pulumi.StringOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringOutput { return v.BindName }).(pulumi.StringOutput)
}

// Specifies the way the binding rule affects a token created at login.
func (o AclBindingRuleOutput) BindType() pulumi.StringOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringOutput { return v.BindType }).(pulumi.StringOutput)
}

// The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
func (o AclBindingRuleOutput) BindVars() AclBindingRuleBindVarsPtrOutput {
	return o.ApplyT(func(v *AclBindingRule) AclBindingRuleBindVarsPtrOutput { return v.BindVars }).(AclBindingRuleBindVarsPtrOutput)
}

// A free form human readable description of the binding rule.
func (o AclBindingRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The namespace to create the binding rule within.
func (o AclBindingRuleOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The partition the ACL binding rule is associated with.
func (o AclBindingRuleOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// The expression used to match this rule against valid identities returned from an auth method validation.
func (o AclBindingRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringPtrOutput { return v.Selector }).(pulumi.StringPtrOutput)
}

type AclBindingRuleArrayOutput struct{ *pulumi.OutputState }

func (AclBindingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclBindingRule)(nil)).Elem()
}

func (o AclBindingRuleArrayOutput) ToAclBindingRuleArrayOutput() AclBindingRuleArrayOutput {
	return o
}

func (o AclBindingRuleArrayOutput) ToAclBindingRuleArrayOutputWithContext(ctx context.Context) AclBindingRuleArrayOutput {
	return o
}

func (o AclBindingRuleArrayOutput) Index(i pulumi.IntInput) AclBindingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclBindingRule {
		return vs[0].([]*AclBindingRule)[vs[1].(int)]
	}).(AclBindingRuleOutput)
}

type AclBindingRuleMapOutput struct{ *pulumi.OutputState }

func (AclBindingRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclBindingRule)(nil)).Elem()
}

func (o AclBindingRuleMapOutput) ToAclBindingRuleMapOutput() AclBindingRuleMapOutput {
	return o
}

func (o AclBindingRuleMapOutput) ToAclBindingRuleMapOutputWithContext(ctx context.Context) AclBindingRuleMapOutput {
	return o
}

func (o AclBindingRuleMapOutput) MapIndex(k pulumi.StringInput) AclBindingRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclBindingRule {
		return vs[0].(map[string]*AclBindingRule)[vs[1].(string)]
	}).(AclBindingRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclBindingRuleInput)(nil)).Elem(), &AclBindingRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclBindingRuleArrayInput)(nil)).Elem(), AclBindingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclBindingRuleMapInput)(nil)).Elem(), AclBindingRuleMap{})
	pulumi.RegisterOutputType(AclBindingRuleOutput{})
	pulumi.RegisterOutputType(AclBindingRuleArrayOutput{})
	pulumi.RegisterOutputType(AclBindingRuleMapOutput{})
}
