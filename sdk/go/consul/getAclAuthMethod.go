// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `AclAuthMethod` data source returns the information related to a
// [Consul Auth Method](https://www.consul.io/docs/acl/acl-auth-methods.html).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := consul.LookupAclAuthMethod(ctx, &consul.LookupAclAuthMethodArgs{
//				Name: "minikube",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("consulAclAuthMethod", test.Config)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupAclAuthMethod(ctx *pulumi.Context, args *LookupAclAuthMethodArgs, opts ...pulumi.InvokeOption) (*LookupAclAuthMethodResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAclAuthMethodResult
	err := ctx.Invoke("consul:index/getAclAuthMethod:getAclAuthMethod", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAclAuthMethod.
type LookupAclAuthMethodArgs struct {
	// The name of the ACL Auth Method.
	Name string `pulumi:"name"`
	// The namespace to lookup the auth method.
	Namespace *string `pulumi:"namespace"`
	// The partition to lookup the auth method.
	Partition *string `pulumi:"partition"`
}

// A collection of values returned by getAclAuthMethod.
type LookupAclAuthMethodResult struct {
	// The configuration options of the ACL Auth Method. This attribute is
	// deprecated and will be removed in a future version. If the configuration is
	// too complex to be represented as a map of strings, it will be blank.
	// `configJson` should be used instead.
	//
	// Deprecated: The config attribute is deprecated, please use configJson instead.
	Config map[string]string `pulumi:"config"`
	// The configuration options of the ACL Auth Method.
	ConfigJson string `pulumi:"configJson"`
	// The description of the ACL Auth Method.
	Description string `pulumi:"description"`
	// An optional name to use instead of the name attribute when
	// displaying information about this auth method.
	DisplayName string `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The maximum life of any token created by this auth method.
	MaxTokenTtl string  `pulumi:"maxTokenTtl"`
	Name        string  `pulumi:"name"`
	Namespace   *string `pulumi:"namespace"`
	// (Enterprise Only) A set of rules that control which
	// namespace tokens created via this auth method will be created within
	NamespaceRules []GetAclAuthMethodNamespaceRule `pulumi:"namespaceRules"`
	Partition      *string                         `pulumi:"partition"`
	// The kind of token that this auth method produces. This can
	// be either 'local' or 'global'.
	TokenLocality string `pulumi:"tokenLocality"`
	// The type of the ACL Auth Method.
	Type string `pulumi:"type"`
}

func LookupAclAuthMethodOutput(ctx *pulumi.Context, args LookupAclAuthMethodOutputArgs, opts ...pulumi.InvokeOption) LookupAclAuthMethodResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAclAuthMethodResult, error) {
			args := v.(LookupAclAuthMethodArgs)
			r, err := LookupAclAuthMethod(ctx, &args, opts...)
			var s LookupAclAuthMethodResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAclAuthMethodResultOutput)
}

// A collection of arguments for invoking getAclAuthMethod.
type LookupAclAuthMethodOutputArgs struct {
	// The name of the ACL Auth Method.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to lookup the auth method.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The partition to lookup the auth method.
	Partition pulumi.StringPtrInput `pulumi:"partition"`
}

func (LookupAclAuthMethodOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclAuthMethodArgs)(nil)).Elem()
}

// A collection of values returned by getAclAuthMethod.
type LookupAclAuthMethodResultOutput struct{ *pulumi.OutputState }

func (LookupAclAuthMethodResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclAuthMethodResult)(nil)).Elem()
}

func (o LookupAclAuthMethodResultOutput) ToLookupAclAuthMethodResultOutput() LookupAclAuthMethodResultOutput {
	return o
}

func (o LookupAclAuthMethodResultOutput) ToLookupAclAuthMethodResultOutputWithContext(ctx context.Context) LookupAclAuthMethodResultOutput {
	return o
}

// The configuration options of the ACL Auth Method. This attribute is
// deprecated and will be removed in a future version. If the configuration is
// too complex to be represented as a map of strings, it will be blank.
// `configJson` should be used instead.
//
// Deprecated: The config attribute is deprecated, please use configJson instead.
func (o LookupAclAuthMethodResultOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// The configuration options of the ACL Auth Method.
func (o LookupAclAuthMethodResultOutput) ConfigJson() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) string { return v.ConfigJson }).(pulumi.StringOutput)
}

// The description of the ACL Auth Method.
func (o LookupAclAuthMethodResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) string { return v.Description }).(pulumi.StringOutput)
}

// An optional name to use instead of the name attribute when
// displaying information about this auth method.
func (o LookupAclAuthMethodResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAclAuthMethodResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) string { return v.Id }).(pulumi.StringOutput)
}

// The maximum life of any token created by this auth method.
func (o LookupAclAuthMethodResultOutput) MaxTokenTtl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) string { return v.MaxTokenTtl }).(pulumi.StringOutput)
}

func (o LookupAclAuthMethodResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupAclAuthMethodResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// (Enterprise Only) A set of rules that control which
// namespace tokens created via this auth method will be created within
func (o LookupAclAuthMethodResultOutput) NamespaceRules() GetAclAuthMethodNamespaceRuleArrayOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) []GetAclAuthMethodNamespaceRule { return v.NamespaceRules }).(GetAclAuthMethodNamespaceRuleArrayOutput)
}

func (o LookupAclAuthMethodResultOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) *string { return v.Partition }).(pulumi.StringPtrOutput)
}

// The kind of token that this auth method produces. This can
// be either 'local' or 'global'.
func (o LookupAclAuthMethodResultOutput) TokenLocality() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) string { return v.TokenLocality }).(pulumi.StringOutput)
}

// The type of the ACL Auth Method.
func (o LookupAclAuthMethodResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclAuthMethodResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAclAuthMethodResultOutput{})
}
