// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides access to the [Autopilot Configuration](https://www.consul.io/docs/guides/autopilot.html)
// of Consul to automatically manage Consul servers.
//
// It includes to automatically cleanup dead servers, monitor the status of the Raft
// cluster and stable server introduction.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewAutopilotConfig(ctx, "config", &consul.AutopilotConfigArgs{
// 			CleanupDeadServers:   pulumi.Bool(false),
// 			LastContactThreshold: pulumi.String("1s"),
// 			MaxTrailingLogs:      pulumi.Int(500),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AutopilotConfig struct {
	pulumi.CustomResourceState

	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers pulumi.BoolPtrOutput `pulumi:"cleanupDeadServers"`
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrOutput `pulumi:"datacenter"`
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration pulumi.BoolPtrOutput `pulumi:"disableUpgradeMigration"`
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold pulumi.StringPtrOutput `pulumi:"lastContactThreshold"`
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs pulumi.IntPtrOutput `pulumi:"maxTrailingLogs"`
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag pulumi.StringPtrOutput `pulumi:"redundancyZoneTag"`
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime pulumi.StringPtrOutput `pulumi:"serverStabilizationTime"`
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag pulumi.StringPtrOutput `pulumi:"upgradeVersionTag"`
}

// NewAutopilotConfig registers a new resource with the given unique name, arguments, and options.
func NewAutopilotConfig(ctx *pulumi.Context,
	name string, args *AutopilotConfigArgs, opts ...pulumi.ResourceOption) (*AutopilotConfig, error) {
	if args == nil {
		args = &AutopilotConfigArgs{}
	}
	var resource AutopilotConfig
	err := ctx.RegisterResource("consul:index/autopilotConfig:AutopilotConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutopilotConfig gets an existing AutopilotConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutopilotConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutopilotConfigState, opts ...pulumi.ResourceOption) (*AutopilotConfig, error) {
	var resource AutopilotConfig
	err := ctx.ReadResource("consul:index/autopilotConfig:AutopilotConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutopilotConfig resources.
type autopilotConfigState struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers *bool `pulumi:"cleanupDeadServers"`
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration *bool `pulumi:"disableUpgradeMigration"`
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold *string `pulumi:"lastContactThreshold"`
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs *int `pulumi:"maxTrailingLogs"`
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag *string `pulumi:"redundancyZoneTag"`
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime *string `pulumi:"serverStabilizationTime"`
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag *string `pulumi:"upgradeVersionTag"`
}

type AutopilotConfigState struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers pulumi.BoolPtrInput
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration pulumi.BoolPtrInput
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold pulumi.StringPtrInput
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs pulumi.IntPtrInput
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag pulumi.StringPtrInput
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime pulumi.StringPtrInput
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag pulumi.StringPtrInput
}

func (AutopilotConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*autopilotConfigState)(nil)).Elem()
}

type autopilotConfigArgs struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers *bool `pulumi:"cleanupDeadServers"`
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration *bool `pulumi:"disableUpgradeMigration"`
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold *string `pulumi:"lastContactThreshold"`
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs *int `pulumi:"maxTrailingLogs"`
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag *string `pulumi:"redundancyZoneTag"`
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime *string `pulumi:"serverStabilizationTime"`
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag *string `pulumi:"upgradeVersionTag"`
}

// The set of arguments for constructing a AutopilotConfig resource.
type AutopilotConfigArgs struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers pulumi.BoolPtrInput
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration pulumi.BoolPtrInput
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold pulumi.StringPtrInput
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs pulumi.IntPtrInput
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag pulumi.StringPtrInput
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime pulumi.StringPtrInput
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag pulumi.StringPtrInput
}

func (AutopilotConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autopilotConfigArgs)(nil)).Elem()
}
