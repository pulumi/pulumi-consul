// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides access to the [Autopilot Configuration](https://www.consul.io/docs/guides/autopilot.html)
// of Consul to automatically manage Consul servers.
// 
// It includes to automatically cleanup dead servers, monitor the status of the Raft
// cluster and stable server introduction.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/autopilot_config.html.markdown.
type AutopilotConfig struct {
	s *pulumi.ResourceState
}

// NewAutopilotConfig registers a new resource with the given unique name, arguments, and options.
func NewAutopilotConfig(ctx *pulumi.Context,
	name string, args *AutopilotConfigArgs, opts ...pulumi.ResourceOpt) (*AutopilotConfig, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cleanupDeadServers"] = nil
		inputs["datacenter"] = nil
		inputs["disableUpgradeMigration"] = nil
		inputs["lastContactThreshold"] = nil
		inputs["maxTrailingLogs"] = nil
		inputs["redundancyZoneTag"] = nil
		inputs["serverStabilizationTime"] = nil
		inputs["upgradeVersionTag"] = nil
	} else {
		inputs["cleanupDeadServers"] = args.CleanupDeadServers
		inputs["datacenter"] = args.Datacenter
		inputs["disableUpgradeMigration"] = args.DisableUpgradeMigration
		inputs["lastContactThreshold"] = args.LastContactThreshold
		inputs["maxTrailingLogs"] = args.MaxTrailingLogs
		inputs["redundancyZoneTag"] = args.RedundancyZoneTag
		inputs["serverStabilizationTime"] = args.ServerStabilizationTime
		inputs["upgradeVersionTag"] = args.UpgradeVersionTag
	}
	s, err := ctx.RegisterResource("consul:index/autopilotConfig:AutopilotConfig", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AutopilotConfig{s: s}, nil
}

// GetAutopilotConfig gets an existing AutopilotConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutopilotConfig(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AutopilotConfigState, opts ...pulumi.ResourceOpt) (*AutopilotConfig, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cleanupDeadServers"] = state.CleanupDeadServers
		inputs["datacenter"] = state.Datacenter
		inputs["disableUpgradeMigration"] = state.DisableUpgradeMigration
		inputs["lastContactThreshold"] = state.LastContactThreshold
		inputs["maxTrailingLogs"] = state.MaxTrailingLogs
		inputs["redundancyZoneTag"] = state.RedundancyZoneTag
		inputs["serverStabilizationTime"] = state.ServerStabilizationTime
		inputs["upgradeVersionTag"] = state.UpgradeVersionTag
	}
	s, err := ctx.ReadResource("consul:index/autopilotConfig:AutopilotConfig", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AutopilotConfig{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AutopilotConfig) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AutopilotConfig) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Whether to remove failing servers when a
// replacement comes online. Defaults to true.
func (r *AutopilotConfig) CleanupDeadServers() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["cleanupDeadServers"])
}

// The datacenter to use. This overrides the agent's
// default datacenter and the datacenter in the provider setup.
func (r *AutopilotConfig) Datacenter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["datacenter"])
}

// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
// Defaults to false.
func (r *AutopilotConfig) DisableUpgradeMigration() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disableUpgradeMigration"])
}

// The time after which a server is
// considered as unhealthy and will be removed. Defaults to `"200ms"`.
func (r *AutopilotConfig) LastContactThreshold() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lastContactThreshold"])
}

// The maximum number of Raft log entries a
// server can trail the leader. Defaults to 250.
func (r *AutopilotConfig) MaxTrailingLogs() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxTrailingLogs"])
}

// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
// tag to use. Consul will try to keep one voting server by zone to take advantage
// of isolated failure domains. Defaults to an empty string.
func (r *AutopilotConfig) RedundancyZoneTag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["redundancyZoneTag"])
}

// The period to wait for a server to be
// healthy and stable before being promoted to a full, voting member. Defaults to
// `"10s"`.
func (r *AutopilotConfig) ServerStabilizationTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serverStabilizationTime"])
}

// The tag to override the version information
// used during a migration. Defaults to an empty string.
func (r *AutopilotConfig) UpgradeVersionTag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["upgradeVersionTag"])
}

// Input properties used for looking up and filtering AutopilotConfig resources.
type AutopilotConfigState struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers interface{}
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration interface{}
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold interface{}
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs interface{}
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag interface{}
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime interface{}
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag interface{}
}

// The set of arguments for constructing a AutopilotConfig resource.
type AutopilotConfigArgs struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers interface{}
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration interface{}
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold interface{}
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs interface{}
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag interface{}
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime interface{}
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag interface{}
}
