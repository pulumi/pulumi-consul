// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides access to the [Autopilot Configuration](https://www.consul.io/docs/guides/autopilot.html)
// of Consul to automatically manage Consul servers.
//
// It includes to automatically cleanup dead servers, monitor the status of the Raft
// cluster and stable server introduction.
type AutopilotConfig struct {
	pulumi.CustomResourceState

	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers pulumi.BoolPtrOutput `pulumi:"cleanupDeadServers"`
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrOutput `pulumi:"datacenter"`
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration pulumi.BoolPtrOutput `pulumi:"disableUpgradeMigration"`
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold pulumi.StringPtrOutput `pulumi:"lastContactThreshold"`
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs pulumi.IntPtrOutput `pulumi:"maxTrailingLogs"`
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag pulumi.StringPtrOutput `pulumi:"redundancyZoneTag"`
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime pulumi.StringPtrOutput `pulumi:"serverStabilizationTime"`
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag pulumi.StringPtrOutput `pulumi:"upgradeVersionTag"`
}

// NewAutopilotConfig registers a new resource with the given unique name, arguments, and options.
func NewAutopilotConfig(ctx *pulumi.Context,
	name string, args *AutopilotConfigArgs, opts ...pulumi.ResourceOption) (*AutopilotConfig, error) {
	if args == nil {
		args = &AutopilotConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutopilotConfig
	err := ctx.RegisterResource("consul:index/autopilotConfig:AutopilotConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutopilotConfig gets an existing AutopilotConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutopilotConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutopilotConfigState, opts ...pulumi.ResourceOption) (*AutopilotConfig, error) {
	var resource AutopilotConfig
	err := ctx.ReadResource("consul:index/autopilotConfig:AutopilotConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutopilotConfig resources.
type autopilotConfigState struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers *bool `pulumi:"cleanupDeadServers"`
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration *bool `pulumi:"disableUpgradeMigration"`
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold *string `pulumi:"lastContactThreshold"`
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs *int `pulumi:"maxTrailingLogs"`
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag *string `pulumi:"redundancyZoneTag"`
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime *string `pulumi:"serverStabilizationTime"`
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag *string `pulumi:"upgradeVersionTag"`
}

type AutopilotConfigState struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers pulumi.BoolPtrInput
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration pulumi.BoolPtrInput
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold pulumi.StringPtrInput
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs pulumi.IntPtrInput
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag pulumi.StringPtrInput
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime pulumi.StringPtrInput
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag pulumi.StringPtrInput
}

func (AutopilotConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*autopilotConfigState)(nil)).Elem()
}

type autopilotConfigArgs struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers *bool `pulumi:"cleanupDeadServers"`
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration *bool `pulumi:"disableUpgradeMigration"`
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold *string `pulumi:"lastContactThreshold"`
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs *int `pulumi:"maxTrailingLogs"`
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag *string `pulumi:"redundancyZoneTag"`
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime *string `pulumi:"serverStabilizationTime"`
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag *string `pulumi:"upgradeVersionTag"`
}

// The set of arguments for constructing a AutopilotConfig resource.
type AutopilotConfigArgs struct {
	// Whether to remove failing servers when a
	// replacement comes online. Defaults to true.
	CleanupDeadServers pulumi.BoolPtrInput
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
	// Defaults to false.
	DisableUpgradeMigration pulumi.BoolPtrInput
	// The time after which a server is
	// considered as unhealthy and will be removed. Defaults to `"200ms"`.
	LastContactThreshold pulumi.StringPtrInput
	// The maximum number of Raft log entries a
	// server can trail the leader. Defaults to 250.
	MaxTrailingLogs pulumi.IntPtrInput
	// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
	// tag to use. Consul will try to keep one voting server by zone to take advantage
	// of isolated failure domains. Defaults to an empty string.
	RedundancyZoneTag pulumi.StringPtrInput
	// The period to wait for a server to be
	// healthy and stable before being promoted to a full, voting member. Defaults to
	// `"10s"`.
	ServerStabilizationTime pulumi.StringPtrInput
	// The tag to override the version information
	// used during a migration. Defaults to an empty string.
	UpgradeVersionTag pulumi.StringPtrInput
}

func (AutopilotConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autopilotConfigArgs)(nil)).Elem()
}

type AutopilotConfigInput interface {
	pulumi.Input

	ToAutopilotConfigOutput() AutopilotConfigOutput
	ToAutopilotConfigOutputWithContext(ctx context.Context) AutopilotConfigOutput
}

func (*AutopilotConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AutopilotConfig)(nil)).Elem()
}

func (i *AutopilotConfig) ToAutopilotConfigOutput() AutopilotConfigOutput {
	return i.ToAutopilotConfigOutputWithContext(context.Background())
}

func (i *AutopilotConfig) ToAutopilotConfigOutputWithContext(ctx context.Context) AutopilotConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotConfigOutput)
}

func (i *AutopilotConfig) ToOutput(ctx context.Context) pulumix.Output[*AutopilotConfig] {
	return pulumix.Output[*AutopilotConfig]{
		OutputState: i.ToAutopilotConfigOutputWithContext(ctx).OutputState,
	}
}

// AutopilotConfigArrayInput is an input type that accepts AutopilotConfigArray and AutopilotConfigArrayOutput values.
// You can construct a concrete instance of `AutopilotConfigArrayInput` via:
//
//	AutopilotConfigArray{ AutopilotConfigArgs{...} }
type AutopilotConfigArrayInput interface {
	pulumi.Input

	ToAutopilotConfigArrayOutput() AutopilotConfigArrayOutput
	ToAutopilotConfigArrayOutputWithContext(context.Context) AutopilotConfigArrayOutput
}

type AutopilotConfigArray []AutopilotConfigInput

func (AutopilotConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutopilotConfig)(nil)).Elem()
}

func (i AutopilotConfigArray) ToAutopilotConfigArrayOutput() AutopilotConfigArrayOutput {
	return i.ToAutopilotConfigArrayOutputWithContext(context.Background())
}

func (i AutopilotConfigArray) ToAutopilotConfigArrayOutputWithContext(ctx context.Context) AutopilotConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotConfigArrayOutput)
}

func (i AutopilotConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]*AutopilotConfig] {
	return pulumix.Output[[]*AutopilotConfig]{
		OutputState: i.ToAutopilotConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// AutopilotConfigMapInput is an input type that accepts AutopilotConfigMap and AutopilotConfigMapOutput values.
// You can construct a concrete instance of `AutopilotConfigMapInput` via:
//
//	AutopilotConfigMap{ "key": AutopilotConfigArgs{...} }
type AutopilotConfigMapInput interface {
	pulumi.Input

	ToAutopilotConfigMapOutput() AutopilotConfigMapOutput
	ToAutopilotConfigMapOutputWithContext(context.Context) AutopilotConfigMapOutput
}

type AutopilotConfigMap map[string]AutopilotConfigInput

func (AutopilotConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutopilotConfig)(nil)).Elem()
}

func (i AutopilotConfigMap) ToAutopilotConfigMapOutput() AutopilotConfigMapOutput {
	return i.ToAutopilotConfigMapOutputWithContext(context.Background())
}

func (i AutopilotConfigMap) ToAutopilotConfigMapOutputWithContext(ctx context.Context) AutopilotConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotConfigMapOutput)
}

func (i AutopilotConfigMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AutopilotConfig] {
	return pulumix.Output[map[string]*AutopilotConfig]{
		OutputState: i.ToAutopilotConfigMapOutputWithContext(ctx).OutputState,
	}
}

type AutopilotConfigOutput struct{ *pulumi.OutputState }

func (AutopilotConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutopilotConfig)(nil)).Elem()
}

func (o AutopilotConfigOutput) ToAutopilotConfigOutput() AutopilotConfigOutput {
	return o
}

func (o AutopilotConfigOutput) ToAutopilotConfigOutputWithContext(ctx context.Context) AutopilotConfigOutput {
	return o
}

func (o AutopilotConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*AutopilotConfig] {
	return pulumix.Output[*AutopilotConfig]{
		OutputState: o.OutputState,
	}
}

// Whether to remove failing servers when a
// replacement comes online. Defaults to true.
func (o AutopilotConfigOutput) CleanupDeadServers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutopilotConfig) pulumi.BoolPtrOutput { return v.CleanupDeadServers }).(pulumi.BoolPtrOutput)
}

// The datacenter to use. This overrides the agent's
// default datacenter and the datacenter in the provider setup.
func (o AutopilotConfigOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutopilotConfig) pulumi.StringPtrOutput { return v.Datacenter }).(pulumi.StringPtrOutput)
}

// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
// Defaults to false.
func (o AutopilotConfigOutput) DisableUpgradeMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutopilotConfig) pulumi.BoolPtrOutput { return v.DisableUpgradeMigration }).(pulumi.BoolPtrOutput)
}

// The time after which a server is
// considered as unhealthy and will be removed. Defaults to `"200ms"`.
func (o AutopilotConfigOutput) LastContactThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutopilotConfig) pulumi.StringPtrOutput { return v.LastContactThreshold }).(pulumi.StringPtrOutput)
}

// The maximum number of Raft log entries a
// server can trail the leader. Defaults to 250.
func (o AutopilotConfigOutput) MaxTrailingLogs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutopilotConfig) pulumi.IntPtrOutput { return v.MaxTrailingLogs }).(pulumi.IntPtrOutput)
}

// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
// tag to use. Consul will try to keep one voting server by zone to take advantage
// of isolated failure domains. Defaults to an empty string.
func (o AutopilotConfigOutput) RedundancyZoneTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutopilotConfig) pulumi.StringPtrOutput { return v.RedundancyZoneTag }).(pulumi.StringPtrOutput)
}

// The period to wait for a server to be
// healthy and stable before being promoted to a full, voting member. Defaults to
// `"10s"`.
func (o AutopilotConfigOutput) ServerStabilizationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutopilotConfig) pulumi.StringPtrOutput { return v.ServerStabilizationTime }).(pulumi.StringPtrOutput)
}

// The tag to override the version information
// used during a migration. Defaults to an empty string.
func (o AutopilotConfigOutput) UpgradeVersionTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutopilotConfig) pulumi.StringPtrOutput { return v.UpgradeVersionTag }).(pulumi.StringPtrOutput)
}

type AutopilotConfigArrayOutput struct{ *pulumi.OutputState }

func (AutopilotConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutopilotConfig)(nil)).Elem()
}

func (o AutopilotConfigArrayOutput) ToAutopilotConfigArrayOutput() AutopilotConfigArrayOutput {
	return o
}

func (o AutopilotConfigArrayOutput) ToAutopilotConfigArrayOutputWithContext(ctx context.Context) AutopilotConfigArrayOutput {
	return o
}

func (o AutopilotConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AutopilotConfig] {
	return pulumix.Output[[]*AutopilotConfig]{
		OutputState: o.OutputState,
	}
}

func (o AutopilotConfigArrayOutput) Index(i pulumi.IntInput) AutopilotConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutopilotConfig {
		return vs[0].([]*AutopilotConfig)[vs[1].(int)]
	}).(AutopilotConfigOutput)
}

type AutopilotConfigMapOutput struct{ *pulumi.OutputState }

func (AutopilotConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutopilotConfig)(nil)).Elem()
}

func (o AutopilotConfigMapOutput) ToAutopilotConfigMapOutput() AutopilotConfigMapOutput {
	return o
}

func (o AutopilotConfigMapOutput) ToAutopilotConfigMapOutputWithContext(ctx context.Context) AutopilotConfigMapOutput {
	return o
}

func (o AutopilotConfigMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AutopilotConfig] {
	return pulumix.Output[map[string]*AutopilotConfig]{
		OutputState: o.OutputState,
	}
}

func (o AutopilotConfigMapOutput) MapIndex(k pulumi.StringInput) AutopilotConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutopilotConfig {
		return vs[0].(map[string]*AutopilotConfig)[vs[1].(string)]
	}).(AutopilotConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutopilotConfigInput)(nil)).Elem(), &AutopilotConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutopilotConfigArrayInput)(nil)).Elem(), AutopilotConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutopilotConfigMapInput)(nil)).Elem(), AutopilotConfigMap{})
	pulumi.RegisterOutputType(AutopilotConfigOutput{})
	pulumi.RegisterOutputType(AutopilotConfigArrayOutput{})
	pulumi.RegisterOutputType(AutopilotConfigMapOutput{})
}
