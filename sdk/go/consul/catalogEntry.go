// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// !> The `.CatalogEntry` resource has been deprecated in version 2.0.0 of the provider
// and will be removed in a future release. Please read the [upgrade guide](https://www.terraform.io/docs/providers/consul/upgrading.html#deprecation-of-consul_catalog_entry)
// for more information.
// 
// Registers a node or service with the [Consul Catalog](https://www.consul.io/docs/agent/http/catalog.html#catalog_register).
// Currently, defining health checks is not supported.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/catalog_entry.html.markdown.
type CatalogEntry struct {
	s *pulumi.ResourceState
}

// NewCatalogEntry registers a new resource with the given unique name, arguments, and options.
func NewCatalogEntry(ctx *pulumi.Context,
	name string, args *CatalogEntryArgs, opts ...pulumi.ResourceOpt) (*CatalogEntry, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	if args == nil || args.Node == nil {
		return nil, errors.New("missing required argument 'Node'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["datacenter"] = nil
		inputs["node"] = nil
		inputs["services"] = nil
		inputs["token"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["datacenter"] = args.Datacenter
		inputs["node"] = args.Node
		inputs["services"] = args.Services
		inputs["token"] = args.Token
	}
	s, err := ctx.RegisterResource("consul:index/catalogEntry:CatalogEntry", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CatalogEntry{s: s}, nil
}

// GetCatalogEntry gets an existing CatalogEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogEntry(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CatalogEntryState, opts ...pulumi.ResourceOpt) (*CatalogEntry, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["datacenter"] = state.Datacenter
		inputs["node"] = state.Node
		inputs["services"] = state.Services
		inputs["token"] = state.Token
	}
	s, err := ctx.ReadResource("consul:index/catalogEntry:CatalogEntry", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CatalogEntry{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CatalogEntry) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CatalogEntry) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The address of the node being added to,
// or referenced in the catalog.
func (r *CatalogEntry) Address() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["address"])
}

// The datacenter to use. This overrides the
// agent's default datacenter and the datacenter in the provider setup.
func (r *CatalogEntry) Datacenter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["datacenter"])
}

// The name of the node being added to, or
// referenced in the catalog.
func (r *CatalogEntry) Node() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["node"])
}

// A service to optionally associated with
// the node. Supported values are documented below.
func (r *CatalogEntry) Services() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["services"])
}

// ACL token.
func (r *CatalogEntry) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// Input properties used for looking up and filtering CatalogEntry resources.
type CatalogEntryState struct {
	// The address of the node being added to,
	// or referenced in the catalog.
	Address interface{}
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// The name of the node being added to, or
	// referenced in the catalog.
	Node interface{}
	// A service to optionally associated with
	// the node. Supported values are documented below.
	Services interface{}
	// ACL token.
	Token interface{}
}

// The set of arguments for constructing a CatalogEntry resource.
type CatalogEntryArgs struct {
	// The address of the node being added to,
	// or referenced in the catalog.
	Address interface{}
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// The name of the node being added to, or
	// referenced in the catalog.
	Node interface{}
	// A service to optionally associated with
	// the node. Supported values are documented below.
	Services interface{}
	// ACL token.
	Token interface{}
}
