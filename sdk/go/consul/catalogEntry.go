// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> The `CatalogEntry` resource has been deprecated in version 2.0.0 of the provider
// and will be removed in a future release. Please read the [upgrade guide](https://www.terraform.io/docs/providers/consul/guides/upgrading.html#deprecation-of-consul_catalog_entry)
// for more information.
//
// Registers a node or service with the [Consul Catalog](https://www.consul.io/docs/agent/http/catalog.html#catalog_register).
// Currently, defining health checks is not supported.
type CatalogEntry struct {
	pulumi.CustomResourceState

	// The address of the node being added to,
	// or referenced in the catalog.
	Address pulumi.StringOutput `pulumi:"address"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// The name of the node being added to, or
	// referenced in the catalog.
	Node pulumi.StringOutput `pulumi:"node"`
	// A service to optionally associated with
	// the node. Supported values are documented below.
	Services CatalogEntryServiceArrayOutput `pulumi:"services"`
	// ACL token.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrOutput `pulumi:"token"`
}

// NewCatalogEntry registers a new resource with the given unique name, arguments, and options.
func NewCatalogEntry(ctx *pulumi.Context,
	name string, args *CatalogEntryArgs, opts ...pulumi.ResourceOption) (*CatalogEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.Node == nil {
		return nil, errors.New("invalid value for required argument 'Node'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CatalogEntry
	err := ctx.RegisterResource("consul:index/catalogEntry:CatalogEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogEntry gets an existing CatalogEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogEntryState, opts ...pulumi.ResourceOption) (*CatalogEntry, error) {
	var resource CatalogEntry
	err := ctx.ReadResource("consul:index/catalogEntry:CatalogEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogEntry resources.
type catalogEntryState struct {
	// The address of the node being added to,
	// or referenced in the catalog.
	Address *string `pulumi:"address"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The name of the node being added to, or
	// referenced in the catalog.
	Node *string `pulumi:"node"`
	// A service to optionally associated with
	// the node. Supported values are documented below.
	Services []CatalogEntryService `pulumi:"services"`
	// ACL token.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
}

type CatalogEntryState struct {
	// The address of the node being added to,
	// or referenced in the catalog.
	Address pulumi.StringPtrInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The name of the node being added to, or
	// referenced in the catalog.
	Node pulumi.StringPtrInput
	// A service to optionally associated with
	// the node. Supported values are documented below.
	Services CatalogEntryServiceArrayInput
	// ACL token.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
}

func (CatalogEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogEntryState)(nil)).Elem()
}

type catalogEntryArgs struct {
	// The address of the node being added to,
	// or referenced in the catalog.
	Address string `pulumi:"address"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The name of the node being added to, or
	// referenced in the catalog.
	Node string `pulumi:"node"`
	// A service to optionally associated with
	// the node. Supported values are documented below.
	Services []CatalogEntryService `pulumi:"services"`
	// ACL token.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a CatalogEntry resource.
type CatalogEntryArgs struct {
	// The address of the node being added to,
	// or referenced in the catalog.
	Address pulumi.StringInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The name of the node being added to, or
	// referenced in the catalog.
	Node pulumi.StringInput
	// A service to optionally associated with
	// the node. Supported values are documented below.
	Services CatalogEntryServiceArrayInput
	// ACL token.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
}

func (CatalogEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogEntryArgs)(nil)).Elem()
}

type CatalogEntryInput interface {
	pulumi.Input

	ToCatalogEntryOutput() CatalogEntryOutput
	ToCatalogEntryOutputWithContext(ctx context.Context) CatalogEntryOutput
}

func (*CatalogEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogEntry)(nil)).Elem()
}

func (i *CatalogEntry) ToCatalogEntryOutput() CatalogEntryOutput {
	return i.ToCatalogEntryOutputWithContext(context.Background())
}

func (i *CatalogEntry) ToCatalogEntryOutputWithContext(ctx context.Context) CatalogEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogEntryOutput)
}

// CatalogEntryArrayInput is an input type that accepts CatalogEntryArray and CatalogEntryArrayOutput values.
// You can construct a concrete instance of `CatalogEntryArrayInput` via:
//
//	CatalogEntryArray{ CatalogEntryArgs{...} }
type CatalogEntryArrayInput interface {
	pulumi.Input

	ToCatalogEntryArrayOutput() CatalogEntryArrayOutput
	ToCatalogEntryArrayOutputWithContext(context.Context) CatalogEntryArrayOutput
}

type CatalogEntryArray []CatalogEntryInput

func (CatalogEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogEntry)(nil)).Elem()
}

func (i CatalogEntryArray) ToCatalogEntryArrayOutput() CatalogEntryArrayOutput {
	return i.ToCatalogEntryArrayOutputWithContext(context.Background())
}

func (i CatalogEntryArray) ToCatalogEntryArrayOutputWithContext(ctx context.Context) CatalogEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogEntryArrayOutput)
}

// CatalogEntryMapInput is an input type that accepts CatalogEntryMap and CatalogEntryMapOutput values.
// You can construct a concrete instance of `CatalogEntryMapInput` via:
//
//	CatalogEntryMap{ "key": CatalogEntryArgs{...} }
type CatalogEntryMapInput interface {
	pulumi.Input

	ToCatalogEntryMapOutput() CatalogEntryMapOutput
	ToCatalogEntryMapOutputWithContext(context.Context) CatalogEntryMapOutput
}

type CatalogEntryMap map[string]CatalogEntryInput

func (CatalogEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogEntry)(nil)).Elem()
}

func (i CatalogEntryMap) ToCatalogEntryMapOutput() CatalogEntryMapOutput {
	return i.ToCatalogEntryMapOutputWithContext(context.Background())
}

func (i CatalogEntryMap) ToCatalogEntryMapOutputWithContext(ctx context.Context) CatalogEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogEntryMapOutput)
}

type CatalogEntryOutput struct{ *pulumi.OutputState }

func (CatalogEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogEntry)(nil)).Elem()
}

func (o CatalogEntryOutput) ToCatalogEntryOutput() CatalogEntryOutput {
	return o
}

func (o CatalogEntryOutput) ToCatalogEntryOutputWithContext(ctx context.Context) CatalogEntryOutput {
	return o
}

// The address of the node being added to,
// or referenced in the catalog.
func (o CatalogEntryOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogEntry) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The datacenter to use. This overrides the
// agent's default datacenter and the datacenter in the provider setup.
func (o CatalogEntryOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogEntry) pulumi.StringOutput { return v.Datacenter }).(pulumi.StringOutput)
}

// The name of the node being added to, or
// referenced in the catalog.
func (o CatalogEntryOutput) Node() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogEntry) pulumi.StringOutput { return v.Node }).(pulumi.StringOutput)
}

// A service to optionally associated with
// the node. Supported values are documented below.
func (o CatalogEntryOutput) Services() CatalogEntryServiceArrayOutput {
	return o.ApplyT(func(v *CatalogEntry) CatalogEntryServiceArrayOutput { return v.Services }).(CatalogEntryServiceArrayOutput)
}

// ACL token.
//
// Deprecated: The token argument has been deprecated and will be removed in a future release.
// Please use the token argument in the provider configuration
func (o CatalogEntryOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogEntry) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

type CatalogEntryArrayOutput struct{ *pulumi.OutputState }

func (CatalogEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogEntry)(nil)).Elem()
}

func (o CatalogEntryArrayOutput) ToCatalogEntryArrayOutput() CatalogEntryArrayOutput {
	return o
}

func (o CatalogEntryArrayOutput) ToCatalogEntryArrayOutputWithContext(ctx context.Context) CatalogEntryArrayOutput {
	return o
}

func (o CatalogEntryArrayOutput) Index(i pulumi.IntInput) CatalogEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogEntry {
		return vs[0].([]*CatalogEntry)[vs[1].(int)]
	}).(CatalogEntryOutput)
}

type CatalogEntryMapOutput struct{ *pulumi.OutputState }

func (CatalogEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogEntry)(nil)).Elem()
}

func (o CatalogEntryMapOutput) ToCatalogEntryMapOutput() CatalogEntryMapOutput {
	return o
}

func (o CatalogEntryMapOutput) ToCatalogEntryMapOutputWithContext(ctx context.Context) CatalogEntryMapOutput {
	return o
}

func (o CatalogEntryMapOutput) MapIndex(k pulumi.StringInput) CatalogEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogEntry {
		return vs[0].(map[string]*CatalogEntry)[vs[1].(string)]
	}).(CatalogEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogEntryInput)(nil)).Elem(), &CatalogEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogEntryArrayInput)(nil)).Elem(), CatalogEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogEntryMapInput)(nil)).Elem(), CatalogEntryMap{})
	pulumi.RegisterOutputType(CatalogEntryOutput{})
	pulumi.RegisterOutputType(CatalogEntryArrayOutput{})
	pulumi.RegisterOutputType(CatalogEntryMapOutput{})
}
