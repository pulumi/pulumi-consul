// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package consul

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The [Configuration Entry](https://www.consul.io/docs/agent/config_entries.html)
// resource can be used to provide cluster-wide defaults for various aspects of
// Consul.
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/config_entry.html.markdown.
type ConfigEntry struct {
	pulumi.CustomResourceState

	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the configuration entry being registred.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewConfigEntry registers a new resource with the given unique name, arguments, and options.
func NewConfigEntry(ctx *pulumi.Context,
	name string, args *ConfigEntryArgs, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil {
		args = &ConfigEntryArgs{}
	}
	var resource ConfigEntry
	err := ctx.RegisterResource("consul:index/configEntry:ConfigEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEntry gets an existing ConfigEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEntryState, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	var resource ConfigEntry
	err := ctx.ReadResource("consul:index/configEntry:ConfigEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEntry resources.
type configEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind *string `pulumi:"kind"`
	// The name of the configuration entry being registred.
	Name *string `pulumi:"name"`
}

type ConfigEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringPtrInput
	// The name of the configuration entry being registred.
	Name pulumi.StringPtrInput
}

func (ConfigEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryState)(nil)).Elem()
}

type configEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind string `pulumi:"kind"`
	// The name of the configuration entry being registred.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ConfigEntry resource.
type ConfigEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringInput
	// The name of the configuration entry being registred.
	Name pulumi.StringPtrInput
}

func (ConfigEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryArgs)(nil)).Elem()
}

