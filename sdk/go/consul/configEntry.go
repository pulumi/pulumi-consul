// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Import
//
// `consul_config_entry` can be imported using the syntax `<kind>/<name>` if the config entry is in the default partition and default namespace, or `<partition>/<namespace>/<kind>/<name>` for config entries in a non-default partition or namespace:
//
// ```sh
//
//	$ pulumi import consul:index/configEntry:ConfigEntry service_splitter 816a195f-6cb1-2e8d-92af-3011ae706318
//
// ```
type ConfigEntry struct {
	pulumi.CustomResourceState

	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the configuration entry being registered.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to create the config entry within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The partition the config entry is associated with.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
}

// NewConfigEntry registers a new resource with the given unique name, arguments, and options.
func NewConfigEntry(ctx *pulumi.Context,
	name string, args *ConfigEntryArgs, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigEntry
	err := ctx.RegisterResource("consul:index/configEntry:ConfigEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEntry gets an existing ConfigEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEntryState, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	var resource ConfigEntry
	err := ctx.ReadResource("consul:index/configEntry:ConfigEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEntry resources.
type configEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind *string `pulumi:"kind"`
	// The name of the configuration entry being registered.
	Name *string `pulumi:"name"`
	// The namespace to create the config entry within.
	Namespace *string `pulumi:"namespace"`
	// The partition the config entry is associated with.
	Partition *string `pulumi:"partition"`
}

type ConfigEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringPtrInput
	// The name of the configuration entry being registered.
	Name pulumi.StringPtrInput
	// The namespace to create the config entry within.
	Namespace pulumi.StringPtrInput
	// The partition the config entry is associated with.
	Partition pulumi.StringPtrInput
}

func (ConfigEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryState)(nil)).Elem()
}

type configEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind string `pulumi:"kind"`
	// The name of the configuration entry being registered.
	Name *string `pulumi:"name"`
	// The namespace to create the config entry within.
	Namespace *string `pulumi:"namespace"`
	// The partition the config entry is associated with.
	Partition *string `pulumi:"partition"`
}

// The set of arguments for constructing a ConfigEntry resource.
type ConfigEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringInput
	// The name of the configuration entry being registered.
	Name pulumi.StringPtrInput
	// The namespace to create the config entry within.
	Namespace pulumi.StringPtrInput
	// The partition the config entry is associated with.
	Partition pulumi.StringPtrInput
}

func (ConfigEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryArgs)(nil)).Elem()
}

type ConfigEntryInput interface {
	pulumi.Input

	ToConfigEntryOutput() ConfigEntryOutput
	ToConfigEntryOutputWithContext(ctx context.Context) ConfigEntryOutput
}

func (*ConfigEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntry)(nil)).Elem()
}

func (i *ConfigEntry) ToConfigEntryOutput() ConfigEntryOutput {
	return i.ToConfigEntryOutputWithContext(context.Background())
}

func (i *ConfigEntry) ToConfigEntryOutputWithContext(ctx context.Context) ConfigEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryOutput)
}

func (i *ConfigEntry) ToOutput(ctx context.Context) pulumix.Output[*ConfigEntry] {
	return pulumix.Output[*ConfigEntry]{
		OutputState: i.ToConfigEntryOutputWithContext(ctx).OutputState,
	}
}

// ConfigEntryArrayInput is an input type that accepts ConfigEntryArray and ConfigEntryArrayOutput values.
// You can construct a concrete instance of `ConfigEntryArrayInput` via:
//
//	ConfigEntryArray{ ConfigEntryArgs{...} }
type ConfigEntryArrayInput interface {
	pulumi.Input

	ToConfigEntryArrayOutput() ConfigEntryArrayOutput
	ToConfigEntryArrayOutputWithContext(context.Context) ConfigEntryArrayOutput
}

type ConfigEntryArray []ConfigEntryInput

func (ConfigEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntry)(nil)).Elem()
}

func (i ConfigEntryArray) ToConfigEntryArrayOutput() ConfigEntryArrayOutput {
	return i.ToConfigEntryArrayOutputWithContext(context.Background())
}

func (i ConfigEntryArray) ToConfigEntryArrayOutputWithContext(ctx context.Context) ConfigEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryArrayOutput)
}

func (i ConfigEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]*ConfigEntry] {
	return pulumix.Output[[]*ConfigEntry]{
		OutputState: i.ToConfigEntryArrayOutputWithContext(ctx).OutputState,
	}
}

// ConfigEntryMapInput is an input type that accepts ConfigEntryMap and ConfigEntryMapOutput values.
// You can construct a concrete instance of `ConfigEntryMapInput` via:
//
//	ConfigEntryMap{ "key": ConfigEntryArgs{...} }
type ConfigEntryMapInput interface {
	pulumi.Input

	ToConfigEntryMapOutput() ConfigEntryMapOutput
	ToConfigEntryMapOutputWithContext(context.Context) ConfigEntryMapOutput
}

type ConfigEntryMap map[string]ConfigEntryInput

func (ConfigEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntry)(nil)).Elem()
}

func (i ConfigEntryMap) ToConfigEntryMapOutput() ConfigEntryMapOutput {
	return i.ToConfigEntryMapOutputWithContext(context.Background())
}

func (i ConfigEntryMap) ToConfigEntryMapOutputWithContext(ctx context.Context) ConfigEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryMapOutput)
}

func (i ConfigEntryMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConfigEntry] {
	return pulumix.Output[map[string]*ConfigEntry]{
		OutputState: i.ToConfigEntryMapOutputWithContext(ctx).OutputState,
	}
}

type ConfigEntryOutput struct{ *pulumi.OutputState }

func (ConfigEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntry)(nil)).Elem()
}

func (o ConfigEntryOutput) ToConfigEntryOutput() ConfigEntryOutput {
	return o
}

func (o ConfigEntryOutput) ToConfigEntryOutputWithContext(ctx context.Context) ConfigEntryOutput {
	return o
}

func (o ConfigEntryOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigEntry] {
	return pulumix.Output[*ConfigEntry]{
		OutputState: o.OutputState,
	}
}

// An arbitrary map of configuration values.
func (o ConfigEntryOutput) ConfigJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringPtrOutput { return v.ConfigJson }).(pulumi.StringPtrOutput)
}

// The kind of configuration entry to register.
func (o ConfigEntryOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The name of the configuration entry being registered.
func (o ConfigEntryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to create the config entry within.
func (o ConfigEntryOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The partition the config entry is associated with.
func (o ConfigEntryOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

type ConfigEntryArrayOutput struct{ *pulumi.OutputState }

func (ConfigEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntry)(nil)).Elem()
}

func (o ConfigEntryArrayOutput) ToConfigEntryArrayOutput() ConfigEntryArrayOutput {
	return o
}

func (o ConfigEntryArrayOutput) ToConfigEntryArrayOutputWithContext(ctx context.Context) ConfigEntryArrayOutput {
	return o
}

func (o ConfigEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ConfigEntry] {
	return pulumix.Output[[]*ConfigEntry]{
		OutputState: o.OutputState,
	}
}

func (o ConfigEntryArrayOutput) Index(i pulumi.IntInput) ConfigEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigEntry {
		return vs[0].([]*ConfigEntry)[vs[1].(int)]
	}).(ConfigEntryOutput)
}

type ConfigEntryMapOutput struct{ *pulumi.OutputState }

func (ConfigEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntry)(nil)).Elem()
}

func (o ConfigEntryMapOutput) ToConfigEntryMapOutput() ConfigEntryMapOutput {
	return o
}

func (o ConfigEntryMapOutput) ToConfigEntryMapOutputWithContext(ctx context.Context) ConfigEntryMapOutput {
	return o
}

func (o ConfigEntryMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConfigEntry] {
	return pulumix.Output[map[string]*ConfigEntry]{
		OutputState: o.OutputState,
	}
}

func (o ConfigEntryMapOutput) MapIndex(k pulumi.StringInput) ConfigEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigEntry {
		return vs[0].(map[string]*ConfigEntry)[vs[1].(string)]
	}).(ConfigEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryInput)(nil)).Elem(), &ConfigEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryArrayInput)(nil)).Elem(), ConfigEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryMapInput)(nil)).Elem(), ConfigEntryMap{})
	pulumi.RegisterOutputType(ConfigEntryOutput{})
	pulumi.RegisterOutputType(ConfigEntryArrayOutput{})
	pulumi.RegisterOutputType(ConfigEntryMapOutput{})
}
