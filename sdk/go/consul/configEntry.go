// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The [Configuration Entry](https://www.consul.io/docs/agent/config_entries.html)
// resource can be used to provide cluster-wide defaults for various aspects of
// Consul.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"Config": map[string]interface{}{
// 				"local_connect_timeout_ms": 1000,
// 				"handshake_timeout_ms":     10000,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := consul.NewConfigEntry(ctx, "proxyDefaults", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("proxy-defaults"),
// 			ConfigJson: pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON1, err := json.Marshal(map[string]interface{}{
// 			"Protocol": "http",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json1 := string(tmpJSON1)
// 		_, err = consul.NewConfigEntry(ctx, "web", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-defaults"),
// 			ConfigJson: pulumi.String(json1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON2, err := json.Marshal(map[string]interface{}{
// 			"Protocol": "http",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json2 := string(tmpJSON2)
// 		_, err = consul.NewConfigEntry(ctx, "admin", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-defaults"),
// 			ConfigJson: pulumi.String(json2),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON3, err := json.Marshal(map[string]interface{}{
// 			"DefaultSubset": "v1",
// 			"Subsets": map[string]interface{}{
// 				"v1": map[string]interface{}{
// 					"Filter": "Service.Meta.version == v1",
// 				},
// 				"v2": map[string]interface{}{
// 					"Filter": "Service.Meta.version == v2",
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json3 := string(tmpJSON3)
// 		_, err = consul.NewConfigEntry(ctx, "serviceResolver", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-resolver"),
// 			ConfigJson: pulumi.String(json3),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON4, err := json.Marshal(map[string]interface{}{
// 			"Splits": []map[string]interface{}{
// 				map[string]interface{}{
// 					"Weight":        90,
// 					"ServiceSubset": "v1",
// 				},
// 				map[string]interface{}{
// 					"Weight":        10,
// 					"ServiceSubset": "v2",
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json4 := string(tmpJSON4)
// 		_, err = consul.NewConfigEntry(ctx, "serviceSplitter", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-splitter"),
// 			ConfigJson: pulumi.String(json4),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON5, err := json.Marshal(map[string]interface{}{
// 			"Routes": []map[string]interface{}{
// 				map[string]interface{}{
// 					"Match": map[string]interface{}{
// 						"HTTP": map[string]interface{}{
// 							"PathPrefix": "/admin",
// 						},
// 					},
// 					"Destination": map[string]interface{}{
// 						"Service": "admin",
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json5 := string(tmpJSON5)
// 		_, err = consul.NewConfigEntry(ctx, "serviceRouter", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-router"),
// 			ConfigJson: pulumi.String(json5),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON6, err := json.Marshal(map[string]interface{}{
// 			"TLS": map[string]interface{}{
// 				"Enabled": true,
// 			},
// 			"Listeners": []map[string]interface{}{
// 				map[string]interface{}{
// 					"Port":     8000,
// 					"Protocol": "http",
// 					"Services": []map[string]interface{}{
// 						map[string]interface{}{
// 							"Name": "*",
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json6 := string(tmpJSON6)
// 		_, err = consul.NewConfigEntry(ctx, "ingressGateway", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("ingress-gateway"),
// 			ConfigJson: pulumi.String(json6),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON7, err := json.Marshal(map[string]interface{}{
// 			"Services": []map[string]interface{}{
// 				map[string]interface{}{
// 					"Name": "billing",
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json7 := string(tmpJSON7)
// 		_, err = consul.NewConfigEntry(ctx, "terminatingGateway", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("terminating-gateway"),
// 			ConfigJson: pulumi.String(json7),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### `service-intentions` config entry
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"Sources": []map[string]interface{}{
// 				map[string]interface{}{
// 					"Action":     "allow",
// 					"Name":       "frontend-webapp",
// 					"Precedence": 9,
// 					"Type":       "consul",
// 				},
// 				map[string]interface{}{
// 					"Action":     "allow",
// 					"Name":       "nightly-cronjob",
// 					"Precedence": 9,
// 					"Type":       "consul",
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := consul.NewConfigEntry(ctx, "serviceIntentions", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-intentions"),
// 			ConfigJson: pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"Protocol": "http",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := consul.NewConfigEntry(ctx, "sd", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-defaults"),
// 			ConfigJson: pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON1, err := json.Marshal(map[string]interface{}{
// 			"Sources": []interface{}{
// 				map[string]interface{}{
// 					"Name": "contractor-webapp",
// 					"Permissions": []map[string]interface{}{
// 						map[string]interface{}{
// 							"Action": "allow",
// 							"HTTP": map[string]interface{}{
// 								"Methods": []string{
// 									"GET",
// 									"HEAD",
// 								},
// 								"PathExact": "/healtz",
// 							},
// 						},
// 					},
// 					"Precedence": 9,
// 					"Type":       "consul",
// 				},
// 				map[string]interface{}{
// 					"Name": "admin-dashboard-webapp",
// 					"Permissions": []map[string]interface{}{
// 						map[string]interface{}{
// 							"Action": "deny",
// 							"HTTP": map[string]interface{}{
// 								"PathPrefix": "/debugz",
// 							},
// 						},
// 						map[string]interface{}{
// 							"Action": "allow",
// 							"HTTP": map[string]interface{}{
// 								"PathPrefix": "/",
// 							},
// 						},
// 					},
// 					"Precedence": 9,
// 					"Type":       "consul",
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json1 := string(tmpJSON1)
// 		_, err = consul.NewConfigEntry(ctx, "serviceIntentions", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-intentions"),
// 			ConfigJson: pulumi.String(json1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ConfigEntry struct {
	pulumi.CustomResourceState

	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the configuration entry being registred.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewConfigEntry registers a new resource with the given unique name, arguments, and options.
func NewConfigEntry(ctx *pulumi.Context,
	name string, args *ConfigEntryArgs, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	var resource ConfigEntry
	err := ctx.RegisterResource("consul:index/configEntry:ConfigEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEntry gets an existing ConfigEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEntryState, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	var resource ConfigEntry
	err := ctx.ReadResource("consul:index/configEntry:ConfigEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEntry resources.
type configEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind *string `pulumi:"kind"`
	// The name of the configuration entry being registred.
	Name *string `pulumi:"name"`
}

type ConfigEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringPtrInput
	// The name of the configuration entry being registred.
	Name pulumi.StringPtrInput
}

func (ConfigEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryState)(nil)).Elem()
}

type configEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind string `pulumi:"kind"`
	// The name of the configuration entry being registred.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ConfigEntry resource.
type ConfigEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringInput
	// The name of the configuration entry being registred.
	Name pulumi.StringPtrInput
}

func (ConfigEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryArgs)(nil)).Elem()
}

type ConfigEntryInput interface {
	pulumi.Input

	ToConfigEntryOutput() ConfigEntryOutput
	ToConfigEntryOutputWithContext(ctx context.Context) ConfigEntryOutput
}

func (*ConfigEntry) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigEntry)(nil))
}

func (i *ConfigEntry) ToConfigEntryOutput() ConfigEntryOutput {
	return i.ToConfigEntryOutputWithContext(context.Background())
}

func (i *ConfigEntry) ToConfigEntryOutputWithContext(ctx context.Context) ConfigEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryOutput)
}

func (i *ConfigEntry) ToConfigEntryPtrOutput() ConfigEntryPtrOutput {
	return i.ToConfigEntryPtrOutputWithContext(context.Background())
}

func (i *ConfigEntry) ToConfigEntryPtrOutputWithContext(ctx context.Context) ConfigEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryPtrOutput)
}

type ConfigEntryPtrInput interface {
	pulumi.Input

	ToConfigEntryPtrOutput() ConfigEntryPtrOutput
	ToConfigEntryPtrOutputWithContext(ctx context.Context) ConfigEntryPtrOutput
}

type configEntryPtrType ConfigEntryArgs

func (*configEntryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntry)(nil))
}

func (i *configEntryPtrType) ToConfigEntryPtrOutput() ConfigEntryPtrOutput {
	return i.ToConfigEntryPtrOutputWithContext(context.Background())
}

func (i *configEntryPtrType) ToConfigEntryPtrOutputWithContext(ctx context.Context) ConfigEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryPtrOutput)
}

// ConfigEntryArrayInput is an input type that accepts ConfigEntryArray and ConfigEntryArrayOutput values.
// You can construct a concrete instance of `ConfigEntryArrayInput` via:
//
//          ConfigEntryArray{ ConfigEntryArgs{...} }
type ConfigEntryArrayInput interface {
	pulumi.Input

	ToConfigEntryArrayOutput() ConfigEntryArrayOutput
	ToConfigEntryArrayOutputWithContext(context.Context) ConfigEntryArrayOutput
}

type ConfigEntryArray []ConfigEntryInput

func (ConfigEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ConfigEntry)(nil))
}

func (i ConfigEntryArray) ToConfigEntryArrayOutput() ConfigEntryArrayOutput {
	return i.ToConfigEntryArrayOutputWithContext(context.Background())
}

func (i ConfigEntryArray) ToConfigEntryArrayOutputWithContext(ctx context.Context) ConfigEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryArrayOutput)
}

// ConfigEntryMapInput is an input type that accepts ConfigEntryMap and ConfigEntryMapOutput values.
// You can construct a concrete instance of `ConfigEntryMapInput` via:
//
//          ConfigEntryMap{ "key": ConfigEntryArgs{...} }
type ConfigEntryMapInput interface {
	pulumi.Input

	ToConfigEntryMapOutput() ConfigEntryMapOutput
	ToConfigEntryMapOutputWithContext(context.Context) ConfigEntryMapOutput
}

type ConfigEntryMap map[string]ConfigEntryInput

func (ConfigEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ConfigEntry)(nil))
}

func (i ConfigEntryMap) ToConfigEntryMapOutput() ConfigEntryMapOutput {
	return i.ToConfigEntryMapOutputWithContext(context.Background())
}

func (i ConfigEntryMap) ToConfigEntryMapOutputWithContext(ctx context.Context) ConfigEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryMapOutput)
}

type ConfigEntryOutput struct {
	*pulumi.OutputState
}

func (ConfigEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigEntry)(nil))
}

func (o ConfigEntryOutput) ToConfigEntryOutput() ConfigEntryOutput {
	return o
}

func (o ConfigEntryOutput) ToConfigEntryOutputWithContext(ctx context.Context) ConfigEntryOutput {
	return o
}

func (o ConfigEntryOutput) ToConfigEntryPtrOutput() ConfigEntryPtrOutput {
	return o.ToConfigEntryPtrOutputWithContext(context.Background())
}

func (o ConfigEntryOutput) ToConfigEntryPtrOutputWithContext(ctx context.Context) ConfigEntryPtrOutput {
	return o.ApplyT(func(v ConfigEntry) *ConfigEntry {
		return &v
	}).(ConfigEntryPtrOutput)
}

type ConfigEntryPtrOutput struct {
	*pulumi.OutputState
}

func (ConfigEntryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntry)(nil))
}

func (o ConfigEntryPtrOutput) ToConfigEntryPtrOutput() ConfigEntryPtrOutput {
	return o
}

func (o ConfigEntryPtrOutput) ToConfigEntryPtrOutputWithContext(ctx context.Context) ConfigEntryPtrOutput {
	return o
}

type ConfigEntryArrayOutput struct{ *pulumi.OutputState }

func (ConfigEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigEntry)(nil))
}

func (o ConfigEntryArrayOutput) ToConfigEntryArrayOutput() ConfigEntryArrayOutput {
	return o
}

func (o ConfigEntryArrayOutput) ToConfigEntryArrayOutputWithContext(ctx context.Context) ConfigEntryArrayOutput {
	return o
}

func (o ConfigEntryArrayOutput) Index(i pulumi.IntInput) ConfigEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigEntry {
		return vs[0].([]ConfigEntry)[vs[1].(int)]
	}).(ConfigEntryOutput)
}

type ConfigEntryMapOutput struct{ *pulumi.OutputState }

func (ConfigEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ConfigEntry)(nil))
}

func (o ConfigEntryMapOutput) ToConfigEntryMapOutput() ConfigEntryMapOutput {
	return o
}

func (o ConfigEntryMapOutput) ToConfigEntryMapOutputWithContext(ctx context.Context) ConfigEntryMapOutput {
	return o
}

func (o ConfigEntryMapOutput) MapIndex(k pulumi.StringInput) ConfigEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ConfigEntry {
		return vs[0].(map[string]ConfigEntry)[vs[1].(string)]
	}).(ConfigEntryOutput)
}

func init() {
	pulumi.RegisterOutputType(ConfigEntryOutput{})
	pulumi.RegisterOutputType(ConfigEntryPtrOutput{})
	pulumi.RegisterOutputType(ConfigEntryArrayOutput{})
	pulumi.RegisterOutputType(ConfigEntryMapOutput{})
}
