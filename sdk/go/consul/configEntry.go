// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The [Configuration Entry](https://www.consul.io/docs/agent/config_entries.html)
// resource can be used to provide cluster-wide defaults for various aspects of
// Consul.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"Config": map[string]interface{}{
// 				"local_connect_timeout_ms": 1000,
// 				"handshake_timeout_ms":     10000,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := consul.NewConfigEntry(ctx, "proxyDefaults", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("proxy-defaults"),
// 			ConfigJson: pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON1, err := json.Marshal(map[string]interface{}{
// 			"Protocol": "http",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json1 := string(tmpJSON1)
// 		_, err = consul.NewConfigEntry(ctx, "web", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-defaults"),
// 			ConfigJson: pulumi.String(json1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON2, err := json.Marshal(map[string]interface{}{
// 			"Protocol": "http",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json2 := string(tmpJSON2)
// 		_, err = consul.NewConfigEntry(ctx, "admin", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-defaults"),
// 			ConfigJson: pulumi.String(json2),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON3, err := json.Marshal(map[string]interface{}{
// 			"DefaultSubset": "v1",
// 			"Subsets": map[string]interface{}{
// 				"v1": map[string]interface{}{
// 					"Filter": "Service.Meta.version == v1",
// 				},
// 				"v2": map[string]interface{}{
// 					"Filter": "Service.Meta.version == v2",
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json3 := string(tmpJSON3)
// 		_, err = consul.NewConfigEntry(ctx, "serviceResolver", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-resolver"),
// 			ConfigJson: pulumi.String(json3),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON4, err := json.Marshal(map[string]interface{}{
// 			"Splits": []map[string]interface{}{
// 				map[string]interface{}{
// 					"Weight":        90,
// 					"ServiceSubset": "v1",
// 				},
// 				map[string]interface{}{
// 					"Weight":        10,
// 					"ServiceSubset": "v2",
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json4 := string(tmpJSON4)
// 		_, err = consul.NewConfigEntry(ctx, "serviceSplitter", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-splitter"),
// 			ConfigJson: pulumi.String(json4),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON5, err := json.Marshal(map[string]interface{}{
// 			"Routes": []map[string]interface{}{
// 				map[string]interface{}{
// 					"Match": map[string]interface{}{
// 						"HTTP": map[string]interface{}{
// 							"PathPrefix": "/admin",
// 						},
// 					},
// 					"Destination": map[string]interface{}{
// 						"Service": "admin",
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json5 := string(tmpJSON5)
// 		_, err = consul.NewConfigEntry(ctx, "serviceRouter", &consul.ConfigEntryArgs{
// 			Kind:       pulumi.String("service-router"),
// 			ConfigJson: pulumi.String(json5),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ConfigEntry struct {
	pulumi.CustomResourceState

	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the configuration entry being registred.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewConfigEntry registers a new resource with the given unique name, arguments, and options.
func NewConfigEntry(ctx *pulumi.Context,
	name string, args *ConfigEntryArgs, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil {
		args = &ConfigEntryArgs{}
	}
	var resource ConfigEntry
	err := ctx.RegisterResource("consul:index/configEntry:ConfigEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEntry gets an existing ConfigEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEntryState, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	var resource ConfigEntry
	err := ctx.ReadResource("consul:index/configEntry:ConfigEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEntry resources.
type configEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind *string `pulumi:"kind"`
	// The name of the configuration entry being registred.
	Name *string `pulumi:"name"`
}

type ConfigEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringPtrInput
	// The name of the configuration entry being registred.
	Name pulumi.StringPtrInput
}

func (ConfigEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryState)(nil)).Elem()
}

type configEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind string `pulumi:"kind"`
	// The name of the configuration entry being registred.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ConfigEntry resource.
type ConfigEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringInput
	// The name of the configuration entry being registred.
	Name pulumi.StringPtrInput
}

func (ConfigEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryArgs)(nil)).Elem()
}
