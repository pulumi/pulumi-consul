// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Config": map[string]interface{}{
//					"local_connect_timeout_ms": 1000,
//					"handshake_timeout_ms":     10000,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = consul.NewConfigEntry(ctx, "proxy_defaults", &consul.ConfigEntryArgs{
//				Kind:       pulumi.String("proxy-defaults"),
//				Name:       pulumi.String("global"),
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"Protocol": "http",
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			web, err := consul.NewConfigEntry(ctx, "web", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("web"),
//				Kind:       pulumi.String("service-defaults"),
//				ConfigJson: pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON2, err := json.Marshal(map[string]interface{}{
//				"Protocol": "http",
//			})
//			if err != nil {
//				return err
//			}
//			json2 := string(tmpJSON2)
//			_, err = consul.NewConfigEntry(ctx, "admin", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("admin"),
//				Kind:       pulumi.String("service-defaults"),
//				ConfigJson: pulumi.String(json2),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON3, err := json.Marshal(map[string]interface{}{
//				"DefaultSubset": "v1",
//				"Subsets": map[string]interface{}{
//					"v1": map[string]interface{}{
//						"Filter": "Service.Meta.version == v1",
//					},
//					"v2": map[string]interface{}{
//						"Filter": "Service.Meta.version == v2",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json3 := string(tmpJSON3)
//			serviceResolver, err := consul.NewConfigEntry(ctx, "service_resolver", &consul.ConfigEntryArgs{
//				Kind:       pulumi.String("service-resolver"),
//				Name:       web.Name,
//				ConfigJson: pulumi.String(json3),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON4, err := json.Marshal(map[string]interface{}{
//				"Splits": []interface{}{
//					map[string]interface{}{
//						"Weight":        90,
//						"ServiceSubset": "v1",
//					},
//					map[string]interface{}{
//						"Weight":        10,
//						"ServiceSubset": "v2",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json4 := string(tmpJSON4)
//			_, err = consul.NewConfigEntry(ctx, "service_splitter", &consul.ConfigEntryArgs{
//				Kind:       pulumi.String("service-splitter"),
//				Name:       serviceResolver.Name,
//				ConfigJson: pulumi.String(json4),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON5, err := json.Marshal(map[string]interface{}{
//				"Routes": []map[string]interface{}{
//					map[string]interface{}{
//						"Match": map[string]interface{}{
//							"HTTP": map[string]interface{}{
//								"PathPrefix": "/admin",
//							},
//						},
//						"Destination": map[string]interface{}{
//							"Service": "admin",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json5 := string(tmpJSON5)
//			_, err = consul.NewConfigEntry(ctx, "service_router", &consul.ConfigEntryArgs{
//				Kind:       pulumi.String("service-router"),
//				Name:       pulumi.String("web"),
//				ConfigJson: pulumi.String(json5),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON6, err := json.Marshal(map[string]interface{}{
//				"TLS": map[string]interface{}{
//					"Enabled": true,
//				},
//				"Listeners": []map[string]interface{}{
//					map[string]interface{}{
//						"Port":     8000,
//						"Protocol": "http",
//						"Services": []map[string]interface{}{
//							map[string]interface{}{
//								"Name": "*",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json6 := string(tmpJSON6)
//			_, err = consul.NewConfigEntry(ctx, "ingress_gateway", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("us-east-ingress"),
//				Kind:       pulumi.String("ingress-gateway"),
//				ConfigJson: pulumi.String(json6),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON7, err := json.Marshal(map[string]interface{}{
//				"Services": []map[string]interface{}{
//					map[string]interface{}{
//						"Name": "billing",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json7 := string(tmpJSON7)
//			_, err = consul.NewConfigEntry(ctx, "terminating_gateway", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("us-west-gateway"),
//				Kind:       pulumi.String("terminating-gateway"),
//				ConfigJson: pulumi.String(json7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### `service-intentions` config entry
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Sources": []map[string]interface{}{
//					map[string]interface{}{
//						"Action":     "allow",
//						"Name":       "frontend-webapp",
//						"Precedence": 9,
//						"Type":       "consul",
//					},
//					map[string]interface{}{
//						"Action":     "allow",
//						"Name":       "nightly-cronjob",
//						"Precedence": 9,
//						"Type":       "consul",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = consul.NewConfigEntry(ctx, "service_intentions", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("api-service"),
//				Kind:       pulumi.String("service-intentions"),
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Protocol": "http",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			sd, err := consul.NewConfigEntry(ctx, "sd", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("fort-knox"),
//				Kind:       pulumi.String("service-defaults"),
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"Issuer": "test-issuer",
//				"JSONWebKeySet": map[string]interface{}{
//					"Remote": map[string]interface{}{
//						"URI":                 "https://127.0.0.1:9091",
//						"FetchAsynchronously": true,
//					},
//				},
//				"Forwarding": map[string]interface{}{
//					"HeaderName": "test-token",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			jwtProvider, err := consul.NewConfigEntry(ctx, "jwt_provider", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("test-provider"),
//				Kind:       pulumi.String("jwt-provider"),
//				ConfigJson: pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.NewConfigEntry(ctx, "service_intentions", &consul.ConfigEntryArgs{
//				Name: sd.Name,
//				Kind: pulumi.String("service-intentions"),
//				ConfigJson: jwtProvider.Name.ApplyT(func(name string) (pulumi.String, error) {
//					var _zero pulumi.String
//					tmpJSON2, err := json.Marshal(map[string]interface{}{
//						"Sources": []interface{}{
//							map[string]interface{}{
//								"Name": "contractor-webapp",
//								"Permissions": []map[string]interface{}{
//									map[string]interface{}{
//										"Action": "allow",
//										"HTTP": map[string]interface{}{
//											"Methods": []string{
//												"GET",
//												"HEAD",
//											},
//											"PathExact": "/healtz",
//										},
//										"JWT": map[string]interface{}{
//											"Providers": []map[string]interface{}{
//												map[string]interface{}{
//													"Name": name,
//												},
//											},
//										},
//									},
//								},
//								"Precedence": 9,
//								"Type":       "consul",
//							},
//							map[string]interface{}{
//								"Name": "admin-dashboard-webapp",
//								"Permissions": []map[string]interface{}{
//									map[string]interface{}{
//										"Action": "deny",
//										"HTTP": map[string]interface{}{
//											"PathPrefix": "/debugz",
//										},
//									},
//									map[string]interface{}{
//										"Action": "allow",
//										"HTTP": map[string]interface{}{
//											"PathPrefix": "/",
//										},
//									},
//								},
//								"Precedence": 9,
//								"Type":       "consul",
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json2 := string(tmpJSON2)
//					return pulumi.String(json2), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### `exported-services` config entry
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Services": []map[string]interface{}{
//					map[string]interface{}{
//						"Name":      "test",
//						"Namespace": "default",
//						"Consumers": []map[string]interface{}{
//							map[string]interface{}{
//								"Partition": "default",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = consul.NewConfigEntry(ctx, "exported_services", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("test"),
//				Kind:       pulumi.String("exported-services"),
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### `mesh` config entry
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"TransparentProxy": map[string]interface{}{
//					"MeshDestinationsOnly": true,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = consul.NewConfigEntry(ctx, "mesh", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("mesh"),
//				Kind:       pulumi.String("mesh"),
//				Partition:  pulumi.String("default"),
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### `jwt-provider` config entry
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Issuer": "https://your.issuer.com",
//				"JSONWebKeySet": map[string]interface{}{
//					"Remote": map[string]interface{}{
//						"URI":                 "https://your-remote.jwks.com",
//						"FetchAsynchronously": true,
//						"CacheDuration":       "10s",
//					},
//				},
//				"Forwarding": map[string]interface{}{
//					"HeaderName": "test-token",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = consul.NewConfigEntry(ctx, "jwt_provider", &consul.ConfigEntryArgs{
//				Name:       pulumi.String("provider-name"),
//				Kind:       pulumi.String("jwt-provider"),
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `consul_config_entry` can be imported using the syntax `<kind>/<name>` if the
// config entry is in the default partition and default namespace, or
// `<partition>/<namespace>/<kind>/<name>` for config entries in a non-default
// partition or namespace:
//
// ```sh
// $ pulumi import consul:index/configEntry:ConfigEntry service_splitter 816a195f-6cb1-2e8d-92af-3011ae706318
// ```
type ConfigEntry struct {
	pulumi.CustomResourceState

	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the configuration entry being registered.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to create the config entry within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The partition the config entry is associated with.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
}

// NewConfigEntry registers a new resource with the given unique name, arguments, and options.
func NewConfigEntry(ctx *pulumi.Context,
	name string, args *ConfigEntryArgs, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigEntry
	err := ctx.RegisterResource("consul:index/configEntry:ConfigEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEntry gets an existing ConfigEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEntryState, opts ...pulumi.ResourceOption) (*ConfigEntry, error) {
	var resource ConfigEntry
	err := ctx.ReadResource("consul:index/configEntry:ConfigEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEntry resources.
type configEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind *string `pulumi:"kind"`
	// The name of the configuration entry being registered.
	Name *string `pulumi:"name"`
	// The namespace to create the config entry within.
	Namespace *string `pulumi:"namespace"`
	// The partition the config entry is associated with.
	Partition *string `pulumi:"partition"`
}

type ConfigEntryState struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringPtrInput
	// The name of the configuration entry being registered.
	Name pulumi.StringPtrInput
	// The namespace to create the config entry within.
	Namespace pulumi.StringPtrInput
	// The partition the config entry is associated with.
	Partition pulumi.StringPtrInput
}

func (ConfigEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryState)(nil)).Elem()
}

type configEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson *string `pulumi:"configJson"`
	// The kind of configuration entry to register.
	Kind string `pulumi:"kind"`
	// The name of the configuration entry being registered.
	Name *string `pulumi:"name"`
	// The namespace to create the config entry within.
	Namespace *string `pulumi:"namespace"`
	// The partition the config entry is associated with.
	Partition *string `pulumi:"partition"`
}

// The set of arguments for constructing a ConfigEntry resource.
type ConfigEntryArgs struct {
	// An arbitrary map of configuration values.
	ConfigJson pulumi.StringPtrInput
	// The kind of configuration entry to register.
	Kind pulumi.StringInput
	// The name of the configuration entry being registered.
	Name pulumi.StringPtrInput
	// The namespace to create the config entry within.
	Namespace pulumi.StringPtrInput
	// The partition the config entry is associated with.
	Partition pulumi.StringPtrInput
}

func (ConfigEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryArgs)(nil)).Elem()
}

type ConfigEntryInput interface {
	pulumi.Input

	ToConfigEntryOutput() ConfigEntryOutput
	ToConfigEntryOutputWithContext(ctx context.Context) ConfigEntryOutput
}

func (*ConfigEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntry)(nil)).Elem()
}

func (i *ConfigEntry) ToConfigEntryOutput() ConfigEntryOutput {
	return i.ToConfigEntryOutputWithContext(context.Background())
}

func (i *ConfigEntry) ToConfigEntryOutputWithContext(ctx context.Context) ConfigEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryOutput)
}

// ConfigEntryArrayInput is an input type that accepts ConfigEntryArray and ConfigEntryArrayOutput values.
// You can construct a concrete instance of `ConfigEntryArrayInput` via:
//
//	ConfigEntryArray{ ConfigEntryArgs{...} }
type ConfigEntryArrayInput interface {
	pulumi.Input

	ToConfigEntryArrayOutput() ConfigEntryArrayOutput
	ToConfigEntryArrayOutputWithContext(context.Context) ConfigEntryArrayOutput
}

type ConfigEntryArray []ConfigEntryInput

func (ConfigEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntry)(nil)).Elem()
}

func (i ConfigEntryArray) ToConfigEntryArrayOutput() ConfigEntryArrayOutput {
	return i.ToConfigEntryArrayOutputWithContext(context.Background())
}

func (i ConfigEntryArray) ToConfigEntryArrayOutputWithContext(ctx context.Context) ConfigEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryArrayOutput)
}

// ConfigEntryMapInput is an input type that accepts ConfigEntryMap and ConfigEntryMapOutput values.
// You can construct a concrete instance of `ConfigEntryMapInput` via:
//
//	ConfigEntryMap{ "key": ConfigEntryArgs{...} }
type ConfigEntryMapInput interface {
	pulumi.Input

	ToConfigEntryMapOutput() ConfigEntryMapOutput
	ToConfigEntryMapOutputWithContext(context.Context) ConfigEntryMapOutput
}

type ConfigEntryMap map[string]ConfigEntryInput

func (ConfigEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntry)(nil)).Elem()
}

func (i ConfigEntryMap) ToConfigEntryMapOutput() ConfigEntryMapOutput {
	return i.ToConfigEntryMapOutputWithContext(context.Background())
}

func (i ConfigEntryMap) ToConfigEntryMapOutputWithContext(ctx context.Context) ConfigEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryMapOutput)
}

type ConfigEntryOutput struct{ *pulumi.OutputState }

func (ConfigEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntry)(nil)).Elem()
}

func (o ConfigEntryOutput) ToConfigEntryOutput() ConfigEntryOutput {
	return o
}

func (o ConfigEntryOutput) ToConfigEntryOutputWithContext(ctx context.Context) ConfigEntryOutput {
	return o
}

// An arbitrary map of configuration values.
func (o ConfigEntryOutput) ConfigJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringPtrOutput { return v.ConfigJson }).(pulumi.StringPtrOutput)
}

// The kind of configuration entry to register.
func (o ConfigEntryOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The name of the configuration entry being registered.
func (o ConfigEntryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to create the config entry within.
func (o ConfigEntryOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The partition the config entry is associated with.
func (o ConfigEntryOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntry) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

type ConfigEntryArrayOutput struct{ *pulumi.OutputState }

func (ConfigEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntry)(nil)).Elem()
}

func (o ConfigEntryArrayOutput) ToConfigEntryArrayOutput() ConfigEntryArrayOutput {
	return o
}

func (o ConfigEntryArrayOutput) ToConfigEntryArrayOutputWithContext(ctx context.Context) ConfigEntryArrayOutput {
	return o
}

func (o ConfigEntryArrayOutput) Index(i pulumi.IntInput) ConfigEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigEntry {
		return vs[0].([]*ConfigEntry)[vs[1].(int)]
	}).(ConfigEntryOutput)
}

type ConfigEntryMapOutput struct{ *pulumi.OutputState }

func (ConfigEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntry)(nil)).Elem()
}

func (o ConfigEntryMapOutput) ToConfigEntryMapOutput() ConfigEntryMapOutput {
	return o
}

func (o ConfigEntryMapOutput) ToConfigEntryMapOutputWithContext(ctx context.Context) ConfigEntryMapOutput {
	return o
}

func (o ConfigEntryMapOutput) MapIndex(k pulumi.StringInput) ConfigEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigEntry {
		return vs[0].(map[string]*ConfigEntry)[vs[1].(string)]
	}).(ConfigEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryInput)(nil)).Elem(), &ConfigEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryArrayInput)(nil)).Elem(), ConfigEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryMapInput)(nil)).Elem(), ConfigEntryMap{})
	pulumi.RegisterOutputType(ConfigEntryOutput{})
	pulumi.RegisterOutputType(ConfigEntryArrayOutput{})
	pulumi.RegisterOutputType(ConfigEntryMapOutput{})
}
