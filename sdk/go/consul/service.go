// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A high-level resource for creating a Service in Consul in the Consul catalog. This
// is appropriate for registering [external services](https://www.consul.io/docs/guides/external.html) and
// can be used to create services addressable by Consul that cannot be registered
// with a [local agent](https://www.consul.io/docs/agent/basics.html).
//
// > **NOTE:** If a Consul agent is running on the node where this service is
// registered, it is not recommended to use this resource as the service will be
// removed during the next [anti-entropy synchronization](https://www.consul.io/docs/architecture/anti-entropy).
//
// ## Example Usage
//
// Creating a new node with the service:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		compute, err := consul.NewNode(ctx, "compute", &consul.NodeArgs{
// 			Address: pulumi.String("www.google.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = consul.NewService(ctx, "google", &consul.ServiceArgs{
// 			Node: compute.Name,
// 			Port: pulumi.Int(80),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag0"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Utilizing an existing known node:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewService(ctx, "google", &consul.ServiceArgs{
// 			Node: pulumi.String("google"),
// 			Port: pulumi.Int(443),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Register a health-check:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewService(ctx, "redis", &consul.ServiceArgs{
// 			Checks: ServiceCheckArray{
// 				&ServiceCheckArgs{
// 					CheckId:                        pulumi.String("service:redis1"),
// 					DeregisterCriticalServiceAfter: pulumi.String("30s"),
// 					Headers: ServiceCheckHeaderArray{
// 						&ServiceCheckHeaderArgs{
// 							Name: pulumi.String("foo"),
// 							Value: []string{
// 								"test",
// 							},
// 						},
// 						&ServiceCheckHeaderArgs{
// 							Name: pulumi.String("bar"),
// 							Value: []string{
// 								"test",
// 							},
// 						},
// 					},
// 					Http:          pulumi.String("https://www.hashicorptest.com"),
// 					Interval:      pulumi.String("5s"),
// 					Method:        pulumi.String("PUT"),
// 					Name:          pulumi.String("Redis health check"),
// 					Status:        pulumi.String("passing"),
// 					Timeout:       pulumi.String("1s"),
// 					TlsSkipVerify: pulumi.Bool(false),
// 				},
// 			},
// 			Node: pulumi.String("redis"),
// 			Port: pulumi.Int(6379),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Service struct {
	pulumi.CustomResourceState

	// The address of the service. Defaults to the
	// address of the node.
	Address pulumi.StringOutput     `pulumi:"address"`
	Checks  ServiceCheckArrayOutput `pulumi:"checks"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// Specifies to disable the
	// anti-entropy feature for this service's tags. Defaults to `false`.
	EnableTagOverride pulumi.BoolPtrOutput `pulumi:"enableTagOverride"`
	// Deprecated: The external field has been deprecated and does nothing.
	External pulumi.BoolPtrOutput `pulumi:"external"`
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// The name of the health-check.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to create the service within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The name of the node the to register the service on.
	Node pulumi.StringOutput `pulumi:"node"`
	// The partition the service is associated with.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// The port of the service.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// - If the service ID is not provided, it will be defaulted to the value
	//   of the `name` attribute.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Node == nil {
		return nil, errors.New("invalid value for required argument 'Node'")
	}
	var resource Service
	err := ctx.RegisterResource("consul:index/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("consul:index/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address *string        `pulumi:"address"`
	Checks  []ServiceCheck `pulumi:"checks"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Specifies to disable the
	// anti-entropy feature for this service's tags. Defaults to `false`.
	EnableTagOverride *bool `pulumi:"enableTagOverride"`
	// Deprecated: The external field has been deprecated and does nothing.
	External *bool `pulumi:"external"`
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta map[string]string `pulumi:"meta"`
	// The name of the health-check.
	Name *string `pulumi:"name"`
	// The namespace to create the service within.
	Namespace *string `pulumi:"namespace"`
	// The name of the node the to register the service on.
	Node *string `pulumi:"node"`
	// The partition the service is associated with.
	Partition *string `pulumi:"partition"`
	// The port of the service.
	Port *int `pulumi:"port"`
	// - If the service ID is not provided, it will be defaulted to the value
	//   of the `name` attribute.
	ServiceId *string `pulumi:"serviceId"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags []string `pulumi:"tags"`
}

type ServiceState struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address pulumi.StringPtrInput
	Checks  ServiceCheckArrayInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Specifies to disable the
	// anti-entropy feature for this service's tags. Defaults to `false`.
	EnableTagOverride pulumi.BoolPtrInput
	// Deprecated: The external field has been deprecated and does nothing.
	External pulumi.BoolPtrInput
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta pulumi.StringMapInput
	// The name of the health-check.
	Name pulumi.StringPtrInput
	// The namespace to create the service within.
	Namespace pulumi.StringPtrInput
	// The name of the node the to register the service on.
	Node pulumi.StringPtrInput
	// The partition the service is associated with.
	Partition pulumi.StringPtrInput
	// The port of the service.
	Port pulumi.IntPtrInput
	// - If the service ID is not provided, it will be defaulted to the value
	//   of the `name` attribute.
	ServiceId pulumi.StringPtrInput
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address *string        `pulumi:"address"`
	Checks  []ServiceCheck `pulumi:"checks"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Specifies to disable the
	// anti-entropy feature for this service's tags. Defaults to `false`.
	EnableTagOverride *bool `pulumi:"enableTagOverride"`
	// Deprecated: The external field has been deprecated and does nothing.
	External *bool `pulumi:"external"`
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta map[string]string `pulumi:"meta"`
	// The name of the health-check.
	Name *string `pulumi:"name"`
	// The namespace to create the service within.
	Namespace *string `pulumi:"namespace"`
	// The name of the node the to register the service on.
	Node string `pulumi:"node"`
	// The partition the service is associated with.
	Partition *string `pulumi:"partition"`
	// The port of the service.
	Port *int `pulumi:"port"`
	// - If the service ID is not provided, it will be defaulted to the value
	//   of the `name` attribute.
	ServiceId *string `pulumi:"serviceId"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address pulumi.StringPtrInput
	Checks  ServiceCheckArrayInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Specifies to disable the
	// anti-entropy feature for this service's tags. Defaults to `false`.
	EnableTagOverride pulumi.BoolPtrInput
	// Deprecated: The external field has been deprecated and does nothing.
	External pulumi.BoolPtrInput
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta pulumi.StringMapInput
	// The name of the health-check.
	Name pulumi.StringPtrInput
	// The namespace to create the service within.
	Namespace pulumi.StringPtrInput
	// The name of the node the to register the service on.
	Node pulumi.StringInput
	// The partition the service is associated with.
	Partition pulumi.StringPtrInput
	// The port of the service.
	Port pulumi.IntPtrInput
	// - If the service ID is not provided, it will be defaulted to the value
	//   of the `name` attribute.
	ServiceId pulumi.StringPtrInput
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//          ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//          ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
