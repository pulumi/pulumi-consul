// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A high-level resource for creating a Service in Consul in the Consul catalog. This
// is appropriate for registering [external services](https://www.consul.io/docs/guides/external.html) and
// can be used to create services addressable by Consul that cannot be registered
// with a [local agent](https://www.consul.io/docs/agent/basics.html).
//
// If the Consul agent is running on the node where this service is registered, it is
// not recommended to use this resource.
type Service struct {
	pulumi.CustomResourceState

	// The address of the service. Defaults to the
	// address of the node.
	Address pulumi.StringOutput     `pulumi:"address"`
	Checks  ServiceCheckArrayOutput `pulumi:"checks"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringOutput  `pulumi:"datacenter"`
	External   pulumi.BoolPtrOutput `pulumi:"external"`
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// The name of the health-check.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to create the service within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The name of the node the to register the service on.
	Node pulumi.StringOutput `pulumi:"node"`
	// The port of the service.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The ID of the service.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil || args.Node == nil {
		return nil, errors.New("missing required argument 'Node'")
	}
	if args == nil {
		args = &ServiceArgs{}
	}
	var resource Service
	err := ctx.RegisterResource("consul:index/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("consul:index/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address *string        `pulumi:"address"`
	Checks  []ServiceCheck `pulumi:"checks"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	External   *bool   `pulumi:"external"`
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta map[string]string `pulumi:"meta"`
	// The name of the health-check.
	Name *string `pulumi:"name"`
	// The namespace to create the service within.
	Namespace *string `pulumi:"namespace"`
	// The name of the node the to register the service on.
	Node *string `pulumi:"node"`
	// The port of the service.
	Port *int `pulumi:"port"`
	// The ID of the service.
	ServiceId *string `pulumi:"serviceId"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags []string `pulumi:"tags"`
}

type ServiceState struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address pulumi.StringPtrInput
	Checks  ServiceCheckArrayInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	External   pulumi.BoolPtrInput
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta pulumi.StringMapInput
	// The name of the health-check.
	Name pulumi.StringPtrInput
	// The namespace to create the service within.
	Namespace pulumi.StringPtrInput
	// The name of the node the to register the service on.
	Node pulumi.StringPtrInput
	// The port of the service.
	Port pulumi.IntPtrInput
	// The ID of the service.
	ServiceId pulumi.StringPtrInput
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address *string        `pulumi:"address"`
	Checks  []ServiceCheck `pulumi:"checks"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	External   *bool   `pulumi:"external"`
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta map[string]string `pulumi:"meta"`
	// The name of the health-check.
	Name *string `pulumi:"name"`
	// The namespace to create the service within.
	Namespace *string `pulumi:"namespace"`
	// The name of the node the to register the service on.
	Node string `pulumi:"node"`
	// The port of the service.
	Port *int `pulumi:"port"`
	// The ID of the service.
	ServiceId *string `pulumi:"serviceId"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address pulumi.StringPtrInput
	Checks  ServiceCheckArrayInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	External   pulumi.BoolPtrInput
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta pulumi.StringMapInput
	// The name of the health-check.
	Name pulumi.StringPtrInput
	// The namespace to create the service within.
	Namespace pulumi.StringPtrInput
	// The name of the node the to register the service on.
	Node pulumi.StringInput
	// The port of the service.
	Port pulumi.IntPtrInput
	// The ID of the service.
	ServiceId pulumi.StringPtrInput
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}
