// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A high-level resource for creating a Service in Consul in the Consul catalog. This
// is appropriate for registering [external services](https://www.consul.io/docs/guides/external.html) and
// can be used to create services addressable by Consul that cannot be registered
// with a [local agent](https://www.consul.io/docs/agent/basics.html).
// 
// If the Consul agent is running on the node where this service is registered, it is
// not recommended to use this resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/service.html.markdown.
type Service struct {
	s *pulumi.ResourceState
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOpt) (*Service, error) {
	if args == nil || args.Node == nil {
		return nil, errors.New("missing required argument 'Node'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["checks"] = nil
		inputs["datacenter"] = nil
		inputs["external"] = nil
		inputs["meta"] = nil
		inputs["name"] = nil
		inputs["node"] = nil
		inputs["port"] = nil
		inputs["serviceId"] = nil
		inputs["tags"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["checks"] = args.Checks
		inputs["datacenter"] = args.Datacenter
		inputs["external"] = args.External
		inputs["meta"] = args.Meta
		inputs["name"] = args.Name
		inputs["node"] = args.Node
		inputs["port"] = args.Port
		inputs["serviceId"] = args.ServiceId
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("consul:index/service:Service", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceState, opts ...pulumi.ResourceOpt) (*Service, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["checks"] = state.Checks
		inputs["datacenter"] = state.Datacenter
		inputs["external"] = state.External
		inputs["meta"] = state.Meta
		inputs["name"] = state.Name
		inputs["node"] = state.Node
		inputs["port"] = state.Port
		inputs["serviceId"] = state.ServiceId
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("consul:index/service:Service", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Service) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Service) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The address of the service. Defaults to the
// address of the node.
func (r *Service) Address() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["address"])
}

func (r *Service) Checks() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["checks"])
}

// The datacenter to use. This overrides the
// agent's default datacenter and the datacenter in the provider setup.
func (r *Service) Datacenter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["datacenter"])
}

func (r *Service) External() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["external"])
}

// A map of arbitrary KV metadata linked to the service
// instance.
func (r *Service) Meta() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["meta"])
}

// The name of the header.
func (r *Service) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The name of the node the to register the service on.
func (r *Service) Node() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["node"])
}

// The port of the service.
func (r *Service) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// The ID of the service.
func (r *Service) ServiceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceId"])
}

// A list of values that are opaque to Consul,
// but can be used to distinguish between services or nodes.
func (r *Service) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Service resources.
type ServiceState struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address interface{}
	Checks interface{}
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	External interface{}
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta interface{}
	// The name of the header.
	Name interface{}
	// The name of the node the to register the service on.
	Node interface{}
	// The port of the service.
	Port interface{}
	// The ID of the service.
	ServiceId interface{}
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags interface{}
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The address of the service. Defaults to the
	// address of the node.
	Address interface{}
	Checks interface{}
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	External interface{}
	// A map of arbitrary KV metadata linked to the service
	// instance.
	Meta interface{}
	// The name of the header.
	Name interface{}
	// The name of the node the to register the service on.
	Node interface{}
	// The port of the service.
	Port interface{}
	// The ID of the service.
	ServiceId interface{}
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags interface{}
}
