// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewKeys(ctx, "app", &consul.KeysArgs{
//				Datacenter: pulumi.String("nyc1"),
//				Token:      pulumi.String("abcd"),
//				Keys: consul.KeysKeyArray{
//					&consul.KeysKeyArgs{
//						Path:  pulumi.String("service/app/elb_address"),
//						Value: pulumi.Any(appAwsElb.DnsName),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type Keys struct {
	pulumi.CustomResourceState

	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys KeysKeyArrayOutput `pulumi:"keys"`
	// The namespace to create the keys within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The partition to create the keys within.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrOutput `pulumi:"token"`
	Var   pulumi.StringMapOutput `pulumi:"var"`
}

// NewKeys registers a new resource with the given unique name, arguments, and options.
func NewKeys(ctx *pulumi.Context,
	name string, args *KeysArgs, opts ...pulumi.ResourceOption) (*Keys, error) {
	if args == nil {
		args = &KeysArgs{}
	}

	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Keys
	err := ctx.RegisterResource("consul:index/keys:Keys", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeys gets an existing Keys resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeys(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeysState, opts ...pulumi.ResourceOption) (*Keys, error) {
	var resource Keys
	err := ctx.ReadResource("consul:index/keys:Keys", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keys resources.
type keysState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys []KeysKey `pulumi:"keys"`
	// The namespace to create the keys within.
	Namespace *string `pulumi:"namespace"`
	// The partition to create the keys within.
	Partition *string `pulumi:"partition"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string           `pulumi:"token"`
	Var   map[string]string `pulumi:"var"`
}

type KeysState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys KeysKeyArrayInput
	// The namespace to create the keys within.
	Namespace pulumi.StringPtrInput
	// The partition to create the keys within.
	Partition pulumi.StringPtrInput
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
	Var   pulumi.StringMapInput
}

func (KeysState) ElementType() reflect.Type {
	return reflect.TypeOf((*keysState)(nil)).Elem()
}

type keysArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys []KeysKey `pulumi:"keys"`
	// The namespace to create the keys within.
	Namespace *string `pulumi:"namespace"`
	// The partition to create the keys within.
	Partition *string `pulumi:"partition"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a Keys resource.
type KeysArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys KeysKeyArrayInput
	// The namespace to create the keys within.
	Namespace pulumi.StringPtrInput
	// The partition to create the keys within.
	Partition pulumi.StringPtrInput
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
}

func (KeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keysArgs)(nil)).Elem()
}

type KeysInput interface {
	pulumi.Input

	ToKeysOutput() KeysOutput
	ToKeysOutputWithContext(ctx context.Context) KeysOutput
}

func (*Keys) ElementType() reflect.Type {
	return reflect.TypeOf((**Keys)(nil)).Elem()
}

func (i *Keys) ToKeysOutput() KeysOutput {
	return i.ToKeysOutputWithContext(context.Background())
}

func (i *Keys) ToKeysOutputWithContext(ctx context.Context) KeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysOutput)
}

// KeysArrayInput is an input type that accepts KeysArray and KeysArrayOutput values.
// You can construct a concrete instance of `KeysArrayInput` via:
//
//	KeysArray{ KeysArgs{...} }
type KeysArrayInput interface {
	pulumi.Input

	ToKeysArrayOutput() KeysArrayOutput
	ToKeysArrayOutputWithContext(context.Context) KeysArrayOutput
}

type KeysArray []KeysInput

func (KeysArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keys)(nil)).Elem()
}

func (i KeysArray) ToKeysArrayOutput() KeysArrayOutput {
	return i.ToKeysArrayOutputWithContext(context.Background())
}

func (i KeysArray) ToKeysArrayOutputWithContext(ctx context.Context) KeysArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysArrayOutput)
}

// KeysMapInput is an input type that accepts KeysMap and KeysMapOutput values.
// You can construct a concrete instance of `KeysMapInput` via:
//
//	KeysMap{ "key": KeysArgs{...} }
type KeysMapInput interface {
	pulumi.Input

	ToKeysMapOutput() KeysMapOutput
	ToKeysMapOutputWithContext(context.Context) KeysMapOutput
}

type KeysMap map[string]KeysInput

func (KeysMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keys)(nil)).Elem()
}

func (i KeysMap) ToKeysMapOutput() KeysMapOutput {
	return i.ToKeysMapOutputWithContext(context.Background())
}

func (i KeysMap) ToKeysMapOutputWithContext(ctx context.Context) KeysMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysMapOutput)
}

type KeysOutput struct{ *pulumi.OutputState }

func (KeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keys)(nil)).Elem()
}

func (o KeysOutput) ToKeysOutput() KeysOutput {
	return o
}

func (o KeysOutput) ToKeysOutputWithContext(ctx context.Context) KeysOutput {
	return o
}

// The datacenter to use. This overrides the
// agent's default datacenter and the datacenter in the provider setup.
func (o KeysOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringOutput { return v.Datacenter }).(pulumi.StringOutput)
}

// Specifies a key in Consul to be written.
// Supported values documented below.
func (o KeysOutput) Keys() KeysKeyArrayOutput {
	return o.ApplyT(func(v *Keys) KeysKeyArrayOutput { return v.Keys }).(KeysKeyArrayOutput)
}

// The namespace to create the keys within.
func (o KeysOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The partition to create the keys within.
func (o KeysOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// The ACL token to use. This overrides the
// token that the agent provides by default.
//
// Deprecated: The token argument has been deprecated and will be removed in a future release.
// Please use the token argument in the provider configuration
func (o KeysOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

func (o KeysOutput) Var() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringMapOutput { return v.Var }).(pulumi.StringMapOutput)
}

type KeysArrayOutput struct{ *pulumi.OutputState }

func (KeysArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keys)(nil)).Elem()
}

func (o KeysArrayOutput) ToKeysArrayOutput() KeysArrayOutput {
	return o
}

func (o KeysArrayOutput) ToKeysArrayOutputWithContext(ctx context.Context) KeysArrayOutput {
	return o
}

func (o KeysArrayOutput) Index(i pulumi.IntInput) KeysOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keys {
		return vs[0].([]*Keys)[vs[1].(int)]
	}).(KeysOutput)
}

type KeysMapOutput struct{ *pulumi.OutputState }

func (KeysMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keys)(nil)).Elem()
}

func (o KeysMapOutput) ToKeysMapOutput() KeysMapOutput {
	return o
}

func (o KeysMapOutput) ToKeysMapOutputWithContext(ctx context.Context) KeysMapOutput {
	return o
}

func (o KeysMapOutput) MapIndex(k pulumi.StringInput) KeysOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keys {
		return vs[0].(map[string]*Keys)[vs[1].(string)]
	}).(KeysOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeysInput)(nil)).Elem(), &Keys{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysArrayInput)(nil)).Elem(), KeysArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysMapInput)(nil)).Elem(), KeysMap{})
	pulumi.RegisterOutputType(KeysOutput{})
	pulumi.RegisterOutputType(KeysArrayOutput{})
	pulumi.RegisterOutputType(KeysMapOutput{})
}
