// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/keys.html.markdown.
type Keys struct {
	s *pulumi.ResourceState
}

// NewKeys registers a new resource with the given unique name, arguments, and options.
func NewKeys(ctx *pulumi.Context,
	name string, args *KeysArgs, opts ...pulumi.ResourceOpt) (*Keys, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["datacenter"] = nil
		inputs["keys"] = nil
		inputs["token"] = nil
	} else {
		inputs["datacenter"] = args.Datacenter
		inputs["keys"] = args.Keys
		inputs["token"] = args.Token
	}
	inputs["var"] = nil
	s, err := ctx.RegisterResource("consul:index/keys:Keys", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Keys{s: s}, nil
}

// GetKeys gets an existing Keys resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeys(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KeysState, opts ...pulumi.ResourceOpt) (*Keys, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["datacenter"] = state.Datacenter
		inputs["keys"] = state.Keys
		inputs["token"] = state.Token
		inputs["var"] = state.Var
	}
	s, err := ctx.ReadResource("consul:index/keys:Keys", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Keys{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Keys) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Keys) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The datacenter to use. This overrides the
// agent's default datacenter and the datacenter in the provider setup.
func (r *Keys) Datacenter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["datacenter"])
}

// Specifies a key in Consul to be written.
// Supported values documented below.
func (r *Keys) Keys() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["keys"])
}

// The ACL token to use. This overrides the
// token that the agent provides by default.
func (r *Keys) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

func (r *Keys) Var() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["var"])
}

// Input properties used for looking up and filtering Keys resources.
type KeysState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys interface{}
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token interface{}
	Var interface{}
}

// The set of arguments for constructing a Keys resource.
type KeysArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter interface{}
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys interface{}
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token interface{}
}
