// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package consul

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Keys struct {
	pulumi.CustomResourceState

	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys KeysKeyArrayOutput `pulumi:"keys"`
	// The namespace to create the keys within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token pulumi.StringPtrOutput `pulumi:"token"`
	Var   pulumi.StringMapOutput `pulumi:"var"`
}

// NewKeys registers a new resource with the given unique name, arguments, and options.
func NewKeys(ctx *pulumi.Context,
	name string, args *KeysArgs, opts ...pulumi.ResourceOption) (*Keys, error) {
	if args == nil {
		args = &KeysArgs{}
	}
	var resource Keys
	err := ctx.RegisterResource("consul:index/keys:Keys", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeys gets an existing Keys resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeys(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeysState, opts ...pulumi.ResourceOption) (*Keys, error) {
	var resource Keys
	err := ctx.ReadResource("consul:index/keys:Keys", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keys resources.
type keysState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys []KeysKey `pulumi:"keys"`
	// The namespace to create the keys within.
	Namespace *string `pulumi:"namespace"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token *string           `pulumi:"token"`
	Var   map[string]string `pulumi:"var"`
}

type KeysState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys KeysKeyArrayInput
	// The namespace to create the keys within.
	Namespace pulumi.StringPtrInput
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token pulumi.StringPtrInput
	Var   pulumi.StringMapInput
}

func (KeysState) ElementType() reflect.Type {
	return reflect.TypeOf((*keysState)(nil)).Elem()
}

type keysArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys []KeysKey `pulumi:"keys"`
	// The namespace to create the keys within.
	Namespace *string `pulumi:"namespace"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a Keys resource.
type KeysArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// Specifies a key in Consul to be written.
	// Supported values documented below.
	Keys KeysKeyArrayInput
	// The namespace to create the keys within.
	Namespace pulumi.StringPtrInput
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token pulumi.StringPtrInput
}

func (KeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keysArgs)(nil)).Elem()
}
