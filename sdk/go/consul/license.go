// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// > **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).
//
// The `License` resource provides datacenter-level management of
// the Consul Enterprise license. If ACLs are enabled then a token with operator
// privileges may be required in order to use this command.
type License struct {
	pulumi.CustomResourceState

	// The ID of the customer the license is attached to.
	CustomerId pulumi.StringOutput `pulumi:"customerId"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrOutput `pulumi:"datacenter"`
	// The expiration time of the license.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// The features for which the license is valid.
	Features pulumi.StringArrayOutput `pulumi:"features"`
	// The metadata attached to the license.
	Flags pulumi.StringMapOutput `pulumi:"flags"`
	// The ID of the current installation.
	InstallationId pulumi.StringOutput `pulumi:"installationId"`
	// The date the license was issued.
	IssueTime pulumi.StringOutput `pulumi:"issueTime"`
	// The Consul license to use.
	License pulumi.StringOutput `pulumi:"license"`
	// The ID of the license used.
	LicenseId pulumi.StringOutput `pulumi:"licenseId"`
	// The product for which the license is valid.
	Product pulumi.StringOutput `pulumi:"product"`
	// The start time of the license.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// Whether the license is valid.
	Valid pulumi.BoolOutput `pulumi:"valid"`
	// A list of warning messages regarding the license validity.
	Warnings pulumi.StringArrayOutput `pulumi:"warnings"`
}

// NewLicense registers a new resource with the given unique name, arguments, and options.
func NewLicense(ctx *pulumi.Context,
	name string, args *LicenseArgs, opts ...pulumi.ResourceOption) (*License, error) {
	if args == nil || args.License == nil {
		return nil, errors.New("missing required argument 'License'")
	}
	if args == nil {
		args = &LicenseArgs{}
	}
	var resource License
	err := ctx.RegisterResource("consul:index/license:License", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicense gets an existing License resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseState, opts ...pulumi.ResourceOption) (*License, error) {
	var resource License
	err := ctx.ReadResource("consul:index/license:License", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering License resources.
type licenseState struct {
	// The ID of the customer the license is attached to.
	CustomerId *string `pulumi:"customerId"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The expiration time of the license.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The features for which the license is valid.
	Features []string `pulumi:"features"`
	// The metadata attached to the license.
	Flags map[string]string `pulumi:"flags"`
	// The ID of the current installation.
	InstallationId *string `pulumi:"installationId"`
	// The date the license was issued.
	IssueTime *string `pulumi:"issueTime"`
	// The Consul license to use.
	License *string `pulumi:"license"`
	// The ID of the license used.
	LicenseId *string `pulumi:"licenseId"`
	// The product for which the license is valid.
	Product *string `pulumi:"product"`
	// The start time of the license.
	StartTime *string `pulumi:"startTime"`
	// Whether the license is valid.
	Valid *bool `pulumi:"valid"`
	// A list of warning messages regarding the license validity.
	Warnings []string `pulumi:"warnings"`
}

type LicenseState struct {
	// The ID of the customer the license is attached to.
	CustomerId pulumi.StringPtrInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The expiration time of the license.
	ExpirationTime pulumi.StringPtrInput
	// The features for which the license is valid.
	Features pulumi.StringArrayInput
	// The metadata attached to the license.
	Flags pulumi.StringMapInput
	// The ID of the current installation.
	InstallationId pulumi.StringPtrInput
	// The date the license was issued.
	IssueTime pulumi.StringPtrInput
	// The Consul license to use.
	License pulumi.StringPtrInput
	// The ID of the license used.
	LicenseId pulumi.StringPtrInput
	// The product for which the license is valid.
	Product pulumi.StringPtrInput
	// The start time of the license.
	StartTime pulumi.StringPtrInput
	// Whether the license is valid.
	Valid pulumi.BoolPtrInput
	// A list of warning messages regarding the license validity.
	Warnings pulumi.StringArrayInput
}

func (LicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseState)(nil)).Elem()
}

type licenseArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The Consul license to use.
	License string `pulumi:"license"`
}

// The set of arguments for constructing a License resource.
type LicenseArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The Consul license to use.
	License pulumi.StringInput
}

func (LicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseArgs)(nil)).Elem()
}
