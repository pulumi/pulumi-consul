// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).
//
// The `License` resource provides datacenter-level management of
// the Consul Enterprise license. If ACLs are enabled then a token with operator
// privileges may be required in order to use this command.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewLicense(ctx, "license", &consul.LicenseArgs{
//				License: readFileOrPanic("license.hclic"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type License struct {
	pulumi.CustomResourceState

	// The ID of the customer the license is attached to.
	CustomerId pulumi.StringOutput `pulumi:"customerId"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrOutput `pulumi:"datacenter"`
	// The expiration time of the license.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// The features for which the license is valid.
	Features pulumi.StringArrayOutput `pulumi:"features"`
	// The ID of the current installation.
	InstallationId pulumi.StringOutput `pulumi:"installationId"`
	// The date the license was issued.
	IssueTime pulumi.StringOutput `pulumi:"issueTime"`
	// The Consul license to use.
	License pulumi.StringOutput `pulumi:"license"`
	// The ID of the license used.
	LicenseId pulumi.StringOutput `pulumi:"licenseId"`
	// The product for which the license is valid.
	Product pulumi.StringOutput `pulumi:"product"`
	// The start time of the license.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// Whether the license is valid.
	Valid pulumi.BoolOutput `pulumi:"valid"`
	// A list of warning messages regarding the license validity.
	Warnings pulumi.StringArrayOutput `pulumi:"warnings"`
}

// NewLicense registers a new resource with the given unique name, arguments, and options.
func NewLicense(ctx *pulumi.Context,
	name string, args *LicenseArgs, opts ...pulumi.ResourceOption) (*License, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.License == nil {
		return nil, errors.New("invalid value for required argument 'License'")
	}
	if args.License != nil {
		args.License = pulumi.ToSecret(args.License).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"license",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource License
	err := ctx.RegisterResource("consul:index/license:License", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicense gets an existing License resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseState, opts ...pulumi.ResourceOption) (*License, error) {
	var resource License
	err := ctx.ReadResource("consul:index/license:License", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering License resources.
type licenseState struct {
	// The ID of the customer the license is attached to.
	CustomerId *string `pulumi:"customerId"`
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The expiration time of the license.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The features for which the license is valid.
	Features []string `pulumi:"features"`
	// The ID of the current installation.
	InstallationId *string `pulumi:"installationId"`
	// The date the license was issued.
	IssueTime *string `pulumi:"issueTime"`
	// The Consul license to use.
	License *string `pulumi:"license"`
	// The ID of the license used.
	LicenseId *string `pulumi:"licenseId"`
	// The product for which the license is valid.
	Product *string `pulumi:"product"`
	// The start time of the license.
	StartTime *string `pulumi:"startTime"`
	// Whether the license is valid.
	Valid *bool `pulumi:"valid"`
	// A list of warning messages regarding the license validity.
	Warnings []string `pulumi:"warnings"`
}

type LicenseState struct {
	// The ID of the customer the license is attached to.
	CustomerId pulumi.StringPtrInput
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The expiration time of the license.
	ExpirationTime pulumi.StringPtrInput
	// The features for which the license is valid.
	Features pulumi.StringArrayInput
	// The ID of the current installation.
	InstallationId pulumi.StringPtrInput
	// The date the license was issued.
	IssueTime pulumi.StringPtrInput
	// The Consul license to use.
	License pulumi.StringPtrInput
	// The ID of the license used.
	LicenseId pulumi.StringPtrInput
	// The product for which the license is valid.
	Product pulumi.StringPtrInput
	// The start time of the license.
	StartTime pulumi.StringPtrInput
	// Whether the license is valid.
	Valid pulumi.BoolPtrInput
	// A list of warning messages regarding the license validity.
	Warnings pulumi.StringArrayInput
}

func (LicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseState)(nil)).Elem()
}

type licenseArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The Consul license to use.
	License string `pulumi:"license"`
}

// The set of arguments for constructing a License resource.
type LicenseArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The Consul license to use.
	License pulumi.StringInput
}

func (LicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseArgs)(nil)).Elem()
}

type LicenseInput interface {
	pulumi.Input

	ToLicenseOutput() LicenseOutput
	ToLicenseOutputWithContext(ctx context.Context) LicenseOutput
}

func (*License) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (i *License) ToLicenseOutput() LicenseOutput {
	return i.ToLicenseOutputWithContext(context.Background())
}

func (i *License) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOutput)
}

func (i *License) ToOutput(ctx context.Context) pulumix.Output[*License] {
	return pulumix.Output[*License]{
		OutputState: i.ToLicenseOutputWithContext(ctx).OutputState,
	}
}

// LicenseArrayInput is an input type that accepts LicenseArray and LicenseArrayOutput values.
// You can construct a concrete instance of `LicenseArrayInput` via:
//
//	LicenseArray{ LicenseArgs{...} }
type LicenseArrayInput interface {
	pulumi.Input

	ToLicenseArrayOutput() LicenseArrayOutput
	ToLicenseArrayOutputWithContext(context.Context) LicenseArrayOutput
}

type LicenseArray []LicenseInput

func (LicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*License)(nil)).Elem()
}

func (i LicenseArray) ToLicenseArrayOutput() LicenseArrayOutput {
	return i.ToLicenseArrayOutputWithContext(context.Background())
}

func (i LicenseArray) ToLicenseArrayOutputWithContext(ctx context.Context) LicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseArrayOutput)
}

func (i LicenseArray) ToOutput(ctx context.Context) pulumix.Output[[]*License] {
	return pulumix.Output[[]*License]{
		OutputState: i.ToLicenseArrayOutputWithContext(ctx).OutputState,
	}
}

// LicenseMapInput is an input type that accepts LicenseMap and LicenseMapOutput values.
// You can construct a concrete instance of `LicenseMapInput` via:
//
//	LicenseMap{ "key": LicenseArgs{...} }
type LicenseMapInput interface {
	pulumi.Input

	ToLicenseMapOutput() LicenseMapOutput
	ToLicenseMapOutputWithContext(context.Context) LicenseMapOutput
}

type LicenseMap map[string]LicenseInput

func (LicenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*License)(nil)).Elem()
}

func (i LicenseMap) ToLicenseMapOutput() LicenseMapOutput {
	return i.ToLicenseMapOutputWithContext(context.Background())
}

func (i LicenseMap) ToLicenseMapOutputWithContext(ctx context.Context) LicenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseMapOutput)
}

func (i LicenseMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*License] {
	return pulumix.Output[map[string]*License]{
		OutputState: i.ToLicenseMapOutputWithContext(ctx).OutputState,
	}
}

type LicenseOutput struct{ *pulumi.OutputState }

func (LicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (o LicenseOutput) ToLicenseOutput() LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return o
}

func (o LicenseOutput) ToOutput(ctx context.Context) pulumix.Output[*License] {
	return pulumix.Output[*License]{
		OutputState: o.OutputState,
	}
}

// The ID of the customer the license is attached to.
func (o LicenseOutput) CustomerId() pulumi.StringOutput {
	return o.ApplyT(func(v *License) pulumi.StringOutput { return v.CustomerId }).(pulumi.StringOutput)
}

// The datacenter to use. This overrides the
// agent's default datacenter and the datacenter in the provider setup.
func (o LicenseOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *License) pulumi.StringPtrOutput { return v.Datacenter }).(pulumi.StringPtrOutput)
}

// The expiration time of the license.
func (o LicenseOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *License) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

// The features for which the license is valid.
func (o LicenseOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *License) pulumi.StringArrayOutput { return v.Features }).(pulumi.StringArrayOutput)
}

// The ID of the current installation.
func (o LicenseOutput) InstallationId() pulumi.StringOutput {
	return o.ApplyT(func(v *License) pulumi.StringOutput { return v.InstallationId }).(pulumi.StringOutput)
}

// The date the license was issued.
func (o LicenseOutput) IssueTime() pulumi.StringOutput {
	return o.ApplyT(func(v *License) pulumi.StringOutput { return v.IssueTime }).(pulumi.StringOutput)
}

// The Consul license to use.
func (o LicenseOutput) License() pulumi.StringOutput {
	return o.ApplyT(func(v *License) pulumi.StringOutput { return v.License }).(pulumi.StringOutput)
}

// The ID of the license used.
func (o LicenseOutput) LicenseId() pulumi.StringOutput {
	return o.ApplyT(func(v *License) pulumi.StringOutput { return v.LicenseId }).(pulumi.StringOutput)
}

// The product for which the license is valid.
func (o LicenseOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v *License) pulumi.StringOutput { return v.Product }).(pulumi.StringOutput)
}

// The start time of the license.
func (o LicenseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *License) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// Whether the license is valid.
func (o LicenseOutput) Valid() pulumi.BoolOutput {
	return o.ApplyT(func(v *License) pulumi.BoolOutput { return v.Valid }).(pulumi.BoolOutput)
}

// A list of warning messages regarding the license validity.
func (o LicenseOutput) Warnings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *License) pulumi.StringArrayOutput { return v.Warnings }).(pulumi.StringArrayOutput)
}

type LicenseArrayOutput struct{ *pulumi.OutputState }

func (LicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*License)(nil)).Elem()
}

func (o LicenseArrayOutput) ToLicenseArrayOutput() LicenseArrayOutput {
	return o
}

func (o LicenseArrayOutput) ToLicenseArrayOutputWithContext(ctx context.Context) LicenseArrayOutput {
	return o
}

func (o LicenseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*License] {
	return pulumix.Output[[]*License]{
		OutputState: o.OutputState,
	}
}

func (o LicenseArrayOutput) Index(i pulumi.IntInput) LicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *License {
		return vs[0].([]*License)[vs[1].(int)]
	}).(LicenseOutput)
}

type LicenseMapOutput struct{ *pulumi.OutputState }

func (LicenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*License)(nil)).Elem()
}

func (o LicenseMapOutput) ToLicenseMapOutput() LicenseMapOutput {
	return o
}

func (o LicenseMapOutput) ToLicenseMapOutputWithContext(ctx context.Context) LicenseMapOutput {
	return o
}

func (o LicenseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*License] {
	return pulumix.Output[map[string]*License]{
		OutputState: o.OutputState,
	}
}

func (o LicenseMapOutput) MapIndex(k pulumi.StringInput) LicenseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *License {
		return vs[0].(map[string]*License)[vs[1].(string)]
	}).(LicenseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseInput)(nil)).Elem(), &License{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseArrayInput)(nil)).Elem(), LicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseMapInput)(nil)).Elem(), LicenseMap{})
	pulumi.RegisterOutputType(LicenseOutput{})
	pulumi.RegisterOutputType(LicenseArrayOutput{})
	pulumi.RegisterOutputType(LicenseMapOutput{})
}
