// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"github.com/pulumi/pulumi/sdk/go/pulumi/config"
)

func GetAddress(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "consul:address")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("localhost:8500", nil, "CONSUL_ADDRESS", "CONSUL_HTTP_ADDR").(string); ok {
		return dv
	}
	return v
}

func GetCaFile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "consul:caFile")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "CONSUL_CA_FILE").(string); ok {
		return dv
	}
	return v
}

func GetCaPath(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "consul:caPath")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "CONSUL_CAPATH").(string); ok {
		return dv
	}
	return v
}

func GetCertFile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "consul:certFile")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "CONSUL_CERT_FILE").(string); ok {
		return dv
	}
	return v
}

func GetDatacenter(ctx *pulumi.Context) string {
	return config.Get(ctx, "consul:datacenter")
}

func GetHttpAuth(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "consul:httpAuth")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "CONSUL_HTTP_AUTH").(string); ok {
		return dv
	}
	return v
}

func GetInsecureHttps(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "consul:insecureHttps")
}

func GetKeyFile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "consul:keyFile")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "CONSUL_KEY_FILE").(string); ok {
		return dv
	}
	return v
}

func GetScheme(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "consul:scheme")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("http", nil, "CONSUL_SCHEME", "CONSUL_HTTP_SCHEME").(string); ok {
		return dv
	}
	return v
}

func GetToken(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "consul:token")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "CONSUL_TOKEN", "CONSUL_HTTP_TOKEN").(string); ok {
		return dv
	}
	return v
}
