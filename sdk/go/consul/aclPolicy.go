// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package consul

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Starting with Consul 1.4.0, the .AclPolicy can be used to managed Consul ACL policies.
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/acl_policy.html.markdown.
type AclPolicy struct {
	pulumi.CustomResourceState

	// The datacenters of the policy.
	Datacenters pulumi.StringArrayOutput `pulumi:"datacenters"`
	// The description of the policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The rules of the policy.
	Rules pulumi.StringOutput `pulumi:"rules"`
}

// NewAclPolicy registers a new resource with the given unique name, arguments, and options.
func NewAclPolicy(ctx *pulumi.Context,
	name string, args *AclPolicyArgs, opts ...pulumi.ResourceOption) (*AclPolicy, error) {
	if args == nil || args.Rules == nil {
		return nil, errors.New("missing required argument 'Rules'")
	}
	if args == nil {
		args = &AclPolicyArgs{}
	}
	var resource AclPolicy
	err := ctx.RegisterResource("consul:index/aclPolicy:AclPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclPolicy gets an existing AclPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclPolicyState, opts ...pulumi.ResourceOption) (*AclPolicy, error) {
	var resource AclPolicy
	err := ctx.ReadResource("consul:index/aclPolicy:AclPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclPolicy resources.
type aclPolicyState struct {
	// The datacenters of the policy.
	Datacenters []string `pulumi:"datacenters"`
	// The description of the policy.
	Description *string `pulumi:"description"`
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The rules of the policy.
	Rules *string `pulumi:"rules"`
}

type AclPolicyState struct {
	// The datacenters of the policy.
	Datacenters pulumi.StringArrayInput
	// The description of the policy.
	Description pulumi.StringPtrInput
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The rules of the policy.
	Rules pulumi.StringPtrInput
}

func (AclPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclPolicyState)(nil)).Elem()
}

type aclPolicyArgs struct {
	// The datacenters of the policy.
	Datacenters []string `pulumi:"datacenters"`
	// The description of the policy.
	Description *string `pulumi:"description"`
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The rules of the policy.
	Rules string `pulumi:"rules"`
}

// The set of arguments for constructing a AclPolicy resource.
type AclPolicyArgs struct {
	// The datacenters of the policy.
	Datacenters pulumi.StringArrayInput
	// The description of the policy.
	Description pulumi.StringPtrInput
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The rules of the policy.
	Rules pulumi.StringInput
}

func (AclPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclPolicyArgs)(nil)).Elem()
}

