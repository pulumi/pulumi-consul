// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Starting with Consul 1.4.0, the .AclPolicy can be used to managed Consul ACL policies.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/acl_policy.html.markdown.
type AclPolicy struct {
	s *pulumi.ResourceState
}

// NewAclPolicy registers a new resource with the given unique name, arguments, and options.
func NewAclPolicy(ctx *pulumi.Context,
	name string, args *AclPolicyArgs, opts ...pulumi.ResourceOpt) (*AclPolicy, error) {
	if args == nil || args.Rules == nil {
		return nil, errors.New("missing required argument 'Rules'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["datacenters"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["rules"] = nil
	} else {
		inputs["datacenters"] = args.Datacenters
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["rules"] = args.Rules
	}
	s, err := ctx.RegisterResource("consul:index/aclPolicy:AclPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclPolicy{s: s}, nil
}

// GetAclPolicy gets an existing AclPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AclPolicyState, opts ...pulumi.ResourceOpt) (*AclPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["datacenters"] = state.Datacenters
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["rules"] = state.Rules
	}
	s, err := ctx.ReadResource("consul:index/aclPolicy:AclPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AclPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AclPolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AclPolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The datacenters of the policy.
func (r *AclPolicy) Datacenters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["datacenters"])
}

// The description of the policy.
func (r *AclPolicy) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The name of the policy.
func (r *AclPolicy) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The rules of the policy.
func (r *AclPolicy) Rules() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["rules"])
}

// Input properties used for looking up and filtering AclPolicy resources.
type AclPolicyState struct {
	// The datacenters of the policy.
	Datacenters interface{}
	// The description of the policy.
	Description interface{}
	// The name of the policy.
	Name interface{}
	// The rules of the policy.
	Rules interface{}
}

// The set of arguments for constructing a AclPolicy resource.
type AclPolicyArgs struct {
	// The datacenters of the policy.
	Datacenters interface{}
	// The description of the policy.
	Description interface{}
	// The name of the policy.
	Name interface{}
	// The rules of the policy.
	Rules interface{}
}
