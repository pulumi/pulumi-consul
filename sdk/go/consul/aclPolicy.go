// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Starting with Consul 1.4.0, the AclPolicy can be used to managed Consul ACL policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewAclPolicy(ctx, "test", &consul.AclPolicyArgs{
// 			Datacenters: pulumi.StringArray{
// 				pulumi.String("dc1"),
// 			},
// 			Rules: pulumi.String(fmt.Sprintf("%v%v%v%v", "node_prefix \"\" {\n", "  policy = \"read\"\n", "}\n", "\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `consul_acl_policy` can be imported
//
// ```sh
//  $ pulumi import consul:index/aclPolicy:AclPolicy my-policy 1c90ef03-a6dd-6a8c-ac49-042ad3752896
// ```
type AclPolicy struct {
	pulumi.CustomResourceState

	// The datacenters of the policy.
	Datacenters pulumi.StringArrayOutput `pulumi:"datacenters"`
	// The description of the policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to create the policy within.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The rules of the policy.
	Rules pulumi.StringOutput `pulumi:"rules"`
}

// NewAclPolicy registers a new resource with the given unique name, arguments, and options.
func NewAclPolicy(ctx *pulumi.Context,
	name string, args *AclPolicyArgs, opts ...pulumi.ResourceOption) (*AclPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	var resource AclPolicy
	err := ctx.RegisterResource("consul:index/aclPolicy:AclPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclPolicy gets an existing AclPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclPolicyState, opts ...pulumi.ResourceOption) (*AclPolicy, error) {
	var resource AclPolicy
	err := ctx.ReadResource("consul:index/aclPolicy:AclPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclPolicy resources.
type aclPolicyState struct {
	// The datacenters of the policy.
	Datacenters []string `pulumi:"datacenters"`
	// The description of the policy.
	Description *string `pulumi:"description"`
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The namespace to create the policy within.
	Namespace *string `pulumi:"namespace"`
	// The rules of the policy.
	Rules *string `pulumi:"rules"`
}

type AclPolicyState struct {
	// The datacenters of the policy.
	Datacenters pulumi.StringArrayInput
	// The description of the policy.
	Description pulumi.StringPtrInput
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The namespace to create the policy within.
	Namespace pulumi.StringPtrInput
	// The rules of the policy.
	Rules pulumi.StringPtrInput
}

func (AclPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclPolicyState)(nil)).Elem()
}

type aclPolicyArgs struct {
	// The datacenters of the policy.
	Datacenters []string `pulumi:"datacenters"`
	// The description of the policy.
	Description *string `pulumi:"description"`
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The namespace to create the policy within.
	Namespace *string `pulumi:"namespace"`
	// The rules of the policy.
	Rules string `pulumi:"rules"`
}

// The set of arguments for constructing a AclPolicy resource.
type AclPolicyArgs struct {
	// The datacenters of the policy.
	Datacenters pulumi.StringArrayInput
	// The description of the policy.
	Description pulumi.StringPtrInput
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The namespace to create the policy within.
	Namespace pulumi.StringPtrInput
	// The rules of the policy.
	Rules pulumi.StringInput
}

func (AclPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclPolicyArgs)(nil)).Elem()
}

type AclPolicyInput interface {
	pulumi.Input

	ToAclPolicyOutput() AclPolicyOutput
	ToAclPolicyOutputWithContext(ctx context.Context) AclPolicyOutput
}

func (*AclPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*AclPolicy)(nil))
}

func (i *AclPolicy) ToAclPolicyOutput() AclPolicyOutput {
	return i.ToAclPolicyOutputWithContext(context.Background())
}

func (i *AclPolicy) ToAclPolicyOutputWithContext(ctx context.Context) AclPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclPolicyOutput)
}

type AclPolicyOutput struct {
	*pulumi.OutputState
}

func (AclPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclPolicy)(nil))
}

func (o AclPolicyOutput) ToAclPolicyOutput() AclPolicyOutput {
	return o
}

func (o AclPolicyOutput) ToAclPolicyOutputWithContext(ctx context.Context) AclPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AclPolicyOutput{})
}
