// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the consul package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	Address    pulumi.StringPtrOutput `pulumi:"address"`
	CaFile     pulumi.StringPtrOutput `pulumi:"caFile"`
	CaPath     pulumi.StringPtrOutput `pulumi:"caPath"`
	CaPem      pulumi.StringPtrOutput `pulumi:"caPem"`
	CertFile   pulumi.StringPtrOutput `pulumi:"certFile"`
	CertPem    pulumi.StringPtrOutput `pulumi:"certPem"`
	Datacenter pulumi.StringPtrOutput `pulumi:"datacenter"`
	HttpAuth   pulumi.StringPtrOutput `pulumi:"httpAuth"`
	KeyFile    pulumi.StringPtrOutput `pulumi:"keyFile"`
	KeyPem     pulumi.StringPtrOutput `pulumi:"keyPem"`
	Namespace  pulumi.StringPtrOutput `pulumi:"namespace"`
	Scheme     pulumi.StringPtrOutput `pulumi:"scheme"`
	Token      pulumi.StringPtrOutput `pulumi:"token"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:consul", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	Address    *string `pulumi:"address"`
	CaFile     *string `pulumi:"caFile"`
	CaPath     *string `pulumi:"caPath"`
	CaPem      *string `pulumi:"caPem"`
	CertFile   *string `pulumi:"certFile"`
	CertPem    *string `pulumi:"certPem"`
	Datacenter *string `pulumi:"datacenter"`
	// Additional headers to send with each Consul request.
	Headers       []ProviderHeader `pulumi:"headers"`
	HttpAuth      *string          `pulumi:"httpAuth"`
	InsecureHttps *bool            `pulumi:"insecureHttps"`
	KeyFile       *string          `pulumi:"keyFile"`
	KeyPem        *string          `pulumi:"keyPem"`
	Namespace     *string          `pulumi:"namespace"`
	Scheme        *string          `pulumi:"scheme"`
	Token         *string          `pulumi:"token"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	Address    pulumi.StringPtrInput
	CaFile     pulumi.StringPtrInput
	CaPath     pulumi.StringPtrInput
	CaPem      pulumi.StringPtrInput
	CertFile   pulumi.StringPtrInput
	CertPem    pulumi.StringPtrInput
	Datacenter pulumi.StringPtrInput
	// Additional headers to send with each Consul request.
	Headers       ProviderHeaderArrayInput
	HttpAuth      pulumi.StringPtrInput
	InsecureHttps pulumi.BoolPtrInput
	KeyFile       pulumi.StringPtrInput
	KeyPem        pulumi.StringPtrInput
	Namespace     pulumi.StringPtrInput
	Scheme        pulumi.StringPtrInput
	Token         pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
