// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `CertificateAuthority` resource can be used to manage the configuration of the Certificate Authority used by [Consul Connect](https://www.consul.io/docs/connect/ca).
//
// > **Note:** The keys in the `config` argument must be using Camel case.
//
// ## Import
//
// ```sh
// $ pulumi import consul:index/certificateAuthority:CertificateAuthority connect connect-ca
// ```
type CertificateAuthority struct {
	pulumi.CustomResourceState

	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config pulumi.StringMapOutput `pulumi:"config"`
	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	// Specifies the CA provider type to use.
	ConnectProvider pulumi.StringOutput `pulumi:"connectProvider"`
}

// NewCertificateAuthority registers a new resource with the given unique name, arguments, and options.
func NewCertificateAuthority(ctx *pulumi.Context,
	name string, args *CertificateAuthorityArgs, opts ...pulumi.ResourceOption) (*CertificateAuthority, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectProvider == nil {
		return nil, errors.New("invalid value for required argument 'ConnectProvider'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateAuthority
	err := ctx.RegisterResource("consul:index/certificateAuthority:CertificateAuthority", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateAuthority gets an existing CertificateAuthority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateAuthority(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateAuthorityState, opts ...pulumi.ResourceOption) (*CertificateAuthority, error) {
	var resource CertificateAuthority
	err := ctx.ReadResource("consul:index/certificateAuthority:CertificateAuthority", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateAuthority resources.
type certificateAuthorityState struct {
	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config map[string]string `pulumi:"config"`
	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	ConfigJson *string `pulumi:"configJson"`
	// Specifies the CA provider type to use.
	ConnectProvider *string `pulumi:"connectProvider"`
}

type CertificateAuthorityState struct {
	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config pulumi.StringMapInput
	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	ConfigJson pulumi.StringPtrInput
	// Specifies the CA provider type to use.
	ConnectProvider pulumi.StringPtrInput
}

func (CertificateAuthorityState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityState)(nil)).Elem()
}

type certificateAuthorityArgs struct {
	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config map[string]string `pulumi:"config"`
	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	ConfigJson *string `pulumi:"configJson"`
	// Specifies the CA provider type to use.
	ConnectProvider string `pulumi:"connectProvider"`
}

// The set of arguments for constructing a CertificateAuthority resource.
type CertificateAuthorityArgs struct {
	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	//
	// Deprecated: The config attribute is deprecated, please use config_json instead.
	Config pulumi.StringMapInput
	// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
	// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
	ConfigJson pulumi.StringPtrInput
	// Specifies the CA provider type to use.
	ConnectProvider pulumi.StringInput
}

func (CertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityArgs)(nil)).Elem()
}

type CertificateAuthorityInput interface {
	pulumi.Input

	ToCertificateAuthorityOutput() CertificateAuthorityOutput
	ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput
}

func (*CertificateAuthority) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthority)(nil)).Elem()
}

func (i *CertificateAuthority) ToCertificateAuthorityOutput() CertificateAuthorityOutput {
	return i.ToCertificateAuthorityOutputWithContext(context.Background())
}

func (i *CertificateAuthority) ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityOutput)
}

// CertificateAuthorityArrayInput is an input type that accepts CertificateAuthorityArray and CertificateAuthorityArrayOutput values.
// You can construct a concrete instance of `CertificateAuthorityArrayInput` via:
//
//	CertificateAuthorityArray{ CertificateAuthorityArgs{...} }
type CertificateAuthorityArrayInput interface {
	pulumi.Input

	ToCertificateAuthorityArrayOutput() CertificateAuthorityArrayOutput
	ToCertificateAuthorityArrayOutputWithContext(context.Context) CertificateAuthorityArrayOutput
}

type CertificateAuthorityArray []CertificateAuthorityInput

func (CertificateAuthorityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateAuthority)(nil)).Elem()
}

func (i CertificateAuthorityArray) ToCertificateAuthorityArrayOutput() CertificateAuthorityArrayOutput {
	return i.ToCertificateAuthorityArrayOutputWithContext(context.Background())
}

func (i CertificateAuthorityArray) ToCertificateAuthorityArrayOutputWithContext(ctx context.Context) CertificateAuthorityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityArrayOutput)
}

// CertificateAuthorityMapInput is an input type that accepts CertificateAuthorityMap and CertificateAuthorityMapOutput values.
// You can construct a concrete instance of `CertificateAuthorityMapInput` via:
//
//	CertificateAuthorityMap{ "key": CertificateAuthorityArgs{...} }
type CertificateAuthorityMapInput interface {
	pulumi.Input

	ToCertificateAuthorityMapOutput() CertificateAuthorityMapOutput
	ToCertificateAuthorityMapOutputWithContext(context.Context) CertificateAuthorityMapOutput
}

type CertificateAuthorityMap map[string]CertificateAuthorityInput

func (CertificateAuthorityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateAuthority)(nil)).Elem()
}

func (i CertificateAuthorityMap) ToCertificateAuthorityMapOutput() CertificateAuthorityMapOutput {
	return i.ToCertificateAuthorityMapOutputWithContext(context.Background())
}

func (i CertificateAuthorityMap) ToCertificateAuthorityMapOutputWithContext(ctx context.Context) CertificateAuthorityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityMapOutput)
}

type CertificateAuthorityOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthority)(nil)).Elem()
}

func (o CertificateAuthorityOutput) ToCertificateAuthorityOutput() CertificateAuthorityOutput {
	return o
}

func (o CertificateAuthorityOutput) ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput {
	return o
}

// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
//
// Deprecated: The config attribute is deprecated, please use config_json instead.
func (o CertificateAuthorityOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

// The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
// [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
func (o CertificateAuthorityOutput) ConfigJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringPtrOutput { return v.ConfigJson }).(pulumi.StringPtrOutput)
}

// Specifies the CA provider type to use.
func (o CertificateAuthorityOutput) ConnectProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringOutput { return v.ConnectProvider }).(pulumi.StringOutput)
}

type CertificateAuthorityArrayOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateAuthority)(nil)).Elem()
}

func (o CertificateAuthorityArrayOutput) ToCertificateAuthorityArrayOutput() CertificateAuthorityArrayOutput {
	return o
}

func (o CertificateAuthorityArrayOutput) ToCertificateAuthorityArrayOutputWithContext(ctx context.Context) CertificateAuthorityArrayOutput {
	return o
}

func (o CertificateAuthorityArrayOutput) Index(i pulumi.IntInput) CertificateAuthorityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateAuthority {
		return vs[0].([]*CertificateAuthority)[vs[1].(int)]
	}).(CertificateAuthorityOutput)
}

type CertificateAuthorityMapOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateAuthority)(nil)).Elem()
}

func (o CertificateAuthorityMapOutput) ToCertificateAuthorityMapOutput() CertificateAuthorityMapOutput {
	return o
}

func (o CertificateAuthorityMapOutput) ToCertificateAuthorityMapOutputWithContext(ctx context.Context) CertificateAuthorityMapOutput {
	return o
}

func (o CertificateAuthorityMapOutput) MapIndex(k pulumi.StringInput) CertificateAuthorityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateAuthority {
		return vs[0].(map[string]*CertificateAuthority)[vs[1].(string)]
	}).(CertificateAuthorityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityInput)(nil)).Elem(), &CertificateAuthority{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityArrayInput)(nil)).Elem(), CertificateAuthorityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityMapInput)(nil)).Elem(), CertificateAuthorityMap{})
	pulumi.RegisterOutputType(CertificateAuthorityOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityArrayOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityMapOutput{})
}
