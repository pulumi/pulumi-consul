// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The `CertificateAuthority` resource can be used to manage the configuration of
// the Certificate Authority used by [Consul Connect](https://www.consul.io/docs/connect/ca).
//
// ## Example Usage
//
// Use the built-in CA with specific TTL:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewCertificateAuthority(ctx, "connect", &consul.CertificateAuthorityArgs{
// 			Config: pulumi.StringMap{
// 				"IntermediateCertTTL": pulumi.String("8760h"),
// 				"LeafCertTTL":         pulumi.String("24h"),
// 				"RotationPeriod":      pulumi.String("2160h"),
// 			},
// 			ConnectProvider: pulumi.String("consul"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Use Vault to manage and sign certificates:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewCertificateAuthority(ctx, "connect", &consul.CertificateAuthorityArgs{
// 			Config: pulumi.StringMap{
// 				"address":               pulumi.String("http://localhost:8200"),
// 				"intermediate_pki_path": pulumi.String("connect-intermediate"),
// 				"root_pki_path":         pulumi.String("connect-root"),
// 				"token":                 pulumi.String("..."),
// 			},
// 			ConnectProvider: pulumi.String("vault"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Use the [AWS Certificate Manager Private Certificate Authority](https://aws.amazon.com/certificate-manager/private-certificate-authority/):
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewCertificateAuthority(ctx, "connect", &consul.CertificateAuthorityArgs{
// 			Config: pulumi.StringMap{
// 				"existing_arn": pulumi.String("arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-123456789012"),
// 			},
// 			ConnectProvider: pulumi.String("aws-pca"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `certificate_authority` can be imported
//
// ```sh
//  $ pulumi import consul:index/certificateAuthority:CertificateAuthority connect connect-ca
// ```
type CertificateAuthority struct {
	pulumi.CustomResourceState

	// The raw configuration to use for the chosen provider.
	Config pulumi.StringMapOutput `pulumi:"config"`
	// Specifies the CA provider type to use.
	ConnectProvider pulumi.StringOutput `pulumi:"connectProvider"`
}

// NewCertificateAuthority registers a new resource with the given unique name, arguments, and options.
func NewCertificateAuthority(ctx *pulumi.Context,
	name string, args *CertificateAuthorityArgs, opts ...pulumi.ResourceOption) (*CertificateAuthority, error) {
	if args == nil || args.Config == nil {
		return nil, errors.New("missing required argument 'Config'")
	}
	if args == nil || args.ConnectProvider == nil {
		return nil, errors.New("missing required argument 'ConnectProvider'")
	}
	if args == nil {
		args = &CertificateAuthorityArgs{}
	}
	var resource CertificateAuthority
	err := ctx.RegisterResource("consul:index/certificateAuthority:CertificateAuthority", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateAuthority gets an existing CertificateAuthority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateAuthority(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateAuthorityState, opts ...pulumi.ResourceOption) (*CertificateAuthority, error) {
	var resource CertificateAuthority
	err := ctx.ReadResource("consul:index/certificateAuthority:CertificateAuthority", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateAuthority resources.
type certificateAuthorityState struct {
	// The raw configuration to use for the chosen provider.
	Config map[string]string `pulumi:"config"`
	// Specifies the CA provider type to use.
	ConnectProvider *string `pulumi:"connectProvider"`
}

type CertificateAuthorityState struct {
	// The raw configuration to use for the chosen provider.
	Config pulumi.StringMapInput
	// Specifies the CA provider type to use.
	ConnectProvider pulumi.StringPtrInput
}

func (CertificateAuthorityState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityState)(nil)).Elem()
}

type certificateAuthorityArgs struct {
	// The raw configuration to use for the chosen provider.
	Config map[string]string `pulumi:"config"`
	// Specifies the CA provider type to use.
	ConnectProvider string `pulumi:"connectProvider"`
}

// The set of arguments for constructing a CertificateAuthority resource.
type CertificateAuthorityArgs struct {
	// The raw configuration to use for the chosen provider.
	Config pulumi.StringMapInput
	// Specifies the CA provider type to use.
	ConnectProvider pulumi.StringInput
}

func (CertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityArgs)(nil)).Elem()
}

type CertificateAuthorityInput interface {
	pulumi.Input

	ToCertificateAuthorityOutput() CertificateAuthorityOutput
	ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput
}

func (CertificateAuthority) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthority)(nil)).Elem()
}

func (i CertificateAuthority) ToCertificateAuthorityOutput() CertificateAuthorityOutput {
	return i.ToCertificateAuthorityOutputWithContext(context.Background())
}

func (i CertificateAuthority) ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityOutput)
}

type CertificateAuthorityOutput struct {
	*pulumi.OutputState
}

func (CertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityOutput)(nil)).Elem()
}

func (o CertificateAuthorityOutput) ToCertificateAuthorityOutput() CertificateAuthorityOutput {
	return o
}

func (o CertificateAuthorityOutput) ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CertificateAuthorityOutput{})
}
