// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewConfigEntryServiceResolver(ctx, "web", &consul.ConfigEntryServiceResolverArgs{
//				Name:           pulumi.String("web"),
//				DefaultSubset:  pulumi.String("v1"),
//				ConnectTimeout: pulumi.String("15s"),
//				Subsets: consul.ConfigEntryServiceResolverSubsetArray{
//					&consul.ConfigEntryServiceResolverSubsetArgs{
//						Name:   pulumi.String("v1"),
//						Filter: pulumi.String("Service.Meta.version == v1"),
//					},
//					&consul.ConfigEntryServiceResolverSubsetArgs{
//						Name:   pulumi.String("v2"),
//						Filter: pulumi.String("Service.Meta.version == v2"),
//					},
//				},
//				Redirects: consul.ConfigEntryServiceResolverRedirectArray{
//					&consul.ConfigEntryServiceResolverRedirectArgs{
//						Service:    pulumi.String("web"),
//						Datacenter: pulumi.String("dc2"),
//					},
//				},
//				Failovers: consul.ConfigEntryServiceResolverFailoverArray{
//					&consul.ConfigEntryServiceResolverFailoverArgs{
//						SubsetName: pulumi.String("v2"),
//						Datacenters: pulumi.StringArray{
//							pulumi.String("dc2"),
//						},
//					},
//					&consul.ConfigEntryServiceResolverFailoverArgs{
//						SubsetName: pulumi.String("*"),
//						Datacenters: pulumi.StringArray{
//							pulumi.String("dc3"),
//							pulumi.String("dc4"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type ConfigEntryServiceResolver struct {
	pulumi.CustomResourceState

	// Specifies the timeout duration for establishing new network connections to this service.
	ConnectTimeout pulumi.StringPtrOutput `pulumi:"connectTimeout"`
	// Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
	DefaultSubset pulumi.StringPtrOutput `pulumi:"defaultSubset"`
	// Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
	Failovers ConfigEntryServiceResolverFailoverArrayOutput `pulumi:"failovers"`
	// Specifies the load balancing policy and configuration for services issuing requests to this upstream.
	LoadBalancers ConfigEntryServiceResolverLoadBalancerArrayOutput `pulumi:"loadBalancers"`
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// Name of subset.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the namespace at the failover location where the failover services are deployed.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
	Redirects ConfigEntryServiceResolverRedirectArrayOutput `pulumi:"redirects"`
	// Specifies the timeout duration for receiving an HTTP response from this service.
	RequestTimeout pulumi.StringPtrOutput `pulumi:"requestTimeout"`
	// Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
	Subsets ConfigEntryServiceResolverSubsetArrayOutput `pulumi:"subsets"`
}

// NewConfigEntryServiceResolver registers a new resource with the given unique name, arguments, and options.
func NewConfigEntryServiceResolver(ctx *pulumi.Context,
	name string, args *ConfigEntryServiceResolverArgs, opts ...pulumi.ResourceOption) (*ConfigEntryServiceResolver, error) {
	if args == nil {
		args = &ConfigEntryServiceResolverArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigEntryServiceResolver
	err := ctx.RegisterResource("consul:index/configEntryServiceResolver:ConfigEntryServiceResolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEntryServiceResolver gets an existing ConfigEntryServiceResolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEntryServiceResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEntryServiceResolverState, opts ...pulumi.ResourceOption) (*ConfigEntryServiceResolver, error) {
	var resource ConfigEntryServiceResolver
	err := ctx.ReadResource("consul:index/configEntryServiceResolver:ConfigEntryServiceResolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEntryServiceResolver resources.
type configEntryServiceResolverState struct {
	// Specifies the timeout duration for establishing new network connections to this service.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
	DefaultSubset *string `pulumi:"defaultSubset"`
	// Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
	Failovers []ConfigEntryServiceResolverFailover `pulumi:"failovers"`
	// Specifies the load balancing policy and configuration for services issuing requests to this upstream.
	LoadBalancers []ConfigEntryServiceResolverLoadBalancer `pulumi:"loadBalancers"`
	// Specifies key-value pairs to add to the KV store.
	Meta map[string]string `pulumi:"meta"`
	// Name of subset.
	Name *string `pulumi:"name"`
	// Specifies the namespace at the failover location where the failover services are deployed.
	Namespace *string `pulumi:"namespace"`
	// Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
	Partition *string `pulumi:"partition"`
	// Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
	Redirects []ConfigEntryServiceResolverRedirect `pulumi:"redirects"`
	// Specifies the timeout duration for receiving an HTTP response from this service.
	RequestTimeout *string `pulumi:"requestTimeout"`
	// Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
	Subsets []ConfigEntryServiceResolverSubset `pulumi:"subsets"`
}

type ConfigEntryServiceResolverState struct {
	// Specifies the timeout duration for establishing new network connections to this service.
	ConnectTimeout pulumi.StringPtrInput
	// Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
	DefaultSubset pulumi.StringPtrInput
	// Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
	Failovers ConfigEntryServiceResolverFailoverArrayInput
	// Specifies the load balancing policy and configuration for services issuing requests to this upstream.
	LoadBalancers ConfigEntryServiceResolverLoadBalancerArrayInput
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapInput
	// Name of subset.
	Name pulumi.StringPtrInput
	// Specifies the namespace at the failover location where the failover services are deployed.
	Namespace pulumi.StringPtrInput
	// Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
	Partition pulumi.StringPtrInput
	// Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
	Redirects ConfigEntryServiceResolverRedirectArrayInput
	// Specifies the timeout duration for receiving an HTTP response from this service.
	RequestTimeout pulumi.StringPtrInput
	// Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
	Subsets ConfigEntryServiceResolverSubsetArrayInput
}

func (ConfigEntryServiceResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryServiceResolverState)(nil)).Elem()
}

type configEntryServiceResolverArgs struct {
	// Specifies the timeout duration for establishing new network connections to this service.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
	DefaultSubset *string `pulumi:"defaultSubset"`
	// Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
	Failovers []ConfigEntryServiceResolverFailover `pulumi:"failovers"`
	// Specifies the load balancing policy and configuration for services issuing requests to this upstream.
	LoadBalancers []ConfigEntryServiceResolverLoadBalancer `pulumi:"loadBalancers"`
	// Specifies key-value pairs to add to the KV store.
	Meta map[string]string `pulumi:"meta"`
	// Name of subset.
	Name *string `pulumi:"name"`
	// Specifies the namespace at the failover location where the failover services are deployed.
	Namespace *string `pulumi:"namespace"`
	// Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
	Partition *string `pulumi:"partition"`
	// Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
	Redirects []ConfigEntryServiceResolverRedirect `pulumi:"redirects"`
	// Specifies the timeout duration for receiving an HTTP response from this service.
	RequestTimeout *string `pulumi:"requestTimeout"`
	// Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
	Subsets []ConfigEntryServiceResolverSubset `pulumi:"subsets"`
}

// The set of arguments for constructing a ConfigEntryServiceResolver resource.
type ConfigEntryServiceResolverArgs struct {
	// Specifies the timeout duration for establishing new network connections to this service.
	ConnectTimeout pulumi.StringPtrInput
	// Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
	DefaultSubset pulumi.StringPtrInput
	// Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
	Failovers ConfigEntryServiceResolverFailoverArrayInput
	// Specifies the load balancing policy and configuration for services issuing requests to this upstream.
	LoadBalancers ConfigEntryServiceResolverLoadBalancerArrayInput
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapInput
	// Name of subset.
	Name pulumi.StringPtrInput
	// Specifies the namespace at the failover location where the failover services are deployed.
	Namespace pulumi.StringPtrInput
	// Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
	Partition pulumi.StringPtrInput
	// Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
	Redirects ConfigEntryServiceResolverRedirectArrayInput
	// Specifies the timeout duration for receiving an HTTP response from this service.
	RequestTimeout pulumi.StringPtrInput
	// Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
	Subsets ConfigEntryServiceResolverSubsetArrayInput
}

func (ConfigEntryServiceResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryServiceResolverArgs)(nil)).Elem()
}

type ConfigEntryServiceResolverInput interface {
	pulumi.Input

	ToConfigEntryServiceResolverOutput() ConfigEntryServiceResolverOutput
	ToConfigEntryServiceResolverOutputWithContext(ctx context.Context) ConfigEntryServiceResolverOutput
}

func (*ConfigEntryServiceResolver) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntryServiceResolver)(nil)).Elem()
}

func (i *ConfigEntryServiceResolver) ToConfigEntryServiceResolverOutput() ConfigEntryServiceResolverOutput {
	return i.ToConfigEntryServiceResolverOutputWithContext(context.Background())
}

func (i *ConfigEntryServiceResolver) ToConfigEntryServiceResolverOutputWithContext(ctx context.Context) ConfigEntryServiceResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceResolverOutput)
}

// ConfigEntryServiceResolverArrayInput is an input type that accepts ConfigEntryServiceResolverArray and ConfigEntryServiceResolverArrayOutput values.
// You can construct a concrete instance of `ConfigEntryServiceResolverArrayInput` via:
//
//	ConfigEntryServiceResolverArray{ ConfigEntryServiceResolverArgs{...} }
type ConfigEntryServiceResolverArrayInput interface {
	pulumi.Input

	ToConfigEntryServiceResolverArrayOutput() ConfigEntryServiceResolverArrayOutput
	ToConfigEntryServiceResolverArrayOutputWithContext(context.Context) ConfigEntryServiceResolverArrayOutput
}

type ConfigEntryServiceResolverArray []ConfigEntryServiceResolverInput

func (ConfigEntryServiceResolverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntryServiceResolver)(nil)).Elem()
}

func (i ConfigEntryServiceResolverArray) ToConfigEntryServiceResolverArrayOutput() ConfigEntryServiceResolverArrayOutput {
	return i.ToConfigEntryServiceResolverArrayOutputWithContext(context.Background())
}

func (i ConfigEntryServiceResolverArray) ToConfigEntryServiceResolverArrayOutputWithContext(ctx context.Context) ConfigEntryServiceResolverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceResolverArrayOutput)
}

// ConfigEntryServiceResolverMapInput is an input type that accepts ConfigEntryServiceResolverMap and ConfigEntryServiceResolverMapOutput values.
// You can construct a concrete instance of `ConfigEntryServiceResolverMapInput` via:
//
//	ConfigEntryServiceResolverMap{ "key": ConfigEntryServiceResolverArgs{...} }
type ConfigEntryServiceResolverMapInput interface {
	pulumi.Input

	ToConfigEntryServiceResolverMapOutput() ConfigEntryServiceResolverMapOutput
	ToConfigEntryServiceResolverMapOutputWithContext(context.Context) ConfigEntryServiceResolverMapOutput
}

type ConfigEntryServiceResolverMap map[string]ConfigEntryServiceResolverInput

func (ConfigEntryServiceResolverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntryServiceResolver)(nil)).Elem()
}

func (i ConfigEntryServiceResolverMap) ToConfigEntryServiceResolverMapOutput() ConfigEntryServiceResolverMapOutput {
	return i.ToConfigEntryServiceResolverMapOutputWithContext(context.Background())
}

func (i ConfigEntryServiceResolverMap) ToConfigEntryServiceResolverMapOutputWithContext(ctx context.Context) ConfigEntryServiceResolverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceResolverMapOutput)
}

type ConfigEntryServiceResolverOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntryServiceResolver)(nil)).Elem()
}

func (o ConfigEntryServiceResolverOutput) ToConfigEntryServiceResolverOutput() ConfigEntryServiceResolverOutput {
	return o
}

func (o ConfigEntryServiceResolverOutput) ToConfigEntryServiceResolverOutputWithContext(ctx context.Context) ConfigEntryServiceResolverOutput {
	return o
}

// Specifies the timeout duration for establishing new network connections to this service.
func (o ConfigEntryServiceResolverOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) pulumi.StringPtrOutput { return v.ConnectTimeout }).(pulumi.StringPtrOutput)
}

// Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
func (o ConfigEntryServiceResolverOutput) DefaultSubset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) pulumi.StringPtrOutput { return v.DefaultSubset }).(pulumi.StringPtrOutput)
}

// Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
func (o ConfigEntryServiceResolverOutput) Failovers() ConfigEntryServiceResolverFailoverArrayOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) ConfigEntryServiceResolverFailoverArrayOutput { return v.Failovers }).(ConfigEntryServiceResolverFailoverArrayOutput)
}

// Specifies the load balancing policy and configuration for services issuing requests to this upstream.
func (o ConfigEntryServiceResolverOutput) LoadBalancers() ConfigEntryServiceResolverLoadBalancerArrayOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) ConfigEntryServiceResolverLoadBalancerArrayOutput {
		return v.LoadBalancers
	}).(ConfigEntryServiceResolverLoadBalancerArrayOutput)
}

// Specifies key-value pairs to add to the KV store.
func (o ConfigEntryServiceResolverOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) pulumi.StringMapOutput { return v.Meta }).(pulumi.StringMapOutput)
}

// Name of subset.
func (o ConfigEntryServiceResolverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the namespace at the failover location where the failover services are deployed.
func (o ConfigEntryServiceResolverOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
func (o ConfigEntryServiceResolverOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
func (o ConfigEntryServiceResolverOutput) Redirects() ConfigEntryServiceResolverRedirectArrayOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) ConfigEntryServiceResolverRedirectArrayOutput { return v.Redirects }).(ConfigEntryServiceResolverRedirectArrayOutput)
}

// Specifies the timeout duration for receiving an HTTP response from this service.
func (o ConfigEntryServiceResolverOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) pulumi.StringPtrOutput { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

// Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
func (o ConfigEntryServiceResolverOutput) Subsets() ConfigEntryServiceResolverSubsetArrayOutput {
	return o.ApplyT(func(v *ConfigEntryServiceResolver) ConfigEntryServiceResolverSubsetArrayOutput { return v.Subsets }).(ConfigEntryServiceResolverSubsetArrayOutput)
}

type ConfigEntryServiceResolverArrayOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceResolverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntryServiceResolver)(nil)).Elem()
}

func (o ConfigEntryServiceResolverArrayOutput) ToConfigEntryServiceResolverArrayOutput() ConfigEntryServiceResolverArrayOutput {
	return o
}

func (o ConfigEntryServiceResolverArrayOutput) ToConfigEntryServiceResolverArrayOutputWithContext(ctx context.Context) ConfigEntryServiceResolverArrayOutput {
	return o
}

func (o ConfigEntryServiceResolverArrayOutput) Index(i pulumi.IntInput) ConfigEntryServiceResolverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigEntryServiceResolver {
		return vs[0].([]*ConfigEntryServiceResolver)[vs[1].(int)]
	}).(ConfigEntryServiceResolverOutput)
}

type ConfigEntryServiceResolverMapOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceResolverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntryServiceResolver)(nil)).Elem()
}

func (o ConfigEntryServiceResolverMapOutput) ToConfigEntryServiceResolverMapOutput() ConfigEntryServiceResolverMapOutput {
	return o
}

func (o ConfigEntryServiceResolverMapOutput) ToConfigEntryServiceResolverMapOutputWithContext(ctx context.Context) ConfigEntryServiceResolverMapOutput {
	return o
}

func (o ConfigEntryServiceResolverMapOutput) MapIndex(k pulumi.StringInput) ConfigEntryServiceResolverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigEntryServiceResolver {
		return vs[0].(map[string]*ConfigEntryServiceResolver)[vs[1].(string)]
	}).(ConfigEntryServiceResolverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceResolverInput)(nil)).Elem(), &ConfigEntryServiceResolver{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceResolverArrayInput)(nil)).Elem(), ConfigEntryServiceResolverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceResolverMapInput)(nil)).Elem(), ConfigEntryServiceResolverMap{})
	pulumi.RegisterOutputType(ConfigEntryServiceResolverOutput{})
	pulumi.RegisterOutputType(ConfigEntryServiceResolverArrayOutput{})
	pulumi.RegisterOutputType(ConfigEntryServiceResolverMapOutput{})
}
