// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ConfigEntryServiceSplitter` resource configures a [service splitter](https://developer.hashicorp.com/consul/docs/connect/config-entries/service-splitter) that will redirect a percentage of incoming traffic requests for a service to one or more specific service instances.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Protocol":         "http",
//				"Expose":           nil,
//				"MeshGateway":      nil,
//				"TransparentProxy": nil,
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = consul.NewConfigEntry(ctx, "web", &consul.ConfigEntryArgs{
//				Kind:       pulumi.String("service-defaults"),
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.NewConfigEntryServiceResolver(ctx, "serviceResolver", &consul.ConfigEntryServiceResolverArgs{
//				DefaultSubset: pulumi.String("v1"),
//				Subsets: consul.ConfigEntryServiceResolverSubsetArray{
//					&consul.ConfigEntryServiceResolverSubsetArgs{
//						Name:   pulumi.String("v1"),
//						Filter: pulumi.String("Service.Meta.version == v1"),
//					},
//					&consul.ConfigEntryServiceResolverSubsetArgs{
//						Name:   pulumi.String("v2"),
//						Filter: pulumi.String("Service.Meta.version == v2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.NewConfigEntryServiceSplitter(ctx, "foo", &consul.ConfigEntryServiceSplitterArgs{
//				Meta: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//				Splits: consul.ConfigEntryServiceSplitterSplitArray{
//					&consul.ConfigEntryServiceSplitterSplitArgs{
//						Weight:        pulumi.Float64(80),
//						Service:       pulumi.String("web"),
//						ServiceSubset: pulumi.String("v1"),
//						RequestHeaders: &consul.ConfigEntryServiceSplitterSplitRequestHeadersArgs{
//							Set: pulumi.StringMap{
//								"x-web-version": pulumi.String("from-v1"),
//							},
//						},
//						ResponseHeaders: &consul.ConfigEntryServiceSplitterSplitResponseHeadersArgs{
//							Set: pulumi.StringMap{
//								"x-web-version": pulumi.String("to-v1"),
//							},
//						},
//					},
//					&consul.ConfigEntryServiceSplitterSplitArgs{
//						Weight:        pulumi.Float64(10),
//						Service:       pulumi.String("web"),
//						ServiceSubset: pulumi.String("v2"),
//						RequestHeaders: &consul.ConfigEntryServiceSplitterSplitRequestHeadersArgs{
//							Set: pulumi.StringMap{
//								"x-web-version": pulumi.String("from-v2"),
//							},
//						},
//						ResponseHeaders: &consul.ConfigEntryServiceSplitterSplitResponseHeadersArgs{
//							Set: pulumi.StringMap{
//								"x-web-version": pulumi.String("to-v2"),
//							},
//						},
//					},
//					&consul.ConfigEntryServiceSplitterSplitArgs{
//						Weight:        pulumi.Float64(10),
//						Service:       pulumi.String("web"),
//						ServiceSubset: pulumi.String("v2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import consul:index/configEntryServiceSplitter:ConfigEntryServiceSplitter foo web
//
// ```
type ConfigEntryServiceSplitter struct {
	pulumi.CustomResourceState

	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// Specifies a name for the configuration entry.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the namespace to use in the FQDN when resolving the service.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies the admin partition to use in the FQDN when resolving the service.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// Defines how much traffic to send to sets of service instances during a traffic split.
	Splits ConfigEntryServiceSplitterSplitArrayOutput `pulumi:"splits"`
}

// NewConfigEntryServiceSplitter registers a new resource with the given unique name, arguments, and options.
func NewConfigEntryServiceSplitter(ctx *pulumi.Context,
	name string, args *ConfigEntryServiceSplitterArgs, opts ...pulumi.ResourceOption) (*ConfigEntryServiceSplitter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Splits == nil {
		return nil, errors.New("invalid value for required argument 'Splits'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigEntryServiceSplitter
	err := ctx.RegisterResource("consul:index/configEntryServiceSplitter:ConfigEntryServiceSplitter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEntryServiceSplitter gets an existing ConfigEntryServiceSplitter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEntryServiceSplitter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEntryServiceSplitterState, opts ...pulumi.ResourceOption) (*ConfigEntryServiceSplitter, error) {
	var resource ConfigEntryServiceSplitter
	err := ctx.ReadResource("consul:index/configEntryServiceSplitter:ConfigEntryServiceSplitter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEntryServiceSplitter resources.
type configEntryServiceSplitterState struct {
	// Specifies key-value pairs to add to the KV store.
	Meta map[string]string `pulumi:"meta"`
	// Specifies a name for the configuration entry.
	Name *string `pulumi:"name"`
	// Specifies the namespace to use in the FQDN when resolving the service.
	Namespace *string `pulumi:"namespace"`
	// Specifies the admin partition to use in the FQDN when resolving the service.
	Partition *string `pulumi:"partition"`
	// Defines how much traffic to send to sets of service instances during a traffic split.
	Splits []ConfigEntryServiceSplitterSplit `pulumi:"splits"`
}

type ConfigEntryServiceSplitterState struct {
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapInput
	// Specifies a name for the configuration entry.
	Name pulumi.StringPtrInput
	// Specifies the namespace to use in the FQDN when resolving the service.
	Namespace pulumi.StringPtrInput
	// Specifies the admin partition to use in the FQDN when resolving the service.
	Partition pulumi.StringPtrInput
	// Defines how much traffic to send to sets of service instances during a traffic split.
	Splits ConfigEntryServiceSplitterSplitArrayInput
}

func (ConfigEntryServiceSplitterState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryServiceSplitterState)(nil)).Elem()
}

type configEntryServiceSplitterArgs struct {
	// Specifies key-value pairs to add to the KV store.
	Meta map[string]string `pulumi:"meta"`
	// Specifies a name for the configuration entry.
	Name *string `pulumi:"name"`
	// Specifies the namespace to use in the FQDN when resolving the service.
	Namespace *string `pulumi:"namespace"`
	// Specifies the admin partition to use in the FQDN when resolving the service.
	Partition *string `pulumi:"partition"`
	// Defines how much traffic to send to sets of service instances during a traffic split.
	Splits []ConfigEntryServiceSplitterSplit `pulumi:"splits"`
}

// The set of arguments for constructing a ConfigEntryServiceSplitter resource.
type ConfigEntryServiceSplitterArgs struct {
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapInput
	// Specifies a name for the configuration entry.
	Name pulumi.StringPtrInput
	// Specifies the namespace to use in the FQDN when resolving the service.
	Namespace pulumi.StringPtrInput
	// Specifies the admin partition to use in the FQDN when resolving the service.
	Partition pulumi.StringPtrInput
	// Defines how much traffic to send to sets of service instances during a traffic split.
	Splits ConfigEntryServiceSplitterSplitArrayInput
}

func (ConfigEntryServiceSplitterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryServiceSplitterArgs)(nil)).Elem()
}

type ConfigEntryServiceSplitterInput interface {
	pulumi.Input

	ToConfigEntryServiceSplitterOutput() ConfigEntryServiceSplitterOutput
	ToConfigEntryServiceSplitterOutputWithContext(ctx context.Context) ConfigEntryServiceSplitterOutput
}

func (*ConfigEntryServiceSplitter) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntryServiceSplitter)(nil)).Elem()
}

func (i *ConfigEntryServiceSplitter) ToConfigEntryServiceSplitterOutput() ConfigEntryServiceSplitterOutput {
	return i.ToConfigEntryServiceSplitterOutputWithContext(context.Background())
}

func (i *ConfigEntryServiceSplitter) ToConfigEntryServiceSplitterOutputWithContext(ctx context.Context) ConfigEntryServiceSplitterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceSplitterOutput)
}

// ConfigEntryServiceSplitterArrayInput is an input type that accepts ConfigEntryServiceSplitterArray and ConfigEntryServiceSplitterArrayOutput values.
// You can construct a concrete instance of `ConfigEntryServiceSplitterArrayInput` via:
//
//	ConfigEntryServiceSplitterArray{ ConfigEntryServiceSplitterArgs{...} }
type ConfigEntryServiceSplitterArrayInput interface {
	pulumi.Input

	ToConfigEntryServiceSplitterArrayOutput() ConfigEntryServiceSplitterArrayOutput
	ToConfigEntryServiceSplitterArrayOutputWithContext(context.Context) ConfigEntryServiceSplitterArrayOutput
}

type ConfigEntryServiceSplitterArray []ConfigEntryServiceSplitterInput

func (ConfigEntryServiceSplitterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntryServiceSplitter)(nil)).Elem()
}

func (i ConfigEntryServiceSplitterArray) ToConfigEntryServiceSplitterArrayOutput() ConfigEntryServiceSplitterArrayOutput {
	return i.ToConfigEntryServiceSplitterArrayOutputWithContext(context.Background())
}

func (i ConfigEntryServiceSplitterArray) ToConfigEntryServiceSplitterArrayOutputWithContext(ctx context.Context) ConfigEntryServiceSplitterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceSplitterArrayOutput)
}

// ConfigEntryServiceSplitterMapInput is an input type that accepts ConfigEntryServiceSplitterMap and ConfigEntryServiceSplitterMapOutput values.
// You can construct a concrete instance of `ConfigEntryServiceSplitterMapInput` via:
//
//	ConfigEntryServiceSplitterMap{ "key": ConfigEntryServiceSplitterArgs{...} }
type ConfigEntryServiceSplitterMapInput interface {
	pulumi.Input

	ToConfigEntryServiceSplitterMapOutput() ConfigEntryServiceSplitterMapOutput
	ToConfigEntryServiceSplitterMapOutputWithContext(context.Context) ConfigEntryServiceSplitterMapOutput
}

type ConfigEntryServiceSplitterMap map[string]ConfigEntryServiceSplitterInput

func (ConfigEntryServiceSplitterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntryServiceSplitter)(nil)).Elem()
}

func (i ConfigEntryServiceSplitterMap) ToConfigEntryServiceSplitterMapOutput() ConfigEntryServiceSplitterMapOutput {
	return i.ToConfigEntryServiceSplitterMapOutputWithContext(context.Background())
}

func (i ConfigEntryServiceSplitterMap) ToConfigEntryServiceSplitterMapOutputWithContext(ctx context.Context) ConfigEntryServiceSplitterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceSplitterMapOutput)
}

type ConfigEntryServiceSplitterOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceSplitterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntryServiceSplitter)(nil)).Elem()
}

func (o ConfigEntryServiceSplitterOutput) ToConfigEntryServiceSplitterOutput() ConfigEntryServiceSplitterOutput {
	return o
}

func (o ConfigEntryServiceSplitterOutput) ToConfigEntryServiceSplitterOutputWithContext(ctx context.Context) ConfigEntryServiceSplitterOutput {
	return o
}

// Specifies key-value pairs to add to the KV store.
func (o ConfigEntryServiceSplitterOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigEntryServiceSplitter) pulumi.StringMapOutput { return v.Meta }).(pulumi.StringMapOutput)
}

// Specifies a name for the configuration entry.
func (o ConfigEntryServiceSplitterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEntryServiceSplitter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the namespace to use in the FQDN when resolving the service.
func (o ConfigEntryServiceSplitterOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceSplitter) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies the admin partition to use in the FQDN when resolving the service.
func (o ConfigEntryServiceSplitterOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceSplitter) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// Defines how much traffic to send to sets of service instances during a traffic split.
func (o ConfigEntryServiceSplitterOutput) Splits() ConfigEntryServiceSplitterSplitArrayOutput {
	return o.ApplyT(func(v *ConfigEntryServiceSplitter) ConfigEntryServiceSplitterSplitArrayOutput { return v.Splits }).(ConfigEntryServiceSplitterSplitArrayOutput)
}

type ConfigEntryServiceSplitterArrayOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceSplitterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntryServiceSplitter)(nil)).Elem()
}

func (o ConfigEntryServiceSplitterArrayOutput) ToConfigEntryServiceSplitterArrayOutput() ConfigEntryServiceSplitterArrayOutput {
	return o
}

func (o ConfigEntryServiceSplitterArrayOutput) ToConfigEntryServiceSplitterArrayOutputWithContext(ctx context.Context) ConfigEntryServiceSplitterArrayOutput {
	return o
}

func (o ConfigEntryServiceSplitterArrayOutput) Index(i pulumi.IntInput) ConfigEntryServiceSplitterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigEntryServiceSplitter {
		return vs[0].([]*ConfigEntryServiceSplitter)[vs[1].(int)]
	}).(ConfigEntryServiceSplitterOutput)
}

type ConfigEntryServiceSplitterMapOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceSplitterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntryServiceSplitter)(nil)).Elem()
}

func (o ConfigEntryServiceSplitterMapOutput) ToConfigEntryServiceSplitterMapOutput() ConfigEntryServiceSplitterMapOutput {
	return o
}

func (o ConfigEntryServiceSplitterMapOutput) ToConfigEntryServiceSplitterMapOutputWithContext(ctx context.Context) ConfigEntryServiceSplitterMapOutput {
	return o
}

func (o ConfigEntryServiceSplitterMapOutput) MapIndex(k pulumi.StringInput) ConfigEntryServiceSplitterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigEntryServiceSplitter {
		return vs[0].(map[string]*ConfigEntryServiceSplitter)[vs[1].(string)]
	}).(ConfigEntryServiceSplitterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceSplitterInput)(nil)).Elem(), &ConfigEntryServiceSplitter{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceSplitterArrayInput)(nil)).Elem(), ConfigEntryServiceSplitterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceSplitterMapInput)(nil)).Elem(), ConfigEntryServiceSplitterMap{})
	pulumi.RegisterOutputType(ConfigEntryServiceSplitterOutput{})
	pulumi.RegisterOutputType(ConfigEntryServiceSplitterArrayOutput{})
	pulumi.RegisterOutputType(ConfigEntryServiceSplitterMapOutput{})
}
