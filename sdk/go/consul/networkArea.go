// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// > **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).
//
// The `.NetworkArea` resource manages a relationship between servers in two
// different Consul datacenters.
//
// Unlike Consul's WAN feature, network areas use just the server RPC port for
// communication, and relationships can be made between independent pairs of
// datacenters, so not all servers need to be fully connected. This allows for
// complex topologies among Consul datacenters like hub/spoke and more general trees.
type NetworkArea struct {
	pulumi.CustomResourceState

	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter pulumi.StringOutput `pulumi:"peerDatacenter"`
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins pulumi.StringArrayOutput `pulumi:"retryJoins"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls pulumi.BoolPtrOutput `pulumi:"useTls"`
}

// NewNetworkArea registers a new resource with the given unique name, arguments, and options.
func NewNetworkArea(ctx *pulumi.Context,
	name string, args *NetworkAreaArgs, opts ...pulumi.ResourceOption) (*NetworkArea, error) {
	if args == nil || args.PeerDatacenter == nil {
		return nil, errors.New("missing required argument 'PeerDatacenter'")
	}
	if args == nil {
		args = &NetworkAreaArgs{}
	}
	var resource NetworkArea
	err := ctx.RegisterResource("consul:index/networkArea:NetworkArea", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkArea gets an existing NetworkArea resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkArea(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAreaState, opts ...pulumi.ResourceOption) (*NetworkArea, error) {
	var resource NetworkArea
	err := ctx.ReadResource("consul:index/networkArea:NetworkArea", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkArea resources.
type networkAreaState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter *string `pulumi:"peerDatacenter"`
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins []string `pulumi:"retryJoins"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token *string `pulumi:"token"`
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls *bool `pulumi:"useTls"`
}

type NetworkAreaState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter pulumi.StringPtrInput
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins pulumi.StringArrayInput
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token pulumi.StringPtrInput
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls pulumi.BoolPtrInput
}

func (NetworkAreaState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAreaState)(nil)).Elem()
}

type networkAreaArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter string `pulumi:"peerDatacenter"`
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins []string `pulumi:"retryJoins"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token *string `pulumi:"token"`
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls *bool `pulumi:"useTls"`
}

// The set of arguments for constructing a NetworkArea resource.
type NetworkAreaArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter pulumi.StringInput
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins pulumi.StringArrayInput
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	Token pulumi.StringPtrInput
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls pulumi.BoolPtrInput
}

func (NetworkAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAreaArgs)(nil)).Elem()
}
