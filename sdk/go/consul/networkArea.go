// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).
//
// The `NetworkArea` resource manages a relationship between servers in two
// different Consul datacenters.
//
// Unlike Consul's WAN feature, network areas use just the server RPC port for
// communication, and relationships can be made between independent pairs of
// datacenters, so not all servers need to be fully connected. This allows for
// complex topologies among Consul datacenters like hub/spoke and more general trees.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewNetworkArea(ctx, "dc2", &consul.NetworkAreaArgs{
//				PeerDatacenter: pulumi.String("dc2"),
//				RetryJoins: pulumi.StringArray{
//					pulumi.String("1.2.3.4"),
//				},
//				UseTls: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NetworkArea struct {
	pulumi.CustomResourceState

	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter pulumi.StringOutput `pulumi:"peerDatacenter"`
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins pulumi.StringArrayOutput `pulumi:"retryJoins"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls pulumi.BoolPtrOutput `pulumi:"useTls"`
}

// NewNetworkArea registers a new resource with the given unique name, arguments, and options.
func NewNetworkArea(ctx *pulumi.Context,
	name string, args *NetworkAreaArgs, opts ...pulumi.ResourceOption) (*NetworkArea, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerDatacenter == nil {
		return nil, errors.New("invalid value for required argument 'PeerDatacenter'")
	}
	var resource NetworkArea
	err := ctx.RegisterResource("consul:index/networkArea:NetworkArea", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkArea gets an existing NetworkArea resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkArea(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAreaState, opts ...pulumi.ResourceOption) (*NetworkArea, error) {
	var resource NetworkArea
	err := ctx.ReadResource("consul:index/networkArea:NetworkArea", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkArea resources.
type networkAreaState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter *string `pulumi:"peerDatacenter"`
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins []string `pulumi:"retryJoins"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls *bool `pulumi:"useTls"`
}

type NetworkAreaState struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter pulumi.StringPtrInput
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins pulumi.StringArrayInput
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls pulumi.BoolPtrInput
}

func (NetworkAreaState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAreaState)(nil)).Elem()
}

type networkAreaArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter string `pulumi:"peerDatacenter"`
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins []string `pulumi:"retryJoins"`
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token *string `pulumi:"token"`
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls *bool `pulumi:"useTls"`
}

// The set of arguments for constructing a NetworkArea resource.
type NetworkAreaArgs struct {
	// The datacenter to use. This overrides the
	// agent's default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput
	// The name of the Consul datacenter that will be
	// joined to form the area.
	PeerDatacenter pulumi.StringInput
	// Specifies a list of Consul servers to attempt to
	// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
	RetryJoins pulumi.StringArrayInput
	// The ACL token to use. This overrides the
	// token that the agent provides by default.
	//
	// Deprecated: The token argument has been deprecated and will be removed in a future release.
	// Please use the token argument in the provider configuration
	Token pulumi.StringPtrInput
	// Specifies whether gossip over this area should be
	// encrypted with TLS if possible. Defaults to `false`.
	UseTls pulumi.BoolPtrInput
}

func (NetworkAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAreaArgs)(nil)).Elem()
}

type NetworkAreaInput interface {
	pulumi.Input

	ToNetworkAreaOutput() NetworkAreaOutput
	ToNetworkAreaOutputWithContext(ctx context.Context) NetworkAreaOutput
}

func (*NetworkArea) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkArea)(nil)).Elem()
}

func (i *NetworkArea) ToNetworkAreaOutput() NetworkAreaOutput {
	return i.ToNetworkAreaOutputWithContext(context.Background())
}

func (i *NetworkArea) ToNetworkAreaOutputWithContext(ctx context.Context) NetworkAreaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAreaOutput)
}

// NetworkAreaArrayInput is an input type that accepts NetworkAreaArray and NetworkAreaArrayOutput values.
// You can construct a concrete instance of `NetworkAreaArrayInput` via:
//
//	NetworkAreaArray{ NetworkAreaArgs{...} }
type NetworkAreaArrayInput interface {
	pulumi.Input

	ToNetworkAreaArrayOutput() NetworkAreaArrayOutput
	ToNetworkAreaArrayOutputWithContext(context.Context) NetworkAreaArrayOutput
}

type NetworkAreaArray []NetworkAreaInput

func (NetworkAreaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkArea)(nil)).Elem()
}

func (i NetworkAreaArray) ToNetworkAreaArrayOutput() NetworkAreaArrayOutput {
	return i.ToNetworkAreaArrayOutputWithContext(context.Background())
}

func (i NetworkAreaArray) ToNetworkAreaArrayOutputWithContext(ctx context.Context) NetworkAreaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAreaArrayOutput)
}

// NetworkAreaMapInput is an input type that accepts NetworkAreaMap and NetworkAreaMapOutput values.
// You can construct a concrete instance of `NetworkAreaMapInput` via:
//
//	NetworkAreaMap{ "key": NetworkAreaArgs{...} }
type NetworkAreaMapInput interface {
	pulumi.Input

	ToNetworkAreaMapOutput() NetworkAreaMapOutput
	ToNetworkAreaMapOutputWithContext(context.Context) NetworkAreaMapOutput
}

type NetworkAreaMap map[string]NetworkAreaInput

func (NetworkAreaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkArea)(nil)).Elem()
}

func (i NetworkAreaMap) ToNetworkAreaMapOutput() NetworkAreaMapOutput {
	return i.ToNetworkAreaMapOutputWithContext(context.Background())
}

func (i NetworkAreaMap) ToNetworkAreaMapOutputWithContext(ctx context.Context) NetworkAreaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAreaMapOutput)
}

type NetworkAreaOutput struct{ *pulumi.OutputState }

func (NetworkAreaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkArea)(nil)).Elem()
}

func (o NetworkAreaOutput) ToNetworkAreaOutput() NetworkAreaOutput {
	return o
}

func (o NetworkAreaOutput) ToNetworkAreaOutputWithContext(ctx context.Context) NetworkAreaOutput {
	return o
}

type NetworkAreaArrayOutput struct{ *pulumi.OutputState }

func (NetworkAreaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkArea)(nil)).Elem()
}

func (o NetworkAreaArrayOutput) ToNetworkAreaArrayOutput() NetworkAreaArrayOutput {
	return o
}

func (o NetworkAreaArrayOutput) ToNetworkAreaArrayOutputWithContext(ctx context.Context) NetworkAreaArrayOutput {
	return o
}

func (o NetworkAreaArrayOutput) Index(i pulumi.IntInput) NetworkAreaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkArea {
		return vs[0].([]*NetworkArea)[vs[1].(int)]
	}).(NetworkAreaOutput)
}

type NetworkAreaMapOutput struct{ *pulumi.OutputState }

func (NetworkAreaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkArea)(nil)).Elem()
}

func (o NetworkAreaMapOutput) ToNetworkAreaMapOutput() NetworkAreaMapOutput {
	return o
}

func (o NetworkAreaMapOutput) ToNetworkAreaMapOutputWithContext(ctx context.Context) NetworkAreaMapOutput {
	return o
}

func (o NetworkAreaMapOutput) MapIndex(k pulumi.StringInput) NetworkAreaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkArea {
		return vs[0].(map[string]*NetworkArea)[vs[1].(string)]
	}).(NetworkAreaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAreaInput)(nil)).Elem(), &NetworkArea{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAreaArrayInput)(nil)).Elem(), NetworkAreaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAreaMapInput)(nil)).Elem(), NetworkAreaMap{})
	pulumi.RegisterOutputType(NetworkAreaOutput{})
	pulumi.RegisterOutputType(NetworkAreaArrayOutput{})
	pulumi.RegisterOutputType(NetworkAreaMapOutput{})
}
