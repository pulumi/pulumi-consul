// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getAutopilotHealth` data source returns
// [autopilot health information](https://www.consul.io/api/operator/autopilot.html#read-health)
// about the current Consul cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			read, err := consul.GetAutopilotHealth(ctx, &consul.GetAutopilotHealthArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("health", read.Healthy)
//			return nil
//		})
//	}
//
// ```
func GetAutopilotHealth(ctx *pulumi.Context, args *GetAutopilotHealthArgs, opts ...pulumi.InvokeOption) (*GetAutopilotHealthResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAutopilotHealthResult
	err := ctx.Invoke("consul:index/getAutopilotHealth:getAutopilotHealth", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAutopilotHealth.
type GetAutopilotHealthArgs struct {
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter *string `pulumi:"datacenter"`
}

// A collection of values returned by getAutopilotHealth.
type GetAutopilotHealthResult struct {
	Datacenter *string `pulumi:"datacenter"`
	// The number of redundant healthy servers that could fail
	// without causing an outage
	FailureTolerance int `pulumi:"failureTolerance"`
	// Whether the server is healthy according to the current Autopilot
	// configuration
	Healthy bool `pulumi:"healthy"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of server health information. See below for details on the
	// available information.
	Servers []GetAutopilotHealthServer `pulumi:"servers"`
}

func GetAutopilotHealthOutput(ctx *pulumi.Context, args GetAutopilotHealthOutputArgs, opts ...pulumi.InvokeOption) GetAutopilotHealthResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAutopilotHealthResultOutput, error) {
			args := v.(GetAutopilotHealthArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("consul:index/getAutopilotHealth:getAutopilotHealth", args, GetAutopilotHealthResultOutput{}, options).(GetAutopilotHealthResultOutput), nil
		}).(GetAutopilotHealthResultOutput)
}

// A collection of arguments for invoking getAutopilotHealth.
type GetAutopilotHealthOutputArgs struct {
	// The datacenter to use. This overrides the agent's
	// default datacenter and the datacenter in the provider setup.
	Datacenter pulumi.StringPtrInput `pulumi:"datacenter"`
}

func (GetAutopilotHealthOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAutopilotHealthArgs)(nil)).Elem()
}

// A collection of values returned by getAutopilotHealth.
type GetAutopilotHealthResultOutput struct{ *pulumi.OutputState }

func (GetAutopilotHealthResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAutopilotHealthResult)(nil)).Elem()
}

func (o GetAutopilotHealthResultOutput) ToGetAutopilotHealthResultOutput() GetAutopilotHealthResultOutput {
	return o
}

func (o GetAutopilotHealthResultOutput) ToGetAutopilotHealthResultOutputWithContext(ctx context.Context) GetAutopilotHealthResultOutput {
	return o
}

func (o GetAutopilotHealthResultOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAutopilotHealthResult) *string { return v.Datacenter }).(pulumi.StringPtrOutput)
}

// The number of redundant healthy servers that could fail
// without causing an outage
func (o GetAutopilotHealthResultOutput) FailureTolerance() pulumi.IntOutput {
	return o.ApplyT(func(v GetAutopilotHealthResult) int { return v.FailureTolerance }).(pulumi.IntOutput)
}

// Whether the server is healthy according to the current Autopilot
// configuration
func (o GetAutopilotHealthResultOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAutopilotHealthResult) bool { return v.Healthy }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAutopilotHealthResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutopilotHealthResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of server health information. See below for details on the
// available information.
func (o GetAutopilotHealthResultOutput) Servers() GetAutopilotHealthServerArrayOutput {
	return o.ApplyT(func(v GetAutopilotHealthResult) []GetAutopilotHealthServer { return v.Servers }).(GetAutopilotHealthServerArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAutopilotHealthResultOutput{})
}
