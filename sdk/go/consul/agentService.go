// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// !> The `.AgentService` resource has been deprecated in version 2.0.0 of the provider
// and will be removed in a future release. Please read the [upgrade guide](https://www.terraform.io/docs/providers/consul/upgrading.html#deprecation-of-consul_agent_service)
// for more information.
// 
// Provides access to the agent service data in Consul. This can be used to
// define a service associated with a particular agent. Currently, defining
// health checks for an agent service is not supported.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/agent_service.html.markdown.
type AgentService struct {
	s *pulumi.ResourceState
}

// NewAgentService registers a new resource with the given unique name, arguments, and options.
func NewAgentService(ctx *pulumi.Context,
	name string, args *AgentServiceArgs, opts ...pulumi.ResourceOpt) (*AgentService, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["name"] = nil
		inputs["port"] = nil
		inputs["tags"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["name"] = args.Name
		inputs["port"] = args.Port
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("consul:index/agentService:AgentService", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AgentService{s: s}, nil
}

// GetAgentService gets an existing AgentService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentService(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AgentServiceState, opts ...pulumi.ResourceOpt) (*AgentService, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["name"] = state.Name
		inputs["port"] = state.Port
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("consul:index/agentService:AgentService", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AgentService{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AgentService) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AgentService) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The address of the service. Defaults to the
// address of the agent.
func (r *AgentService) Address() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["address"])
}

// The name of the service.
func (r *AgentService) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The port of the service.
func (r *AgentService) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// A list of values that are opaque to Consul,
// but can be used to distinguish between services or nodes.
func (r *AgentService) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering AgentService resources.
type AgentServiceState struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address interface{}
	// The name of the service.
	Name interface{}
	// The port of the service.
	Port interface{}
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags interface{}
}

// The set of arguments for constructing a AgentService resource.
type AgentServiceArgs struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address interface{}
	// The name of the service.
	Name interface{}
	// The port of the service.
	Port interface{}
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags interface{}
}
