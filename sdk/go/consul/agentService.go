// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// !> The `AgentService` resource has been deprecated in version 2.0.0 of the provider
// and will be removed in a future release. Please read the [upgrade guide](https://www.terraform.io/docs/providers/consul/guides/upgrading.html#deprecation-of-consul_agent_service)
// for more information.
//
// Provides access to the agent service data in Consul. This can be used to
// define a service associated with a particular agent. Currently, defining
// health checks for an agent service is not supported.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-consul/sdk/v2/go/consul"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := consul.NewAgentService(ctx, "app", &consul.AgentServiceArgs{
// 			Address: pulumi.String("www.google.com"),
// 			Port:    pulumi.Int(80),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag0"),
// 				pulumi.String("tag1"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AgentService struct {
	pulumi.CustomResourceState

	// The address of the service. Defaults to the
	// address of the agent.
	Address pulumi.StringOutput `pulumi:"address"`
	// The name of the service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The port of the service.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewAgentService registers a new resource with the given unique name, arguments, and options.
func NewAgentService(ctx *pulumi.Context,
	name string, args *AgentServiceArgs, opts ...pulumi.ResourceOption) (*AgentService, error) {
	if args == nil {
		args = &AgentServiceArgs{}
	}
	var resource AgentService
	err := ctx.RegisterResource("consul:index/agentService:AgentService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentService gets an existing AgentService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentServiceState, opts ...pulumi.ResourceOption) (*AgentService, error) {
	var resource AgentService
	err := ctx.ReadResource("consul:index/agentService:AgentService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentService resources.
type agentServiceState struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address *string `pulumi:"address"`
	// The name of the service.
	Name *string `pulumi:"name"`
	// The port of the service.
	Port *int `pulumi:"port"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags []string `pulumi:"tags"`
}

type AgentServiceState struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address pulumi.StringPtrInput
	// The name of the service.
	Name pulumi.StringPtrInput
	// The port of the service.
	Port pulumi.IntPtrInput
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayInput
}

func (AgentServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentServiceState)(nil)).Elem()
}

type agentServiceArgs struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address *string `pulumi:"address"`
	// The name of the service.
	Name *string `pulumi:"name"`
	// The port of the service.
	Port *int `pulumi:"port"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a AgentService resource.
type AgentServiceArgs struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address pulumi.StringPtrInput
	// The name of the service.
	Name pulumi.StringPtrInput
	// The port of the service.
	Port pulumi.IntPtrInput
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayInput
}

func (AgentServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentServiceArgs)(nil)).Elem()
}

type AgentServiceInput interface {
	pulumi.Input

	ToAgentServiceOutput() AgentServiceOutput
	ToAgentServiceOutputWithContext(ctx context.Context) AgentServiceOutput
}

func (AgentService) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentService)(nil)).Elem()
}

func (i AgentService) ToAgentServiceOutput() AgentServiceOutput {
	return i.ToAgentServiceOutputWithContext(context.Background())
}

func (i AgentService) ToAgentServiceOutputWithContext(ctx context.Context) AgentServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentServiceOutput)
}

type AgentServiceOutput struct {
	*pulumi.OutputState
}

func (AgentServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentServiceOutput)(nil)).Elem()
}

func (o AgentServiceOutput) ToAgentServiceOutput() AgentServiceOutput {
	return o
}

func (o AgentServiceOutput) ToAgentServiceOutputWithContext(ctx context.Context) AgentServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AgentServiceOutput{})
}
