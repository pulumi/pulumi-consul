// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// !> The `AgentService` resource has been deprecated in version 2.0.0 of the provider
// and will be removed in a future release. Please read the [upgrade guide](https://www.terraform.io/docs/providers/consul/guides/upgrading.html#deprecation-of-consul_agent_service)
// for more information.
//
// Provides access to the agent service data in Consul. This can be used to
// define a service associated with a particular agent. Currently, defining
// health checks for an agent service is not supported.
type AgentService struct {
	pulumi.CustomResourceState

	// The address of the service. Defaults to the
	// address of the agent.
	Address pulumi.StringOutput `pulumi:"address"`
	// The name of the service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The port of the service.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewAgentService registers a new resource with the given unique name, arguments, and options.
func NewAgentService(ctx *pulumi.Context,
	name string, args *AgentServiceArgs, opts ...pulumi.ResourceOption) (*AgentService, error) {
	if args == nil {
		args = &AgentServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AgentService
	err := ctx.RegisterResource("consul:index/agentService:AgentService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentService gets an existing AgentService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentServiceState, opts ...pulumi.ResourceOption) (*AgentService, error) {
	var resource AgentService
	err := ctx.ReadResource("consul:index/agentService:AgentService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentService resources.
type agentServiceState struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address *string `pulumi:"address"`
	// The name of the service.
	Name *string `pulumi:"name"`
	// The port of the service.
	Port *int `pulumi:"port"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags []string `pulumi:"tags"`
}

type AgentServiceState struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address pulumi.StringPtrInput
	// The name of the service.
	Name pulumi.StringPtrInput
	// The port of the service.
	Port pulumi.IntPtrInput
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayInput
}

func (AgentServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentServiceState)(nil)).Elem()
}

type agentServiceArgs struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address *string `pulumi:"address"`
	// The name of the service.
	Name *string `pulumi:"name"`
	// The port of the service.
	Port *int `pulumi:"port"`
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a AgentService resource.
type AgentServiceArgs struct {
	// The address of the service. Defaults to the
	// address of the agent.
	Address pulumi.StringPtrInput
	// The name of the service.
	Name pulumi.StringPtrInput
	// The port of the service.
	Port pulumi.IntPtrInput
	// A list of values that are opaque to Consul,
	// but can be used to distinguish between services or nodes.
	Tags pulumi.StringArrayInput
}

func (AgentServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentServiceArgs)(nil)).Elem()
}

type AgentServiceInput interface {
	pulumi.Input

	ToAgentServiceOutput() AgentServiceOutput
	ToAgentServiceOutputWithContext(ctx context.Context) AgentServiceOutput
}

func (*AgentService) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentService)(nil)).Elem()
}

func (i *AgentService) ToAgentServiceOutput() AgentServiceOutput {
	return i.ToAgentServiceOutputWithContext(context.Background())
}

func (i *AgentService) ToAgentServiceOutputWithContext(ctx context.Context) AgentServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentServiceOutput)
}

func (i *AgentService) ToOutput(ctx context.Context) pulumix.Output[*AgentService] {
	return pulumix.Output[*AgentService]{
		OutputState: i.ToAgentServiceOutputWithContext(ctx).OutputState,
	}
}

// AgentServiceArrayInput is an input type that accepts AgentServiceArray and AgentServiceArrayOutput values.
// You can construct a concrete instance of `AgentServiceArrayInput` via:
//
//	AgentServiceArray{ AgentServiceArgs{...} }
type AgentServiceArrayInput interface {
	pulumi.Input

	ToAgentServiceArrayOutput() AgentServiceArrayOutput
	ToAgentServiceArrayOutputWithContext(context.Context) AgentServiceArrayOutput
}

type AgentServiceArray []AgentServiceInput

func (AgentServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentService)(nil)).Elem()
}

func (i AgentServiceArray) ToAgentServiceArrayOutput() AgentServiceArrayOutput {
	return i.ToAgentServiceArrayOutputWithContext(context.Background())
}

func (i AgentServiceArray) ToAgentServiceArrayOutputWithContext(ctx context.Context) AgentServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentServiceArrayOutput)
}

func (i AgentServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]*AgentService] {
	return pulumix.Output[[]*AgentService]{
		OutputState: i.ToAgentServiceArrayOutputWithContext(ctx).OutputState,
	}
}

// AgentServiceMapInput is an input type that accepts AgentServiceMap and AgentServiceMapOutput values.
// You can construct a concrete instance of `AgentServiceMapInput` via:
//
//	AgentServiceMap{ "key": AgentServiceArgs{...} }
type AgentServiceMapInput interface {
	pulumi.Input

	ToAgentServiceMapOutput() AgentServiceMapOutput
	ToAgentServiceMapOutputWithContext(context.Context) AgentServiceMapOutput
}

type AgentServiceMap map[string]AgentServiceInput

func (AgentServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentService)(nil)).Elem()
}

func (i AgentServiceMap) ToAgentServiceMapOutput() AgentServiceMapOutput {
	return i.ToAgentServiceMapOutputWithContext(context.Background())
}

func (i AgentServiceMap) ToAgentServiceMapOutputWithContext(ctx context.Context) AgentServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentServiceMapOutput)
}

func (i AgentServiceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AgentService] {
	return pulumix.Output[map[string]*AgentService]{
		OutputState: i.ToAgentServiceMapOutputWithContext(ctx).OutputState,
	}
}

type AgentServiceOutput struct{ *pulumi.OutputState }

func (AgentServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentService)(nil)).Elem()
}

func (o AgentServiceOutput) ToAgentServiceOutput() AgentServiceOutput {
	return o
}

func (o AgentServiceOutput) ToAgentServiceOutputWithContext(ctx context.Context) AgentServiceOutput {
	return o
}

func (o AgentServiceOutput) ToOutput(ctx context.Context) pulumix.Output[*AgentService] {
	return pulumix.Output[*AgentService]{
		OutputState: o.OutputState,
	}
}

// The address of the service. Defaults to the
// address of the agent.
func (o AgentServiceOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentService) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The name of the service.
func (o AgentServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The port of the service.
func (o AgentServiceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentService) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// A list of values that are opaque to Consul,
// but can be used to distinguish between services or nodes.
func (o AgentServiceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AgentService) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type AgentServiceArrayOutput struct{ *pulumi.OutputState }

func (AgentServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentService)(nil)).Elem()
}

func (o AgentServiceArrayOutput) ToAgentServiceArrayOutput() AgentServiceArrayOutput {
	return o
}

func (o AgentServiceArrayOutput) ToAgentServiceArrayOutputWithContext(ctx context.Context) AgentServiceArrayOutput {
	return o
}

func (o AgentServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AgentService] {
	return pulumix.Output[[]*AgentService]{
		OutputState: o.OutputState,
	}
}

func (o AgentServiceArrayOutput) Index(i pulumi.IntInput) AgentServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AgentService {
		return vs[0].([]*AgentService)[vs[1].(int)]
	}).(AgentServiceOutput)
}

type AgentServiceMapOutput struct{ *pulumi.OutputState }

func (AgentServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentService)(nil)).Elem()
}

func (o AgentServiceMapOutput) ToAgentServiceMapOutput() AgentServiceMapOutput {
	return o
}

func (o AgentServiceMapOutput) ToAgentServiceMapOutputWithContext(ctx context.Context) AgentServiceMapOutput {
	return o
}

func (o AgentServiceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AgentService] {
	return pulumix.Output[map[string]*AgentService]{
		OutputState: o.OutputState,
	}
}

func (o AgentServiceMapOutput) MapIndex(k pulumi.StringInput) AgentServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AgentService {
		return vs[0].(map[string]*AgentService)[vs[1].(string)]
	}).(AgentServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentServiceInput)(nil)).Elem(), &AgentService{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentServiceArrayInput)(nil)).Elem(), AgentServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentServiceMapInput)(nil)).Elem(), AgentServiceMap{})
	pulumi.RegisterOutputType(AgentServiceOutput{})
	pulumi.RegisterOutputType(AgentServiceArrayOutput{})
	pulumi.RegisterOutputType(AgentServiceMapOutput{})
}
