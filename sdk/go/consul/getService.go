// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `Service` provides details about a specific Consul service in a
// given datacenter.  The results include a list of nodes advertising the specified
// service, the node's IP address, port number, node ID, etc.  By specifying a
// different datacenter in the `queryOptions` it is possible to retrieve a list of
// services from a different WAN-attached Consul datacenter.
//
// This data source is different from the `getServices` (plural) data
// source, which provides a summary of the current Consul services.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi-example/sdk/v1/go/example"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.LookupService(ctx, &consul.LookupServiceArgs{
//				Name:       "consul",
//				Datacenter: pulumi.StringRef("dc1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Set the description to a whitespace delimited list of the node names
//			_, err = index.NewResource(ctx, "app", &index.ResourceArgs{
//				Description: std.Join(ctx, &std.JoinArgs{
//					Separator: " ",
//					Input:     nodes,
//				}, nil).Result,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("consul:index/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type LookupServiceArgs struct {
	// The Consul datacenter to query.  Defaults to the
	// same value found in `queryOptions` parameter specified below, or if that is
	// empty, the `datacenter` value found in the Consul agent that this provider is
	// configured to talk to.
	Datacenter *string `pulumi:"datacenter"`
	// A filter expression to refine the query, see https://www.consul.io/api-docs/features/filtering
	// and https://www.consul.io/api-docs/catalog#filtering-1.
	Filter *string `pulumi:"filter"`
	// The service name to select.
	Name string `pulumi:"name"`
	// See below.
	QueryOptions []GetServiceQueryOption `pulumi:"queryOptions"`
	// A single tag that can be used to filter the list of nodes
	// to return based on a single matching tag..
	Tag *string `pulumi:"tag"`
}

// A collection of values returned by getService.
type LookupServiceResult struct {
	// The datacenter the keys are being read from to.
	Datacenter *string `pulumi:"datacenter"`
	Filter     *string `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the service
	Name         string                  `pulumi:"name"`
	QueryOptions []GetServiceQueryOption `pulumi:"queryOptions"`
	// A list of nodes and details about each endpoint advertising a
	// service.  Each element in the list is a map of attributes that correspond to
	// each individual node.  The list of per-node attributes is detailed below.
	Services []GetServiceService `pulumi:"services"`
	// The name of the tag used to filter the list of nodes in `service`.
	Tag *string `pulumi:"tag"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceResult, error) {
			args := v.(LookupServiceArgs)
			r, err := LookupService(ctx, &args, opts...)
			var s LookupServiceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServiceResultOutput)
}

// A collection of arguments for invoking getService.
type LookupServiceOutputArgs struct {
	// The Consul datacenter to query.  Defaults to the
	// same value found in `queryOptions` parameter specified below, or if that is
	// empty, the `datacenter` value found in the Consul agent that this provider is
	// configured to talk to.
	Datacenter pulumi.StringPtrInput `pulumi:"datacenter"`
	// A filter expression to refine the query, see https://www.consul.io/api-docs/features/filtering
	// and https://www.consul.io/api-docs/catalog#filtering-1.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The service name to select.
	Name pulumi.StringInput `pulumi:"name"`
	// See below.
	QueryOptions GetServiceQueryOptionArrayInput `pulumi:"queryOptions"`
	// A single tag that can be used to filter the list of nodes
	// to return based on a single matching tag..
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (LookupServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceArgs)(nil)).Elem()
}

// A collection of values returned by getService.
type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutput() LookupServiceResultOutput {
	return o
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutputWithContext(ctx context.Context) LookupServiceResultOutput {
	return o
}

// The datacenter the keys are being read from to.
func (o LookupServiceResultOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.Datacenter }).(pulumi.StringPtrOutput)
}

func (o LookupServiceResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the service
func (o LookupServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupServiceResultOutput) QueryOptions() GetServiceQueryOptionArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceQueryOption { return v.QueryOptions }).(GetServiceQueryOptionArrayOutput)
}

// A list of nodes and details about each endpoint advertising a
// service.  Each element in the list is a map of attributes that correspond to
// each individual node.  The list of per-node attributes is detailed below.
func (o LookupServiceResultOutput) Services() GetServiceServiceArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceService { return v.Services }).(GetServiceServiceArrayOutput)
}

// The name of the tag used to filter the list of nodes in `service`.
func (o LookupServiceResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceResultOutput{})
}
