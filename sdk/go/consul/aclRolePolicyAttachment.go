// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.LookupAclRole(ctx, &consul.LookupAclRoleArgs{
//				Name: "my_role",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			readPolicy, err := consul.NewAclPolicy(ctx, "readPolicy", &consul.AclPolicyArgs{
//				Rules: pulumi.String("node \"\" { policy = \"read\" }"),
//				Datacenters: pulumi.StringArray{
//					pulumi.String("dc1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.NewAclRolePolicyAttachment(ctx, "myRoleReadPolicy", &consul.AclRolePolicyAttachmentArgs{
//				RoleId: pulumi.Any(data.Consul_acl_role.Test.Id),
//				Policy: readPolicy.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import consul:index/aclRolePolicyAttachment:AclRolePolicyAttachment my_role_read_policy 624d94ca-bc5c-f960-4e83-0a609cf588be:policy_name
//
// ```
type AclRolePolicyAttachment struct {
	pulumi.CustomResourceState

	// The policy name.
	Policy pulumi.StringOutput `pulumi:"policy"`
	// The id of the role.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
}

// NewAclRolePolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewAclRolePolicyAttachment(ctx *pulumi.Context,
	name string, args *AclRolePolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*AclRolePolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclRolePolicyAttachment
	err := ctx.RegisterResource("consul:index/aclRolePolicyAttachment:AclRolePolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclRolePolicyAttachment gets an existing AclRolePolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclRolePolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclRolePolicyAttachmentState, opts ...pulumi.ResourceOption) (*AclRolePolicyAttachment, error) {
	var resource AclRolePolicyAttachment
	err := ctx.ReadResource("consul:index/aclRolePolicyAttachment:AclRolePolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclRolePolicyAttachment resources.
type aclRolePolicyAttachmentState struct {
	// The policy name.
	Policy *string `pulumi:"policy"`
	// The id of the role.
	RoleId *string `pulumi:"roleId"`
}

type AclRolePolicyAttachmentState struct {
	// The policy name.
	Policy pulumi.StringPtrInput
	// The id of the role.
	RoleId pulumi.StringPtrInput
}

func (AclRolePolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRolePolicyAttachmentState)(nil)).Elem()
}

type aclRolePolicyAttachmentArgs struct {
	// The policy name.
	Policy string `pulumi:"policy"`
	// The id of the role.
	RoleId string `pulumi:"roleId"`
}

// The set of arguments for constructing a AclRolePolicyAttachment resource.
type AclRolePolicyAttachmentArgs struct {
	// The policy name.
	Policy pulumi.StringInput
	// The id of the role.
	RoleId pulumi.StringInput
}

func (AclRolePolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRolePolicyAttachmentArgs)(nil)).Elem()
}

type AclRolePolicyAttachmentInput interface {
	pulumi.Input

	ToAclRolePolicyAttachmentOutput() AclRolePolicyAttachmentOutput
	ToAclRolePolicyAttachmentOutputWithContext(ctx context.Context) AclRolePolicyAttachmentOutput
}

func (*AclRolePolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRolePolicyAttachment)(nil)).Elem()
}

func (i *AclRolePolicyAttachment) ToAclRolePolicyAttachmentOutput() AclRolePolicyAttachmentOutput {
	return i.ToAclRolePolicyAttachmentOutputWithContext(context.Background())
}

func (i *AclRolePolicyAttachment) ToAclRolePolicyAttachmentOutputWithContext(ctx context.Context) AclRolePolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRolePolicyAttachmentOutput)
}

func (i *AclRolePolicyAttachment) ToOutput(ctx context.Context) pulumix.Output[*AclRolePolicyAttachment] {
	return pulumix.Output[*AclRolePolicyAttachment]{
		OutputState: i.ToAclRolePolicyAttachmentOutputWithContext(ctx).OutputState,
	}
}

// AclRolePolicyAttachmentArrayInput is an input type that accepts AclRolePolicyAttachmentArray and AclRolePolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `AclRolePolicyAttachmentArrayInput` via:
//
//	AclRolePolicyAttachmentArray{ AclRolePolicyAttachmentArgs{...} }
type AclRolePolicyAttachmentArrayInput interface {
	pulumi.Input

	ToAclRolePolicyAttachmentArrayOutput() AclRolePolicyAttachmentArrayOutput
	ToAclRolePolicyAttachmentArrayOutputWithContext(context.Context) AclRolePolicyAttachmentArrayOutput
}

type AclRolePolicyAttachmentArray []AclRolePolicyAttachmentInput

func (AclRolePolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRolePolicyAttachment)(nil)).Elem()
}

func (i AclRolePolicyAttachmentArray) ToAclRolePolicyAttachmentArrayOutput() AclRolePolicyAttachmentArrayOutput {
	return i.ToAclRolePolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i AclRolePolicyAttachmentArray) ToAclRolePolicyAttachmentArrayOutputWithContext(ctx context.Context) AclRolePolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRolePolicyAttachmentArrayOutput)
}

func (i AclRolePolicyAttachmentArray) ToOutput(ctx context.Context) pulumix.Output[[]*AclRolePolicyAttachment] {
	return pulumix.Output[[]*AclRolePolicyAttachment]{
		OutputState: i.ToAclRolePolicyAttachmentArrayOutputWithContext(ctx).OutputState,
	}
}

// AclRolePolicyAttachmentMapInput is an input type that accepts AclRolePolicyAttachmentMap and AclRolePolicyAttachmentMapOutput values.
// You can construct a concrete instance of `AclRolePolicyAttachmentMapInput` via:
//
//	AclRolePolicyAttachmentMap{ "key": AclRolePolicyAttachmentArgs{...} }
type AclRolePolicyAttachmentMapInput interface {
	pulumi.Input

	ToAclRolePolicyAttachmentMapOutput() AclRolePolicyAttachmentMapOutput
	ToAclRolePolicyAttachmentMapOutputWithContext(context.Context) AclRolePolicyAttachmentMapOutput
}

type AclRolePolicyAttachmentMap map[string]AclRolePolicyAttachmentInput

func (AclRolePolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRolePolicyAttachment)(nil)).Elem()
}

func (i AclRolePolicyAttachmentMap) ToAclRolePolicyAttachmentMapOutput() AclRolePolicyAttachmentMapOutput {
	return i.ToAclRolePolicyAttachmentMapOutputWithContext(context.Background())
}

func (i AclRolePolicyAttachmentMap) ToAclRolePolicyAttachmentMapOutputWithContext(ctx context.Context) AclRolePolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRolePolicyAttachmentMapOutput)
}

func (i AclRolePolicyAttachmentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AclRolePolicyAttachment] {
	return pulumix.Output[map[string]*AclRolePolicyAttachment]{
		OutputState: i.ToAclRolePolicyAttachmentMapOutputWithContext(ctx).OutputState,
	}
}

type AclRolePolicyAttachmentOutput struct{ *pulumi.OutputState }

func (AclRolePolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRolePolicyAttachment)(nil)).Elem()
}

func (o AclRolePolicyAttachmentOutput) ToAclRolePolicyAttachmentOutput() AclRolePolicyAttachmentOutput {
	return o
}

func (o AclRolePolicyAttachmentOutput) ToAclRolePolicyAttachmentOutputWithContext(ctx context.Context) AclRolePolicyAttachmentOutput {
	return o
}

func (o AclRolePolicyAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[*AclRolePolicyAttachment] {
	return pulumix.Output[*AclRolePolicyAttachment]{
		OutputState: o.OutputState,
	}
}

// The policy name.
func (o AclRolePolicyAttachmentOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRolePolicyAttachment) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// The id of the role.
func (o AclRolePolicyAttachmentOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRolePolicyAttachment) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type AclRolePolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (AclRolePolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRolePolicyAttachment)(nil)).Elem()
}

func (o AclRolePolicyAttachmentArrayOutput) ToAclRolePolicyAttachmentArrayOutput() AclRolePolicyAttachmentArrayOutput {
	return o
}

func (o AclRolePolicyAttachmentArrayOutput) ToAclRolePolicyAttachmentArrayOutputWithContext(ctx context.Context) AclRolePolicyAttachmentArrayOutput {
	return o
}

func (o AclRolePolicyAttachmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AclRolePolicyAttachment] {
	return pulumix.Output[[]*AclRolePolicyAttachment]{
		OutputState: o.OutputState,
	}
}

func (o AclRolePolicyAttachmentArrayOutput) Index(i pulumi.IntInput) AclRolePolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclRolePolicyAttachment {
		return vs[0].([]*AclRolePolicyAttachment)[vs[1].(int)]
	}).(AclRolePolicyAttachmentOutput)
}

type AclRolePolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (AclRolePolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRolePolicyAttachment)(nil)).Elem()
}

func (o AclRolePolicyAttachmentMapOutput) ToAclRolePolicyAttachmentMapOutput() AclRolePolicyAttachmentMapOutput {
	return o
}

func (o AclRolePolicyAttachmentMapOutput) ToAclRolePolicyAttachmentMapOutputWithContext(ctx context.Context) AclRolePolicyAttachmentMapOutput {
	return o
}

func (o AclRolePolicyAttachmentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AclRolePolicyAttachment] {
	return pulumix.Output[map[string]*AclRolePolicyAttachment]{
		OutputState: o.OutputState,
	}
}

func (o AclRolePolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) AclRolePolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclRolePolicyAttachment {
		return vs[0].(map[string]*AclRolePolicyAttachment)[vs[1].(string)]
	}).(AclRolePolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclRolePolicyAttachmentInput)(nil)).Elem(), &AclRolePolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRolePolicyAttachmentArrayInput)(nil)).Elem(), AclRolePolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRolePolicyAttachmentMapInput)(nil)).Elem(), AclRolePolicyAttachmentMap{})
	pulumi.RegisterOutputType(AclRolePolicyAttachmentOutput{})
	pulumi.RegisterOutputType(AclRolePolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(AclRolePolicyAttachmentMapOutput{})
}
