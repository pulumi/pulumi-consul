// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-consul/sdk/v3/go/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewConfigEntryServiceDefaults(ctx, "adminServiceDefaultsConfigEntryServiceDefaults", &consul.ConfigEntryServiceDefaultsArgs{
//				Protocol: pulumi.String("http"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.NewConfigEntryServiceDefaults(ctx, "adminServiceDefaultsIndex/configEntryServiceDefaultsConfigEntryServiceDefaults", &consul.ConfigEntryServiceDefaultsArgs{
//				Protocol: pulumi.String("http"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = consul.NewConfigEntryServiceRouter(ctx, "foo", &consul.ConfigEntryServiceRouterArgs{
//				Routes: consul.ConfigEntryServiceRouterRouteArray{
//					&consul.ConfigEntryServiceRouterRouteArgs{
//						Match: &consul.ConfigEntryServiceRouterRouteMatchArgs{
//							Http: &consul.ConfigEntryServiceRouterRouteMatchHttpArgs{
//								PathPrefix: pulumi.String("/admin"),
//							},
//						},
//						Destination: &consul.ConfigEntryServiceRouterRouteDestinationArgs{
//							Service: pulumi.Any(consul_config_entry.Admin_service.Name),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type ConfigEntryServiceRouter struct {
	pulumi.CustomResourceState

	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// Specifies the name of the HTTP header to match.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the Consul namespace to resolve the service from instead of the current namespace.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies the Consul admin partition to resolve the service from instead of the current partition.
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// Defines the possible routes for L7 requests.
	Routes ConfigEntryServiceRouterRouteArrayOutput `pulumi:"routes"`
}

// NewConfigEntryServiceRouter registers a new resource with the given unique name, arguments, and options.
func NewConfigEntryServiceRouter(ctx *pulumi.Context,
	name string, args *ConfigEntryServiceRouterArgs, opts ...pulumi.ResourceOption) (*ConfigEntryServiceRouter, error) {
	if args == nil {
		args = &ConfigEntryServiceRouterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigEntryServiceRouter
	err := ctx.RegisterResource("consul:index/configEntryServiceRouter:ConfigEntryServiceRouter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEntryServiceRouter gets an existing ConfigEntryServiceRouter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEntryServiceRouter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEntryServiceRouterState, opts ...pulumi.ResourceOption) (*ConfigEntryServiceRouter, error) {
	var resource ConfigEntryServiceRouter
	err := ctx.ReadResource("consul:index/configEntryServiceRouter:ConfigEntryServiceRouter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEntryServiceRouter resources.
type configEntryServiceRouterState struct {
	// Specifies key-value pairs to add to the KV store.
	Meta map[string]string `pulumi:"meta"`
	// Specifies the name of the HTTP header to match.
	Name *string `pulumi:"name"`
	// Specifies the Consul namespace to resolve the service from instead of the current namespace.
	Namespace *string `pulumi:"namespace"`
	// Specifies the Consul admin partition to resolve the service from instead of the current partition.
	Partition *string `pulumi:"partition"`
	// Defines the possible routes for L7 requests.
	Routes []ConfigEntryServiceRouterRoute `pulumi:"routes"`
}

type ConfigEntryServiceRouterState struct {
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapInput
	// Specifies the name of the HTTP header to match.
	Name pulumi.StringPtrInput
	// Specifies the Consul namespace to resolve the service from instead of the current namespace.
	Namespace pulumi.StringPtrInput
	// Specifies the Consul admin partition to resolve the service from instead of the current partition.
	Partition pulumi.StringPtrInput
	// Defines the possible routes for L7 requests.
	Routes ConfigEntryServiceRouterRouteArrayInput
}

func (ConfigEntryServiceRouterState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryServiceRouterState)(nil)).Elem()
}

type configEntryServiceRouterArgs struct {
	// Specifies key-value pairs to add to the KV store.
	Meta map[string]string `pulumi:"meta"`
	// Specifies the name of the HTTP header to match.
	Name *string `pulumi:"name"`
	// Specifies the Consul namespace to resolve the service from instead of the current namespace.
	Namespace *string `pulumi:"namespace"`
	// Specifies the Consul admin partition to resolve the service from instead of the current partition.
	Partition *string `pulumi:"partition"`
	// Defines the possible routes for L7 requests.
	Routes []ConfigEntryServiceRouterRoute `pulumi:"routes"`
}

// The set of arguments for constructing a ConfigEntryServiceRouter resource.
type ConfigEntryServiceRouterArgs struct {
	// Specifies key-value pairs to add to the KV store.
	Meta pulumi.StringMapInput
	// Specifies the name of the HTTP header to match.
	Name pulumi.StringPtrInput
	// Specifies the Consul namespace to resolve the service from instead of the current namespace.
	Namespace pulumi.StringPtrInput
	// Specifies the Consul admin partition to resolve the service from instead of the current partition.
	Partition pulumi.StringPtrInput
	// Defines the possible routes for L7 requests.
	Routes ConfigEntryServiceRouterRouteArrayInput
}

func (ConfigEntryServiceRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEntryServiceRouterArgs)(nil)).Elem()
}

type ConfigEntryServiceRouterInput interface {
	pulumi.Input

	ToConfigEntryServiceRouterOutput() ConfigEntryServiceRouterOutput
	ToConfigEntryServiceRouterOutputWithContext(ctx context.Context) ConfigEntryServiceRouterOutput
}

func (*ConfigEntryServiceRouter) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntryServiceRouter)(nil)).Elem()
}

func (i *ConfigEntryServiceRouter) ToConfigEntryServiceRouterOutput() ConfigEntryServiceRouterOutput {
	return i.ToConfigEntryServiceRouterOutputWithContext(context.Background())
}

func (i *ConfigEntryServiceRouter) ToConfigEntryServiceRouterOutputWithContext(ctx context.Context) ConfigEntryServiceRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceRouterOutput)
}

// ConfigEntryServiceRouterArrayInput is an input type that accepts ConfigEntryServiceRouterArray and ConfigEntryServiceRouterArrayOutput values.
// You can construct a concrete instance of `ConfigEntryServiceRouterArrayInput` via:
//
//	ConfigEntryServiceRouterArray{ ConfigEntryServiceRouterArgs{...} }
type ConfigEntryServiceRouterArrayInput interface {
	pulumi.Input

	ToConfigEntryServiceRouterArrayOutput() ConfigEntryServiceRouterArrayOutput
	ToConfigEntryServiceRouterArrayOutputWithContext(context.Context) ConfigEntryServiceRouterArrayOutput
}

type ConfigEntryServiceRouterArray []ConfigEntryServiceRouterInput

func (ConfigEntryServiceRouterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntryServiceRouter)(nil)).Elem()
}

func (i ConfigEntryServiceRouterArray) ToConfigEntryServiceRouterArrayOutput() ConfigEntryServiceRouterArrayOutput {
	return i.ToConfigEntryServiceRouterArrayOutputWithContext(context.Background())
}

func (i ConfigEntryServiceRouterArray) ToConfigEntryServiceRouterArrayOutputWithContext(ctx context.Context) ConfigEntryServiceRouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceRouterArrayOutput)
}

// ConfigEntryServiceRouterMapInput is an input type that accepts ConfigEntryServiceRouterMap and ConfigEntryServiceRouterMapOutput values.
// You can construct a concrete instance of `ConfigEntryServiceRouterMapInput` via:
//
//	ConfigEntryServiceRouterMap{ "key": ConfigEntryServiceRouterArgs{...} }
type ConfigEntryServiceRouterMapInput interface {
	pulumi.Input

	ToConfigEntryServiceRouterMapOutput() ConfigEntryServiceRouterMapOutput
	ToConfigEntryServiceRouterMapOutputWithContext(context.Context) ConfigEntryServiceRouterMapOutput
}

type ConfigEntryServiceRouterMap map[string]ConfigEntryServiceRouterInput

func (ConfigEntryServiceRouterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntryServiceRouter)(nil)).Elem()
}

func (i ConfigEntryServiceRouterMap) ToConfigEntryServiceRouterMapOutput() ConfigEntryServiceRouterMapOutput {
	return i.ToConfigEntryServiceRouterMapOutputWithContext(context.Background())
}

func (i ConfigEntryServiceRouterMap) ToConfigEntryServiceRouterMapOutputWithContext(ctx context.Context) ConfigEntryServiceRouterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEntryServiceRouterMapOutput)
}

type ConfigEntryServiceRouterOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEntryServiceRouter)(nil)).Elem()
}

func (o ConfigEntryServiceRouterOutput) ToConfigEntryServiceRouterOutput() ConfigEntryServiceRouterOutput {
	return o
}

func (o ConfigEntryServiceRouterOutput) ToConfigEntryServiceRouterOutputWithContext(ctx context.Context) ConfigEntryServiceRouterOutput {
	return o
}

// Specifies key-value pairs to add to the KV store.
func (o ConfigEntryServiceRouterOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigEntryServiceRouter) pulumi.StringMapOutput { return v.Meta }).(pulumi.StringMapOutput)
}

// Specifies the name of the HTTP header to match.
func (o ConfigEntryServiceRouterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEntryServiceRouter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the Consul namespace to resolve the service from instead of the current namespace.
func (o ConfigEntryServiceRouterOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceRouter) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies the Consul admin partition to resolve the service from instead of the current partition.
func (o ConfigEntryServiceRouterOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEntryServiceRouter) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// Defines the possible routes for L7 requests.
func (o ConfigEntryServiceRouterOutput) Routes() ConfigEntryServiceRouterRouteArrayOutput {
	return o.ApplyT(func(v *ConfigEntryServiceRouter) ConfigEntryServiceRouterRouteArrayOutput { return v.Routes }).(ConfigEntryServiceRouterRouteArrayOutput)
}

type ConfigEntryServiceRouterArrayOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceRouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEntryServiceRouter)(nil)).Elem()
}

func (o ConfigEntryServiceRouterArrayOutput) ToConfigEntryServiceRouterArrayOutput() ConfigEntryServiceRouterArrayOutput {
	return o
}

func (o ConfigEntryServiceRouterArrayOutput) ToConfigEntryServiceRouterArrayOutputWithContext(ctx context.Context) ConfigEntryServiceRouterArrayOutput {
	return o
}

func (o ConfigEntryServiceRouterArrayOutput) Index(i pulumi.IntInput) ConfigEntryServiceRouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigEntryServiceRouter {
		return vs[0].([]*ConfigEntryServiceRouter)[vs[1].(int)]
	}).(ConfigEntryServiceRouterOutput)
}

type ConfigEntryServiceRouterMapOutput struct{ *pulumi.OutputState }

func (ConfigEntryServiceRouterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEntryServiceRouter)(nil)).Elem()
}

func (o ConfigEntryServiceRouterMapOutput) ToConfigEntryServiceRouterMapOutput() ConfigEntryServiceRouterMapOutput {
	return o
}

func (o ConfigEntryServiceRouterMapOutput) ToConfigEntryServiceRouterMapOutputWithContext(ctx context.Context) ConfigEntryServiceRouterMapOutput {
	return o
}

func (o ConfigEntryServiceRouterMapOutput) MapIndex(k pulumi.StringInput) ConfigEntryServiceRouterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigEntryServiceRouter {
		return vs[0].(map[string]*ConfigEntryServiceRouter)[vs[1].(string)]
	}).(ConfigEntryServiceRouterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceRouterInput)(nil)).Elem(), &ConfigEntryServiceRouter{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceRouterArrayInput)(nil)).Elem(), ConfigEntryServiceRouterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEntryServiceRouterMapInput)(nil)).Elem(), ConfigEntryServiceRouterMap{})
	pulumi.RegisterOutputType(ConfigEntryServiceRouterOutput{})
	pulumi.RegisterOutputType(ConfigEntryServiceRouterArrayOutput{})
	pulumi.RegisterOutputType(ConfigEntryServiceRouterMapOutput{})
}
