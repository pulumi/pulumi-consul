// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs Empty = new ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs();

    /**
     * Determines the maximum number of entries in the hash ring.
     * 
     */
    @Import(name="maximumRingSize")
    private @Nullable Output<Integer> maximumRingSize;

    /**
     * @return Determines the maximum number of entries in the hash ring.
     * 
     */
    public Optional<Output<Integer>> maximumRingSize() {
        return Optional.ofNullable(this.maximumRingSize);
    }

    /**
     * Determines the minimum number of entries in the hash ring.
     * 
     */
    @Import(name="minimumRingSize")
    private @Nullable Output<Integer> minimumRingSize;

    /**
     * @return Determines the minimum number of entries in the hash ring.
     * 
     */
    public Optional<Output<Integer>> minimumRingSize() {
        return Optional.ofNullable(this.minimumRingSize);
    }

    private ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs() {}

    private ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs(ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs $) {
        this.maximumRingSize = $.maximumRingSize;
        this.minimumRingSize = $.minimumRingSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs $;

        public Builder() {
            $ = new ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs();
        }

        public Builder(ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs defaults) {
            $ = new ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumRingSize Determines the maximum number of entries in the hash ring.
         * 
         * @return builder
         * 
         */
        public Builder maximumRingSize(@Nullable Output<Integer> maximumRingSize) {
            $.maximumRingSize = maximumRingSize;
            return this;
        }

        /**
         * @param maximumRingSize Determines the maximum number of entries in the hash ring.
         * 
         * @return builder
         * 
         */
        public Builder maximumRingSize(Integer maximumRingSize) {
            return maximumRingSize(Output.of(maximumRingSize));
        }

        /**
         * @param minimumRingSize Determines the minimum number of entries in the hash ring.
         * 
         * @return builder
         * 
         */
        public Builder minimumRingSize(@Nullable Output<Integer> minimumRingSize) {
            $.minimumRingSize = minimumRingSize;
            return this;
        }

        /**
         * @param minimumRingSize Determines the minimum number of entries in the hash ring.
         * 
         * @return builder
         * 
         */
        public Builder minimumRingSize(Integer minimumRingSize) {
            return minimumRingSize(Output.of(minimumRingSize));
        }

        public ConfigEntryServiceResolverLoadBalancerRingHashConfigArgs build() {
            return $;
        }
    }

}
