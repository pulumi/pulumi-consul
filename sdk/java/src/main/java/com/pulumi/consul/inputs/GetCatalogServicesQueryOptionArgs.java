// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCatalogServicesQueryOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCatalogServicesQueryOptionArgs Empty = new GetCatalogServicesQueryOptionArgs();

    @Import(name="allowStale")
    private @Nullable Output<Boolean> allowStale;

    public Optional<Output<Boolean>> allowStale() {
        return Optional.ofNullable(this.allowStale);
    }

    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="near")
    private @Nullable Output<String> near;

    public Optional<Output<String>> near() {
        return Optional.ofNullable(this.near);
    }

    @Import(name="nodeMeta")
    private @Nullable Output<Map<String,String>> nodeMeta;

    public Optional<Output<Map<String,String>>> nodeMeta() {
        return Optional.ofNullable(this.nodeMeta);
    }

    @Import(name="partition")
    private @Nullable Output<String> partition;

    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    @Import(name="requireConsistent")
    private @Nullable Output<Boolean> requireConsistent;

    public Optional<Output<Boolean>> requireConsistent() {
        return Optional.ofNullable(this.requireConsistent);
    }

    @Import(name="token")
    private @Nullable Output<String> token;

    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    @Import(name="waitIndex")
    private @Nullable Output<Integer> waitIndex;

    public Optional<Output<Integer>> waitIndex() {
        return Optional.ofNullable(this.waitIndex);
    }

    @Import(name="waitTime")
    private @Nullable Output<String> waitTime;

    public Optional<Output<String>> waitTime() {
        return Optional.ofNullable(this.waitTime);
    }

    private GetCatalogServicesQueryOptionArgs() {}

    private GetCatalogServicesQueryOptionArgs(GetCatalogServicesQueryOptionArgs $) {
        this.allowStale = $.allowStale;
        this.datacenter = $.datacenter;
        this.namespace = $.namespace;
        this.near = $.near;
        this.nodeMeta = $.nodeMeta;
        this.partition = $.partition;
        this.requireConsistent = $.requireConsistent;
        this.token = $.token;
        this.waitIndex = $.waitIndex;
        this.waitTime = $.waitTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCatalogServicesQueryOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCatalogServicesQueryOptionArgs $;

        public Builder() {
            $ = new GetCatalogServicesQueryOptionArgs();
        }

        public Builder(GetCatalogServicesQueryOptionArgs defaults) {
            $ = new GetCatalogServicesQueryOptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowStale(@Nullable Output<Boolean> allowStale) {
            $.allowStale = allowStale;
            return this;
        }

        public Builder allowStale(Boolean allowStale) {
            return allowStale(Output.of(allowStale));
        }

        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder near(@Nullable Output<String> near) {
            $.near = near;
            return this;
        }

        public Builder near(String near) {
            return near(Output.of(near));
        }

        public Builder nodeMeta(@Nullable Output<Map<String,String>> nodeMeta) {
            $.nodeMeta = nodeMeta;
            return this;
        }

        public Builder nodeMeta(Map<String,String> nodeMeta) {
            return nodeMeta(Output.of(nodeMeta));
        }

        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        public Builder requireConsistent(@Nullable Output<Boolean> requireConsistent) {
            $.requireConsistent = requireConsistent;
            return this;
        }

        public Builder requireConsistent(Boolean requireConsistent) {
            return requireConsistent(Output.of(requireConsistent));
        }

        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        public Builder token(String token) {
            return token(Output.of(token));
        }

        public Builder waitIndex(@Nullable Output<Integer> waitIndex) {
            $.waitIndex = waitIndex;
            return this;
        }

        public Builder waitIndex(Integer waitIndex) {
            return waitIndex(Output.of(waitIndex));
        }

        public Builder waitTime(@Nullable Output<String> waitTime) {
            $.waitTime = waitTime;
            return this;
        }

        public Builder waitTime(String waitTime) {
            return waitTime(Output.of(waitTime));
        }

        public GetCatalogServicesQueryOptionArgs build() {
            return $;
        }
    }

}
