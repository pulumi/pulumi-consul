// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.inputs.AclTokenNodeIdentityArgs;
import com.pulumi.consul.inputs.AclTokenServiceIdentityArgs;
import com.pulumi.consul.inputs.AclTokenTemplatedPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclTokenArgs Empty = new AclTokenArgs();

    /**
     * The uuid of the token. If omitted, Consul will generate a random uuid.
     * 
     */
    @Import(name="accessorId")
    private @Nullable Output<String> accessorId;

    /**
     * @return The uuid of the token. If omitted, Consul will generate a random uuid.
     * 
     */
    public Optional<Output<String>> accessorId() {
        return Optional.ofNullable(this.accessorId);
    }

    /**
     * The description of the token.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the token.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     * 
     */
    @Import(name="expirationTime")
    private @Nullable Output<String> expirationTime;

    /**
     * @return If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     * 
     */
    public Optional<Output<String>> expirationTime() {
        return Optional.ofNullable(this.expirationTime);
    }

    /**
     * The flag to set the token local to the current datacenter.
     * 
     */
    @Import(name="local")
    private @Nullable Output<Boolean> local;

    /**
     * @return The flag to set the token local to the current datacenter.
     * 
     */
    public Optional<Output<Boolean>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * The namespace to create the token within.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to create the token within.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The list of node identities that should be applied to the token.
     * 
     */
    @Import(name="nodeIdentities")
    private @Nullable Output<List<AclTokenNodeIdentityArgs>> nodeIdentities;

    /**
     * @return The list of node identities that should be applied to the token.
     * 
     */
    public Optional<Output<List<AclTokenNodeIdentityArgs>>> nodeIdentities() {
        return Optional.ofNullable(this.nodeIdentities);
    }

    /**
     * The partition the ACL token is associated with.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return The partition the ACL token is associated with.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * The list of policies attached to the token.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<String>> policies;

    /**
     * @return The list of policies attached to the token.
     * 
     */
    public Optional<Output<List<String>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * The list of roles attached to the token.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return The list of roles attached to the token.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * The list of service identities that should be applied to the token.
     * 
     */
    @Import(name="serviceIdentities")
    private @Nullable Output<List<AclTokenServiceIdentityArgs>> serviceIdentities;

    /**
     * @return The list of service identities that should be applied to the token.
     * 
     */
    public Optional<Output<List<AclTokenServiceIdentityArgs>>> serviceIdentities() {
        return Optional.ofNullable(this.serviceIdentities);
    }

    /**
     * The list of templated policies that should be applied to the token.
     * 
     */
    @Import(name="templatedPolicies")
    private @Nullable Output<List<AclTokenTemplatedPolicyArgs>> templatedPolicies;

    /**
     * @return The list of templated policies that should be applied to the token.
     * 
     */
    public Optional<Output<List<AclTokenTemplatedPolicyArgs>>> templatedPolicies() {
        return Optional.ofNullable(this.templatedPolicies);
    }

    private AclTokenArgs() {}

    private AclTokenArgs(AclTokenArgs $) {
        this.accessorId = $.accessorId;
        this.description = $.description;
        this.expirationTime = $.expirationTime;
        this.local = $.local;
        this.namespace = $.namespace;
        this.nodeIdentities = $.nodeIdentities;
        this.partition = $.partition;
        this.policies = $.policies;
        this.roles = $.roles;
        this.serviceIdentities = $.serviceIdentities;
        this.templatedPolicies = $.templatedPolicies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclTokenArgs $;

        public Builder() {
            $ = new AclTokenArgs();
        }

        public Builder(AclTokenArgs defaults) {
            $ = new AclTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessorId The uuid of the token. If omitted, Consul will generate a random uuid.
         * 
         * @return builder
         * 
         */
        public Builder accessorId(@Nullable Output<String> accessorId) {
            $.accessorId = accessorId;
            return this;
        }

        /**
         * @param accessorId The uuid of the token. If omitted, Consul will generate a random uuid.
         * 
         * @return builder
         * 
         */
        public Builder accessorId(String accessorId) {
            return accessorId(Output.of(accessorId));
        }

        /**
         * @param description The description of the token.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the token.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expirationTime If set this represents the point after which a token should be considered revoked and is eligible for destruction.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(@Nullable Output<String> expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param expirationTime If set this represents the point after which a token should be considered revoked and is eligible for destruction.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(String expirationTime) {
            return expirationTime(Output.of(expirationTime));
        }

        /**
         * @param local The flag to set the token local to the current datacenter.
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<Boolean> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local The flag to set the token local to the current datacenter.
         * 
         * @return builder
         * 
         */
        public Builder local(Boolean local) {
            return local(Output.of(local));
        }

        /**
         * @param namespace The namespace to create the token within.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to create the token within.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param nodeIdentities The list of node identities that should be applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder nodeIdentities(@Nullable Output<List<AclTokenNodeIdentityArgs>> nodeIdentities) {
            $.nodeIdentities = nodeIdentities;
            return this;
        }

        /**
         * @param nodeIdentities The list of node identities that should be applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder nodeIdentities(List<AclTokenNodeIdentityArgs> nodeIdentities) {
            return nodeIdentities(Output.of(nodeIdentities));
        }

        /**
         * @param nodeIdentities The list of node identities that should be applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder nodeIdentities(AclTokenNodeIdentityArgs... nodeIdentities) {
            return nodeIdentities(List.of(nodeIdentities));
        }

        /**
         * @param partition The partition the ACL token is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition The partition the ACL token is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param policies The list of policies attached to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<String>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies The list of policies attached to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<String> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies The list of policies attached to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param roles The list of roles attached to the token.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles The list of roles attached to the token.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles The list of roles attached to the token.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param serviceIdentities The list of service identities that should be applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder serviceIdentities(@Nullable Output<List<AclTokenServiceIdentityArgs>> serviceIdentities) {
            $.serviceIdentities = serviceIdentities;
            return this;
        }

        /**
         * @param serviceIdentities The list of service identities that should be applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder serviceIdentities(List<AclTokenServiceIdentityArgs> serviceIdentities) {
            return serviceIdentities(Output.of(serviceIdentities));
        }

        /**
         * @param serviceIdentities The list of service identities that should be applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder serviceIdentities(AclTokenServiceIdentityArgs... serviceIdentities) {
            return serviceIdentities(List.of(serviceIdentities));
        }

        /**
         * @param templatedPolicies The list of templated policies that should be applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder templatedPolicies(@Nullable Output<List<AclTokenTemplatedPolicyArgs>> templatedPolicies) {
            $.templatedPolicies = templatedPolicies;
            return this;
        }

        /**
         * @param templatedPolicies The list of templated policies that should be applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder templatedPolicies(List<AclTokenTemplatedPolicyArgs> templatedPolicies) {
            return templatedPolicies(Output.of(templatedPolicies));
        }

        /**
         * @param templatedPolicies The list of templated policies that should be applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder templatedPolicies(AclTokenTemplatedPolicyArgs... templatedPolicies) {
            return templatedPolicies(List.of(templatedPolicies));
        }

        public AclTokenArgs build() {
            return $;
        }
    }

}
