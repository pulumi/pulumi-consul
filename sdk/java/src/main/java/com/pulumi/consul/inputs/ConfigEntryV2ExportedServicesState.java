// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryV2ExportedServicesState extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryV2ExportedServicesState Empty = new ConfigEntryV2ExportedServicesState();

    /**
     * The kind of exported services config (ExportedServices, NamespaceExportedServices, PartitionExportedServices).
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return The kind of exported services config (ExportedServices, NamespaceExportedServices, PartitionExportedServices).
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The name of the config entry to read.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the config entry to read.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace the config entry is associated with.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace the config entry is associated with.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The partition the config entry is associated with.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return The partition the config entry is associated with.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * The exported service partition consumers.
     * 
     */
    @Import(name="partitionConsumers")
    private @Nullable Output<List<String>> partitionConsumers;

    /**
     * @return The exported service partition consumers.
     * 
     */
    public Optional<Output<List<String>>> partitionConsumers() {
        return Optional.ofNullable(this.partitionConsumers);
    }

    /**
     * The exported service peer consumers.
     * 
     */
    @Import(name="peerConsumers")
    private @Nullable Output<List<String>> peerConsumers;

    /**
     * @return The exported service peer consumers.
     * 
     */
    public Optional<Output<List<String>>> peerConsumers() {
        return Optional.ofNullable(this.peerConsumers);
    }

    /**
     * The exported service sameness group consumers.
     * 
     */
    @Import(name="samenessGroupConsumers")
    private @Nullable Output<List<String>> samenessGroupConsumers;

    /**
     * @return The exported service sameness group consumers.
     * 
     */
    public Optional<Output<List<String>>> samenessGroupConsumers() {
        return Optional.ofNullable(this.samenessGroupConsumers);
    }

    /**
     * The exported services.
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<String>> services;

    /**
     * @return The exported services.
     * 
     */
    public Optional<Output<List<String>>> services() {
        return Optional.ofNullable(this.services);
    }

    private ConfigEntryV2ExportedServicesState() {}

    private ConfigEntryV2ExportedServicesState(ConfigEntryV2ExportedServicesState $) {
        this.kind = $.kind;
        this.name = $.name;
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.partitionConsumers = $.partitionConsumers;
        this.peerConsumers = $.peerConsumers;
        this.samenessGroupConsumers = $.samenessGroupConsumers;
        this.services = $.services;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryV2ExportedServicesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryV2ExportedServicesState $;

        public Builder() {
            $ = new ConfigEntryV2ExportedServicesState();
        }

        public Builder(ConfigEntryV2ExportedServicesState defaults) {
            $ = new ConfigEntryV2ExportedServicesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param kind The kind of exported services config (ExportedServices, NamespaceExportedServices, PartitionExportedServices).
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind The kind of exported services config (ExportedServices, NamespaceExportedServices, PartitionExportedServices).
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name The name of the config entry to read.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the config entry to read.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace the config entry is associated with.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace the config entry is associated with.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition The partition the config entry is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition The partition the config entry is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param partitionConsumers The exported service partition consumers.
         * 
         * @return builder
         * 
         */
        public Builder partitionConsumers(@Nullable Output<List<String>> partitionConsumers) {
            $.partitionConsumers = partitionConsumers;
            return this;
        }

        /**
         * @param partitionConsumers The exported service partition consumers.
         * 
         * @return builder
         * 
         */
        public Builder partitionConsumers(List<String> partitionConsumers) {
            return partitionConsumers(Output.of(partitionConsumers));
        }

        /**
         * @param partitionConsumers The exported service partition consumers.
         * 
         * @return builder
         * 
         */
        public Builder partitionConsumers(String... partitionConsumers) {
            return partitionConsumers(List.of(partitionConsumers));
        }

        /**
         * @param peerConsumers The exported service peer consumers.
         * 
         * @return builder
         * 
         */
        public Builder peerConsumers(@Nullable Output<List<String>> peerConsumers) {
            $.peerConsumers = peerConsumers;
            return this;
        }

        /**
         * @param peerConsumers The exported service peer consumers.
         * 
         * @return builder
         * 
         */
        public Builder peerConsumers(List<String> peerConsumers) {
            return peerConsumers(Output.of(peerConsumers));
        }

        /**
         * @param peerConsumers The exported service peer consumers.
         * 
         * @return builder
         * 
         */
        public Builder peerConsumers(String... peerConsumers) {
            return peerConsumers(List.of(peerConsumers));
        }

        /**
         * @param samenessGroupConsumers The exported service sameness group consumers.
         * 
         * @return builder
         * 
         */
        public Builder samenessGroupConsumers(@Nullable Output<List<String>> samenessGroupConsumers) {
            $.samenessGroupConsumers = samenessGroupConsumers;
            return this;
        }

        /**
         * @param samenessGroupConsumers The exported service sameness group consumers.
         * 
         * @return builder
         * 
         */
        public Builder samenessGroupConsumers(List<String> samenessGroupConsumers) {
            return samenessGroupConsumers(Output.of(samenessGroupConsumers));
        }

        /**
         * @param samenessGroupConsumers The exported service sameness group consumers.
         * 
         * @return builder
         * 
         */
        public Builder samenessGroupConsumers(String... samenessGroupConsumers) {
            return samenessGroupConsumers(List.of(samenessGroupConsumers));
        }

        /**
         * @param services The exported services.
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<String>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services The exported services.
         * 
         * @return builder
         * 
         */
        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        /**
         * @param services The exported services.
         * 
         * @return builder
         * 
         */
        public Builder services(String... services) {
            return services(List.of(services));
        }

        public ConfigEntryV2ExportedServicesState build() {
            return $;
        }
    }

}
