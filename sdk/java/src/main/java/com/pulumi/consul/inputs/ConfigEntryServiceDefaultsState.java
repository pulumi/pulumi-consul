// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.ConfigEntryServiceDefaultsDestinationArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceDefaultsEnvoyExtensionArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceDefaultsExposeArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceDefaultsMeshGatewayArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceDefaultsTransparentProxyArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceDefaultsUpstreamConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceDefaultsState extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceDefaultsState Empty = new ConfigEntryServiceDefaultsState();

    /**
     * Specifies the strategy for allocating inbound connections to the service across Envoy proxy threads.
     * 
     */
    @Import(name="balanceInboundConnections")
    private @Nullable Output<String> balanceInboundConnections;

    /**
     * @return Specifies the strategy for allocating inbound connections to the service across Envoy proxy threads.
     * 
     */
    public Optional<Output<String>> balanceInboundConnections() {
        return Optional.ofNullable(this.balanceInboundConnections);
    }

    /**
     * Configures the destination for service traffic through terminating gateways.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<List<ConfigEntryServiceDefaultsDestinationArgs>> destinations;

    /**
     * @return Configures the destination for service traffic through terminating gateways.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceDefaultsDestinationArgs>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * List of extensions to modify Envoy proxy configuration.
     * 
     */
    @Import(name="envoyExtensions")
    private @Nullable Output<List<ConfigEntryServiceDefaultsEnvoyExtensionArgs>> envoyExtensions;

    /**
     * @return List of extensions to modify Envoy proxy configuration.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceDefaultsEnvoyExtensionArgs>>> envoyExtensions() {
        return Optional.ofNullable(this.envoyExtensions);
    }

    /**
     * Specifies default configurations for exposing HTTP paths through Envoy.
     * 
     */
    @Import(name="exposes")
    private @Nullable Output<List<ConfigEntryServiceDefaultsExposeArgs>> exposes;

    /**
     * @return Specifies default configurations for exposing HTTP paths through Envoy.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceDefaultsExposeArgs>>> exposes() {
        return Optional.ofNullable(this.exposes);
    }

    /**
     * Specifies the TLS server name indication (SNI) when federating with an external system.
     * 
     */
    @Import(name="externalSni")
    private @Nullable Output<String> externalSni;

    /**
     * @return Specifies the TLS server name indication (SNI) when federating with an external system.
     * 
     */
    public Optional<Output<String>> externalSni() {
        return Optional.ofNullable(this.externalSni);
    }

    /**
     * Specifies the number of milliseconds allowed for establishing connections to the local application instance before timing out.
     * 
     */
    @Import(name="localConnectTimeoutMs")
    private @Nullable Output<Integer> localConnectTimeoutMs;

    /**
     * @return Specifies the number of milliseconds allowed for establishing connections to the local application instance before timing out.
     * 
     */
    public Optional<Output<Integer>> localConnectTimeoutMs() {
        return Optional.ofNullable(this.localConnectTimeoutMs);
    }

    /**
     * Specifies the timeout for HTTP requests to the local application instance.
     * 
     */
    @Import(name="localRequestTimeoutMs")
    private @Nullable Output<Integer> localRequestTimeoutMs;

    /**
     * @return Specifies the timeout for HTTP requests to the local application instance.
     * 
     */
    public Optional<Output<Integer>> localRequestTimeoutMs() {
        return Optional.ofNullable(this.localRequestTimeoutMs);
    }

    /**
     * Specifies the maximum number of concurrent inbound connections to each service instance.
     * 
     */
    @Import(name="maxInboundConnections")
    private @Nullable Output<Integer> maxInboundConnections;

    /**
     * @return Specifies the maximum number of concurrent inbound connections to each service instance.
     * 
     */
    public Optional<Output<Integer>> maxInboundConnections() {
        return Optional.ofNullable(this.maxInboundConnections);
    }

    /**
     * Specifies the default mesh gateway mode field for all upstreams.
     * 
     */
    @Import(name="meshGateways")
    private @Nullable Output<List<ConfigEntryServiceDefaultsMeshGatewayArgs>> meshGateways;

    /**
     * @return Specifies the default mesh gateway mode field for all upstreams.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceDefaultsMeshGatewayArgs>>> meshGateways() {
        return Optional.ofNullable(this.meshGateways);
    }

    /**
     * Specifies a set of custom key-value pairs to add to the Consul KV store.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<Map<String,String>> meta;

    /**
     * @return Specifies a set of custom key-value pairs to add to the Consul KV store.
     * 
     */
    public Optional<Output<Map<String,String>>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * Specifies a mode for how the service directs inbound and outbound traffic.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Specifies a mode for how the service directs inbound and outbound traffic.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Controls whether mutual TLS is required for incoming connections to this service. This setting is only supported for services with transparent proxy enabled.
     * 
     */
    @Import(name="mutualTlsMode")
    private @Nullable Output<String> mutualTlsMode;

    /**
     * @return Controls whether mutual TLS is required for incoming connections to this service. This setting is only supported for services with transparent proxy enabled.
     * 
     */
    public Optional<Output<String>> mutualTlsMode() {
        return Optional.ofNullable(this.mutualTlsMode);
    }

    /**
     * Specifies the name of the service you are setting the defaults for.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the service you are setting the defaults for.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the namespace containing the upstream service that the configuration applies to.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Specifies the namespace containing the upstream service that the configuration applies to.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Specifies the default protocol for the service.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Specifies the default protocol for the service.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Controls configurations specific to proxies in transparent mode. Refer to Transparent Proxy Mode for additional information.
     * 
     */
    @Import(name="transparentProxies")
    private @Nullable Output<List<ConfigEntryServiceDefaultsTransparentProxyArgs>> transparentProxies;

    /**
     * @return Controls configurations specific to proxies in transparent mode. Refer to Transparent Proxy Mode for additional information.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceDefaultsTransparentProxyArgs>>> transparentProxies() {
        return Optional.ofNullable(this.transparentProxies);
    }

    /**
     * Controls default upstream connection settings and custom overrides for individual upstream services.
     * 
     */
    @Import(name="upstreamConfigs")
    private @Nullable Output<List<ConfigEntryServiceDefaultsUpstreamConfigArgs>> upstreamConfigs;

    /**
     * @return Controls default upstream connection settings and custom overrides for individual upstream services.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceDefaultsUpstreamConfigArgs>>> upstreamConfigs() {
        return Optional.ofNullable(this.upstreamConfigs);
    }

    private ConfigEntryServiceDefaultsState() {}

    private ConfigEntryServiceDefaultsState(ConfigEntryServiceDefaultsState $) {
        this.balanceInboundConnections = $.balanceInboundConnections;
        this.destinations = $.destinations;
        this.envoyExtensions = $.envoyExtensions;
        this.exposes = $.exposes;
        this.externalSni = $.externalSni;
        this.localConnectTimeoutMs = $.localConnectTimeoutMs;
        this.localRequestTimeoutMs = $.localRequestTimeoutMs;
        this.maxInboundConnections = $.maxInboundConnections;
        this.meshGateways = $.meshGateways;
        this.meta = $.meta;
        this.mode = $.mode;
        this.mutualTlsMode = $.mutualTlsMode;
        this.name = $.name;
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.protocol = $.protocol;
        this.transparentProxies = $.transparentProxies;
        this.upstreamConfigs = $.upstreamConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceDefaultsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceDefaultsState $;

        public Builder() {
            $ = new ConfigEntryServiceDefaultsState();
        }

        public Builder(ConfigEntryServiceDefaultsState defaults) {
            $ = new ConfigEntryServiceDefaultsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param balanceInboundConnections Specifies the strategy for allocating inbound connections to the service across Envoy proxy threads.
         * 
         * @return builder
         * 
         */
        public Builder balanceInboundConnections(@Nullable Output<String> balanceInboundConnections) {
            $.balanceInboundConnections = balanceInboundConnections;
            return this;
        }

        /**
         * @param balanceInboundConnections Specifies the strategy for allocating inbound connections to the service across Envoy proxy threads.
         * 
         * @return builder
         * 
         */
        public Builder balanceInboundConnections(String balanceInboundConnections) {
            return balanceInboundConnections(Output.of(balanceInboundConnections));
        }

        /**
         * @param destinations Configures the destination for service traffic through terminating gateways.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<List<ConfigEntryServiceDefaultsDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations Configures the destination for service traffic through terminating gateways.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<ConfigEntryServiceDefaultsDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations Configures the destination for service traffic through terminating gateways.
         * 
         * @return builder
         * 
         */
        public Builder destinations(ConfigEntryServiceDefaultsDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param envoyExtensions List of extensions to modify Envoy proxy configuration.
         * 
         * @return builder
         * 
         */
        public Builder envoyExtensions(@Nullable Output<List<ConfigEntryServiceDefaultsEnvoyExtensionArgs>> envoyExtensions) {
            $.envoyExtensions = envoyExtensions;
            return this;
        }

        /**
         * @param envoyExtensions List of extensions to modify Envoy proxy configuration.
         * 
         * @return builder
         * 
         */
        public Builder envoyExtensions(List<ConfigEntryServiceDefaultsEnvoyExtensionArgs> envoyExtensions) {
            return envoyExtensions(Output.of(envoyExtensions));
        }

        /**
         * @param envoyExtensions List of extensions to modify Envoy proxy configuration.
         * 
         * @return builder
         * 
         */
        public Builder envoyExtensions(ConfigEntryServiceDefaultsEnvoyExtensionArgs... envoyExtensions) {
            return envoyExtensions(List.of(envoyExtensions));
        }

        /**
         * @param exposes Specifies default configurations for exposing HTTP paths through Envoy.
         * 
         * @return builder
         * 
         */
        public Builder exposes(@Nullable Output<List<ConfigEntryServiceDefaultsExposeArgs>> exposes) {
            $.exposes = exposes;
            return this;
        }

        /**
         * @param exposes Specifies default configurations for exposing HTTP paths through Envoy.
         * 
         * @return builder
         * 
         */
        public Builder exposes(List<ConfigEntryServiceDefaultsExposeArgs> exposes) {
            return exposes(Output.of(exposes));
        }

        /**
         * @param exposes Specifies default configurations for exposing HTTP paths through Envoy.
         * 
         * @return builder
         * 
         */
        public Builder exposes(ConfigEntryServiceDefaultsExposeArgs... exposes) {
            return exposes(List.of(exposes));
        }

        /**
         * @param externalSni Specifies the TLS server name indication (SNI) when federating with an external system.
         * 
         * @return builder
         * 
         */
        public Builder externalSni(@Nullable Output<String> externalSni) {
            $.externalSni = externalSni;
            return this;
        }

        /**
         * @param externalSni Specifies the TLS server name indication (SNI) when federating with an external system.
         * 
         * @return builder
         * 
         */
        public Builder externalSni(String externalSni) {
            return externalSni(Output.of(externalSni));
        }

        /**
         * @param localConnectTimeoutMs Specifies the number of milliseconds allowed for establishing connections to the local application instance before timing out.
         * 
         * @return builder
         * 
         */
        public Builder localConnectTimeoutMs(@Nullable Output<Integer> localConnectTimeoutMs) {
            $.localConnectTimeoutMs = localConnectTimeoutMs;
            return this;
        }

        /**
         * @param localConnectTimeoutMs Specifies the number of milliseconds allowed for establishing connections to the local application instance before timing out.
         * 
         * @return builder
         * 
         */
        public Builder localConnectTimeoutMs(Integer localConnectTimeoutMs) {
            return localConnectTimeoutMs(Output.of(localConnectTimeoutMs));
        }

        /**
         * @param localRequestTimeoutMs Specifies the timeout for HTTP requests to the local application instance.
         * 
         * @return builder
         * 
         */
        public Builder localRequestTimeoutMs(@Nullable Output<Integer> localRequestTimeoutMs) {
            $.localRequestTimeoutMs = localRequestTimeoutMs;
            return this;
        }

        /**
         * @param localRequestTimeoutMs Specifies the timeout for HTTP requests to the local application instance.
         * 
         * @return builder
         * 
         */
        public Builder localRequestTimeoutMs(Integer localRequestTimeoutMs) {
            return localRequestTimeoutMs(Output.of(localRequestTimeoutMs));
        }

        /**
         * @param maxInboundConnections Specifies the maximum number of concurrent inbound connections to each service instance.
         * 
         * @return builder
         * 
         */
        public Builder maxInboundConnections(@Nullable Output<Integer> maxInboundConnections) {
            $.maxInboundConnections = maxInboundConnections;
            return this;
        }

        /**
         * @param maxInboundConnections Specifies the maximum number of concurrent inbound connections to each service instance.
         * 
         * @return builder
         * 
         */
        public Builder maxInboundConnections(Integer maxInboundConnections) {
            return maxInboundConnections(Output.of(maxInboundConnections));
        }

        /**
         * @param meshGateways Specifies the default mesh gateway mode field for all upstreams.
         * 
         * @return builder
         * 
         */
        public Builder meshGateways(@Nullable Output<List<ConfigEntryServiceDefaultsMeshGatewayArgs>> meshGateways) {
            $.meshGateways = meshGateways;
            return this;
        }

        /**
         * @param meshGateways Specifies the default mesh gateway mode field for all upstreams.
         * 
         * @return builder
         * 
         */
        public Builder meshGateways(List<ConfigEntryServiceDefaultsMeshGatewayArgs> meshGateways) {
            return meshGateways(Output.of(meshGateways));
        }

        /**
         * @param meshGateways Specifies the default mesh gateway mode field for all upstreams.
         * 
         * @return builder
         * 
         */
        public Builder meshGateways(ConfigEntryServiceDefaultsMeshGatewayArgs... meshGateways) {
            return meshGateways(List.of(meshGateways));
        }

        /**
         * @param meta Specifies a set of custom key-value pairs to add to the Consul KV store.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<Map<String,String>> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Specifies a set of custom key-value pairs to add to the Consul KV store.
         * 
         * @return builder
         * 
         */
        public Builder meta(Map<String,String> meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param mode Specifies a mode for how the service directs inbound and outbound traffic.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Specifies a mode for how the service directs inbound and outbound traffic.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param mutualTlsMode Controls whether mutual TLS is required for incoming connections to this service. This setting is only supported for services with transparent proxy enabled.
         * 
         * @return builder
         * 
         */
        public Builder mutualTlsMode(@Nullable Output<String> mutualTlsMode) {
            $.mutualTlsMode = mutualTlsMode;
            return this;
        }

        /**
         * @param mutualTlsMode Controls whether mutual TLS is required for incoming connections to this service. This setting is only supported for services with transparent proxy enabled.
         * 
         * @return builder
         * 
         */
        public Builder mutualTlsMode(String mutualTlsMode) {
            return mutualTlsMode(Output.of(mutualTlsMode));
        }

        /**
         * @param name Specifies the name of the service you are setting the defaults for.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the service you are setting the defaults for.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Specifies the namespace containing the upstream service that the configuration applies to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Specifies the namespace containing the upstream service that the configuration applies to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param protocol Specifies the default protocol for the service.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Specifies the default protocol for the service.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param transparentProxies Controls configurations specific to proxies in transparent mode. Refer to Transparent Proxy Mode for additional information.
         * 
         * @return builder
         * 
         */
        public Builder transparentProxies(@Nullable Output<List<ConfigEntryServiceDefaultsTransparentProxyArgs>> transparentProxies) {
            $.transparentProxies = transparentProxies;
            return this;
        }

        /**
         * @param transparentProxies Controls configurations specific to proxies in transparent mode. Refer to Transparent Proxy Mode for additional information.
         * 
         * @return builder
         * 
         */
        public Builder transparentProxies(List<ConfigEntryServiceDefaultsTransparentProxyArgs> transparentProxies) {
            return transparentProxies(Output.of(transparentProxies));
        }

        /**
         * @param transparentProxies Controls configurations specific to proxies in transparent mode. Refer to Transparent Proxy Mode for additional information.
         * 
         * @return builder
         * 
         */
        public Builder transparentProxies(ConfigEntryServiceDefaultsTransparentProxyArgs... transparentProxies) {
            return transparentProxies(List.of(transparentProxies));
        }

        /**
         * @param upstreamConfigs Controls default upstream connection settings and custom overrides for individual upstream services.
         * 
         * @return builder
         * 
         */
        public Builder upstreamConfigs(@Nullable Output<List<ConfigEntryServiceDefaultsUpstreamConfigArgs>> upstreamConfigs) {
            $.upstreamConfigs = upstreamConfigs;
            return this;
        }

        /**
         * @param upstreamConfigs Controls default upstream connection settings and custom overrides for individual upstream services.
         * 
         * @return builder
         * 
         */
        public Builder upstreamConfigs(List<ConfigEntryServiceDefaultsUpstreamConfigArgs> upstreamConfigs) {
            return upstreamConfigs(Output.of(upstreamConfigs));
        }

        /**
         * @param upstreamConfigs Controls default upstream connection settings and custom overrides for individual upstream services.
         * 
         * @return builder
         * 
         */
        public Builder upstreamConfigs(ConfigEntryServiceDefaultsUpstreamConfigArgs... upstreamConfigs) {
            return upstreamConfigs(List.of(upstreamConfigs));
        }

        public ConfigEntryServiceDefaultsState build() {
            return $;
        }
    }

}
