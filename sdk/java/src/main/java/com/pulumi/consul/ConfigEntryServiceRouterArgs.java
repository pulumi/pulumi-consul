// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.inputs.ConfigEntryServiceRouterRouteArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceRouterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceRouterArgs Empty = new ConfigEntryServiceRouterArgs();

    /**
     * Specifies key-value pairs to add to the KV store.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<Map<String,String>> meta;

    /**
     * @return Specifies key-value pairs to add to the KV store.
     * 
     */
    public Optional<Output<Map<String,String>>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * Specifies a name for the configuration entry.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies a name for the configuration entry.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the namespace to apply the configuration entry.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Specifies the namespace to apply the configuration entry.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the admin partition to apply the configuration entry.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Specifies the admin partition to apply the configuration entry.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Defines the possible routes for L7 requests.
     * 
     */
    @Import(name="routes")
    private @Nullable Output<List<ConfigEntryServiceRouterRouteArgs>> routes;

    /**
     * @return Defines the possible routes for L7 requests.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceRouterRouteArgs>>> routes() {
        return Optional.ofNullable(this.routes);
    }

    private ConfigEntryServiceRouterArgs() {}

    private ConfigEntryServiceRouterArgs(ConfigEntryServiceRouterArgs $) {
        this.meta = $.meta;
        this.name = $.name;
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.routes = $.routes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceRouterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceRouterArgs $;

        public Builder() {
            $ = new ConfigEntryServiceRouterArgs();
        }

        public Builder(ConfigEntryServiceRouterArgs defaults) {
            $ = new ConfigEntryServiceRouterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param meta Specifies key-value pairs to add to the KV store.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<Map<String,String>> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Specifies key-value pairs to add to the KV store.
         * 
         * @return builder
         * 
         */
        public Builder meta(Map<String,String> meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param name Specifies a name for the configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies a name for the configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Specifies the namespace to apply the configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Specifies the namespace to apply the configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition Specifies the admin partition to apply the configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Specifies the admin partition to apply the configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param routes Defines the possible routes for L7 requests.
         * 
         * @return builder
         * 
         */
        public Builder routes(@Nullable Output<List<ConfigEntryServiceRouterRouteArgs>> routes) {
            $.routes = routes;
            return this;
        }

        /**
         * @param routes Defines the possible routes for L7 requests.
         * 
         * @return builder
         * 
         */
        public Builder routes(List<ConfigEntryServiceRouterRouteArgs> routes) {
            return routes(Output.of(routes));
        }

        /**
         * @param routes Defines the possible routes for L7 requests.
         * 
         * @return builder
         * 
         */
        public Builder routes(ConfigEntryServiceRouterRouteArgs... routes) {
            return routes(List.of(routes));
        }

        public ConfigEntryServiceRouterArgs build() {
            return $;
        }
    }

}
