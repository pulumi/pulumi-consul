// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.ConfigEntryServiceRouterRouteDestinationRequestHeadersArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceRouterRouteDestinationResponseHeadersArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceRouterRouteDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceRouterRouteDestinationArgs Empty = new ConfigEntryServiceRouterRouteDestinationArgs();

    /**
     * Specifies the total amount of time permitted for the request stream to be idle.
     * 
     */
    @Import(name="idleTimeout")
    private @Nullable Output<String> idleTimeout;

    /**
     * @return Specifies the total amount of time permitted for the request stream to be idle.
     * 
     */
    public Optional<Output<String>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    /**
     * Specifies the Consul namespace to resolve the service from instead of the current namespace.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Specifies the Consul namespace to resolve the service from instead of the current namespace.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the number of times to retry the request when a retry condition occurs.
     * 
     */
    @Import(name="numRetries")
    private @Nullable Output<Integer> numRetries;

    /**
     * @return Specifies the number of times to retry the request when a retry condition occurs.
     * 
     */
    public Optional<Output<Integer>> numRetries() {
        return Optional.ofNullable(this.numRetries);
    }

    /**
     * Specifies the Consul admin partition to resolve the service from instead of the current partition.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Specifies the Consul admin partition to resolve the service from instead of the current partition.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Specifies rewrites to the HTTP request path before proxying it to its final destination.
     * 
     */
    @Import(name="prefixRewrite")
    private @Nullable Output<String> prefixRewrite;

    /**
     * @return Specifies rewrites to the HTTP request path before proxying it to its final destination.
     * 
     */
    public Optional<Output<String>> prefixRewrite() {
        return Optional.ofNullable(this.prefixRewrite);
    }

    /**
     * Specifies a set of HTTP-specific header modification rules applied to requests routed with the service router.
     * 
     */
    @Import(name="requestHeaders")
    private @Nullable Output<ConfigEntryServiceRouterRouteDestinationRequestHeadersArgs> requestHeaders;

    /**
     * @return Specifies a set of HTTP-specific header modification rules applied to requests routed with the service router.
     * 
     */
    public Optional<Output<ConfigEntryServiceRouterRouteDestinationRequestHeadersArgs>> requestHeaders() {
        return Optional.ofNullable(this.requestHeaders);
    }

    /**
     * Specifies the total amount of time permitted for the entire downstream request to be processed, including retry attempts.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Output<String> requestTimeout;

    /**
     * @return Specifies the total amount of time permitted for the entire downstream request to be processed, including retry attempts.
     * 
     */
    public Optional<Output<String>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * Specifies a set of HTTP-specific header modification rules applied to responses routed with the service router.
     * 
     */
    @Import(name="responseHeaders")
    private @Nullable Output<ConfigEntryServiceRouterRouteDestinationResponseHeadersArgs> responseHeaders;

    /**
     * @return Specifies a set of HTTP-specific header modification rules applied to responses routed with the service router.
     * 
     */
    public Optional<Output<ConfigEntryServiceRouterRouteDestinationResponseHeadersArgs>> responseHeaders() {
        return Optional.ofNullable(this.responseHeaders);
    }

    /**
     * Specifies that connection failure errors that trigger a retry request.
     * 
     */
    @Import(name="retryOnConnectFailure")
    private @Nullable Output<Boolean> retryOnConnectFailure;

    /**
     * @return Specifies that connection failure errors that trigger a retry request.
     * 
     */
    public Optional<Output<Boolean>> retryOnConnectFailure() {
        return Optional.ofNullable(this.retryOnConnectFailure);
    }

    /**
     * Specifies a list of integers for HTTP response status codes that trigger a retry request.
     * 
     */
    @Import(name="retryOnStatusCodes")
    private @Nullable Output<List<Integer>> retryOnStatusCodes;

    /**
     * @return Specifies a list of integers for HTTP response status codes that trigger a retry request.
     * 
     */
    public Optional<Output<List<Integer>>> retryOnStatusCodes() {
        return Optional.ofNullable(this.retryOnStatusCodes);
    }

    /**
     * Specifies a list of conditions for Consul to retry requests based on the response from an upstream service.
     * 
     */
    @Import(name="retryOns")
    private @Nullable Output<List<String>> retryOns;

    /**
     * @return Specifies a list of conditions for Consul to retry requests based on the response from an upstream service.
     * 
     */
    public Optional<Output<List<String>>> retryOns() {
        return Optional.ofNullable(this.retryOns);
    }

    /**
     * Specifies the name of the service to resolve.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Specifies the name of the service to resolve.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * Specifies a named subset of the given service to resolve instead of the one defined as that service&#39;s `default_subset` in the service resolver configuration entry.
     * 
     */
    @Import(name="serviceSubset")
    private @Nullable Output<String> serviceSubset;

    /**
     * @return Specifies a named subset of the given service to resolve instead of the one defined as that service&#39;s `default_subset` in the service resolver configuration entry.
     * 
     */
    public Optional<Output<String>> serviceSubset() {
        return Optional.ofNullable(this.serviceSubset);
    }

    private ConfigEntryServiceRouterRouteDestinationArgs() {}

    private ConfigEntryServiceRouterRouteDestinationArgs(ConfigEntryServiceRouterRouteDestinationArgs $) {
        this.idleTimeout = $.idleTimeout;
        this.namespace = $.namespace;
        this.numRetries = $.numRetries;
        this.partition = $.partition;
        this.prefixRewrite = $.prefixRewrite;
        this.requestHeaders = $.requestHeaders;
        this.requestTimeout = $.requestTimeout;
        this.responseHeaders = $.responseHeaders;
        this.retryOnConnectFailure = $.retryOnConnectFailure;
        this.retryOnStatusCodes = $.retryOnStatusCodes;
        this.retryOns = $.retryOns;
        this.service = $.service;
        this.serviceSubset = $.serviceSubset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceRouterRouteDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceRouterRouteDestinationArgs $;

        public Builder() {
            $ = new ConfigEntryServiceRouterRouteDestinationArgs();
        }

        public Builder(ConfigEntryServiceRouterRouteDestinationArgs defaults) {
            $ = new ConfigEntryServiceRouterRouteDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param idleTimeout Specifies the total amount of time permitted for the request stream to be idle.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(@Nullable Output<String> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        /**
         * @param idleTimeout Specifies the total amount of time permitted for the request stream to be idle.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(String idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        /**
         * @param namespace Specifies the Consul namespace to resolve the service from instead of the current namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Specifies the Consul namespace to resolve the service from instead of the current namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param numRetries Specifies the number of times to retry the request when a retry condition occurs.
         * 
         * @return builder
         * 
         */
        public Builder numRetries(@Nullable Output<Integer> numRetries) {
            $.numRetries = numRetries;
            return this;
        }

        /**
         * @param numRetries Specifies the number of times to retry the request when a retry condition occurs.
         * 
         * @return builder
         * 
         */
        public Builder numRetries(Integer numRetries) {
            return numRetries(Output.of(numRetries));
        }

        /**
         * @param partition Specifies the Consul admin partition to resolve the service from instead of the current partition.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Specifies the Consul admin partition to resolve the service from instead of the current partition.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param prefixRewrite Specifies rewrites to the HTTP request path before proxying it to its final destination.
         * 
         * @return builder
         * 
         */
        public Builder prefixRewrite(@Nullable Output<String> prefixRewrite) {
            $.prefixRewrite = prefixRewrite;
            return this;
        }

        /**
         * @param prefixRewrite Specifies rewrites to the HTTP request path before proxying it to its final destination.
         * 
         * @return builder
         * 
         */
        public Builder prefixRewrite(String prefixRewrite) {
            return prefixRewrite(Output.of(prefixRewrite));
        }

        /**
         * @param requestHeaders Specifies a set of HTTP-specific header modification rules applied to requests routed with the service router.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(@Nullable Output<ConfigEntryServiceRouterRouteDestinationRequestHeadersArgs> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * @param requestHeaders Specifies a set of HTTP-specific header modification rules applied to requests routed with the service router.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(ConfigEntryServiceRouterRouteDestinationRequestHeadersArgs requestHeaders) {
            return requestHeaders(Output.of(requestHeaders));
        }

        /**
         * @param requestTimeout Specifies the total amount of time permitted for the entire downstream request to be processed, including retry attempts.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Output<String> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param requestTimeout Specifies the total amount of time permitted for the entire downstream request to be processed, including retry attempts.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(String requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        /**
         * @param responseHeaders Specifies a set of HTTP-specific header modification rules applied to responses routed with the service router.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaders(@Nullable Output<ConfigEntryServiceRouterRouteDestinationResponseHeadersArgs> responseHeaders) {
            $.responseHeaders = responseHeaders;
            return this;
        }

        /**
         * @param responseHeaders Specifies a set of HTTP-specific header modification rules applied to responses routed with the service router.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaders(ConfigEntryServiceRouterRouteDestinationResponseHeadersArgs responseHeaders) {
            return responseHeaders(Output.of(responseHeaders));
        }

        /**
         * @param retryOnConnectFailure Specifies that connection failure errors that trigger a retry request.
         * 
         * @return builder
         * 
         */
        public Builder retryOnConnectFailure(@Nullable Output<Boolean> retryOnConnectFailure) {
            $.retryOnConnectFailure = retryOnConnectFailure;
            return this;
        }

        /**
         * @param retryOnConnectFailure Specifies that connection failure errors that trigger a retry request.
         * 
         * @return builder
         * 
         */
        public Builder retryOnConnectFailure(Boolean retryOnConnectFailure) {
            return retryOnConnectFailure(Output.of(retryOnConnectFailure));
        }

        /**
         * @param retryOnStatusCodes Specifies a list of integers for HTTP response status codes that trigger a retry request.
         * 
         * @return builder
         * 
         */
        public Builder retryOnStatusCodes(@Nullable Output<List<Integer>> retryOnStatusCodes) {
            $.retryOnStatusCodes = retryOnStatusCodes;
            return this;
        }

        /**
         * @param retryOnStatusCodes Specifies a list of integers for HTTP response status codes that trigger a retry request.
         * 
         * @return builder
         * 
         */
        public Builder retryOnStatusCodes(List<Integer> retryOnStatusCodes) {
            return retryOnStatusCodes(Output.of(retryOnStatusCodes));
        }

        /**
         * @param retryOnStatusCodes Specifies a list of integers for HTTP response status codes that trigger a retry request.
         * 
         * @return builder
         * 
         */
        public Builder retryOnStatusCodes(Integer... retryOnStatusCodes) {
            return retryOnStatusCodes(List.of(retryOnStatusCodes));
        }

        /**
         * @param retryOns Specifies a list of conditions for Consul to retry requests based on the response from an upstream service.
         * 
         * @return builder
         * 
         */
        public Builder retryOns(@Nullable Output<List<String>> retryOns) {
            $.retryOns = retryOns;
            return this;
        }

        /**
         * @param retryOns Specifies a list of conditions for Consul to retry requests based on the response from an upstream service.
         * 
         * @return builder
         * 
         */
        public Builder retryOns(List<String> retryOns) {
            return retryOns(Output.of(retryOns));
        }

        /**
         * @param retryOns Specifies a list of conditions for Consul to retry requests based on the response from an upstream service.
         * 
         * @return builder
         * 
         */
        public Builder retryOns(String... retryOns) {
            return retryOns(List.of(retryOns));
        }

        /**
         * @param service Specifies the name of the service to resolve.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Specifies the name of the service to resolve.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceSubset Specifies a named subset of the given service to resolve instead of the one defined as that service&#39;s `default_subset` in the service resolver configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(@Nullable Output<String> serviceSubset) {
            $.serviceSubset = serviceSubset;
            return this;
        }

        /**
         * @param serviceSubset Specifies a named subset of the given service to resolve instead of the one defined as that service&#39;s `default_subset` in the service resolver configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(String serviceSubset) {
            return serviceSubset(Output.of(serviceSubset));
        }

        public ConfigEntryServiceRouterRouteDestinationArgs build() {
            return $;
        }
    }

}
