// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceResolverFailoverTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceResolverFailoverTargetArgs Empty = new ConfigEntryServiceResolverFailoverTargetArgs();

    /**
     * Specifies the WAN federated datacenter to use for the failover target. If empty, the current datacenter is used.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return Specifies the WAN federated datacenter to use for the failover target. If empty, the current datacenter is used.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * Specifies the namespace at the failover location where the failover services are deployed.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Specifies the namespace at the failover location where the failover services are deployed.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Specifies the destination cluster peer to resolve the target service name from.
     * 
     */
    @Import(name="peer")
    private @Nullable Output<String> peer;

    /**
     * @return Specifies the destination cluster peer to resolve the target service name from.
     * 
     */
    public Optional<Output<String>> peer() {
        return Optional.ofNullable(this.peer);
    }

    /**
     * Specifies the name of the service to resolve at the failover location during a failover scenario.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Specifies the name of the service to resolve at the failover location during a failover scenario.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * Specifies the name of a subset of service instances to resolve at the failover location during a failover scenario.
     * 
     */
    @Import(name="serviceSubset")
    private @Nullable Output<String> serviceSubset;

    /**
     * @return Specifies the name of a subset of service instances to resolve at the failover location during a failover scenario.
     * 
     */
    public Optional<Output<String>> serviceSubset() {
        return Optional.ofNullable(this.serviceSubset);
    }

    private ConfigEntryServiceResolverFailoverTargetArgs() {}

    private ConfigEntryServiceResolverFailoverTargetArgs(ConfigEntryServiceResolverFailoverTargetArgs $) {
        this.datacenter = $.datacenter;
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.peer = $.peer;
        this.service = $.service;
        this.serviceSubset = $.serviceSubset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceResolverFailoverTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceResolverFailoverTargetArgs $;

        public Builder() {
            $ = new ConfigEntryServiceResolverFailoverTargetArgs();
        }

        public Builder(ConfigEntryServiceResolverFailoverTargetArgs defaults) {
            $ = new ConfigEntryServiceResolverFailoverTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenter Specifies the WAN federated datacenter to use for the failover target. If empty, the current datacenter is used.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter Specifies the WAN federated datacenter to use for the failover target. If empty, the current datacenter is used.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param namespace Specifies the namespace at the failover location where the failover services are deployed.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Specifies the namespace at the failover location where the failover services are deployed.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param peer Specifies the destination cluster peer to resolve the target service name from.
         * 
         * @return builder
         * 
         */
        public Builder peer(@Nullable Output<String> peer) {
            $.peer = peer;
            return this;
        }

        /**
         * @param peer Specifies the destination cluster peer to resolve the target service name from.
         * 
         * @return builder
         * 
         */
        public Builder peer(String peer) {
            return peer(Output.of(peer));
        }

        /**
         * @param service Specifies the name of the service to resolve at the failover location during a failover scenario.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Specifies the name of the service to resolve at the failover location during a failover scenario.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceSubset Specifies the name of a subset of service instances to resolve at the failover location during a failover scenario.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(@Nullable Output<String> serviceSubset) {
            $.serviceSubset = serviceSubset;
            return this;
        }

        /**
         * @param serviceSubset Specifies the name of a subset of service instances to resolve at the failover location during a failover scenario.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(String serviceSubset) {
            return serviceSubset(Output.of(serviceSubset));
        }

        public ConfigEntryServiceResolverFailoverTargetArgs build() {
            return $;
        }
    }

}
