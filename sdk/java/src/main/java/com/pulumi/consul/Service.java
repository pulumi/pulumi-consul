// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.ServiceArgs;
import com.pulumi.consul.Utilities;
import com.pulumi.consul.inputs.ServiceState;
import com.pulumi.consul.outputs.ServiceCheck;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A high-level resource for creating a Service in Consul in the Consul catalog. This
 * is appropriate for registering [external services](https://www.consul.io/docs/guides/external.html) and
 * can be used to create services addressable by Consul that cannot be registered
 * with a [local agent](https://www.consul.io/docs/agent/basics.html).
 * 
 * &gt; **NOTE:** If a Consul agent is running on the node where this service is
 * registered, it is not recommended to use this resource as the service will be
 * removed during the next [anti-entropy synchronization](https://www.consul.io/docs/architecture/anti-entropy).
 * 
 * ## Example Usage
 * 
 * Creating a new node with the service:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.Node;
 * import com.pulumi.consul.NodeArgs;
 * import com.pulumi.consul.Service;
 * import com.pulumi.consul.ServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var compute = new Node("compute", NodeArgs.builder()
 *             .name("compute-google")
 *             .address("www.google.com")
 *             .build());
 * 
 *         var google = new Service("google", ServiceArgs.builder()
 *             .name("google")
 *             .node(compute.name())
 *             .port(80)
 *             .tags("tag0")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Utilizing an existing known node:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.Service;
 * import com.pulumi.consul.ServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var google = new Service("google", ServiceArgs.builder()
 *             .name("google")
 *             .node("google")
 *             .port(443)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Register a health-check:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.Service;
 * import com.pulumi.consul.ServiceArgs;
 * import com.pulumi.consul.inputs.ServiceCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var redis = new Service("redis", ServiceArgs.builder()
 *             .name("redis")
 *             .node("redis")
 *             .port(6379)
 *             .checks(ServiceCheckArgs.builder()
 *                 .checkId("service:redis1")
 *                 .name("Redis health check")
 *                 .status("passing")
 *                 .http("https://www.hashicorptest.com")
 *                 .tlsSkipVerify(false)
 *                 .method("PUT")
 *                 .interval("5s")
 *                 .timeout("1s")
 *                 .deregisterCriticalServiceAfter("30s")
 *                 .headers(                
 *                     ServiceCheckHeaderArgs.builder()
 *                         .name("foo")
 *                         .values("test")
 *                         .build(),
 *                     ServiceCheckHeaderArgs.builder()
 *                         .name("bar")
 *                         .values("test")
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="consul:index/service:Service")
public class Service extends com.pulumi.resources.CustomResource {
    /**
     * The address of the service. Defaults to the address of the node.
     * 
     */
    @Export(name="address", refs={String.class}, tree="[0]")
    private Output<String> address;

    /**
     * @return The address of the service. Defaults to the address of the node.
     * 
     */
    public Output<String> address() {
        return this.address;
    }
    @Export(name="checks", refs={List.class,ServiceCheck.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceCheck>> checks;

    public Output<Optional<List<ServiceCheck>>> checks() {
        return Codegen.optional(this.checks);
    }
    /**
     * The datacenter to use. This overrides the agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    @Export(name="datacenter", refs={String.class}, tree="[0]")
    private Output<String> datacenter;

    /**
     * @return The datacenter to use. This overrides the agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    public Output<String> datacenter() {
        return this.datacenter;
    }
    /**
     * Specifies to disable the anti-entropy feature for this service&#39;s tags. Defaults to `false`.
     * 
     */
    @Export(name="enableTagOverride", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTagOverride;

    /**
     * @return Specifies to disable the anti-entropy feature for this service&#39;s tags. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> enableTagOverride() {
        return Codegen.optional(this.enableTagOverride);
    }
    /**
     * @deprecated
     * The external field has been deprecated and does nothing.
     * 
     */
    @Deprecated /* The external field has been deprecated and does nothing. */
    @Export(name="external", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> external;

    public Output<Optional<Boolean>> external() {
        return Codegen.optional(this.external);
    }
    /**
     * A map of arbitrary KV metadata linked to the service instance.
     * 
     */
    @Export(name="meta", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> meta;

    /**
     * @return A map of arbitrary KV metadata linked to the service instance.
     * 
     */
    public Output<Optional<Map<String,String>>> meta() {
        return Codegen.optional(this.meta);
    }
    /**
     * The name of the service.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the service.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The namespace to create the service within.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace to create the service within.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * The name of the node the to register the service on.
     * 
     */
    @Export(name="node", refs={String.class}, tree="[0]")
    private Output<String> node;

    /**
     * @return The name of the node the to register the service on.
     * 
     */
    public Output<String> node() {
        return this.node;
    }
    /**
     * The partition the service is associated with.
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return The partition the service is associated with.
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }
    /**
     * The port of the service.
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> port;

    /**
     * @return The port of the service.
     * 
     */
    public Output<Optional<Integer>> port() {
        return Codegen.optional(this.port);
    }
    /**
     * If the service ID is not provided, it will be defaulted to the value of the `name` attribute.
     * 
     */
    @Export(name="serviceId", refs={String.class}, tree="[0]")
    private Output<String> serviceId;

    /**
     * @return If the service ID is not provided, it will be defaulted to the value of the `name` attribute.
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }
    /**
     * A list of values that are opaque to Consul, but can be used to distinguish between services or nodes.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of values that are opaque to Consul, but can be used to distinguish between services or nodes.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Service(String name) {
        this(name, ServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Service(String name, ServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Service(String name, ServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/service:Service", name, args == null ? ServiceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Service(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/service:Service", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Service get(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Service(name, id, state, options);
    }
}
