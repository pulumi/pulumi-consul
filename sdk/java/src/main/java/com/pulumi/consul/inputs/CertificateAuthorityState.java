// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateAuthorityState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityState Empty = new CertificateAuthorityState();

    /**
     * @deprecated
     * The config attribute is deprecated, please use config_json instead.
     * 
     */
    @Deprecated /* The config attribute is deprecated, please use config_json instead. */
    @Import(name="config")
    private @Nullable Output<Map<String,String>> config;

    /**
     * @deprecated
     * The config attribute is deprecated, please use config_json instead.
     * 
     */
    @Deprecated /* The config attribute is deprecated, please use config_json instead. */
    public Optional<Output<Map<String,String>>> config() {
        return Optional.ofNullable(this.config);
    }

    @Import(name="configJson")
    private @Nullable Output<String> configJson;

    public Optional<Output<String>> configJson() {
        return Optional.ofNullable(this.configJson);
    }

    /**
     * Specifies the CA provider type to use.
     * 
     */
    @Import(name="connectProvider")
    private @Nullable Output<String> connectProvider;

    /**
     * @return Specifies the CA provider type to use.
     * 
     */
    public Optional<Output<String>> connectProvider() {
        return Optional.ofNullable(this.connectProvider);
    }

    private CertificateAuthorityState() {}

    private CertificateAuthorityState(CertificateAuthorityState $) {
        this.config = $.config;
        this.configJson = $.configJson;
        this.connectProvider = $.connectProvider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateAuthorityState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateAuthorityState $;

        public Builder() {
            $ = new CertificateAuthorityState();
        }

        public Builder(CertificateAuthorityState defaults) {
            $ = new CertificateAuthorityState(Objects.requireNonNull(defaults));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * The config attribute is deprecated, please use config_json instead.
         * 
         */
        @Deprecated /* The config attribute is deprecated, please use config_json instead. */
        public Builder config(@Nullable Output<Map<String,String>> config) {
            $.config = config;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * The config attribute is deprecated, please use config_json instead.
         * 
         */
        @Deprecated /* The config attribute is deprecated, please use config_json instead. */
        public Builder config(Map<String,String> config) {
            return config(Output.of(config));
        }

        public Builder configJson(@Nullable Output<String> configJson) {
            $.configJson = configJson;
            return this;
        }

        public Builder configJson(String configJson) {
            return configJson(Output.of(configJson));
        }

        /**
         * @param connectProvider Specifies the CA provider type to use.
         * 
         * @return builder
         * 
         */
        public Builder connectProvider(@Nullable Output<String> connectProvider) {
            $.connectProvider = connectProvider;
            return this;
        }

        /**
         * @param connectProvider Specifies the CA provider type to use.
         * 
         * @return builder
         * 
         */
        public Builder connectProvider(String connectProvider) {
            return connectProvider(Output.of(connectProvider));
        }

        public CertificateAuthorityState build() {
            return $;
        }
    }

}
