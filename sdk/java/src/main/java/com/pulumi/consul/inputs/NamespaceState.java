// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceState extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceState Empty = new NamespaceState();

    /**
     * Free form namespace description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Free form namespace description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies arbitrary KV metadata to associate with the namespace.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<Map<String,String>> meta;

    /**
     * @return Specifies arbitrary KV metadata to associate with the namespace.
     * 
     */
    public Optional<Output<Map<String,String>>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * The namespace name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The namespace name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The partition to create the namespace within.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return The partition to create the namespace within.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * The list of default policies that should be applied to all tokens created in this namespace.
     * 
     */
    @Import(name="policyDefaults")
    private @Nullable Output<List<String>> policyDefaults;

    /**
     * @return The list of default policies that should be applied to all tokens created in this namespace.
     * 
     */
    public Optional<Output<List<String>>> policyDefaults() {
        return Optional.ofNullable(this.policyDefaults);
    }

    /**
     * The list of default roles that should be applied to all tokens created in this namespace.
     * 
     */
    @Import(name="roleDefaults")
    private @Nullable Output<List<String>> roleDefaults;

    /**
     * @return The list of default roles that should be applied to all tokens created in this namespace.
     * 
     */
    public Optional<Output<List<String>>> roleDefaults() {
        return Optional.ofNullable(this.roleDefaults);
    }

    private NamespaceState() {}

    private NamespaceState(NamespaceState $) {
        this.description = $.description;
        this.meta = $.meta;
        this.name = $.name;
        this.partition = $.partition;
        this.policyDefaults = $.policyDefaults;
        this.roleDefaults = $.roleDefaults;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceState $;

        public Builder() {
            $ = new NamespaceState();
        }

        public Builder(NamespaceState defaults) {
            $ = new NamespaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Free form namespace description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Free form namespace description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param meta Specifies arbitrary KV metadata to associate with the namespace.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<Map<String,String>> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Specifies arbitrary KV metadata to associate with the namespace.
         * 
         * @return builder
         * 
         */
        public Builder meta(Map<String,String> meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param name The namespace name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The namespace name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partition The partition to create the namespace within.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition The partition to create the namespace within.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param policyDefaults The list of default policies that should be applied to all tokens created in this namespace.
         * 
         * @return builder
         * 
         */
        public Builder policyDefaults(@Nullable Output<List<String>> policyDefaults) {
            $.policyDefaults = policyDefaults;
            return this;
        }

        /**
         * @param policyDefaults The list of default policies that should be applied to all tokens created in this namespace.
         * 
         * @return builder
         * 
         */
        public Builder policyDefaults(List<String> policyDefaults) {
            return policyDefaults(Output.of(policyDefaults));
        }

        /**
         * @param policyDefaults The list of default policies that should be applied to all tokens created in this namespace.
         * 
         * @return builder
         * 
         */
        public Builder policyDefaults(String... policyDefaults) {
            return policyDefaults(List.of(policyDefaults));
        }

        /**
         * @param roleDefaults The list of default roles that should be applied to all tokens created in this namespace.
         * 
         * @return builder
         * 
         */
        public Builder roleDefaults(@Nullable Output<List<String>> roleDefaults) {
            $.roleDefaults = roleDefaults;
            return this;
        }

        /**
         * @param roleDefaults The list of default roles that should be applied to all tokens created in this namespace.
         * 
         * @return builder
         * 
         */
        public Builder roleDefaults(List<String> roleDefaults) {
            return roleDefaults(Output.of(roleDefaults));
        }

        /**
         * @param roleDefaults The list of default roles that should be applied to all tokens created in this namespace.
         * 
         * @return builder
         * 
         */
        public Builder roleDefaults(String... roleDefaults) {
            return roleDefaults(List.of(roleDefaults));
        }

        public NamespaceState build() {
            return $;
        }
    }

}
