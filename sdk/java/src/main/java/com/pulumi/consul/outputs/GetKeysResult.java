// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.consul.outputs.GetKeysKey;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKeysResult {
    /**
     * @return The datacenter to use. This overrides the agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    private String datacenter;
    /**
     * @return Whether to return an error when a key is absent from the KV store and no default is configured. This defaults to `false`.
     * 
     */
    private @Nullable Boolean errorOnMissingKeys;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Specifies a key in Consul to be read. Supported values documented below. Multiple blocks supported.
     * 
     */
    private @Nullable List<GetKeysKey> keys;
    /**
     * @return The namespace to lookup the keys.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return The partition to lookup the keys.
     * 
     */
    private @Nullable String partition;
    /**
     * @return The ACL token to use. This overrides the token that the agent provides by default.
     * 
     * @deprecated
     * The token argument has been deprecated and will be removed in a future release.
     * Please use the token argument in the provider configuration
     * 
     */
    @Deprecated /* The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration */
    private @Nullable String token;
    /**
     * @return For each name given, the corresponding attribute has the value of the key.
     * 
     */
    private Map<String,String> var_;

    private GetKeysResult() {}
    /**
     * @return The datacenter to use. This overrides the agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    public String datacenter() {
        return this.datacenter;
    }
    /**
     * @return Whether to return an error when a key is absent from the KV store and no default is configured. This defaults to `false`.
     * 
     */
    public Optional<Boolean> errorOnMissingKeys() {
        return Optional.ofNullable(this.errorOnMissingKeys);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies a key in Consul to be read. Supported values documented below. Multiple blocks supported.
     * 
     */
    public List<GetKeysKey> keys() {
        return this.keys == null ? List.of() : this.keys;
    }
    /**
     * @return The namespace to lookup the keys.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return The partition to lookup the keys.
     * 
     */
    public Optional<String> partition() {
        return Optional.ofNullable(this.partition);
    }
    /**
     * @return The ACL token to use. This overrides the token that the agent provides by default.
     * 
     * @deprecated
     * The token argument has been deprecated and will be removed in a future release.
     * Please use the token argument in the provider configuration
     * 
     */
    @Deprecated /* The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }
    /**
     * @return For each name given, the corresponding attribute has the value of the key.
     * 
     */
    public Map<String,String> var_() {
        return this.var_;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeysResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datacenter;
        private @Nullable Boolean errorOnMissingKeys;
        private String id;
        private @Nullable List<GetKeysKey> keys;
        private @Nullable String namespace;
        private @Nullable String partition;
        private @Nullable String token;
        private Map<String,String> var_;
        public Builder() {}
        public Builder(GetKeysResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenter = defaults.datacenter;
    	      this.errorOnMissingKeys = defaults.errorOnMissingKeys;
    	      this.id = defaults.id;
    	      this.keys = defaults.keys;
    	      this.namespace = defaults.namespace;
    	      this.partition = defaults.partition;
    	      this.token = defaults.token;
    	      this.var_ = defaults.var_;
        }

        @CustomType.Setter
        public Builder datacenter(String datacenter) {
            this.datacenter = Objects.requireNonNull(datacenter);
            return this;
        }
        @CustomType.Setter
        public Builder errorOnMissingKeys(@Nullable Boolean errorOnMissingKeys) {
            this.errorOnMissingKeys = errorOnMissingKeys;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder keys(@Nullable List<GetKeysKey> keys) {
            this.keys = keys;
            return this;
        }
        public Builder keys(GetKeysKey... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder partition(@Nullable String partition) {
            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder token(@Nullable String token) {
            this.token = token;
            return this;
        }
        @CustomType.Setter("var")
        public Builder var_(Map<String,String> var_) {
            this.var_ = Objects.requireNonNull(var_);
            return this;
        }
        public GetKeysResult build() {
            final var _resultValue = new GetKeysResult();
            _resultValue.datacenter = datacenter;
            _resultValue.errorOnMissingKeys = errorOnMissingKeys;
            _resultValue.id = id;
            _resultValue.keys = keys;
            _resultValue.namespace = namespace;
            _resultValue.partition = partition;
            _resultValue.token = token;
            _resultValue.var_ = var_;
            return _resultValue;
        }
    }
}
