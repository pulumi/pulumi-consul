// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.AclBindingRuleBindVarsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclBindingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final AclBindingRuleState Empty = new AclBindingRuleState();

    /**
     * The name of the ACL auth method this rule apply.
     * 
     */
    @Import(name="authMethod")
    private @Nullable Output<String> authMethod;

    /**
     * @return The name of the ACL auth method this rule apply.
     * 
     */
    public Optional<Output<String>> authMethod() {
        return Optional.ofNullable(this.authMethod);
    }

    /**
     * The name to bind to a token at login-time.
     * 
     */
    @Import(name="bindName")
    private @Nullable Output<String> bindName;

    /**
     * @return The name to bind to a token at login-time.
     * 
     */
    public Optional<Output<String>> bindName() {
        return Optional.ofNullable(this.bindName);
    }

    /**
     * Specifies the way the binding rule affects a token created at login.
     * 
     */
    @Import(name="bindType")
    private @Nullable Output<String> bindType;

    /**
     * @return Specifies the way the binding rule affects a token created at login.
     * 
     */
    public Optional<Output<String>> bindType() {
        return Optional.ofNullable(this.bindType);
    }

    /**
     * The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
     * 
     */
    @Import(name="bindVars")
    private @Nullable Output<AclBindingRuleBindVarsArgs> bindVars;

    /**
     * @return The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
     * 
     */
    public Optional<Output<AclBindingRuleBindVarsArgs>> bindVars() {
        return Optional.ofNullable(this.bindVars);
    }

    /**
     * A free form human readable description of the binding rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free form human readable description of the binding rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The namespace to create the binding rule within.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to create the binding rule within.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The partition the ACL binding rule is associated with.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return The partition the ACL binding rule is associated with.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * The expression used to match this rule against valid identities returned from an auth method validation.
     * 
     */
    @Import(name="selector")
    private @Nullable Output<String> selector;

    /**
     * @return The expression used to match this rule against valid identities returned from an auth method validation.
     * 
     */
    public Optional<Output<String>> selector() {
        return Optional.ofNullable(this.selector);
    }

    private AclBindingRuleState() {}

    private AclBindingRuleState(AclBindingRuleState $) {
        this.authMethod = $.authMethod;
        this.bindName = $.bindName;
        this.bindType = $.bindType;
        this.bindVars = $.bindVars;
        this.description = $.description;
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.selector = $.selector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclBindingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclBindingRuleState $;

        public Builder() {
            $ = new AclBindingRuleState();
        }

        public Builder(AclBindingRuleState defaults) {
            $ = new AclBindingRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authMethod The name of the ACL auth method this rule apply.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(@Nullable Output<String> authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        /**
         * @param authMethod The name of the ACL auth method this rule apply.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(String authMethod) {
            return authMethod(Output.of(authMethod));
        }

        /**
         * @param bindName The name to bind to a token at login-time.
         * 
         * @return builder
         * 
         */
        public Builder bindName(@Nullable Output<String> bindName) {
            $.bindName = bindName;
            return this;
        }

        /**
         * @param bindName The name to bind to a token at login-time.
         * 
         * @return builder
         * 
         */
        public Builder bindName(String bindName) {
            return bindName(Output.of(bindName));
        }

        /**
         * @param bindType Specifies the way the binding rule affects a token created at login.
         * 
         * @return builder
         * 
         */
        public Builder bindType(@Nullable Output<String> bindType) {
            $.bindType = bindType;
            return this;
        }

        /**
         * @param bindType Specifies the way the binding rule affects a token created at login.
         * 
         * @return builder
         * 
         */
        public Builder bindType(String bindType) {
            return bindType(Output.of(bindType));
        }

        /**
         * @param bindVars The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
         * 
         * @return builder
         * 
         */
        public Builder bindVars(@Nullable Output<AclBindingRuleBindVarsArgs> bindVars) {
            $.bindVars = bindVars;
            return this;
        }

        /**
         * @param bindVars The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
         * 
         * @return builder
         * 
         */
        public Builder bindVars(AclBindingRuleBindVarsArgs bindVars) {
            return bindVars(Output.of(bindVars));
        }

        /**
         * @param description A free form human readable description of the binding rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free form human readable description of the binding rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param namespace The namespace to create the binding rule within.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to create the binding rule within.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition The partition the ACL binding rule is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition The partition the ACL binding rule is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param selector The expression used to match this rule against valid identities returned from an auth method validation.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable Output<String> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector The expression used to match this rule against valid identities returned from an auth method validation.
         * 
         * @return builder
         * 
         */
        public Builder selector(String selector) {
            return selector(Output.of(selector));
        }

        public AclBindingRuleState build() {
            return $;
        }
    }

}
