// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNetworkAreaMembersMember {
    /**
     * @return The IP address of the server.
     * 
     */
    private String address;
    /**
     * @return The Consul version running on the node.
     * 
     */
    private String build;
    /**
     * @return The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    private String datacenter;
    /**
     * @return The node ID of the server.
     * 
     */
    private String id;
    /**
     * @return The node name of the server, with its datacenter appended.
     * 
     */
    private String name;
    /**
     * @return The server RPC port the node.
     * 
     */
    private Integer port;
    /**
     * @return The protocol version being spoken by the node.
     * 
     */
    private Integer protocol;
    /**
     * @return Role is always `&#34;server&#34;` since only Consul servers can participate
     * in network areas.
     * 
     */
    private String role;
    /**
     * @return An estimated network round trip time from the server answering the
     * query to the given server, in nanoseconds. This is computed using network
     * coordinates.
     * 
     */
    private Integer rtt;
    /**
     * @return The current health status of the node, as determined by the
     * network area distributed failure detector. This will be `&#34;alive&#34;`, `&#34;leaving&#34;`,
     * or `&#34;failed&#34;`. A `&#34;failed&#34;` status means that other servers are not able to
     * probe this server over its server RPC interface.
     * 
     */
    private String status;

    private GetNetworkAreaMembersMember() {}
    /**
     * @return The IP address of the server.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return The Consul version running on the node.
     * 
     */
    public String build() {
        return this.build;
    }
    /**
     * @return The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    public String datacenter() {
        return this.datacenter;
    }
    /**
     * @return The node ID of the server.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The node name of the server, with its datacenter appended.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The server RPC port the node.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The protocol version being spoken by the node.
     * 
     */
    public Integer protocol() {
        return this.protocol;
    }
    /**
     * @return Role is always `&#34;server&#34;` since only Consul servers can participate
     * in network areas.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return An estimated network round trip time from the server answering the
     * query to the given server, in nanoseconds. This is computed using network
     * coordinates.
     * 
     */
    public Integer rtt() {
        return this.rtt;
    }
    /**
     * @return The current health status of the node, as determined by the
     * network area distributed failure detector. This will be `&#34;alive&#34;`, `&#34;leaving&#34;`,
     * or `&#34;failed&#34;`. A `&#34;failed&#34;` status means that other servers are not able to
     * probe this server over its server RPC interface.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkAreaMembersMember defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private String build;
        private String datacenter;
        private String id;
        private String name;
        private Integer port;
        private Integer protocol;
        private String role;
        private Integer rtt;
        private String status;
        public Builder() {}
        public Builder(GetNetworkAreaMembersMember defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.build = defaults.build;
    	      this.datacenter = defaults.datacenter;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.role = defaults.role;
    	      this.rtt = defaults.rtt;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder build(String build) {
            if (build == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "build");
            }
            this.build = build;
            return this;
        }
        @CustomType.Setter
        public Builder datacenter(String datacenter) {
            if (datacenter == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "datacenter");
            }
            this.datacenter = datacenter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(Integer protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder rtt(Integer rtt) {
            if (rtt == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "rtt");
            }
            this.rtt = rtt;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNetworkAreaMembersMember", "status");
            }
            this.status = status;
            return this;
        }
        public GetNetworkAreaMembersMember build() {
            final var _resultValue = new GetNetworkAreaMembersMember();
            _resultValue.address = address;
            _resultValue.build = build;
            _resultValue.datacenter = datacenter;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.role = role;
            _resultValue.rtt = rtt;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
