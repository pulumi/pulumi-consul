// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigEntryServiceDefaultsUpstreamConfigDefaultPassiveHealthCheck {
    /**
     * @return Specifies the minimum amount of time that an ejected host must remain outside the cluster before rejoining.
     * 
     */
    private @Nullable String baseEjectionTime;
    /**
     * @return Specifies a percentage that indicates how many times out of 100 that Consul ejects the host when it detects an outlier status.
     * 
     */
    private @Nullable Integer enforcingConsecutive5xx;
    /**
     * @return Specifies the time between checks.
     * 
     */
    private @Nullable String interval;
    /**
     * @return Specifies the maximum percentage of an upstream cluster that Consul ejects when the proxy reports an outlier.
     * 
     */
    private @Nullable Integer maxEjectionPercent;
    /**
     * @return Specifies the number of consecutive failures allowed per check interval. If exceeded, Consul removes the host from the load balancer.
     * 
     */
    private @Nullable Integer maxFailures;

    private ConfigEntryServiceDefaultsUpstreamConfigDefaultPassiveHealthCheck() {}
    /**
     * @return Specifies the minimum amount of time that an ejected host must remain outside the cluster before rejoining.
     * 
     */
    public Optional<String> baseEjectionTime() {
        return Optional.ofNullable(this.baseEjectionTime);
    }
    /**
     * @return Specifies a percentage that indicates how many times out of 100 that Consul ejects the host when it detects an outlier status.
     * 
     */
    public Optional<Integer> enforcingConsecutive5xx() {
        return Optional.ofNullable(this.enforcingConsecutive5xx);
    }
    /**
     * @return Specifies the time between checks.
     * 
     */
    public Optional<String> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return Specifies the maximum percentage of an upstream cluster that Consul ejects when the proxy reports an outlier.
     * 
     */
    public Optional<Integer> maxEjectionPercent() {
        return Optional.ofNullable(this.maxEjectionPercent);
    }
    /**
     * @return Specifies the number of consecutive failures allowed per check interval. If exceeded, Consul removes the host from the load balancer.
     * 
     */
    public Optional<Integer> maxFailures() {
        return Optional.ofNullable(this.maxFailures);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigEntryServiceDefaultsUpstreamConfigDefaultPassiveHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String baseEjectionTime;
        private @Nullable Integer enforcingConsecutive5xx;
        private @Nullable String interval;
        private @Nullable Integer maxEjectionPercent;
        private @Nullable Integer maxFailures;
        public Builder() {}
        public Builder(ConfigEntryServiceDefaultsUpstreamConfigDefaultPassiveHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionTime = defaults.baseEjectionTime;
    	      this.enforcingConsecutive5xx = defaults.enforcingConsecutive5xx;
    	      this.interval = defaults.interval;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.maxFailures = defaults.maxFailures;
        }

        @CustomType.Setter
        public Builder baseEjectionTime(@Nullable String baseEjectionTime) {
            this.baseEjectionTime = baseEjectionTime;
            return this;
        }
        @CustomType.Setter
        public Builder enforcingConsecutive5xx(@Nullable Integer enforcingConsecutive5xx) {
            this.enforcingConsecutive5xx = enforcingConsecutive5xx;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable String interval) {
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder maxEjectionPercent(@Nullable Integer maxEjectionPercent) {
            this.maxEjectionPercent = maxEjectionPercent;
            return this;
        }
        @CustomType.Setter
        public Builder maxFailures(@Nullable Integer maxFailures) {
            this.maxFailures = maxFailures;
            return this;
        }
        public ConfigEntryServiceDefaultsUpstreamConfigDefaultPassiveHealthCheck build() {
            final var _resultValue = new ConfigEntryServiceDefaultsUpstreamConfigDefaultPassiveHealthCheck();
            _resultValue.baseEjectionTime = baseEjectionTime;
            _resultValue.enforcingConsecutive5xx = enforcingConsecutive5xx;
            _resultValue.interval = interval;
            _resultValue.maxEjectionPercent = maxEjectionPercent;
            _resultValue.maxFailures = maxFailures;
            return _resultValue;
        }
    }
}
