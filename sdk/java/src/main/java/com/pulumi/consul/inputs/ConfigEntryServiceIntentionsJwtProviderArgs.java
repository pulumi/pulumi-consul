// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.ConfigEntryServiceIntentionsJwtProviderVerifyClaimArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceIntentionsJwtProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceIntentionsJwtProviderArgs Empty = new ConfigEntryServiceIntentionsJwtProviderArgs();

    /**
     * Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies additional token information to verify beyond what is configured in the JWT provider configuration entry.
     * 
     */
    @Import(name="verifyClaims")
    private @Nullable Output<List<ConfigEntryServiceIntentionsJwtProviderVerifyClaimArgs>> verifyClaims;

    /**
     * @return Specifies additional token information to verify beyond what is configured in the JWT provider configuration entry.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceIntentionsJwtProviderVerifyClaimArgs>>> verifyClaims() {
        return Optional.ofNullable(this.verifyClaims);
    }

    private ConfigEntryServiceIntentionsJwtProviderArgs() {}

    private ConfigEntryServiceIntentionsJwtProviderArgs(ConfigEntryServiceIntentionsJwtProviderArgs $) {
        this.name = $.name;
        this.verifyClaims = $.verifyClaims;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceIntentionsJwtProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceIntentionsJwtProviderArgs $;

        public Builder() {
            $ = new ConfigEntryServiceIntentionsJwtProviderArgs();
        }

        public Builder(ConfigEntryServiceIntentionsJwtProviderArgs defaults) {
            $ = new ConfigEntryServiceIntentionsJwtProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param verifyClaims Specifies additional token information to verify beyond what is configured in the JWT provider configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder verifyClaims(@Nullable Output<List<ConfigEntryServiceIntentionsJwtProviderVerifyClaimArgs>> verifyClaims) {
            $.verifyClaims = verifyClaims;
            return this;
        }

        /**
         * @param verifyClaims Specifies additional token information to verify beyond what is configured in the JWT provider configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder verifyClaims(List<ConfigEntryServiceIntentionsJwtProviderVerifyClaimArgs> verifyClaims) {
            return verifyClaims(Output.of(verifyClaims));
        }

        /**
         * @param verifyClaims Specifies additional token information to verify beyond what is configured in the JWT provider configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder verifyClaims(ConfigEntryServiceIntentionsJwtProviderVerifyClaimArgs... verifyClaims) {
            return verifyClaims(List.of(verifyClaims));
        }

        public ConfigEntryServiceIntentionsJwtProviderArgs build() {
            return $;
        }
    }

}
