// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPeeringResult {
    private String deletedAt;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> meta;
    private @Nullable String partition;
    private List<String> peerCaPems;
    private String peerId;
    private String peerName;
    private List<String> peerServerAddresses;
    private String peerServerName;
    private String state;

    private GetPeeringResult() {}
    public String deletedAt() {
        return this.deletedAt;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> meta() {
        return this.meta;
    }
    public Optional<String> partition() {
        return Optional.ofNullable(this.partition);
    }
    public List<String> peerCaPems() {
        return this.peerCaPems;
    }
    public String peerId() {
        return this.peerId;
    }
    public String peerName() {
        return this.peerName;
    }
    public List<String> peerServerAddresses() {
        return this.peerServerAddresses;
    }
    public String peerServerName() {
        return this.peerServerName;
    }
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPeeringResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String deletedAt;
        private String id;
        private Map<String,String> meta;
        private @Nullable String partition;
        private List<String> peerCaPems;
        private String peerId;
        private String peerName;
        private List<String> peerServerAddresses;
        private String peerServerName;
        private String state;
        public Builder() {}
        public Builder(GetPeeringResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deletedAt = defaults.deletedAt;
    	      this.id = defaults.id;
    	      this.meta = defaults.meta;
    	      this.partition = defaults.partition;
    	      this.peerCaPems = defaults.peerCaPems;
    	      this.peerId = defaults.peerId;
    	      this.peerName = defaults.peerName;
    	      this.peerServerAddresses = defaults.peerServerAddresses;
    	      this.peerServerName = defaults.peerServerName;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder deletedAt(String deletedAt) {
            if (deletedAt == null) {
              throw new MissingRequiredPropertyException("GetPeeringResult", "deletedAt");
            }
            this.deletedAt = deletedAt;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPeeringResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder meta(Map<String,String> meta) {
            if (meta == null) {
              throw new MissingRequiredPropertyException("GetPeeringResult", "meta");
            }
            this.meta = meta;
            return this;
        }
        @CustomType.Setter
        public Builder partition(@Nullable String partition) {

            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder peerCaPems(List<String> peerCaPems) {
            if (peerCaPems == null) {
              throw new MissingRequiredPropertyException("GetPeeringResult", "peerCaPems");
            }
            this.peerCaPems = peerCaPems;
            return this;
        }
        public Builder peerCaPems(String... peerCaPems) {
            return peerCaPems(List.of(peerCaPems));
        }
        @CustomType.Setter
        public Builder peerId(String peerId) {
            if (peerId == null) {
              throw new MissingRequiredPropertyException("GetPeeringResult", "peerId");
            }
            this.peerId = peerId;
            return this;
        }
        @CustomType.Setter
        public Builder peerName(String peerName) {
            if (peerName == null) {
              throw new MissingRequiredPropertyException("GetPeeringResult", "peerName");
            }
            this.peerName = peerName;
            return this;
        }
        @CustomType.Setter
        public Builder peerServerAddresses(List<String> peerServerAddresses) {
            if (peerServerAddresses == null) {
              throw new MissingRequiredPropertyException("GetPeeringResult", "peerServerAddresses");
            }
            this.peerServerAddresses = peerServerAddresses;
            return this;
        }
        public Builder peerServerAddresses(String... peerServerAddresses) {
            return peerServerAddresses(List.of(peerServerAddresses));
        }
        @CustomType.Setter
        public Builder peerServerName(String peerServerName) {
            if (peerServerName == null) {
              throw new MissingRequiredPropertyException("GetPeeringResult", "peerServerName");
            }
            this.peerServerName = peerServerName;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetPeeringResult", "state");
            }
            this.state = state;
            return this;
        }
        public GetPeeringResult build() {
            final var _resultValue = new GetPeeringResult();
            _resultValue.deletedAt = deletedAt;
            _resultValue.id = id;
            _resultValue.meta = meta;
            _resultValue.partition = partition;
            _resultValue.peerCaPems = peerCaPems;
            _resultValue.peerId = peerId;
            _resultValue.peerName = peerName;
            _resultValue.peerServerAddresses = peerServerAddresses;
            _resultValue.peerServerName = peerServerName;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
