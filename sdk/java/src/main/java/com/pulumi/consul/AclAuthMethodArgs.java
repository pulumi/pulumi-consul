// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.inputs.AclAuthMethodNamespaceRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclAuthMethodArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclAuthMethodArgs Empty = new AclAuthMethodArgs();

    /**
     * The raw configuration for this ACL auth method.
     * 
     * @deprecated
     * The config attribute is deprecated, please use `config_json` instead.
     * 
     */
    @Deprecated /* The config attribute is deprecated, please use `config_json` instead. */
    @Import(name="config")
    private @Nullable Output<Map<String,String>> config;

    /**
     * @return The raw configuration for this ACL auth method.
     * 
     * @deprecated
     * The config attribute is deprecated, please use `config_json` instead.
     * 
     */
    @Deprecated /* The config attribute is deprecated, please use `config_json` instead. */
    public Optional<Output<Map<String,String>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * The raw configuration for this ACL auth method.
     * 
     */
    @Import(name="configJson")
    private @Nullable Output<String> configJson;

    /**
     * @return The raw configuration for this ACL auth method.
     * 
     */
    public Optional<Output<String>> configJson() {
        return Optional.ofNullable(this.configJson);
    }

    /**
     * A free form human readable description of the auth method.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free form human readable description of the auth method.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An optional name to use instead of the name attribute when displaying information about this auth method.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return An optional name to use instead of the name attribute when displaying information about this auth method.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The maximum life of any token created by this auth method. **This attribute is required and must be set to a nonzero for the OIDC auth method.**
     * 
     */
    @Import(name="maxTokenTtl")
    private @Nullable Output<String> maxTokenTtl;

    /**
     * @return The maximum life of any token created by this auth method. **This attribute is required and must be set to a nonzero for the OIDC auth method.**
     * 
     */
    public Optional<Output<String>> maxTokenTtl() {
        return Optional.ofNullable(this.maxTokenTtl);
    }

    /**
     * The name of the ACL auth method.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the ACL auth method.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace in which to create the auth method.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace in which to create the auth method.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * A set of rules that control which namespace tokens created via this auth method will be created within.
     * 
     */
    @Import(name="namespaceRules")
    private @Nullable Output<List<AclAuthMethodNamespaceRuleArgs>> namespaceRules;

    /**
     * @return A set of rules that control which namespace tokens created via this auth method will be created within.
     * 
     */
    public Optional<Output<List<AclAuthMethodNamespaceRuleArgs>>> namespaceRules() {
        return Optional.ofNullable(this.namespaceRules);
    }

    /**
     * The partition the ACL auth method is associated with.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return The partition the ACL auth method is associated with.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * The kind of token that this auth method produces. This can be either &#39;local&#39; or &#39;global&#39;.
     * 
     */
    @Import(name="tokenLocality")
    private @Nullable Output<String> tokenLocality;

    /**
     * @return The kind of token that this auth method produces. This can be either &#39;local&#39; or &#39;global&#39;.
     * 
     */
    public Optional<Output<String>> tokenLocality() {
        return Optional.ofNullable(this.tokenLocality);
    }

    /**
     * The type of the ACL auth method.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the ACL auth method.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private AclAuthMethodArgs() {}

    private AclAuthMethodArgs(AclAuthMethodArgs $) {
        this.config = $.config;
        this.configJson = $.configJson;
        this.description = $.description;
        this.displayName = $.displayName;
        this.maxTokenTtl = $.maxTokenTtl;
        this.name = $.name;
        this.namespace = $.namespace;
        this.namespaceRules = $.namespaceRules;
        this.partition = $.partition;
        this.tokenLocality = $.tokenLocality;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclAuthMethodArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclAuthMethodArgs $;

        public Builder() {
            $ = new AclAuthMethodArgs();
        }

        public Builder(AclAuthMethodArgs defaults) {
            $ = new AclAuthMethodArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config The raw configuration for this ACL auth method.
         * 
         * @return builder
         * 
         * @deprecated
         * The config attribute is deprecated, please use `config_json` instead.
         * 
         */
        @Deprecated /* The config attribute is deprecated, please use `config_json` instead. */
        public Builder config(@Nullable Output<Map<String,String>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The raw configuration for this ACL auth method.
         * 
         * @return builder
         * 
         * @deprecated
         * The config attribute is deprecated, please use `config_json` instead.
         * 
         */
        @Deprecated /* The config attribute is deprecated, please use `config_json` instead. */
        public Builder config(Map<String,String> config) {
            return config(Output.of(config));
        }

        /**
         * @param configJson The raw configuration for this ACL auth method.
         * 
         * @return builder
         * 
         */
        public Builder configJson(@Nullable Output<String> configJson) {
            $.configJson = configJson;
            return this;
        }

        /**
         * @param configJson The raw configuration for this ACL auth method.
         * 
         * @return builder
         * 
         */
        public Builder configJson(String configJson) {
            return configJson(Output.of(configJson));
        }

        /**
         * @param description A free form human readable description of the auth method.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free form human readable description of the auth method.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName An optional name to use instead of the name attribute when displaying information about this auth method.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName An optional name to use instead of the name attribute when displaying information about this auth method.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param maxTokenTtl The maximum life of any token created by this auth method. **This attribute is required and must be set to a nonzero for the OIDC auth method.**
         * 
         * @return builder
         * 
         */
        public Builder maxTokenTtl(@Nullable Output<String> maxTokenTtl) {
            $.maxTokenTtl = maxTokenTtl;
            return this;
        }

        /**
         * @param maxTokenTtl The maximum life of any token created by this auth method. **This attribute is required and must be set to a nonzero for the OIDC auth method.**
         * 
         * @return builder
         * 
         */
        public Builder maxTokenTtl(String maxTokenTtl) {
            return maxTokenTtl(Output.of(maxTokenTtl));
        }

        /**
         * @param name The name of the ACL auth method.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the ACL auth method.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace in which to create the auth method.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace in which to create the auth method.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param namespaceRules A set of rules that control which namespace tokens created via this auth method will be created within.
         * 
         * @return builder
         * 
         */
        public Builder namespaceRules(@Nullable Output<List<AclAuthMethodNamespaceRuleArgs>> namespaceRules) {
            $.namespaceRules = namespaceRules;
            return this;
        }

        /**
         * @param namespaceRules A set of rules that control which namespace tokens created via this auth method will be created within.
         * 
         * @return builder
         * 
         */
        public Builder namespaceRules(List<AclAuthMethodNamespaceRuleArgs> namespaceRules) {
            return namespaceRules(Output.of(namespaceRules));
        }

        /**
         * @param namespaceRules A set of rules that control which namespace tokens created via this auth method will be created within.
         * 
         * @return builder
         * 
         */
        public Builder namespaceRules(AclAuthMethodNamespaceRuleArgs... namespaceRules) {
            return namespaceRules(List.of(namespaceRules));
        }

        /**
         * @param partition The partition the ACL auth method is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition The partition the ACL auth method is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param tokenLocality The kind of token that this auth method produces. This can be either &#39;local&#39; or &#39;global&#39;.
         * 
         * @return builder
         * 
         */
        public Builder tokenLocality(@Nullable Output<String> tokenLocality) {
            $.tokenLocality = tokenLocality;
            return this;
        }

        /**
         * @param tokenLocality The kind of token that this auth method produces. This can be either &#39;local&#39; or &#39;global&#39;.
         * 
         * @return builder
         * 
         */
        public Builder tokenLocality(String tokenLocality) {
            return tokenLocality(Output.of(tokenLocality));
        }

        /**
         * @param type The type of the ACL auth method.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the ACL auth method.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AclAuthMethodArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AclAuthMethodArgs", "type");
            }
            return $;
        }
    }

}
