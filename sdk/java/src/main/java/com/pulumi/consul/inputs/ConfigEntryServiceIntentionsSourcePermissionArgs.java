// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.ConfigEntryServiceIntentionsSourcePermissionHttpArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ConfigEntryServiceIntentionsSourcePermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceIntentionsSourcePermissionArgs Empty = new ConfigEntryServiceIntentionsSourcePermissionArgs();

    /**
     * Specifies the action to take when the source sends traffic to the destination service.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Specifies the action to take when the source sends traffic to the destination service.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Specifies a set of HTTP-specific match criteria.
     * 
     */
    @Import(name="https", required=true)
    private Output<List<ConfigEntryServiceIntentionsSourcePermissionHttpArgs>> https;

    /**
     * @return Specifies a set of HTTP-specific match criteria.
     * 
     */
    public Output<List<ConfigEntryServiceIntentionsSourcePermissionHttpArgs>> https() {
        return this.https;
    }

    private ConfigEntryServiceIntentionsSourcePermissionArgs() {}

    private ConfigEntryServiceIntentionsSourcePermissionArgs(ConfigEntryServiceIntentionsSourcePermissionArgs $) {
        this.action = $.action;
        this.https = $.https;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceIntentionsSourcePermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceIntentionsSourcePermissionArgs $;

        public Builder() {
            $ = new ConfigEntryServiceIntentionsSourcePermissionArgs();
        }

        public Builder(ConfigEntryServiceIntentionsSourcePermissionArgs defaults) {
            $ = new ConfigEntryServiceIntentionsSourcePermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Specifies the action to take when the source sends traffic to the destination service.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Specifies the action to take when the source sends traffic to the destination service.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param https Specifies a set of HTTP-specific match criteria.
         * 
         * @return builder
         * 
         */
        public Builder https(Output<List<ConfigEntryServiceIntentionsSourcePermissionHttpArgs>> https) {
            $.https = https;
            return this;
        }

        /**
         * @param https Specifies a set of HTTP-specific match criteria.
         * 
         * @return builder
         * 
         */
        public Builder https(List<ConfigEntryServiceIntentionsSourcePermissionHttpArgs> https) {
            return https(Output.of(https));
        }

        /**
         * @param https Specifies a set of HTTP-specific match criteria.
         * 
         * @return builder
         * 
         */
        public Builder https(ConfigEntryServiceIntentionsSourcePermissionHttpArgs... https) {
            return https(List.of(https));
        }

        public ConfigEntryServiceIntentionsSourcePermissionArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("ConfigEntryServiceIntentionsSourcePermissionArgs", "action");
            }
            if ($.https == null) {
                throw new MissingRequiredPropertyException("ConfigEntryServiceIntentionsSourcePermissionArgs", "https");
            }
            return $;
        }
    }

}
