// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.ConfigEntryServiceIntentionsSourcePermissionHttpHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceIntentionsSourcePermissionHttpArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceIntentionsSourcePermissionHttpArgs Empty = new ConfigEntryServiceIntentionsSourcePermissionHttpArgs();

    /**
     * Specifies a header name and matching criteria for HTTP request headers.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<ConfigEntryServiceIntentionsSourcePermissionHttpHeaderArgs>> headers;

    /**
     * @return Specifies a header name and matching criteria for HTTP request headers.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceIntentionsSourcePermissionHttpHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Specifies a list of HTTP methods.
     * 
     */
    @Import(name="methods")
    private @Nullable Output<List<String>> methods;

    /**
     * @return Specifies a list of HTTP methods.
     * 
     */
    public Optional<Output<List<String>>> methods() {
        return Optional.ofNullable(this.methods);
    }

    /**
     * Specifies an exact path to match on the HTTP request path.
     * 
     */
    @Import(name="pathExact")
    private @Nullable Output<String> pathExact;

    /**
     * @return Specifies an exact path to match on the HTTP request path.
     * 
     */
    public Optional<Output<String>> pathExact() {
        return Optional.ofNullable(this.pathExact);
    }

    /**
     * Specifies a path prefix to match on the HTTP request path.
     * 
     */
    @Import(name="pathPrefix")
    private @Nullable Output<String> pathPrefix;

    /**
     * @return Specifies a path prefix to match on the HTTP request path.
     * 
     */
    public Optional<Output<String>> pathPrefix() {
        return Optional.ofNullable(this.pathPrefix);
    }

    /**
     * Defines a regular expression to match on the HTTP request path.
     * 
     */
    @Import(name="pathRegex")
    private @Nullable Output<String> pathRegex;

    /**
     * @return Defines a regular expression to match on the HTTP request path.
     * 
     */
    public Optional<Output<String>> pathRegex() {
        return Optional.ofNullable(this.pathRegex);
    }

    private ConfigEntryServiceIntentionsSourcePermissionHttpArgs() {}

    private ConfigEntryServiceIntentionsSourcePermissionHttpArgs(ConfigEntryServiceIntentionsSourcePermissionHttpArgs $) {
        this.headers = $.headers;
        this.methods = $.methods;
        this.pathExact = $.pathExact;
        this.pathPrefix = $.pathPrefix;
        this.pathRegex = $.pathRegex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceIntentionsSourcePermissionHttpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceIntentionsSourcePermissionHttpArgs $;

        public Builder() {
            $ = new ConfigEntryServiceIntentionsSourcePermissionHttpArgs();
        }

        public Builder(ConfigEntryServiceIntentionsSourcePermissionHttpArgs defaults) {
            $ = new ConfigEntryServiceIntentionsSourcePermissionHttpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param headers Specifies a header name and matching criteria for HTTP request headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<ConfigEntryServiceIntentionsSourcePermissionHttpHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Specifies a header name and matching criteria for HTTP request headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<ConfigEntryServiceIntentionsSourcePermissionHttpHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Specifies a header name and matching criteria for HTTP request headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(ConfigEntryServiceIntentionsSourcePermissionHttpHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param methods Specifies a list of HTTP methods.
         * 
         * @return builder
         * 
         */
        public Builder methods(@Nullable Output<List<String>> methods) {
            $.methods = methods;
            return this;
        }

        /**
         * @param methods Specifies a list of HTTP methods.
         * 
         * @return builder
         * 
         */
        public Builder methods(List<String> methods) {
            return methods(Output.of(methods));
        }

        /**
         * @param methods Specifies a list of HTTP methods.
         * 
         * @return builder
         * 
         */
        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }

        /**
         * @param pathExact Specifies an exact path to match on the HTTP request path.
         * 
         * @return builder
         * 
         */
        public Builder pathExact(@Nullable Output<String> pathExact) {
            $.pathExact = pathExact;
            return this;
        }

        /**
         * @param pathExact Specifies an exact path to match on the HTTP request path.
         * 
         * @return builder
         * 
         */
        public Builder pathExact(String pathExact) {
            return pathExact(Output.of(pathExact));
        }

        /**
         * @param pathPrefix Specifies a path prefix to match on the HTTP request path.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(@Nullable Output<String> pathPrefix) {
            $.pathPrefix = pathPrefix;
            return this;
        }

        /**
         * @param pathPrefix Specifies a path prefix to match on the HTTP request path.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(String pathPrefix) {
            return pathPrefix(Output.of(pathPrefix));
        }

        /**
         * @param pathRegex Defines a regular expression to match on the HTTP request path.
         * 
         * @return builder
         * 
         */
        public Builder pathRegex(@Nullable Output<String> pathRegex) {
            $.pathRegex = pathRegex;
            return this;
        }

        /**
         * @param pathRegex Defines a regular expression to match on the HTTP request path.
         * 
         * @return builder
         * 
         */
        public Builder pathRegex(String pathRegex) {
            return pathRegex(Output.of(pathRegex));
        }

        public ConfigEntryServiceIntentionsSourcePermissionHttpArgs build() {
            return $;
        }
    }

}
