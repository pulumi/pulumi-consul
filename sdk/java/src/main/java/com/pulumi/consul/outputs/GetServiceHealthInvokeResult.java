// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.consul.outputs.GetServiceHealthResult;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceHealthInvokeResult {
    /**
     * @return The datacenter in which the node is running.
     * * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
     *   List of explicit LAN and WAN IP addresses for the agent.
     * 
     */
    private @Nullable String datacenter;
    private @Nullable String filter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of this health-check.
     * 
     */
    private String name;
    /**
     * @return The node to which the result must be sorted to.
     * 
     */
    private @Nullable String near;
    /**
     * @return The list of metadata to filter the nodes.
     * 
     */
    private @Nullable Map<String,String> nodeMeta;
    /**
     * @return Whether to return only nodes with all checks in the
     * passing state.
     * 
     */
    private @Nullable Boolean passing;
    /**
     * @return A list of entries and details about each endpoint advertising a
     * service.  Each element in the list has three attributes: `node`, `service` and
     * `checks`.  The list of the attributes of each one is detailed below.
     * 
     */
    private List<GetServiceHealthResult> results;
    /**
     * @return The name of the tag used to filter the list.
     * 
     */
    private @Nullable String tag;
    private @Nullable String waitFor;

    private GetServiceHealthInvokeResult() {}
    /**
     * @return The datacenter in which the node is running.
     * * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
     *   List of explicit LAN and WAN IP addresses for the agent.
     * 
     */
    public Optional<String> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of this health-check.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The node to which the result must be sorted to.
     * 
     */
    public Optional<String> near() {
        return Optional.ofNullable(this.near);
    }
    /**
     * @return The list of metadata to filter the nodes.
     * 
     */
    public Map<String,String> nodeMeta() {
        return this.nodeMeta == null ? Map.of() : this.nodeMeta;
    }
    /**
     * @return Whether to return only nodes with all checks in the
     * passing state.
     * 
     */
    public Optional<Boolean> passing() {
        return Optional.ofNullable(this.passing);
    }
    /**
     * @return A list of entries and details about each endpoint advertising a
     * service.  Each element in the list has three attributes: `node`, `service` and
     * `checks`.  The list of the attributes of each one is detailed below.
     * 
     */
    public List<GetServiceHealthResult> results() {
        return this.results;
    }
    /**
     * @return The name of the tag used to filter the list.
     * 
     */
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }
    public Optional<String> waitFor() {
        return Optional.ofNullable(this.waitFor);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceHealthInvokeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String datacenter;
        private @Nullable String filter;
        private String id;
        private String name;
        private @Nullable String near;
        private @Nullable Map<String,String> nodeMeta;
        private @Nullable Boolean passing;
        private List<GetServiceHealthResult> results;
        private @Nullable String tag;
        private @Nullable String waitFor;
        public Builder() {}
        public Builder(GetServiceHealthInvokeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenter = defaults.datacenter;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.near = defaults.near;
    	      this.nodeMeta = defaults.nodeMeta;
    	      this.passing = defaults.passing;
    	      this.results = defaults.results;
    	      this.tag = defaults.tag;
    	      this.waitFor = defaults.waitFor;
        }

        @CustomType.Setter
        public Builder datacenter(@Nullable String datacenter) {

            this.datacenter = datacenter;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceHealthInvokeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceHealthInvokeResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder near(@Nullable String near) {

            this.near = near;
            return this;
        }
        @CustomType.Setter
        public Builder nodeMeta(@Nullable Map<String,String> nodeMeta) {

            this.nodeMeta = nodeMeta;
            return this;
        }
        @CustomType.Setter
        public Builder passing(@Nullable Boolean passing) {

            this.passing = passing;
            return this;
        }
        @CustomType.Setter
        public Builder results(List<GetServiceHealthResult> results) {
            if (results == null) {
              throw new MissingRequiredPropertyException("GetServiceHealthInvokeResult", "results");
            }
            this.results = results;
            return this;
        }
        public Builder results(GetServiceHealthResult... results) {
            return results(List.of(results));
        }
        @CustomType.Setter
        public Builder tag(@Nullable String tag) {

            this.tag = tag;
            return this;
        }
        @CustomType.Setter
        public Builder waitFor(@Nullable String waitFor) {

            this.waitFor = waitFor;
            return this;
        }
        public GetServiceHealthInvokeResult build() {
            final var _resultValue = new GetServiceHealthInvokeResult();
            _resultValue.datacenter = datacenter;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.near = near;
            _resultValue.nodeMeta = nodeMeta;
            _resultValue.passing = passing;
            _resultValue.results = results;
            _resultValue.tag = tag;
            _resultValue.waitFor = waitFor;
            return _resultValue;
        }
    }
}
