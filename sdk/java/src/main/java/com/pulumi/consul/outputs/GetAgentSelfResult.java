// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAgentSelfResult {
    private String aclDatacenter;
    private String aclDefaultPolicy;
    /**
     * @return * [`acl_down_policy`](https://www.consul.io/docs/agent/options.html#acl_down_policy)
     * * [`acl_enforce_0_8_semantics`](https://www.consul.io/docs/agent/options.html#acl_enforce_version_8)
     * * [`acl_ttl`](https://www.consul.io/docs/agent/options.html#acl_ttl)
     * * [`addresses`](https://www.consul.io/docs/agent/options.html#addresses)
     * * [`advertise_addr`](https://www.consul.io/docs/agent/options.html#_advertise)
     * * [`advertise_addr_wan`](https://www.consul.io/docs/agent/options.html#_advertise-wan)
     * * [`advertise_addrs`](https://www.consul.io/docs/agent/options.html#advertise_addrs)
     * * [`atlas_join`](https://www.consul.io/docs/agent/options.html#_atlas_join)
     * * [`bind_addr`](https://www.consul.io/docs/agent/options.html#_bind)
     * * [`bootstrap_expect`](https://www.consul.io/docs/agent/options.html#_bootstrap_expect)
     * * [`bootstrap_mode`](https://www.consul.io/docs/agent/options.html#_bootstrap)
     * 
     */
    private String aclDisabledTtl;
    private String aclDownPolicy;
    private Boolean aclEnforce08Semantics;
    private String aclTtl;
    private Map<String,String> addresses;
    private String advertiseAddr;
    private String advertiseAddrWan;
    private Map<String,String> advertiseAddrs;
    private Boolean atlasJoin;
    private String bindAddr;
    private Integer bootstrapExpect;
    private Boolean bootstrapMode;
    private String checkDeregisterIntervalMin;
    /**
     * @return * [`check_update_interval`](https://www.consul.io/docs/agent/options.html#check_update_interval)
     * * [`client_addr`](https://www.consul.io/docs/agent/options.html#_client)
     * 
     */
    private String checkReapInterval;
    private String checkUpdateInterval;
    private String clientAddr;
    private String dataDir;
    private String datacenter;
    private Boolean devMode;
    /**
     * @return A map of DNS configuration attributes.  See below for details on the
     * contents of the `dns` attribute.
     * * [`dns_recursors`](https://www.consul.io/docs/agent/options.html#recursors) - A
     *   list of all DNS recursors.
     * * [`data_dir`](https://www.consul.io/docs/agent/options.html#_data_dir)
     * * [`datacenter`](https://www.consul.io/docs/agent/options.html#_datacenter)
     * * [`dev_mode`](https://www.consul.io/docs/agent/options.html#_dev)
     * * [`domain`](https://www.consul.io/docs/agent/options.html#_domain)
     * * [`enable_anonymous_signature`](https://www.consul.io/docs/agent/options.html#disable_anonymous_signature)
     * 
     */
    private Map<String,String> dns;
    private List<String> dnsRecursors;
    private String domain;
    private Boolean enableAnonymousSignature;
    /**
     * @return * [`enable_debug`](https://www.consul.io/docs/agent/options.html#enable_debug)
     * * [`enable_remote_exec`](https://www.consul.io/docs/agent/options.html#disable_remote_exec)
     * * [`enable_syslog`](https://www.consul.io/docs/agent/options.html#_syslog)
     * * [`enable_ui`](https://www.consul.io/docs/agent/options.html#_ui)
     * * [`enable_update_check`](https://www.consul.io/docs/agent/options.html#disable_update_check)
     * * [`id`](https://www.consul.io/docs/agent/options.html#_node_id)
     * * [`leave_on_int`](https://www.consul.io/docs/agent/options.html#skip_leave_on_interrupt)
     * * [`leave_on_term`](https://www.consul.io/docs/agent/options.html#leave_on_terminate)
     * * [`log_level`](https://www.consul.io/docs/agent/options.html#_log_level)
     * * [`name`](https://www.consul.io/docs/agent/options.html#_node)
     * * [`performance`](https://www.consul.io/docs/agent/options.html#performance)
     * * [`pid_file`](https://www.consul.io/docs/agent/options.html#_pid_file)
     * * [`ports`](https://www.consul.io/docs/agent/options.html#ports)
     * * [`protocol_version`](https://www.consul.io/docs/agent/options.html#_protocol)
     * * [`reconnect_timeout_lan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout)
     * * [`reconnect_timeout_wan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout_wan)
     * * [`rejoin_after_leave`](https://www.consul.io/docs/agent/options.html#_rejoin)
     * * [`retry_join`](https://www.consul.io/docs/agent/options.html#retry_join)
     * * [`retry_join_ec2`](https://www.consul.io/docs/agent/options.html#retry_join_ec2) -
     *   A map of EC2 retry attributes.  See below for details on the available
     *   information.
     * * [`retry_join_gce`](https://www.consul.io/docs/agent/options.html#retry_join_gce) -
     *   A map of GCE retry attributes.  See below for details on the available
     *   information.
     * * [`retry_join_wan`](https://www.consul.io/docs/agent/options.html#_retry_join_wan)
     * * [`retry_max_attempts`](https://www.consul.io/docs/agent/options.html#_retry_max)
     * * [`retry_max_attempts_wan`](https://www.consul.io/docs/agent/options.html#_retry_max_wan)
     * * [`serf_lan_bind_addr`](https://www.consul.io/docs/agent/options.html#_serf_lan_bind)
     * * [`serf_wan_bind_addr`](https://www.consul.io/docs/agent/options.html#_serf_wan_bind)
     * * [`server_mode`](https://www.consul.io/docs/agent/options.html#_server)
     * * [`server_name`](https://www.consul.io/docs/agent/options.html#server_name)
     * * [`session_ttl_min`](https://www.consul.io/docs/agent/options.html#session_ttl_min)
     * * [`start_join`](https://www.consul.io/docs/agent/options.html#start_join)
     * * [`start_join_wan`](https://www.consul.io/docs/agent/options.html#start_join_wan)
     * * [`syslog_facility`](https://www.consul.io/docs/agent/options.html#syslog_facility)
     * * [`tls_ca_file`](https://www.consul.io/docs/agent/options.html#ca_file)
     * * [`tls_cert_file`](https://www.consul.io/docs/agent/options.html#cert_file)
     * * [`tls_key_file`](https://www.consul.io/docs/agent/options.html#key_file)
     * * [`tls_min_version`](https://www.consul.io/docs/agent/options.html#tls_min_version)
     * * [`tls_verify_incoming`](https://www.consul.io/docs/agent/options.html#verify_incoming)
     * * [`tls_verify_outgoing`](https://www.consul.io/docs/agent/options.html#verify_outgoing)
     * * [`tls_verify_server_hostname`](https://www.consul.io/docs/agent/options.html#verify_server_hostname)
     * * [`tagged_addresses`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)
     * * [`telemetry`](https://www.consul.io/docs/agent/options.html#telemetry) - A map
     *   of telemetry configuration.
     * * [`translate_wan_addrs`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)
     * * [`ui_dir`](https://www.consul.io/docs/agent/options.html#ui_dir)
     * * [`unix_sockets`](https://www.consul.io/docs/agent/options.html#unix_sockets)
     * 
     */
    private Boolean enableCoordinates;
    private Boolean enableDebug;
    private Boolean enableRemoteExec;
    private Boolean enableSyslog;
    private Boolean enableUi;
    private Boolean enableUpdateCheck;
    private String id;
    private Boolean leaveOnInt;
    private Boolean leaveOnTerm;
    private String logLevel;
    private String name;
    private Map<String,String> performance;
    private String pidFile;
    private Map<String,Integer> ports;
    private Integer protocolVersion;
    private String reconnectTimeoutLan;
    private String reconnectTimeoutWan;
    private Boolean rejoinAfterLeave;
    private Map<String,String> retryJoinEc2;
    private Map<String,String> retryJoinGce;
    private List<String> retryJoinWans;
    private List<String> retryJoins;
    private Integer retryMaxAttempts;
    private Integer retryMaxAttemptsWan;
    private String serfLanBindAddr;
    private String serfWanBindAddr;
    private Boolean serverMode;
    private String serverName;
    private String sessionTtlMin;
    private List<String> startJoinWans;
    private List<String> startJoins;
    private String syslogFacility;
    private Map<String,String> taggedAddresses;
    private Map<String,String> telemetry;
    private String tlsCaFile;
    private String tlsCertFile;
    private String tlsKeyFile;
    private String tlsMinVersion;
    private Boolean tlsVerifyIncoming;
    private Boolean tlsVerifyOutgoing;
    private Boolean tlsVerifyServerHostname;
    private Boolean translateWanAddrs;
    private String uiDir;
    private Map<String,String> unixSockets;
    /**
     * @return The version of the Consul agent.
     * 
     */
    private String version;
    private String versionPrerelease;
    private String versionRevision;

    private GetAgentSelfResult() {}
    public String aclDatacenter() {
        return this.aclDatacenter;
    }
    public String aclDefaultPolicy() {
        return this.aclDefaultPolicy;
    }
    /**
     * @return * [`acl_down_policy`](https://www.consul.io/docs/agent/options.html#acl_down_policy)
     * * [`acl_enforce_0_8_semantics`](https://www.consul.io/docs/agent/options.html#acl_enforce_version_8)
     * * [`acl_ttl`](https://www.consul.io/docs/agent/options.html#acl_ttl)
     * * [`addresses`](https://www.consul.io/docs/agent/options.html#addresses)
     * * [`advertise_addr`](https://www.consul.io/docs/agent/options.html#_advertise)
     * * [`advertise_addr_wan`](https://www.consul.io/docs/agent/options.html#_advertise-wan)
     * * [`advertise_addrs`](https://www.consul.io/docs/agent/options.html#advertise_addrs)
     * * [`atlas_join`](https://www.consul.io/docs/agent/options.html#_atlas_join)
     * * [`bind_addr`](https://www.consul.io/docs/agent/options.html#_bind)
     * * [`bootstrap_expect`](https://www.consul.io/docs/agent/options.html#_bootstrap_expect)
     * * [`bootstrap_mode`](https://www.consul.io/docs/agent/options.html#_bootstrap)
     * 
     */
    public String aclDisabledTtl() {
        return this.aclDisabledTtl;
    }
    public String aclDownPolicy() {
        return this.aclDownPolicy;
    }
    public Boolean aclEnforce08Semantics() {
        return this.aclEnforce08Semantics;
    }
    public String aclTtl() {
        return this.aclTtl;
    }
    public Map<String,String> addresses() {
        return this.addresses;
    }
    public String advertiseAddr() {
        return this.advertiseAddr;
    }
    public String advertiseAddrWan() {
        return this.advertiseAddrWan;
    }
    public Map<String,String> advertiseAddrs() {
        return this.advertiseAddrs;
    }
    public Boolean atlasJoin() {
        return this.atlasJoin;
    }
    public String bindAddr() {
        return this.bindAddr;
    }
    public Integer bootstrapExpect() {
        return this.bootstrapExpect;
    }
    public Boolean bootstrapMode() {
        return this.bootstrapMode;
    }
    public String checkDeregisterIntervalMin() {
        return this.checkDeregisterIntervalMin;
    }
    /**
     * @return * [`check_update_interval`](https://www.consul.io/docs/agent/options.html#check_update_interval)
     * * [`client_addr`](https://www.consul.io/docs/agent/options.html#_client)
     * 
     */
    public String checkReapInterval() {
        return this.checkReapInterval;
    }
    public String checkUpdateInterval() {
        return this.checkUpdateInterval;
    }
    public String clientAddr() {
        return this.clientAddr;
    }
    public String dataDir() {
        return this.dataDir;
    }
    public String datacenter() {
        return this.datacenter;
    }
    public Boolean devMode() {
        return this.devMode;
    }
    /**
     * @return A map of DNS configuration attributes.  See below for details on the
     * contents of the `dns` attribute.
     * * [`dns_recursors`](https://www.consul.io/docs/agent/options.html#recursors) - A
     *   list of all DNS recursors.
     * * [`data_dir`](https://www.consul.io/docs/agent/options.html#_data_dir)
     * * [`datacenter`](https://www.consul.io/docs/agent/options.html#_datacenter)
     * * [`dev_mode`](https://www.consul.io/docs/agent/options.html#_dev)
     * * [`domain`](https://www.consul.io/docs/agent/options.html#_domain)
     * * [`enable_anonymous_signature`](https://www.consul.io/docs/agent/options.html#disable_anonymous_signature)
     * 
     */
    public Map<String,String> dns() {
        return this.dns;
    }
    public List<String> dnsRecursors() {
        return this.dnsRecursors;
    }
    public String domain() {
        return this.domain;
    }
    public Boolean enableAnonymousSignature() {
        return this.enableAnonymousSignature;
    }
    /**
     * @return * [`enable_debug`](https://www.consul.io/docs/agent/options.html#enable_debug)
     * * [`enable_remote_exec`](https://www.consul.io/docs/agent/options.html#disable_remote_exec)
     * * [`enable_syslog`](https://www.consul.io/docs/agent/options.html#_syslog)
     * * [`enable_ui`](https://www.consul.io/docs/agent/options.html#_ui)
     * * [`enable_update_check`](https://www.consul.io/docs/agent/options.html#disable_update_check)
     * * [`id`](https://www.consul.io/docs/agent/options.html#_node_id)
     * * [`leave_on_int`](https://www.consul.io/docs/agent/options.html#skip_leave_on_interrupt)
     * * [`leave_on_term`](https://www.consul.io/docs/agent/options.html#leave_on_terminate)
     * * [`log_level`](https://www.consul.io/docs/agent/options.html#_log_level)
     * * [`name`](https://www.consul.io/docs/agent/options.html#_node)
     * * [`performance`](https://www.consul.io/docs/agent/options.html#performance)
     * * [`pid_file`](https://www.consul.io/docs/agent/options.html#_pid_file)
     * * [`ports`](https://www.consul.io/docs/agent/options.html#ports)
     * * [`protocol_version`](https://www.consul.io/docs/agent/options.html#_protocol)
     * * [`reconnect_timeout_lan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout)
     * * [`reconnect_timeout_wan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout_wan)
     * * [`rejoin_after_leave`](https://www.consul.io/docs/agent/options.html#_rejoin)
     * * [`retry_join`](https://www.consul.io/docs/agent/options.html#retry_join)
     * * [`retry_join_ec2`](https://www.consul.io/docs/agent/options.html#retry_join_ec2) -
     *   A map of EC2 retry attributes.  See below for details on the available
     *   information.
     * * [`retry_join_gce`](https://www.consul.io/docs/agent/options.html#retry_join_gce) -
     *   A map of GCE retry attributes.  See below for details on the available
     *   information.
     * * [`retry_join_wan`](https://www.consul.io/docs/agent/options.html#_retry_join_wan)
     * * [`retry_max_attempts`](https://www.consul.io/docs/agent/options.html#_retry_max)
     * * [`retry_max_attempts_wan`](https://www.consul.io/docs/agent/options.html#_retry_max_wan)
     * * [`serf_lan_bind_addr`](https://www.consul.io/docs/agent/options.html#_serf_lan_bind)
     * * [`serf_wan_bind_addr`](https://www.consul.io/docs/agent/options.html#_serf_wan_bind)
     * * [`server_mode`](https://www.consul.io/docs/agent/options.html#_server)
     * * [`server_name`](https://www.consul.io/docs/agent/options.html#server_name)
     * * [`session_ttl_min`](https://www.consul.io/docs/agent/options.html#session_ttl_min)
     * * [`start_join`](https://www.consul.io/docs/agent/options.html#start_join)
     * * [`start_join_wan`](https://www.consul.io/docs/agent/options.html#start_join_wan)
     * * [`syslog_facility`](https://www.consul.io/docs/agent/options.html#syslog_facility)
     * * [`tls_ca_file`](https://www.consul.io/docs/agent/options.html#ca_file)
     * * [`tls_cert_file`](https://www.consul.io/docs/agent/options.html#cert_file)
     * * [`tls_key_file`](https://www.consul.io/docs/agent/options.html#key_file)
     * * [`tls_min_version`](https://www.consul.io/docs/agent/options.html#tls_min_version)
     * * [`tls_verify_incoming`](https://www.consul.io/docs/agent/options.html#verify_incoming)
     * * [`tls_verify_outgoing`](https://www.consul.io/docs/agent/options.html#verify_outgoing)
     * * [`tls_verify_server_hostname`](https://www.consul.io/docs/agent/options.html#verify_server_hostname)
     * * [`tagged_addresses`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)
     * * [`telemetry`](https://www.consul.io/docs/agent/options.html#telemetry) - A map
     *   of telemetry configuration.
     * * [`translate_wan_addrs`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)
     * * [`ui_dir`](https://www.consul.io/docs/agent/options.html#ui_dir)
     * * [`unix_sockets`](https://www.consul.io/docs/agent/options.html#unix_sockets)
     * 
     */
    public Boolean enableCoordinates() {
        return this.enableCoordinates;
    }
    public Boolean enableDebug() {
        return this.enableDebug;
    }
    public Boolean enableRemoteExec() {
        return this.enableRemoteExec;
    }
    public Boolean enableSyslog() {
        return this.enableSyslog;
    }
    public Boolean enableUi() {
        return this.enableUi;
    }
    public Boolean enableUpdateCheck() {
        return this.enableUpdateCheck;
    }
    public String id() {
        return this.id;
    }
    public Boolean leaveOnInt() {
        return this.leaveOnInt;
    }
    public Boolean leaveOnTerm() {
        return this.leaveOnTerm;
    }
    public String logLevel() {
        return this.logLevel;
    }
    public String name() {
        return this.name;
    }
    public Map<String,String> performance() {
        return this.performance;
    }
    public String pidFile() {
        return this.pidFile;
    }
    public Map<String,Integer> ports() {
        return this.ports;
    }
    public Integer protocolVersion() {
        return this.protocolVersion;
    }
    public String reconnectTimeoutLan() {
        return this.reconnectTimeoutLan;
    }
    public String reconnectTimeoutWan() {
        return this.reconnectTimeoutWan;
    }
    public Boolean rejoinAfterLeave() {
        return this.rejoinAfterLeave;
    }
    public Map<String,String> retryJoinEc2() {
        return this.retryJoinEc2;
    }
    public Map<String,String> retryJoinGce() {
        return this.retryJoinGce;
    }
    public List<String> retryJoinWans() {
        return this.retryJoinWans;
    }
    public List<String> retryJoins() {
        return this.retryJoins;
    }
    public Integer retryMaxAttempts() {
        return this.retryMaxAttempts;
    }
    public Integer retryMaxAttemptsWan() {
        return this.retryMaxAttemptsWan;
    }
    public String serfLanBindAddr() {
        return this.serfLanBindAddr;
    }
    public String serfWanBindAddr() {
        return this.serfWanBindAddr;
    }
    public Boolean serverMode() {
        return this.serverMode;
    }
    public String serverName() {
        return this.serverName;
    }
    public String sessionTtlMin() {
        return this.sessionTtlMin;
    }
    public List<String> startJoinWans() {
        return this.startJoinWans;
    }
    public List<String> startJoins() {
        return this.startJoins;
    }
    public String syslogFacility() {
        return this.syslogFacility;
    }
    public Map<String,String> taggedAddresses() {
        return this.taggedAddresses;
    }
    public Map<String,String> telemetry() {
        return this.telemetry;
    }
    public String tlsCaFile() {
        return this.tlsCaFile;
    }
    public String tlsCertFile() {
        return this.tlsCertFile;
    }
    public String tlsKeyFile() {
        return this.tlsKeyFile;
    }
    public String tlsMinVersion() {
        return this.tlsMinVersion;
    }
    public Boolean tlsVerifyIncoming() {
        return this.tlsVerifyIncoming;
    }
    public Boolean tlsVerifyOutgoing() {
        return this.tlsVerifyOutgoing;
    }
    public Boolean tlsVerifyServerHostname() {
        return this.tlsVerifyServerHostname;
    }
    public Boolean translateWanAddrs() {
        return this.translateWanAddrs;
    }
    public String uiDir() {
        return this.uiDir;
    }
    public Map<String,String> unixSockets() {
        return this.unixSockets;
    }
    /**
     * @return The version of the Consul agent.
     * 
     */
    public String version() {
        return this.version;
    }
    public String versionPrerelease() {
        return this.versionPrerelease;
    }
    public String versionRevision() {
        return this.versionRevision;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAgentSelfResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aclDatacenter;
        private String aclDefaultPolicy;
        private String aclDisabledTtl;
        private String aclDownPolicy;
        private Boolean aclEnforce08Semantics;
        private String aclTtl;
        private Map<String,String> addresses;
        private String advertiseAddr;
        private String advertiseAddrWan;
        private Map<String,String> advertiseAddrs;
        private Boolean atlasJoin;
        private String bindAddr;
        private Integer bootstrapExpect;
        private Boolean bootstrapMode;
        private String checkDeregisterIntervalMin;
        private String checkReapInterval;
        private String checkUpdateInterval;
        private String clientAddr;
        private String dataDir;
        private String datacenter;
        private Boolean devMode;
        private Map<String,String> dns;
        private List<String> dnsRecursors;
        private String domain;
        private Boolean enableAnonymousSignature;
        private Boolean enableCoordinates;
        private Boolean enableDebug;
        private Boolean enableRemoteExec;
        private Boolean enableSyslog;
        private Boolean enableUi;
        private Boolean enableUpdateCheck;
        private String id;
        private Boolean leaveOnInt;
        private Boolean leaveOnTerm;
        private String logLevel;
        private String name;
        private Map<String,String> performance;
        private String pidFile;
        private Map<String,Integer> ports;
        private Integer protocolVersion;
        private String reconnectTimeoutLan;
        private String reconnectTimeoutWan;
        private Boolean rejoinAfterLeave;
        private Map<String,String> retryJoinEc2;
        private Map<String,String> retryJoinGce;
        private List<String> retryJoinWans;
        private List<String> retryJoins;
        private Integer retryMaxAttempts;
        private Integer retryMaxAttemptsWan;
        private String serfLanBindAddr;
        private String serfWanBindAddr;
        private Boolean serverMode;
        private String serverName;
        private String sessionTtlMin;
        private List<String> startJoinWans;
        private List<String> startJoins;
        private String syslogFacility;
        private Map<String,String> taggedAddresses;
        private Map<String,String> telemetry;
        private String tlsCaFile;
        private String tlsCertFile;
        private String tlsKeyFile;
        private String tlsMinVersion;
        private Boolean tlsVerifyIncoming;
        private Boolean tlsVerifyOutgoing;
        private Boolean tlsVerifyServerHostname;
        private Boolean translateWanAddrs;
        private String uiDir;
        private Map<String,String> unixSockets;
        private String version;
        private String versionPrerelease;
        private String versionRevision;
        public Builder() {}
        public Builder(GetAgentSelfResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclDatacenter = defaults.aclDatacenter;
    	      this.aclDefaultPolicy = defaults.aclDefaultPolicy;
    	      this.aclDisabledTtl = defaults.aclDisabledTtl;
    	      this.aclDownPolicy = defaults.aclDownPolicy;
    	      this.aclEnforce08Semantics = defaults.aclEnforce08Semantics;
    	      this.aclTtl = defaults.aclTtl;
    	      this.addresses = defaults.addresses;
    	      this.advertiseAddr = defaults.advertiseAddr;
    	      this.advertiseAddrWan = defaults.advertiseAddrWan;
    	      this.advertiseAddrs = defaults.advertiseAddrs;
    	      this.atlasJoin = defaults.atlasJoin;
    	      this.bindAddr = defaults.bindAddr;
    	      this.bootstrapExpect = defaults.bootstrapExpect;
    	      this.bootstrapMode = defaults.bootstrapMode;
    	      this.checkDeregisterIntervalMin = defaults.checkDeregisterIntervalMin;
    	      this.checkReapInterval = defaults.checkReapInterval;
    	      this.checkUpdateInterval = defaults.checkUpdateInterval;
    	      this.clientAddr = defaults.clientAddr;
    	      this.dataDir = defaults.dataDir;
    	      this.datacenter = defaults.datacenter;
    	      this.devMode = defaults.devMode;
    	      this.dns = defaults.dns;
    	      this.dnsRecursors = defaults.dnsRecursors;
    	      this.domain = defaults.domain;
    	      this.enableAnonymousSignature = defaults.enableAnonymousSignature;
    	      this.enableCoordinates = defaults.enableCoordinates;
    	      this.enableDebug = defaults.enableDebug;
    	      this.enableRemoteExec = defaults.enableRemoteExec;
    	      this.enableSyslog = defaults.enableSyslog;
    	      this.enableUi = defaults.enableUi;
    	      this.enableUpdateCheck = defaults.enableUpdateCheck;
    	      this.id = defaults.id;
    	      this.leaveOnInt = defaults.leaveOnInt;
    	      this.leaveOnTerm = defaults.leaveOnTerm;
    	      this.logLevel = defaults.logLevel;
    	      this.name = defaults.name;
    	      this.performance = defaults.performance;
    	      this.pidFile = defaults.pidFile;
    	      this.ports = defaults.ports;
    	      this.protocolVersion = defaults.protocolVersion;
    	      this.reconnectTimeoutLan = defaults.reconnectTimeoutLan;
    	      this.reconnectTimeoutWan = defaults.reconnectTimeoutWan;
    	      this.rejoinAfterLeave = defaults.rejoinAfterLeave;
    	      this.retryJoinEc2 = defaults.retryJoinEc2;
    	      this.retryJoinGce = defaults.retryJoinGce;
    	      this.retryJoinWans = defaults.retryJoinWans;
    	      this.retryJoins = defaults.retryJoins;
    	      this.retryMaxAttempts = defaults.retryMaxAttempts;
    	      this.retryMaxAttemptsWan = defaults.retryMaxAttemptsWan;
    	      this.serfLanBindAddr = defaults.serfLanBindAddr;
    	      this.serfWanBindAddr = defaults.serfWanBindAddr;
    	      this.serverMode = defaults.serverMode;
    	      this.serverName = defaults.serverName;
    	      this.sessionTtlMin = defaults.sessionTtlMin;
    	      this.startJoinWans = defaults.startJoinWans;
    	      this.startJoins = defaults.startJoins;
    	      this.syslogFacility = defaults.syslogFacility;
    	      this.taggedAddresses = defaults.taggedAddresses;
    	      this.telemetry = defaults.telemetry;
    	      this.tlsCaFile = defaults.tlsCaFile;
    	      this.tlsCertFile = defaults.tlsCertFile;
    	      this.tlsKeyFile = defaults.tlsKeyFile;
    	      this.tlsMinVersion = defaults.tlsMinVersion;
    	      this.tlsVerifyIncoming = defaults.tlsVerifyIncoming;
    	      this.tlsVerifyOutgoing = defaults.tlsVerifyOutgoing;
    	      this.tlsVerifyServerHostname = defaults.tlsVerifyServerHostname;
    	      this.translateWanAddrs = defaults.translateWanAddrs;
    	      this.uiDir = defaults.uiDir;
    	      this.unixSockets = defaults.unixSockets;
    	      this.version = defaults.version;
    	      this.versionPrerelease = defaults.versionPrerelease;
    	      this.versionRevision = defaults.versionRevision;
        }

        @CustomType.Setter
        public Builder aclDatacenter(String aclDatacenter) {
            if (aclDatacenter == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "aclDatacenter");
            }
            this.aclDatacenter = aclDatacenter;
            return this;
        }
        @CustomType.Setter
        public Builder aclDefaultPolicy(String aclDefaultPolicy) {
            if (aclDefaultPolicy == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "aclDefaultPolicy");
            }
            this.aclDefaultPolicy = aclDefaultPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder aclDisabledTtl(String aclDisabledTtl) {
            if (aclDisabledTtl == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "aclDisabledTtl");
            }
            this.aclDisabledTtl = aclDisabledTtl;
            return this;
        }
        @CustomType.Setter
        public Builder aclDownPolicy(String aclDownPolicy) {
            if (aclDownPolicy == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "aclDownPolicy");
            }
            this.aclDownPolicy = aclDownPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder aclEnforce08Semantics(Boolean aclEnforce08Semantics) {
            if (aclEnforce08Semantics == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "aclEnforce08Semantics");
            }
            this.aclEnforce08Semantics = aclEnforce08Semantics;
            return this;
        }
        @CustomType.Setter
        public Builder aclTtl(String aclTtl) {
            if (aclTtl == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "aclTtl");
            }
            this.aclTtl = aclTtl;
            return this;
        }
        @CustomType.Setter
        public Builder addresses(Map<String,String> addresses) {
            if (addresses == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "addresses");
            }
            this.addresses = addresses;
            return this;
        }
        @CustomType.Setter
        public Builder advertiseAddr(String advertiseAddr) {
            if (advertiseAddr == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "advertiseAddr");
            }
            this.advertiseAddr = advertiseAddr;
            return this;
        }
        @CustomType.Setter
        public Builder advertiseAddrWan(String advertiseAddrWan) {
            if (advertiseAddrWan == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "advertiseAddrWan");
            }
            this.advertiseAddrWan = advertiseAddrWan;
            return this;
        }
        @CustomType.Setter
        public Builder advertiseAddrs(Map<String,String> advertiseAddrs) {
            if (advertiseAddrs == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "advertiseAddrs");
            }
            this.advertiseAddrs = advertiseAddrs;
            return this;
        }
        @CustomType.Setter
        public Builder atlasJoin(Boolean atlasJoin) {
            if (atlasJoin == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "atlasJoin");
            }
            this.atlasJoin = atlasJoin;
            return this;
        }
        @CustomType.Setter
        public Builder bindAddr(String bindAddr) {
            if (bindAddr == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "bindAddr");
            }
            this.bindAddr = bindAddr;
            return this;
        }
        @CustomType.Setter
        public Builder bootstrapExpect(Integer bootstrapExpect) {
            if (bootstrapExpect == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "bootstrapExpect");
            }
            this.bootstrapExpect = bootstrapExpect;
            return this;
        }
        @CustomType.Setter
        public Builder bootstrapMode(Boolean bootstrapMode) {
            if (bootstrapMode == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "bootstrapMode");
            }
            this.bootstrapMode = bootstrapMode;
            return this;
        }
        @CustomType.Setter
        public Builder checkDeregisterIntervalMin(String checkDeregisterIntervalMin) {
            if (checkDeregisterIntervalMin == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "checkDeregisterIntervalMin");
            }
            this.checkDeregisterIntervalMin = checkDeregisterIntervalMin;
            return this;
        }
        @CustomType.Setter
        public Builder checkReapInterval(String checkReapInterval) {
            if (checkReapInterval == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "checkReapInterval");
            }
            this.checkReapInterval = checkReapInterval;
            return this;
        }
        @CustomType.Setter
        public Builder checkUpdateInterval(String checkUpdateInterval) {
            if (checkUpdateInterval == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "checkUpdateInterval");
            }
            this.checkUpdateInterval = checkUpdateInterval;
            return this;
        }
        @CustomType.Setter
        public Builder clientAddr(String clientAddr) {
            if (clientAddr == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "clientAddr");
            }
            this.clientAddr = clientAddr;
            return this;
        }
        @CustomType.Setter
        public Builder dataDir(String dataDir) {
            if (dataDir == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "dataDir");
            }
            this.dataDir = dataDir;
            return this;
        }
        @CustomType.Setter
        public Builder datacenter(String datacenter) {
            if (datacenter == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "datacenter");
            }
            this.datacenter = datacenter;
            return this;
        }
        @CustomType.Setter
        public Builder devMode(Boolean devMode) {
            if (devMode == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "devMode");
            }
            this.devMode = devMode;
            return this;
        }
        @CustomType.Setter
        public Builder dns(Map<String,String> dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "dns");
            }
            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder dnsRecursors(List<String> dnsRecursors) {
            if (dnsRecursors == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "dnsRecursors");
            }
            this.dnsRecursors = dnsRecursors;
            return this;
        }
        public Builder dnsRecursors(String... dnsRecursors) {
            return dnsRecursors(List.of(dnsRecursors));
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enableAnonymousSignature(Boolean enableAnonymousSignature) {
            if (enableAnonymousSignature == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "enableAnonymousSignature");
            }
            this.enableAnonymousSignature = enableAnonymousSignature;
            return this;
        }
        @CustomType.Setter
        public Builder enableCoordinates(Boolean enableCoordinates) {
            if (enableCoordinates == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "enableCoordinates");
            }
            this.enableCoordinates = enableCoordinates;
            return this;
        }
        @CustomType.Setter
        public Builder enableDebug(Boolean enableDebug) {
            if (enableDebug == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "enableDebug");
            }
            this.enableDebug = enableDebug;
            return this;
        }
        @CustomType.Setter
        public Builder enableRemoteExec(Boolean enableRemoteExec) {
            if (enableRemoteExec == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "enableRemoteExec");
            }
            this.enableRemoteExec = enableRemoteExec;
            return this;
        }
        @CustomType.Setter
        public Builder enableSyslog(Boolean enableSyslog) {
            if (enableSyslog == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "enableSyslog");
            }
            this.enableSyslog = enableSyslog;
            return this;
        }
        @CustomType.Setter
        public Builder enableUi(Boolean enableUi) {
            if (enableUi == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "enableUi");
            }
            this.enableUi = enableUi;
            return this;
        }
        @CustomType.Setter
        public Builder enableUpdateCheck(Boolean enableUpdateCheck) {
            if (enableUpdateCheck == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "enableUpdateCheck");
            }
            this.enableUpdateCheck = enableUpdateCheck;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder leaveOnInt(Boolean leaveOnInt) {
            if (leaveOnInt == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "leaveOnInt");
            }
            this.leaveOnInt = leaveOnInt;
            return this;
        }
        @CustomType.Setter
        public Builder leaveOnTerm(Boolean leaveOnTerm) {
            if (leaveOnTerm == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "leaveOnTerm");
            }
            this.leaveOnTerm = leaveOnTerm;
            return this;
        }
        @CustomType.Setter
        public Builder logLevel(String logLevel) {
            if (logLevel == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "logLevel");
            }
            this.logLevel = logLevel;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder performance(Map<String,String> performance) {
            if (performance == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "performance");
            }
            this.performance = performance;
            return this;
        }
        @CustomType.Setter
        public Builder pidFile(String pidFile) {
            if (pidFile == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "pidFile");
            }
            this.pidFile = pidFile;
            return this;
        }
        @CustomType.Setter
        public Builder ports(Map<String,Integer> ports) {
            if (ports == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "ports");
            }
            this.ports = ports;
            return this;
        }
        @CustomType.Setter
        public Builder protocolVersion(Integer protocolVersion) {
            if (protocolVersion == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "protocolVersion");
            }
            this.protocolVersion = protocolVersion;
            return this;
        }
        @CustomType.Setter
        public Builder reconnectTimeoutLan(String reconnectTimeoutLan) {
            if (reconnectTimeoutLan == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "reconnectTimeoutLan");
            }
            this.reconnectTimeoutLan = reconnectTimeoutLan;
            return this;
        }
        @CustomType.Setter
        public Builder reconnectTimeoutWan(String reconnectTimeoutWan) {
            if (reconnectTimeoutWan == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "reconnectTimeoutWan");
            }
            this.reconnectTimeoutWan = reconnectTimeoutWan;
            return this;
        }
        @CustomType.Setter
        public Builder rejoinAfterLeave(Boolean rejoinAfterLeave) {
            if (rejoinAfterLeave == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "rejoinAfterLeave");
            }
            this.rejoinAfterLeave = rejoinAfterLeave;
            return this;
        }
        @CustomType.Setter
        public Builder retryJoinEc2(Map<String,String> retryJoinEc2) {
            if (retryJoinEc2 == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "retryJoinEc2");
            }
            this.retryJoinEc2 = retryJoinEc2;
            return this;
        }
        @CustomType.Setter
        public Builder retryJoinGce(Map<String,String> retryJoinGce) {
            if (retryJoinGce == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "retryJoinGce");
            }
            this.retryJoinGce = retryJoinGce;
            return this;
        }
        @CustomType.Setter
        public Builder retryJoinWans(List<String> retryJoinWans) {
            if (retryJoinWans == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "retryJoinWans");
            }
            this.retryJoinWans = retryJoinWans;
            return this;
        }
        public Builder retryJoinWans(String... retryJoinWans) {
            return retryJoinWans(List.of(retryJoinWans));
        }
        @CustomType.Setter
        public Builder retryJoins(List<String> retryJoins) {
            if (retryJoins == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "retryJoins");
            }
            this.retryJoins = retryJoins;
            return this;
        }
        public Builder retryJoins(String... retryJoins) {
            return retryJoins(List.of(retryJoins));
        }
        @CustomType.Setter
        public Builder retryMaxAttempts(Integer retryMaxAttempts) {
            if (retryMaxAttempts == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "retryMaxAttempts");
            }
            this.retryMaxAttempts = retryMaxAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder retryMaxAttemptsWan(Integer retryMaxAttemptsWan) {
            if (retryMaxAttemptsWan == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "retryMaxAttemptsWan");
            }
            this.retryMaxAttemptsWan = retryMaxAttemptsWan;
            return this;
        }
        @CustomType.Setter
        public Builder serfLanBindAddr(String serfLanBindAddr) {
            if (serfLanBindAddr == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "serfLanBindAddr");
            }
            this.serfLanBindAddr = serfLanBindAddr;
            return this;
        }
        @CustomType.Setter
        public Builder serfWanBindAddr(String serfWanBindAddr) {
            if (serfWanBindAddr == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "serfWanBindAddr");
            }
            this.serfWanBindAddr = serfWanBindAddr;
            return this;
        }
        @CustomType.Setter
        public Builder serverMode(Boolean serverMode) {
            if (serverMode == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "serverMode");
            }
            this.serverMode = serverMode;
            return this;
        }
        @CustomType.Setter
        public Builder serverName(String serverName) {
            if (serverName == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "serverName");
            }
            this.serverName = serverName;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTtlMin(String sessionTtlMin) {
            if (sessionTtlMin == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "sessionTtlMin");
            }
            this.sessionTtlMin = sessionTtlMin;
            return this;
        }
        @CustomType.Setter
        public Builder startJoinWans(List<String> startJoinWans) {
            if (startJoinWans == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "startJoinWans");
            }
            this.startJoinWans = startJoinWans;
            return this;
        }
        public Builder startJoinWans(String... startJoinWans) {
            return startJoinWans(List.of(startJoinWans));
        }
        @CustomType.Setter
        public Builder startJoins(List<String> startJoins) {
            if (startJoins == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "startJoins");
            }
            this.startJoins = startJoins;
            return this;
        }
        public Builder startJoins(String... startJoins) {
            return startJoins(List.of(startJoins));
        }
        @CustomType.Setter
        public Builder syslogFacility(String syslogFacility) {
            if (syslogFacility == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "syslogFacility");
            }
            this.syslogFacility = syslogFacility;
            return this;
        }
        @CustomType.Setter
        public Builder taggedAddresses(Map<String,String> taggedAddresses) {
            if (taggedAddresses == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "taggedAddresses");
            }
            this.taggedAddresses = taggedAddresses;
            return this;
        }
        @CustomType.Setter
        public Builder telemetry(Map<String,String> telemetry) {
            if (telemetry == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "telemetry");
            }
            this.telemetry = telemetry;
            return this;
        }
        @CustomType.Setter
        public Builder tlsCaFile(String tlsCaFile) {
            if (tlsCaFile == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "tlsCaFile");
            }
            this.tlsCaFile = tlsCaFile;
            return this;
        }
        @CustomType.Setter
        public Builder tlsCertFile(String tlsCertFile) {
            if (tlsCertFile == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "tlsCertFile");
            }
            this.tlsCertFile = tlsCertFile;
            return this;
        }
        @CustomType.Setter
        public Builder tlsKeyFile(String tlsKeyFile) {
            if (tlsKeyFile == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "tlsKeyFile");
            }
            this.tlsKeyFile = tlsKeyFile;
            return this;
        }
        @CustomType.Setter
        public Builder tlsMinVersion(String tlsMinVersion) {
            if (tlsMinVersion == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "tlsMinVersion");
            }
            this.tlsMinVersion = tlsMinVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tlsVerifyIncoming(Boolean tlsVerifyIncoming) {
            if (tlsVerifyIncoming == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "tlsVerifyIncoming");
            }
            this.tlsVerifyIncoming = tlsVerifyIncoming;
            return this;
        }
        @CustomType.Setter
        public Builder tlsVerifyOutgoing(Boolean tlsVerifyOutgoing) {
            if (tlsVerifyOutgoing == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "tlsVerifyOutgoing");
            }
            this.tlsVerifyOutgoing = tlsVerifyOutgoing;
            return this;
        }
        @CustomType.Setter
        public Builder tlsVerifyServerHostname(Boolean tlsVerifyServerHostname) {
            if (tlsVerifyServerHostname == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "tlsVerifyServerHostname");
            }
            this.tlsVerifyServerHostname = tlsVerifyServerHostname;
            return this;
        }
        @CustomType.Setter
        public Builder translateWanAddrs(Boolean translateWanAddrs) {
            if (translateWanAddrs == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "translateWanAddrs");
            }
            this.translateWanAddrs = translateWanAddrs;
            return this;
        }
        @CustomType.Setter
        public Builder uiDir(String uiDir) {
            if (uiDir == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "uiDir");
            }
            this.uiDir = uiDir;
            return this;
        }
        @CustomType.Setter
        public Builder unixSockets(Map<String,String> unixSockets) {
            if (unixSockets == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "unixSockets");
            }
            this.unixSockets = unixSockets;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versionPrerelease(String versionPrerelease) {
            if (versionPrerelease == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "versionPrerelease");
            }
            this.versionPrerelease = versionPrerelease;
            return this;
        }
        @CustomType.Setter
        public Builder versionRevision(String versionRevision) {
            if (versionRevision == null) {
              throw new MissingRequiredPropertyException("GetAgentSelfResult", "versionRevision");
            }
            this.versionRevision = versionRevision;
            return this;
        }
        public GetAgentSelfResult build() {
            final var _resultValue = new GetAgentSelfResult();
            _resultValue.aclDatacenter = aclDatacenter;
            _resultValue.aclDefaultPolicy = aclDefaultPolicy;
            _resultValue.aclDisabledTtl = aclDisabledTtl;
            _resultValue.aclDownPolicy = aclDownPolicy;
            _resultValue.aclEnforce08Semantics = aclEnforce08Semantics;
            _resultValue.aclTtl = aclTtl;
            _resultValue.addresses = addresses;
            _resultValue.advertiseAddr = advertiseAddr;
            _resultValue.advertiseAddrWan = advertiseAddrWan;
            _resultValue.advertiseAddrs = advertiseAddrs;
            _resultValue.atlasJoin = atlasJoin;
            _resultValue.bindAddr = bindAddr;
            _resultValue.bootstrapExpect = bootstrapExpect;
            _resultValue.bootstrapMode = bootstrapMode;
            _resultValue.checkDeregisterIntervalMin = checkDeregisterIntervalMin;
            _resultValue.checkReapInterval = checkReapInterval;
            _resultValue.checkUpdateInterval = checkUpdateInterval;
            _resultValue.clientAddr = clientAddr;
            _resultValue.dataDir = dataDir;
            _resultValue.datacenter = datacenter;
            _resultValue.devMode = devMode;
            _resultValue.dns = dns;
            _resultValue.dnsRecursors = dnsRecursors;
            _resultValue.domain = domain;
            _resultValue.enableAnonymousSignature = enableAnonymousSignature;
            _resultValue.enableCoordinates = enableCoordinates;
            _resultValue.enableDebug = enableDebug;
            _resultValue.enableRemoteExec = enableRemoteExec;
            _resultValue.enableSyslog = enableSyslog;
            _resultValue.enableUi = enableUi;
            _resultValue.enableUpdateCheck = enableUpdateCheck;
            _resultValue.id = id;
            _resultValue.leaveOnInt = leaveOnInt;
            _resultValue.leaveOnTerm = leaveOnTerm;
            _resultValue.logLevel = logLevel;
            _resultValue.name = name;
            _resultValue.performance = performance;
            _resultValue.pidFile = pidFile;
            _resultValue.ports = ports;
            _resultValue.protocolVersion = protocolVersion;
            _resultValue.reconnectTimeoutLan = reconnectTimeoutLan;
            _resultValue.reconnectTimeoutWan = reconnectTimeoutWan;
            _resultValue.rejoinAfterLeave = rejoinAfterLeave;
            _resultValue.retryJoinEc2 = retryJoinEc2;
            _resultValue.retryJoinGce = retryJoinGce;
            _resultValue.retryJoinWans = retryJoinWans;
            _resultValue.retryJoins = retryJoins;
            _resultValue.retryMaxAttempts = retryMaxAttempts;
            _resultValue.retryMaxAttemptsWan = retryMaxAttemptsWan;
            _resultValue.serfLanBindAddr = serfLanBindAddr;
            _resultValue.serfWanBindAddr = serfWanBindAddr;
            _resultValue.serverMode = serverMode;
            _resultValue.serverName = serverName;
            _resultValue.sessionTtlMin = sessionTtlMin;
            _resultValue.startJoinWans = startJoinWans;
            _resultValue.startJoins = startJoins;
            _resultValue.syslogFacility = syslogFacility;
            _resultValue.taggedAddresses = taggedAddresses;
            _resultValue.telemetry = telemetry;
            _resultValue.tlsCaFile = tlsCaFile;
            _resultValue.tlsCertFile = tlsCertFile;
            _resultValue.tlsKeyFile = tlsKeyFile;
            _resultValue.tlsMinVersion = tlsMinVersion;
            _resultValue.tlsVerifyIncoming = tlsVerifyIncoming;
            _resultValue.tlsVerifyOutgoing = tlsVerifyOutgoing;
            _resultValue.tlsVerifyServerHostname = tlsVerifyServerHostname;
            _resultValue.translateWanAddrs = translateWanAddrs;
            _resultValue.uiDir = uiDir;
            _resultValue.unixSockets = unixSockets;
            _resultValue.version = version;
            _resultValue.versionPrerelease = versionPrerelease;
            _resultValue.versionRevision = versionRevision;
            return _resultValue;
        }
    }
}
