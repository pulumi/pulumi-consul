// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.consul.outputs.GetAutopilotHealthServer;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAutopilotHealthResult {
    private @Nullable String datacenter;
    /**
     * @return The number of redundant healthy servers that could fail
     * without causing an outage
     * 
     */
    private Integer failureTolerance;
    /**
     * @return Whether the server is healthy according to the current Autopilot
     * configuration
     * 
     */
    private Boolean healthy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of server health information. See below for details on the
     * available information.
     * 
     */
    private List<GetAutopilotHealthServer> servers;

    private GetAutopilotHealthResult() {}
    public Optional<String> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }
    /**
     * @return The number of redundant healthy servers that could fail
     * without causing an outage
     * 
     */
    public Integer failureTolerance() {
        return this.failureTolerance;
    }
    /**
     * @return Whether the server is healthy according to the current Autopilot
     * configuration
     * 
     */
    public Boolean healthy() {
        return this.healthy;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of server health information. See below for details on the
     * available information.
     * 
     */
    public List<GetAutopilotHealthServer> servers() {
        return this.servers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutopilotHealthResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String datacenter;
        private Integer failureTolerance;
        private Boolean healthy;
        private String id;
        private List<GetAutopilotHealthServer> servers;
        public Builder() {}
        public Builder(GetAutopilotHealthResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenter = defaults.datacenter;
    	      this.failureTolerance = defaults.failureTolerance;
    	      this.healthy = defaults.healthy;
    	      this.id = defaults.id;
    	      this.servers = defaults.servers;
        }

        @CustomType.Setter
        public Builder datacenter(@Nullable String datacenter) {
            this.datacenter = datacenter;
            return this;
        }
        @CustomType.Setter
        public Builder failureTolerance(Integer failureTolerance) {
            this.failureTolerance = Objects.requireNonNull(failureTolerance);
            return this;
        }
        @CustomType.Setter
        public Builder healthy(Boolean healthy) {
            this.healthy = Objects.requireNonNull(healthy);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder servers(List<GetAutopilotHealthServer> servers) {
            this.servers = Objects.requireNonNull(servers);
            return this;
        }
        public Builder servers(GetAutopilotHealthServer... servers) {
            return servers(List.of(servers));
        }
        public GetAutopilotHealthResult build() {
            final var _resultValue = new GetAutopilotHealthResult();
            _resultValue.datacenter = datacenter;
            _resultValue.failureTolerance = failureTolerance;
            _resultValue.healthy = healthy;
            _resultValue.id = id;
            _resultValue.servers = servers;
            return _resultValue;
        }
    }
}
