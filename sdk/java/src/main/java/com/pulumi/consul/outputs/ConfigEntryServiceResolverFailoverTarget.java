// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigEntryServiceResolverFailoverTarget {
    /**
     * @return Specifies the WAN federated datacenter to use for the failover target. If empty, the current datacenter is used.
     * 
     */
    private @Nullable String datacenter;
    /**
     * @return Specifies the namespace to use for the failover target. If empty, the default namespace is used.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
     * 
     */
    private @Nullable String partition;
    /**
     * @return Specifies the destination cluster peer to resolve the target service name from.
     * 
     */
    private @Nullable String peer;
    /**
     * @return Specifies the service name to use for the failover target. If empty, the current service name is used.
     * 
     */
    private @Nullable String service;
    /**
     * @return Specifies the named subset to use for the failover target. If empty, the default subset for the requested service name is used.
     * 
     */
    private @Nullable String serviceSubset;

    private ConfigEntryServiceResolverFailoverTarget() {}
    /**
     * @return Specifies the WAN federated datacenter to use for the failover target. If empty, the current datacenter is used.
     * 
     */
    public Optional<String> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }
    /**
     * @return Specifies the namespace to use for the failover target. If empty, the default namespace is used.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
     * 
     */
    public Optional<String> partition() {
        return Optional.ofNullable(this.partition);
    }
    /**
     * @return Specifies the destination cluster peer to resolve the target service name from.
     * 
     */
    public Optional<String> peer() {
        return Optional.ofNullable(this.peer);
    }
    /**
     * @return Specifies the service name to use for the failover target. If empty, the current service name is used.
     * 
     */
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }
    /**
     * @return Specifies the named subset to use for the failover target. If empty, the default subset for the requested service name is used.
     * 
     */
    public Optional<String> serviceSubset() {
        return Optional.ofNullable(this.serviceSubset);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigEntryServiceResolverFailoverTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String datacenter;
        private @Nullable String namespace;
        private @Nullable String partition;
        private @Nullable String peer;
        private @Nullable String service;
        private @Nullable String serviceSubset;
        public Builder() {}
        public Builder(ConfigEntryServiceResolverFailoverTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenter = defaults.datacenter;
    	      this.namespace = defaults.namespace;
    	      this.partition = defaults.partition;
    	      this.peer = defaults.peer;
    	      this.service = defaults.service;
    	      this.serviceSubset = defaults.serviceSubset;
        }

        @CustomType.Setter
        public Builder datacenter(@Nullable String datacenter) {

            this.datacenter = datacenter;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder partition(@Nullable String partition) {

            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder peer(@Nullable String peer) {

            this.peer = peer;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {

            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder serviceSubset(@Nullable String serviceSubset) {

            this.serviceSubset = serviceSubset;
            return this;
        }
        public ConfigEntryServiceResolverFailoverTarget build() {
            final var _resultValue = new ConfigEntryServiceResolverFailoverTarget();
            _resultValue.datacenter = datacenter;
            _resultValue.namespace = namespace;
            _resultValue.partition = partition;
            _resultValue.peer = peer;
            _resultValue.service = service;
            _resultValue.serviceSubset = serviceSubset;
            return _resultValue;
        }
    }
}
