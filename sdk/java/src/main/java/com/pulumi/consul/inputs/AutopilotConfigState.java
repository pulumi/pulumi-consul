// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutopilotConfigState extends com.pulumi.resources.ResourceArgs {

    public static final AutopilotConfigState Empty = new AutopilotConfigState();

    /**
     * Whether to remove failing servers when a
     * replacement comes online. Defaults to true.
     * 
     */
    @Import(name="cleanupDeadServers")
    private @Nullable Output<Boolean> cleanupDeadServers;

    /**
     * @return Whether to remove failing servers when a
     * replacement comes online. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> cleanupDeadServers() {
        return Optional.ofNullable(this.cleanupDeadServers);
    }

    /**
     * The datacenter to use. This overrides the agent&#39;s
     * default datacenter and the datacenter in the provider setup.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The datacenter to use. This overrides the agent&#39;s
     * default datacenter and the datacenter in the provider setup.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
     * Defaults to false.
     * 
     */
    @Import(name="disableUpgradeMigration")
    private @Nullable Output<Boolean> disableUpgradeMigration;

    /**
     * @return Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
     * Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> disableUpgradeMigration() {
        return Optional.ofNullable(this.disableUpgradeMigration);
    }

    /**
     * The time after which a server is
     * considered as unhealthy and will be removed. Defaults to `&#34;200ms&#34;`.
     * 
     */
    @Import(name="lastContactThreshold")
    private @Nullable Output<String> lastContactThreshold;

    /**
     * @return The time after which a server is
     * considered as unhealthy and will be removed. Defaults to `&#34;200ms&#34;`.
     * 
     */
    public Optional<Output<String>> lastContactThreshold() {
        return Optional.ofNullable(this.lastContactThreshold);
    }

    /**
     * The maximum number of Raft log entries a
     * server can trail the leader. Defaults to 250.
     * 
     */
    @Import(name="maxTrailingLogs")
    private @Nullable Output<Integer> maxTrailingLogs;

    /**
     * @return The maximum number of Raft log entries a
     * server can trail the leader. Defaults to 250.
     * 
     */
    public Optional<Output<Integer>> maxTrailingLogs() {
        return Optional.ofNullable(this.maxTrailingLogs);
    }

    /**
     * The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
     * tag to use. Consul will try to keep one voting server by zone to take advantage
     * of isolated failure domains. Defaults to an empty string.
     * 
     */
    @Import(name="redundancyZoneTag")
    private @Nullable Output<String> redundancyZoneTag;

    /**
     * @return The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
     * tag to use. Consul will try to keep one voting server by zone to take advantage
     * of isolated failure domains. Defaults to an empty string.
     * 
     */
    public Optional<Output<String>> redundancyZoneTag() {
        return Optional.ofNullable(this.redundancyZoneTag);
    }

    /**
     * The period to wait for a server to be
     * healthy and stable before being promoted to a full, voting member. Defaults to
     * `&#34;10s&#34;`.
     * 
     */
    @Import(name="serverStabilizationTime")
    private @Nullable Output<String> serverStabilizationTime;

    /**
     * @return The period to wait for a server to be
     * healthy and stable before being promoted to a full, voting member. Defaults to
     * `&#34;10s&#34;`.
     * 
     */
    public Optional<Output<String>> serverStabilizationTime() {
        return Optional.ofNullable(this.serverStabilizationTime);
    }

    /**
     * The tag to override the version information
     * used during a migration. Defaults to an empty string.
     * 
     */
    @Import(name="upgradeVersionTag")
    private @Nullable Output<String> upgradeVersionTag;

    /**
     * @return The tag to override the version information
     * used during a migration. Defaults to an empty string.
     * 
     */
    public Optional<Output<String>> upgradeVersionTag() {
        return Optional.ofNullable(this.upgradeVersionTag);
    }

    private AutopilotConfigState() {}

    private AutopilotConfigState(AutopilotConfigState $) {
        this.cleanupDeadServers = $.cleanupDeadServers;
        this.datacenter = $.datacenter;
        this.disableUpgradeMigration = $.disableUpgradeMigration;
        this.lastContactThreshold = $.lastContactThreshold;
        this.maxTrailingLogs = $.maxTrailingLogs;
        this.redundancyZoneTag = $.redundancyZoneTag;
        this.serverStabilizationTime = $.serverStabilizationTime;
        this.upgradeVersionTag = $.upgradeVersionTag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutopilotConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutopilotConfigState $;

        public Builder() {
            $ = new AutopilotConfigState();
        }

        public Builder(AutopilotConfigState defaults) {
            $ = new AutopilotConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cleanupDeadServers Whether to remove failing servers when a
         * replacement comes online. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder cleanupDeadServers(@Nullable Output<Boolean> cleanupDeadServers) {
            $.cleanupDeadServers = cleanupDeadServers;
            return this;
        }

        /**
         * @param cleanupDeadServers Whether to remove failing servers when a
         * replacement comes online. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder cleanupDeadServers(Boolean cleanupDeadServers) {
            return cleanupDeadServers(Output.of(cleanupDeadServers));
        }

        /**
         * @param datacenter The datacenter to use. This overrides the agent&#39;s
         * default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The datacenter to use. This overrides the agent&#39;s
         * default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param disableUpgradeMigration Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
         * Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableUpgradeMigration(@Nullable Output<Boolean> disableUpgradeMigration) {
            $.disableUpgradeMigration = disableUpgradeMigration;
            return this;
        }

        /**
         * @param disableUpgradeMigration Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
         * Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableUpgradeMigration(Boolean disableUpgradeMigration) {
            return disableUpgradeMigration(Output.of(disableUpgradeMigration));
        }

        /**
         * @param lastContactThreshold The time after which a server is
         * considered as unhealthy and will be removed. Defaults to `&#34;200ms&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder lastContactThreshold(@Nullable Output<String> lastContactThreshold) {
            $.lastContactThreshold = lastContactThreshold;
            return this;
        }

        /**
         * @param lastContactThreshold The time after which a server is
         * considered as unhealthy and will be removed. Defaults to `&#34;200ms&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder lastContactThreshold(String lastContactThreshold) {
            return lastContactThreshold(Output.of(lastContactThreshold));
        }

        /**
         * @param maxTrailingLogs The maximum number of Raft log entries a
         * server can trail the leader. Defaults to 250.
         * 
         * @return builder
         * 
         */
        public Builder maxTrailingLogs(@Nullable Output<Integer> maxTrailingLogs) {
            $.maxTrailingLogs = maxTrailingLogs;
            return this;
        }

        /**
         * @param maxTrailingLogs The maximum number of Raft log entries a
         * server can trail the leader. Defaults to 250.
         * 
         * @return builder
         * 
         */
        public Builder maxTrailingLogs(Integer maxTrailingLogs) {
            return maxTrailingLogs(Output.of(maxTrailingLogs));
        }

        /**
         * @param redundancyZoneTag The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
         * tag to use. Consul will try to keep one voting server by zone to take advantage
         * of isolated failure domains. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder redundancyZoneTag(@Nullable Output<String> redundancyZoneTag) {
            $.redundancyZoneTag = redundancyZoneTag;
            return this;
        }

        /**
         * @param redundancyZoneTag The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
         * tag to use. Consul will try to keep one voting server by zone to take advantage
         * of isolated failure domains. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder redundancyZoneTag(String redundancyZoneTag) {
            return redundancyZoneTag(Output.of(redundancyZoneTag));
        }

        /**
         * @param serverStabilizationTime The period to wait for a server to be
         * healthy and stable before being promoted to a full, voting member. Defaults to
         * `&#34;10s&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder serverStabilizationTime(@Nullable Output<String> serverStabilizationTime) {
            $.serverStabilizationTime = serverStabilizationTime;
            return this;
        }

        /**
         * @param serverStabilizationTime The period to wait for a server to be
         * healthy and stable before being promoted to a full, voting member. Defaults to
         * `&#34;10s&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder serverStabilizationTime(String serverStabilizationTime) {
            return serverStabilizationTime(Output.of(serverStabilizationTime));
        }

        /**
         * @param upgradeVersionTag The tag to override the version information
         * used during a migration. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder upgradeVersionTag(@Nullable Output<String> upgradeVersionTag) {
            $.upgradeVersionTag = upgradeVersionTag;
            return this;
        }

        /**
         * @param upgradeVersionTag The tag to override the version information
         * used during a migration. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder upgradeVersionTag(String upgradeVersionTag) {
            return upgradeVersionTag(Output.of(upgradeVersionTag));
        }

        public AutopilotConfigState build() {
            return $;
        }
    }

}
