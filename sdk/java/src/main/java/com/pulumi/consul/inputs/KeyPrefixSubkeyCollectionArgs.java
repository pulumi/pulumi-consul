// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyPrefixSubkeyCollectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyPrefixSubkeyCollectionArgs Empty = new KeyPrefixSubkeyCollectionArgs();

    /**
     * An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
     * to attach to the key (defaults to 0).
     * 
     */
    @Import(name="flags")
    private @Nullable Output<Integer> flags;

    /**
     * @return An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
     * to attach to the key (defaults to 0).
     * 
     */
    public Optional<Output<Integer>> flags() {
        return Optional.ofNullable(this.flags);
    }

    /**
     * This is the path (which will be appended to the given
     * `path_prefix`) in Consul that should be written to.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return This is the path (which will be appended to the given
     * `path_prefix`) in Consul that should be written to.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The value to write to the given path.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The value to write to the given path.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private KeyPrefixSubkeyCollectionArgs() {}

    private KeyPrefixSubkeyCollectionArgs(KeyPrefixSubkeyCollectionArgs $) {
        this.flags = $.flags;
        this.path = $.path;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyPrefixSubkeyCollectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyPrefixSubkeyCollectionArgs $;

        public Builder() {
            $ = new KeyPrefixSubkeyCollectionArgs();
        }

        public Builder(KeyPrefixSubkeyCollectionArgs defaults) {
            $ = new KeyPrefixSubkeyCollectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param flags An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
         * to attach to the key (defaults to 0).
         * 
         * @return builder
         * 
         */
        public Builder flags(@Nullable Output<Integer> flags) {
            $.flags = flags;
            return this;
        }

        /**
         * @param flags An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
         * to attach to the key (defaults to 0).
         * 
         * @return builder
         * 
         */
        public Builder flags(Integer flags) {
            return flags(Output.of(flags));
        }

        /**
         * @param path This is the path (which will be appended to the given
         * `path_prefix`) in Consul that should be written to.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path This is the path (which will be appended to the given
         * `path_prefix`) in Consul that should be written to.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param value The value to write to the given path.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value to write to the given path.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public KeyPrefixSubkeyCollectionArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("KeyPrefixSubkeyCollectionArgs", "path");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("KeyPrefixSubkeyCollectionArgs", "value");
            }
            return $;
        }
    }

}
