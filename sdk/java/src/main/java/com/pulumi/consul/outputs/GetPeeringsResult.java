// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.consul.outputs.GetPeeringsPeer;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPeeringsResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String partition;
    private List<GetPeeringsPeer> peers;

    private GetPeeringsResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> partition() {
        return Optional.ofNullable(this.partition);
    }
    public List<GetPeeringsPeer> peers() {
        return this.peers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPeeringsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable String partition;
        private List<GetPeeringsPeer> peers;
        public Builder() {}
        public Builder(GetPeeringsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.partition = defaults.partition;
    	      this.peers = defaults.peers;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder partition(@Nullable String partition) {
            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder peers(List<GetPeeringsPeer> peers) {
            this.peers = Objects.requireNonNull(peers);
            return this;
        }
        public Builder peers(GetPeeringsPeer... peers) {
            return peers(List.of(peers));
        }
        public GetPeeringsResult build() {
            final var o = new GetPeeringsResult();
            o.id = id;
            o.partition = partition;
            o.peers = peers;
            return o;
        }
    }
}
