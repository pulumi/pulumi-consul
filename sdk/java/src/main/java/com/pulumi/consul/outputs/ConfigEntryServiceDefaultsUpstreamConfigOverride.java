// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.consul.outputs.ConfigEntryServiceDefaultsUpstreamConfigOverrideLimit;
import com.pulumi.consul.outputs.ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGateway;
import com.pulumi.consul.outputs.ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheck;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigEntryServiceDefaultsUpstreamConfigOverride {
    /**
     * @return Sets the strategy for allocating outbound connections from upstreams across Envoy proxy threads.
     * 
     */
    private @Nullable String balanceOutboundConnections;
    private @Nullable Integer connectTimeoutMs;
    private @Nullable String envoyListenerJson;
    /**
     * @return Map that specifies a set of limits to apply to when connecting upstream services.
     * 
     */
    private @Nullable List<ConfigEntryServiceDefaultsUpstreamConfigOverrideLimit> limits;
    /**
     * @return Specifies the default mesh gateway mode field for all upstreams.
     * 
     */
    private @Nullable List<ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGateway> meshGateways;
    private @Nullable String name;
    /**
     * @return Specifies the namespace containing the upstream service that the configuration applies to.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
     * 
     */
    private @Nullable String partition;
    /**
     * @return Map that specifies a set of rules that enable Consul to remove hosts from the upstream cluster that are unreachable or that return errors.
     * 
     */
    private @Nullable List<ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheck> passiveHealthChecks;
    /**
     * @return Specifies the peer name of the upstream service that the configuration applies to.
     * 
     */
    private @Nullable String peer;
    private @Nullable String protocol;

    private ConfigEntryServiceDefaultsUpstreamConfigOverride() {}
    /**
     * @return Sets the strategy for allocating outbound connections from upstreams across Envoy proxy threads.
     * 
     */
    public Optional<String> balanceOutboundConnections() {
        return Optional.ofNullable(this.balanceOutboundConnections);
    }
    public Optional<Integer> connectTimeoutMs() {
        return Optional.ofNullable(this.connectTimeoutMs);
    }
    public Optional<String> envoyListenerJson() {
        return Optional.ofNullable(this.envoyListenerJson);
    }
    /**
     * @return Map that specifies a set of limits to apply to when connecting upstream services.
     * 
     */
    public List<ConfigEntryServiceDefaultsUpstreamConfigOverrideLimit> limits() {
        return this.limits == null ? List.of() : this.limits;
    }
    /**
     * @return Specifies the default mesh gateway mode field for all upstreams.
     * 
     */
    public List<ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGateway> meshGateways() {
        return this.meshGateways == null ? List.of() : this.meshGateways;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Specifies the namespace containing the upstream service that the configuration applies to.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
     * 
     */
    public Optional<String> partition() {
        return Optional.ofNullable(this.partition);
    }
    /**
     * @return Map that specifies a set of rules that enable Consul to remove hosts from the upstream cluster that are unreachable or that return errors.
     * 
     */
    public List<ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheck> passiveHealthChecks() {
        return this.passiveHealthChecks == null ? List.of() : this.passiveHealthChecks;
    }
    /**
     * @return Specifies the peer name of the upstream service that the configuration applies to.
     * 
     */
    public Optional<String> peer() {
        return Optional.ofNullable(this.peer);
    }
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigEntryServiceDefaultsUpstreamConfigOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String balanceOutboundConnections;
        private @Nullable Integer connectTimeoutMs;
        private @Nullable String envoyListenerJson;
        private @Nullable List<ConfigEntryServiceDefaultsUpstreamConfigOverrideLimit> limits;
        private @Nullable List<ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGateway> meshGateways;
        private @Nullable String name;
        private @Nullable String namespace;
        private @Nullable String partition;
        private @Nullable List<ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheck> passiveHealthChecks;
        private @Nullable String peer;
        private @Nullable String protocol;
        public Builder() {}
        public Builder(ConfigEntryServiceDefaultsUpstreamConfigOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.balanceOutboundConnections = defaults.balanceOutboundConnections;
    	      this.connectTimeoutMs = defaults.connectTimeoutMs;
    	      this.envoyListenerJson = defaults.envoyListenerJson;
    	      this.limits = defaults.limits;
    	      this.meshGateways = defaults.meshGateways;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.partition = defaults.partition;
    	      this.passiveHealthChecks = defaults.passiveHealthChecks;
    	      this.peer = defaults.peer;
    	      this.protocol = defaults.protocol;
        }

        @CustomType.Setter
        public Builder balanceOutboundConnections(@Nullable String balanceOutboundConnections) {

            this.balanceOutboundConnections = balanceOutboundConnections;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeoutMs(@Nullable Integer connectTimeoutMs) {

            this.connectTimeoutMs = connectTimeoutMs;
            return this;
        }
        @CustomType.Setter
        public Builder envoyListenerJson(@Nullable String envoyListenerJson) {

            this.envoyListenerJson = envoyListenerJson;
            return this;
        }
        @CustomType.Setter
        public Builder limits(@Nullable List<ConfigEntryServiceDefaultsUpstreamConfigOverrideLimit> limits) {

            this.limits = limits;
            return this;
        }
        public Builder limits(ConfigEntryServiceDefaultsUpstreamConfigOverrideLimit... limits) {
            return limits(List.of(limits));
        }
        @CustomType.Setter
        public Builder meshGateways(@Nullable List<ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGateway> meshGateways) {

            this.meshGateways = meshGateways;
            return this;
        }
        public Builder meshGateways(ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGateway... meshGateways) {
            return meshGateways(List.of(meshGateways));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder partition(@Nullable String partition) {

            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder passiveHealthChecks(@Nullable List<ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheck> passiveHealthChecks) {

            this.passiveHealthChecks = passiveHealthChecks;
            return this;
        }
        public Builder passiveHealthChecks(ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheck... passiveHealthChecks) {
            return passiveHealthChecks(List.of(passiveHealthChecks));
        }
        @CustomType.Setter
        public Builder peer(@Nullable String peer) {

            this.peer = peer;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        public ConfigEntryServiceDefaultsUpstreamConfigOverride build() {
            final var _resultValue = new ConfigEntryServiceDefaultsUpstreamConfigOverride();
            _resultValue.balanceOutboundConnections = balanceOutboundConnections;
            _resultValue.connectTimeoutMs = connectTimeoutMs;
            _resultValue.envoyListenerJson = envoyListenerJson;
            _resultValue.limits = limits;
            _resultValue.meshGateways = meshGateways;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.partition = partition;
            _resultValue.passiveHealthChecks = passiveHealthChecks;
            _resultValue.peer = peer;
            _resultValue.protocol = protocol;
            return _resultValue;
        }
    }
}
