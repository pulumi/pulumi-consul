// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ConfigEntryServiceSplitterSplitResponseHeaders {
    /**
     * @return Map of one or more key-value pairs. Defines a set of key-value pairs to add to the header. Use header names as the keys. Header names are not case-sensitive. If header values with the same name already exist, the value is appended and Consul applies both headers.
     * 
     */
    private @Nullable Map<String,String> add;
    /**
     * @return Defines an list of headers to remove. Consul removes only headers containing exact matches. Header names are not case-sensitive.
     * 
     */
    private @Nullable List<String> removes;
    /**
     * @return Map of one or more key-value pairs. Defines a set of key-value pairs to add to the request header or to replace existing header values with. Use header names as the keys. Header names are not case-sensitive. If header values with the same names already exist, Consul replaces the header values.
     * 
     */
    private @Nullable Map<String,String> set;

    private ConfigEntryServiceSplitterSplitResponseHeaders() {}
    /**
     * @return Map of one or more key-value pairs. Defines a set of key-value pairs to add to the header. Use header names as the keys. Header names are not case-sensitive. If header values with the same name already exist, the value is appended and Consul applies both headers.
     * 
     */
    public Map<String,String> add() {
        return this.add == null ? Map.of() : this.add;
    }
    /**
     * @return Defines an list of headers to remove. Consul removes only headers containing exact matches. Header names are not case-sensitive.
     * 
     */
    public List<String> removes() {
        return this.removes == null ? List.of() : this.removes;
    }
    /**
     * @return Map of one or more key-value pairs. Defines a set of key-value pairs to add to the request header or to replace existing header values with. Use header names as the keys. Header names are not case-sensitive. If header values with the same names already exist, Consul replaces the header values.
     * 
     */
    public Map<String,String> set() {
        return this.set == null ? Map.of() : this.set;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigEntryServiceSplitterSplitResponseHeaders defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,String> add;
        private @Nullable List<String> removes;
        private @Nullable Map<String,String> set;
        public Builder() {}
        public Builder(ConfigEntryServiceSplitterSplitResponseHeaders defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.add = defaults.add;
    	      this.removes = defaults.removes;
    	      this.set = defaults.set;
        }

        @CustomType.Setter
        public Builder add(@Nullable Map<String,String> add) {
            this.add = add;
            return this;
        }
        @CustomType.Setter
        public Builder removes(@Nullable List<String> removes) {
            this.removes = removes;
            return this;
        }
        public Builder removes(String... removes) {
            return removes(List.of(removes));
        }
        @CustomType.Setter
        public Builder set(@Nullable Map<String,String> set) {
            this.set = set;
            return this;
        }
        public ConfigEntryServiceSplitterSplitResponseHeaders build() {
            final var _resultValue = new ConfigEntryServiceSplitterSplitResponseHeaders();
            _resultValue.add = add;
            _resultValue.removes = removes;
            _resultValue.set = set;
            return _resultValue;
        }
    }
}
