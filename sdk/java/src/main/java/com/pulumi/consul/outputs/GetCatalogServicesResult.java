// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.consul.outputs.GetCatalogServicesQueryOption;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetCatalogServicesResult {
    private String datacenter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> names;
    private @Nullable List<GetCatalogServicesQueryOption> queryOptions;
    private Map<String,String> services;
    private Map<String,String> tags;

    private GetCatalogServicesResult() {}
    public String datacenter() {
        return this.datacenter;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> names() {
        return this.names;
    }
    public List<GetCatalogServicesQueryOption> queryOptions() {
        return this.queryOptions == null ? List.of() : this.queryOptions;
    }
    public Map<String,String> services() {
        return this.services;
    }
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogServicesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datacenter;
        private String id;
        private List<String> names;
        private @Nullable List<GetCatalogServicesQueryOption> queryOptions;
        private Map<String,String> services;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetCatalogServicesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenter = defaults.datacenter;
    	      this.id = defaults.id;
    	      this.names = defaults.names;
    	      this.queryOptions = defaults.queryOptions;
    	      this.services = defaults.services;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder datacenter(String datacenter) {
            this.datacenter = Objects.requireNonNull(datacenter);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder names(List<String> names) {
            this.names = Objects.requireNonNull(names);
            return this;
        }
        public Builder names(String... names) {
            return names(List.of(names));
        }
        @CustomType.Setter
        public Builder queryOptions(@Nullable List<GetCatalogServicesQueryOption> queryOptions) {
            this.queryOptions = queryOptions;
            return this;
        }
        public Builder queryOptions(GetCatalogServicesQueryOption... queryOptions) {
            return queryOptions(List.of(queryOptions));
        }
        @CustomType.Setter
        public Builder services(Map<String,String> services) {
            this.services = Objects.requireNonNull(services);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetCatalogServicesResult build() {
            final var o = new GetCatalogServicesResult();
            o.datacenter = datacenter;
            o.id = id;
            o.names = names;
            o.queryOptions = queryOptions;
            o.services = services;
            o.tags = tags;
            return o;
        }
    }
}
