// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigEntryServiceIntentionsSourcePermissionHttpHeader {
    /**
     * @return Specifies a value for the header key set in the Name field. If the request header value matches the Exact value, Consul applies the permission.
     * 
     */
    private @Nullable String exact;
    /**
     * @return Inverts the matching logic configured in the Header.
     * 
     */
    private @Nullable Boolean invert;
    /**
     * @return Specifies the name of the header to match.
     * 
     */
    private String name;
    /**
     * @return Specifies a prefix value for the header key set in the Name field.
     * 
     */
    private @Nullable String prefix;
    /**
     * @return Enables a match if the header configured in the Name field appears in the request. Consul matches on any value as long as the header key appears in the request.
     * 
     */
    private @Nullable Boolean present;
    /**
     * @return Specifies a regular expression pattern as the value for the header key set in the Name field.
     * 
     */
    private @Nullable String regex;
    /**
     * @return Specifies a suffix value for the header key set in the Name field.
     * 
     */
    private @Nullable String suffix;

    private ConfigEntryServiceIntentionsSourcePermissionHttpHeader() {}
    /**
     * @return Specifies a value for the header key set in the Name field. If the request header value matches the Exact value, Consul applies the permission.
     * 
     */
    public Optional<String> exact() {
        return Optional.ofNullable(this.exact);
    }
    /**
     * @return Inverts the matching logic configured in the Header.
     * 
     */
    public Optional<Boolean> invert() {
        return Optional.ofNullable(this.invert);
    }
    /**
     * @return Specifies the name of the header to match.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies a prefix value for the header key set in the Name field.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return Enables a match if the header configured in the Name field appears in the request. Consul matches on any value as long as the header key appears in the request.
     * 
     */
    public Optional<Boolean> present() {
        return Optional.ofNullable(this.present);
    }
    /**
     * @return Specifies a regular expression pattern as the value for the header key set in the Name field.
     * 
     */
    public Optional<String> regex() {
        return Optional.ofNullable(this.regex);
    }
    /**
     * @return Specifies a suffix value for the header key set in the Name field.
     * 
     */
    public Optional<String> suffix() {
        return Optional.ofNullable(this.suffix);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigEntryServiceIntentionsSourcePermissionHttpHeader defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String exact;
        private @Nullable Boolean invert;
        private String name;
        private @Nullable String prefix;
        private @Nullable Boolean present;
        private @Nullable String regex;
        private @Nullable String suffix;
        public Builder() {}
        public Builder(ConfigEntryServiceIntentionsSourcePermissionHttpHeader defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exact = defaults.exact;
    	      this.invert = defaults.invert;
    	      this.name = defaults.name;
    	      this.prefix = defaults.prefix;
    	      this.present = defaults.present;
    	      this.regex = defaults.regex;
    	      this.suffix = defaults.suffix;
        }

        @CustomType.Setter
        public Builder exact(@Nullable String exact) {

            this.exact = exact;
            return this;
        }
        @CustomType.Setter
        public Builder invert(@Nullable Boolean invert) {

            this.invert = invert;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ConfigEntryServiceIntentionsSourcePermissionHttpHeader", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {

            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder present(@Nullable Boolean present) {

            this.present = present;
            return this;
        }
        @CustomType.Setter
        public Builder regex(@Nullable String regex) {

            this.regex = regex;
            return this;
        }
        @CustomType.Setter
        public Builder suffix(@Nullable String suffix) {

            this.suffix = suffix;
            return this;
        }
        public ConfigEntryServiceIntentionsSourcePermissionHttpHeader build() {
            final var _resultValue = new ConfigEntryServiceIntentionsSourcePermissionHttpHeader();
            _resultValue.exact = exact;
            _resultValue.invert = invert;
            _resultValue.name = name;
            _resultValue.prefix = prefix;
            _resultValue.present = present;
            _resultValue.regex = regex;
            _resultValue.suffix = suffix;
            return _resultValue;
        }
    }
}
