// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.consul.outputs.GetAclTokenNodeIdentity;
import com.pulumi.consul.outputs.GetAclTokenPolicy;
import com.pulumi.consul.outputs.GetAclTokenRole;
import com.pulumi.consul.outputs.GetAclTokenServiceIdentity;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAclTokenResult {
    private String accessorId;
    /**
     * @return The description of the ACL token.
     * 
     */
    private String description;
    /**
     * @return If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     * 
     */
    private String expirationTime;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Whether the ACL token is local to the datacenter it was created within.
     * 
     */
    private Boolean local;
    private @Nullable String namespace;
    /**
     * @return The list of node identities attached to the token. Each entry has a `node_name` and a `datacenter` attributes.
     * 
     */
    private List<GetAclTokenNodeIdentity> nodeIdentities;
    private @Nullable String partition;
    /**
     * @return A list of policies associated with the ACL token. Each entry has an `id` and a `name` attribute.
     * 
     */
    private List<GetAclTokenPolicy> policies;
    /**
     * @return The list of roles attached to the token.
     * 
     */
    private List<GetAclTokenRole> roles;
    /**
     * @return The list of service identities attached to the token. Each entry has a `service_name` and a `datacenters` attribute.
     * 
     */
    private List<GetAclTokenServiceIdentity> serviceIdentities;

    private GetAclTokenResult() {}
    public String accessorId() {
        return this.accessorId;
    }
    /**
     * @return The description of the ACL token.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     * 
     */
    public String expirationTime() {
        return this.expirationTime;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the ACL token is local to the datacenter it was created within.
     * 
     */
    public Boolean local() {
        return this.local;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return The list of node identities attached to the token. Each entry has a `node_name` and a `datacenter` attributes.
     * 
     */
    public List<GetAclTokenNodeIdentity> nodeIdentities() {
        return this.nodeIdentities;
    }
    public Optional<String> partition() {
        return Optional.ofNullable(this.partition);
    }
    /**
     * @return A list of policies associated with the ACL token. Each entry has an `id` and a `name` attribute.
     * 
     */
    public List<GetAclTokenPolicy> policies() {
        return this.policies;
    }
    /**
     * @return The list of roles attached to the token.
     * 
     */
    public List<GetAclTokenRole> roles() {
        return this.roles;
    }
    /**
     * @return The list of service identities attached to the token. Each entry has a `service_name` and a `datacenters` attribute.
     * 
     */
    public List<GetAclTokenServiceIdentity> serviceIdentities() {
        return this.serviceIdentities;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAclTokenResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessorId;
        private String description;
        private String expirationTime;
        private String id;
        private Boolean local;
        private @Nullable String namespace;
        private List<GetAclTokenNodeIdentity> nodeIdentities;
        private @Nullable String partition;
        private List<GetAclTokenPolicy> policies;
        private List<GetAclTokenRole> roles;
        private List<GetAclTokenServiceIdentity> serviceIdentities;
        public Builder() {}
        public Builder(GetAclTokenResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessorId = defaults.accessorId;
    	      this.description = defaults.description;
    	      this.expirationTime = defaults.expirationTime;
    	      this.id = defaults.id;
    	      this.local = defaults.local;
    	      this.namespace = defaults.namespace;
    	      this.nodeIdentities = defaults.nodeIdentities;
    	      this.partition = defaults.partition;
    	      this.policies = defaults.policies;
    	      this.roles = defaults.roles;
    	      this.serviceIdentities = defaults.serviceIdentities;
        }

        @CustomType.Setter
        public Builder accessorId(String accessorId) {
            this.accessorId = Objects.requireNonNull(accessorId);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder expirationTime(String expirationTime) {
            this.expirationTime = Objects.requireNonNull(expirationTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder local(Boolean local) {
            this.local = Objects.requireNonNull(local);
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder nodeIdentities(List<GetAclTokenNodeIdentity> nodeIdentities) {
            this.nodeIdentities = Objects.requireNonNull(nodeIdentities);
            return this;
        }
        public Builder nodeIdentities(GetAclTokenNodeIdentity... nodeIdentities) {
            return nodeIdentities(List.of(nodeIdentities));
        }
        @CustomType.Setter
        public Builder partition(@Nullable String partition) {
            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<GetAclTokenPolicy> policies) {
            this.policies = Objects.requireNonNull(policies);
            return this;
        }
        public Builder policies(GetAclTokenPolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder roles(List<GetAclTokenRole> roles) {
            this.roles = Objects.requireNonNull(roles);
            return this;
        }
        public Builder roles(GetAclTokenRole... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder serviceIdentities(List<GetAclTokenServiceIdentity> serviceIdentities) {
            this.serviceIdentities = Objects.requireNonNull(serviceIdentities);
            return this;
        }
        public Builder serviceIdentities(GetAclTokenServiceIdentity... serviceIdentities) {
            return serviceIdentities(List.of(serviceIdentities));
        }
        public GetAclTokenResult build() {
            final var o = new GetAclTokenResult();
            o.accessorId = accessorId;
            o.description = description;
            o.expirationTime = expirationTime;
            o.id = id;
            o.local = local;
            o.namespace = namespace;
            o.nodeIdentities = nodeIdentities;
            o.partition = partition;
            o.policies = policies;
            o.roles = roles;
            o.serviceIdentities = serviceIdentities;
            return o;
        }
    }
}
