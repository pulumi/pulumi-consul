// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ConfigEntryServiceResolverSubset {
    /**
     * @return Specifies an expression that filters the DNS elements of service instances that belong to the subset. If empty, all healthy instances of a service are returned.
     * 
     */
    private String filter;
    /**
     * @return Name of subset.
     * 
     */
    private String name;
    /**
     * @return Determines if instances that return a warning from a health check are allowed to resolve a request. When set to false, instances with passing and warning states are considered healthy. When set to true, only instances with a passing health check state are considered healthy.
     * 
     */
    private Boolean onlyPassing;

    private ConfigEntryServiceResolverSubset() {}
    /**
     * @return Specifies an expression that filters the DNS elements of service instances that belong to the subset. If empty, all healthy instances of a service are returned.
     * 
     */
    public String filter() {
        return this.filter;
    }
    /**
     * @return Name of subset.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Determines if instances that return a warning from a health check are allowed to resolve a request. When set to false, instances with passing and warning states are considered healthy. When set to true, only instances with a passing health check state are considered healthy.
     * 
     */
    public Boolean onlyPassing() {
        return this.onlyPassing;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigEntryServiceResolverSubset defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String filter;
        private String name;
        private Boolean onlyPassing;
        public Builder() {}
        public Builder(ConfigEntryServiceResolverSubset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.name = defaults.name;
    	      this.onlyPassing = defaults.onlyPassing;
        }

        @CustomType.Setter
        public Builder filter(String filter) {
            if (filter == null) {
              throw new MissingRequiredPropertyException("ConfigEntryServiceResolverSubset", "filter");
            }
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ConfigEntryServiceResolverSubset", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onlyPassing(Boolean onlyPassing) {
            if (onlyPassing == null) {
              throw new MissingRequiredPropertyException("ConfigEntryServiceResolverSubset", "onlyPassing");
            }
            this.onlyPassing = onlyPassing;
            return this;
        }
        public ConfigEntryServiceResolverSubset build() {
            final var _resultValue = new ConfigEntryServiceResolverSubset();
            _resultValue.filter = filter;
            _resultValue.name = name;
            _resultValue.onlyPassing = onlyPassing;
            return _resultValue;
        }
    }
}
