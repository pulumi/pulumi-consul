// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetServiceHealthArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceHealthArgs Empty = new GetServiceHealthArgs();

    /**
     * The Consul datacenter to query.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The Consul datacenter to query.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * A filter expression to refine the list of results, see
     * https://www.consul.io/api-docs/features/filtering and https://www.consul.io/api-docs/health#filtering-2.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return A filter expression to refine the list of results, see
     * https://www.consul.io/api-docs/features/filtering and https://www.consul.io/api-docs/health#filtering-2.
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The service name to select.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The service name to select.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies a node name to sort the node list in ascending order
     * based on the estimated round trip time from that node.
     * 
     */
    @Import(name="near")
    private @Nullable Output<String> near;

    /**
     * @return Specifies a node name to sort the node list in ascending order
     * based on the estimated round trip time from that node.
     * 
     */
    public Optional<Output<String>> near() {
        return Optional.ofNullable(this.near);
    }

    /**
     * Filter the results to nodes with the specified key/value
     * pairs.
     * 
     */
    @Import(name="nodeMeta")
    private @Nullable Output<Map<String,String>> nodeMeta;

    /**
     * @return Filter the results to nodes with the specified key/value
     * pairs.
     * 
     */
    public Optional<Output<Map<String,String>>> nodeMeta() {
        return Optional.ofNullable(this.nodeMeta);
    }

    /**
     * Whether to return only nodes with all checks in the
     * passing state. Defaults to `true`.
     * 
     */
    @Import(name="passing")
    private @Nullable Output<Boolean> passing;

    /**
     * @return Whether to return only nodes with all checks in the
     * passing state. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> passing() {
        return Optional.ofNullable(this.passing);
    }

    /**
     * A single tag that can be used to filter the list to return
     * based on a single matching tag.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return A single tag that can be used to filter the list to return
     * based on a single matching tag.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    @Import(name="waitFor")
    private @Nullable Output<String> waitFor;

    public Optional<Output<String>> waitFor() {
        return Optional.ofNullable(this.waitFor);
    }

    private GetServiceHealthArgs() {}

    private GetServiceHealthArgs(GetServiceHealthArgs $) {
        this.datacenter = $.datacenter;
        this.filter = $.filter;
        this.name = $.name;
        this.near = $.near;
        this.nodeMeta = $.nodeMeta;
        this.passing = $.passing;
        this.tag = $.tag;
        this.waitFor = $.waitFor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceHealthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceHealthArgs $;

        public Builder() {
            $ = new GetServiceHealthArgs();
        }

        public Builder(GetServiceHealthArgs defaults) {
            $ = new GetServiceHealthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenter The Consul datacenter to query.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The Consul datacenter to query.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param filter A filter expression to refine the list of results, see
         * https://www.consul.io/api-docs/features/filtering and https://www.consul.io/api-docs/health#filtering-2.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A filter expression to refine the list of results, see
         * https://www.consul.io/api-docs/features/filtering and https://www.consul.io/api-docs/health#filtering-2.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param name The service name to select.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The service name to select.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param near Specifies a node name to sort the node list in ascending order
         * based on the estimated round trip time from that node.
         * 
         * @return builder
         * 
         */
        public Builder near(@Nullable Output<String> near) {
            $.near = near;
            return this;
        }

        /**
         * @param near Specifies a node name to sort the node list in ascending order
         * based on the estimated round trip time from that node.
         * 
         * @return builder
         * 
         */
        public Builder near(String near) {
            return near(Output.of(near));
        }

        /**
         * @param nodeMeta Filter the results to nodes with the specified key/value
         * pairs.
         * 
         * @return builder
         * 
         */
        public Builder nodeMeta(@Nullable Output<Map<String,String>> nodeMeta) {
            $.nodeMeta = nodeMeta;
            return this;
        }

        /**
         * @param nodeMeta Filter the results to nodes with the specified key/value
         * pairs.
         * 
         * @return builder
         * 
         */
        public Builder nodeMeta(Map<String,String> nodeMeta) {
            return nodeMeta(Output.of(nodeMeta));
        }

        /**
         * @param passing Whether to return only nodes with all checks in the
         * passing state. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder passing(@Nullable Output<Boolean> passing) {
            $.passing = passing;
            return this;
        }

        /**
         * @param passing Whether to return only nodes with all checks in the
         * passing state. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder passing(Boolean passing) {
            return passing(Output.of(passing));
        }

        /**
         * @param tag A single tag that can be used to filter the list to return
         * based on a single matching tag.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag A single tag that can be used to filter the list to return
         * based on a single matching tag.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public Builder waitFor(@Nullable Output<String> waitFor) {
            $.waitFor = waitFor;
            return this;
        }

        public Builder waitFor(String waitFor) {
            return waitFor(Output.of(waitFor));
        }

        public GetServiceHealthArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetServiceHealthArgs", "name");
            }
            return $;
        }
    }

}
