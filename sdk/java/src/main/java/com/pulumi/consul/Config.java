// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.config.inputs.Headers;
import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("consul");
    public Optional<String> address() {
        return Codegen.stringProp("address").config(config).get();
    }
    public Optional<String> caFile() {
        return Codegen.stringProp("caFile").config(config).get();
    }
    public Optional<String> caPath() {
        return Codegen.stringProp("caPath").config(config).get();
    }
    public Optional<String> caPem() {
        return Codegen.stringProp("caPem").config(config).get();
    }
    public Optional<String> certFile() {
        return Codegen.stringProp("certFile").config(config).get();
    }
    public Optional<String> certPem() {
        return Codegen.stringProp("certPem").config(config).get();
    }
    public Optional<String> datacenter() {
        return Codegen.stringProp("datacenter").config(config).get();
    }
/**
 * Additional headers to send with each Consul request.
 * 
 */
    public Optional<List<Headers>> headers() {
        return Codegen.objectProp("headers", TypeShape.<List<Headers>>builder(List.class).addParameter(Headers.class).build()).config(config).get();
    }
    public Optional<String> httpAuth() {
        return Codegen.stringProp("httpAuth").config(config).get();
    }
    public Optional<Boolean> insecureHttps() {
        return Codegen.booleanProp("insecureHttps").config(config).get();
    }
    public Optional<String> keyFile() {
        return Codegen.stringProp("keyFile").config(config).get();
    }
    public Optional<String> keyPem() {
        return Codegen.stringProp("keyPem").config(config).get();
    }
    public Optional<String> namespace() {
        return Codegen.stringProp("namespace").config(config).get();
    }
    public Optional<String> scheme() {
        return Codegen.stringProp("scheme").config(config).get();
    }
    public Optional<String> token() {
        return Codegen.stringProp("token").config(config).get();
    }
}
