// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.config.inputs.AuthJwt;
import com.pulumi.consul.config.inputs.Headers;
import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("consul");
/**
 * The HTTP(S) API address of the agent to use. Defaults to &#34;127.0.0.1:8500&#34;.
 * 
 */
    public Optional<String> address() {
        return Codegen.stringProp("address").config(config).get();
    }
/**
 * Authenticates to Consul using a JWT authentication method.
 * 
 */
    public Optional<AuthJwt> authJwt() {
        return Codegen.objectProp("authJwt", AuthJwt.class).config(config).get();
    }
/**
 * A path to a PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
 * 
 */
    public Optional<String> caFile() {
        return Codegen.stringProp("caFile").config(config).get();
    }
/**
 * A path to a directory of PEM-encoded certificate authority files to use to check the authenticity of client and server
 * connections. Can also be specified with the `CONSUL_CAPATH` environment variable.
 * 
 */
    public Optional<String> caPath() {
        return Codegen.stringProp("caPath").config(config).get();
    }
/**
 * PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
 * 
 */
    public Optional<String> caPem() {
        return Codegen.stringProp("caPem").config(config).get();
    }
/**
 * A path to a PEM-encoded certificate provided to the remote agent; requires use of `key_file` or `key_pem`.
 * 
 */
    public Optional<String> certFile() {
        return Codegen.stringProp("certFile").config(config).get();
    }
/**
 * PEM-encoded certificate provided to the remote agent; requires use of `key_file` or `key_pem`.
 * 
 */
    public Optional<String> certPem() {
        return Codegen.stringProp("certPem").config(config).get();
    }
/**
 * The datacenter to use. Defaults to that of the agent.
 * 
 */
    public Optional<String> datacenter() {
        return Codegen.stringProp("datacenter").config(config).get();
    }
/**
 * A configuration block, described below, that provides additional headers to be sent along with all requests to the
 * Consul server. This block can be specified multiple times.
 * 
 */
    public Optional<List<Headers>> headers() {
        return Codegen.objectProp("headers", TypeShape.<List<Headers>>builder(List.class).addParameter(Headers.class).build()).config(config).get();
    }
/**
 * HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either `user` or
 * `user:pass`. This may also be specified using the `CONSUL_HTTP_AUTH` environment variable.
 * 
 */
    public Optional<String> httpAuth() {
        return Codegen.stringProp("httpAuth").config(config).get();
    }
/**
 * Boolean value to disable SSL certificate verification; setting this value to true is not recommended for production use.
 * Only use this with scheme set to &#34;https&#34;.
 * 
 */
    public Optional<Boolean> insecureHttps() {
        return Codegen.booleanProp("insecureHttps").config(config).get();
    }
/**
 * A path to a PEM-encoded private key, required if `cert_file` or `cert_pem` is specified.
 * 
 */
    public Optional<String> keyFile() {
        return Codegen.stringProp("keyFile").config(config).get();
    }
/**
 * PEM-encoded private key, required if `cert_file` or `cert_pem` is specified.
 * 
 */
    public Optional<String> keyPem() {
        return Codegen.stringProp("keyPem").config(config).get();
    }
    public Optional<String> namespace() {
        return Codegen.stringProp("namespace").config(config).get();
    }
/**
 * The URL scheme of the agent to use (&#34;http&#34; or &#34;https&#34;). Defaults to &#34;http&#34;.
 * 
 */
    public Optional<String> scheme() {
        return Codegen.stringProp("scheme").config(config).get();
    }
/**
 * The ACL token to use by default when making requests to the agent. Can also be specified with `CONSUL_HTTP_TOKEN` or
 * `CONSUL_TOKEN` as an environment variable.
 * 
 */
    public Optional<String> token() {
        return Codegen.stringProp("token").config(config).get();
    }
}
