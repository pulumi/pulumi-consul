// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceResolverRedirectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceResolverRedirectArgs Empty = new ConfigEntryServiceResolverRedirectArgs();

    /**
     * Specifies the datacenter at the redirect’s destination that resolves local upstream requests.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return Specifies the datacenter at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * Specifies the namespace at the redirect’s destination that resolves local upstream requests.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Specifies the namespace at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the admin partition at the redirect’s destination that resolves local upstream requests.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Specifies the admin partition at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Specifies the cluster with an active cluster peering connection at the redirect’s destination that resolves local upstream requests.
     * 
     */
    @Import(name="peer")
    private @Nullable Output<String> peer;

    /**
     * @return Specifies the cluster with an active cluster peering connection at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<Output<String>> peer() {
        return Optional.ofNullable(this.peer);
    }

    /**
     * Specifies the sameness group at the redirect’s destination that resolves local upstream requests.
     * 
     */
    @Import(name="samenessGroup")
    private @Nullable Output<String> samenessGroup;

    /**
     * @return Specifies the sameness group at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<Output<String>> samenessGroup() {
        return Optional.ofNullable(this.samenessGroup);
    }

    /**
     * Specifies the name of a service at the redirect’s destination that resolves local upstream requests.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Specifies the name of a service at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * Specifies the name of a subset of services at the redirect’s destination that resolves local upstream requests. If empty, the default subset is used. If specified, you must also specify at least one of the following in the same Redirect map: Service, Namespace, andDatacenter.
     * 
     */
    @Import(name="serviceSubset")
    private @Nullable Output<String> serviceSubset;

    /**
     * @return Specifies the name of a subset of services at the redirect’s destination that resolves local upstream requests. If empty, the default subset is used. If specified, you must also specify at least one of the following in the same Redirect map: Service, Namespace, andDatacenter.
     * 
     */
    public Optional<Output<String>> serviceSubset() {
        return Optional.ofNullable(this.serviceSubset);
    }

    private ConfigEntryServiceResolverRedirectArgs() {}

    private ConfigEntryServiceResolverRedirectArgs(ConfigEntryServiceResolverRedirectArgs $) {
        this.datacenter = $.datacenter;
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.peer = $.peer;
        this.samenessGroup = $.samenessGroup;
        this.service = $.service;
        this.serviceSubset = $.serviceSubset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceResolverRedirectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceResolverRedirectArgs $;

        public Builder() {
            $ = new ConfigEntryServiceResolverRedirectArgs();
        }

        public Builder(ConfigEntryServiceResolverRedirectArgs defaults) {
            $ = new ConfigEntryServiceResolverRedirectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenter Specifies the datacenter at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter Specifies the datacenter at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param namespace Specifies the namespace at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Specifies the namespace at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition Specifies the admin partition at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Specifies the admin partition at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param peer Specifies the cluster with an active cluster peering connection at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder peer(@Nullable Output<String> peer) {
            $.peer = peer;
            return this;
        }

        /**
         * @param peer Specifies the cluster with an active cluster peering connection at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder peer(String peer) {
            return peer(Output.of(peer));
        }

        /**
         * @param samenessGroup Specifies the sameness group at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder samenessGroup(@Nullable Output<String> samenessGroup) {
            $.samenessGroup = samenessGroup;
            return this;
        }

        /**
         * @param samenessGroup Specifies the sameness group at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder samenessGroup(String samenessGroup) {
            return samenessGroup(Output.of(samenessGroup));
        }

        /**
         * @param service Specifies the name of a service at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Specifies the name of a service at the redirect’s destination that resolves local upstream requests.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceSubset Specifies the name of a subset of services at the redirect’s destination that resolves local upstream requests. If empty, the default subset is used. If specified, you must also specify at least one of the following in the same Redirect map: Service, Namespace, andDatacenter.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(@Nullable Output<String> serviceSubset) {
            $.serviceSubset = serviceSubset;
            return this;
        }

        /**
         * @param serviceSubset Specifies the name of a subset of services at the redirect’s destination that resolves local upstream requests. If empty, the default subset is used. If specified, you must also specify at least one of the following in the same Redirect map: Service, Namespace, andDatacenter.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(String serviceSubset) {
            return serviceSubset(Output.of(serviceSubset));
        }

        public ConfigEntryServiceResolverRedirectArgs build() {
            return $;
        }
    }

}
