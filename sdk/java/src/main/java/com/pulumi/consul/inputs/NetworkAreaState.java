// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkAreaState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkAreaState Empty = new NetworkAreaState();

    /**
     * The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * The name of the Consul datacenter that will be
     * joined to form the area.
     * 
     */
    @Import(name="peerDatacenter")
    private @Nullable Output<String> peerDatacenter;

    /**
     * @return The name of the Consul datacenter that will be
     * joined to form the area.
     * 
     */
    public Optional<Output<String>> peerDatacenter() {
        return Optional.ofNullable(this.peerDatacenter);
    }

    /**
     * Specifies a list of Consul servers to attempt to
     * join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
     * 
     */
    @Import(name="retryJoins")
    private @Nullable Output<List<String>> retryJoins;

    /**
     * @return Specifies a list of Consul servers to attempt to
     * join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
     * 
     */
    public Optional<Output<List<String>>> retryJoins() {
        return Optional.ofNullable(this.retryJoins);
    }

    /**
     * The ACL token to use. This overrides the
     * token that the agent provides by default.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The ACL token to use. This overrides the
     * token that the agent provides by default.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * Specifies whether gossip over this area should be
     * encrypted with TLS if possible. Defaults to `false`.
     * 
     */
    @Import(name="useTls")
    private @Nullable Output<Boolean> useTls;

    /**
     * @return Specifies whether gossip over this area should be
     * encrypted with TLS if possible. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> useTls() {
        return Optional.ofNullable(this.useTls);
    }

    private NetworkAreaState() {}

    private NetworkAreaState(NetworkAreaState $) {
        this.datacenter = $.datacenter;
        this.peerDatacenter = $.peerDatacenter;
        this.retryJoins = $.retryJoins;
        this.token = $.token;
        this.useTls = $.useTls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkAreaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkAreaState $;

        public Builder() {
            $ = new NetworkAreaState();
        }

        public Builder(NetworkAreaState defaults) {
            $ = new NetworkAreaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenter The datacenter to use. This overrides the
         * agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The datacenter to use. This overrides the
         * agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param peerDatacenter The name of the Consul datacenter that will be
         * joined to form the area.
         * 
         * @return builder
         * 
         */
        public Builder peerDatacenter(@Nullable Output<String> peerDatacenter) {
            $.peerDatacenter = peerDatacenter;
            return this;
        }

        /**
         * @param peerDatacenter The name of the Consul datacenter that will be
         * joined to form the area.
         * 
         * @return builder
         * 
         */
        public Builder peerDatacenter(String peerDatacenter) {
            return peerDatacenter(Output.of(peerDatacenter));
        }

        /**
         * @param retryJoins Specifies a list of Consul servers to attempt to
         * join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
         * 
         * @return builder
         * 
         */
        public Builder retryJoins(@Nullable Output<List<String>> retryJoins) {
            $.retryJoins = retryJoins;
            return this;
        }

        /**
         * @param retryJoins Specifies a list of Consul servers to attempt to
         * join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
         * 
         * @return builder
         * 
         */
        public Builder retryJoins(List<String> retryJoins) {
            return retryJoins(Output.of(retryJoins));
        }

        /**
         * @param retryJoins Specifies a list of Consul servers to attempt to
         * join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
         * 
         * @return builder
         * 
         */
        public Builder retryJoins(String... retryJoins) {
            return retryJoins(List.of(retryJoins));
        }

        /**
         * @param token The ACL token to use. This overrides the
         * token that the agent provides by default.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The ACL token to use. This overrides the
         * token that the agent provides by default.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param useTls Specifies whether gossip over this area should be
         * encrypted with TLS if possible. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder useTls(@Nullable Output<Boolean> useTls) {
            $.useTls = useTls;
            return this;
        }

        /**
         * @param useTls Specifies whether gossip over this area should be
         * encrypted with TLS if possible. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder useTls(Boolean useTls) {
            return useTls(Output.of(useTls));
        }

        public NetworkAreaState build() {
            return $;
        }
    }

}
