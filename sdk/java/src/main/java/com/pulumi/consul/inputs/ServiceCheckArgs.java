// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.ServiceCheckHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceCheckArgs Empty = new ServiceCheckArgs();

    /**
     * An ID, *unique per agent*. Will default to *name*
     * if not set.
     * 
     */
    @Import(name="checkId", required=true)
    private Output<String> checkId;

    /**
     * @return An ID, *unique per agent*. Will default to *name*
     * if not set.
     * 
     */
    public Output<String> checkId() {
        return this.checkId;
    }

    /**
     * The time after which
     * the service is automatically deregistered when in the `critical` state.
     * Defaults to `30s`.
     * 
     */
    @Import(name="deregisterCriticalServiceAfter")
    private @Nullable Output<String> deregisterCriticalServiceAfter;

    /**
     * @return The time after which
     * the service is automatically deregistered when in the `critical` state.
     * Defaults to `30s`.
     * 
     */
    public Optional<Output<String>> deregisterCriticalServiceAfter() {
        return Optional.ofNullable(this.deregisterCriticalServiceAfter);
    }

    /**
     * The headers to send for an HTTP check.
     * The attributes of each header is given below.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<ServiceCheckHeaderArgs>> headers;

    /**
     * @return The headers to send for an HTTP check.
     * The attributes of each header is given below.
     * 
     */
    public Optional<Output<List<ServiceCheckHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * The HTTP endpoint to call for an HTTP check.
     * 
     */
    @Import(name="http")
    private @Nullable Output<String> http;

    /**
     * @return The HTTP endpoint to call for an HTTP check.
     * 
     */
    public Optional<Output<String>> http() {
        return Optional.ofNullable(this.http);
    }

    /**
     * The interval to wait between each health-check
     * invocation.
     * 
     */
    @Import(name="interval", required=true)
    private Output<String> interval;

    /**
     * @return The interval to wait between each health-check
     * invocation.
     * 
     */
    public Output<String> interval() {
        return this.interval;
    }

    /**
     * The method to use for HTTP health-checks. Defaults
     * to `GET`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return The method to use for HTTP health-checks. Defaults
     * to `GET`.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * The name of the health-check.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the health-check.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * An opaque field meant to hold human readable text.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return An opaque field meant to hold human readable text.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * The initial health-check status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The initial health-check status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The TCP address and port to connect to for a TCP check.
     * 
     */
    @Import(name="tcp")
    private @Nullable Output<String> tcp;

    /**
     * @return The TCP address and port to connect to for a TCP check.
     * 
     */
    public Optional<Output<String>> tcp() {
        return Optional.ofNullable(this.tcp);
    }

    /**
     * Specifies a timeout for outgoing connections in
     * the case of a HTTP or TCP check.
     * 
     */
    @Import(name="timeout", required=true)
    private Output<String> timeout;

    /**
     * @return Specifies a timeout for outgoing connections in
     * the case of a HTTP or TCP check.
     * 
     */
    public Output<String> timeout() {
        return this.timeout;
    }

    /**
     * Whether to deactivate certificate
     * verification for HTTP health-checks. Defaults to `false`.
     * 
     */
    @Import(name="tlsSkipVerify")
    private @Nullable Output<Boolean> tlsSkipVerify;

    /**
     * @return Whether to deactivate certificate
     * verification for HTTP health-checks. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> tlsSkipVerify() {
        return Optional.ofNullable(this.tlsSkipVerify);
    }

    private ServiceCheckArgs() {}

    private ServiceCheckArgs(ServiceCheckArgs $) {
        this.checkId = $.checkId;
        this.deregisterCriticalServiceAfter = $.deregisterCriticalServiceAfter;
        this.headers = $.headers;
        this.http = $.http;
        this.interval = $.interval;
        this.method = $.method;
        this.name = $.name;
        this.notes = $.notes;
        this.status = $.status;
        this.tcp = $.tcp;
        this.timeout = $.timeout;
        this.tlsSkipVerify = $.tlsSkipVerify;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceCheckArgs $;

        public Builder() {
            $ = new ServiceCheckArgs();
        }

        public Builder(ServiceCheckArgs defaults) {
            $ = new ServiceCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkId An ID, *unique per agent*. Will default to *name*
         * if not set.
         * 
         * @return builder
         * 
         */
        public Builder checkId(Output<String> checkId) {
            $.checkId = checkId;
            return this;
        }

        /**
         * @param checkId An ID, *unique per agent*. Will default to *name*
         * if not set.
         * 
         * @return builder
         * 
         */
        public Builder checkId(String checkId) {
            return checkId(Output.of(checkId));
        }

        /**
         * @param deregisterCriticalServiceAfter The time after which
         * the service is automatically deregistered when in the `critical` state.
         * Defaults to `30s`.
         * 
         * @return builder
         * 
         */
        public Builder deregisterCriticalServiceAfter(@Nullable Output<String> deregisterCriticalServiceAfter) {
            $.deregisterCriticalServiceAfter = deregisterCriticalServiceAfter;
            return this;
        }

        /**
         * @param deregisterCriticalServiceAfter The time after which
         * the service is automatically deregistered when in the `critical` state.
         * Defaults to `30s`.
         * 
         * @return builder
         * 
         */
        public Builder deregisterCriticalServiceAfter(String deregisterCriticalServiceAfter) {
            return deregisterCriticalServiceAfter(Output.of(deregisterCriticalServiceAfter));
        }

        /**
         * @param headers The headers to send for an HTTP check.
         * The attributes of each header is given below.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<ServiceCheckHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers The headers to send for an HTTP check.
         * The attributes of each header is given below.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<ServiceCheckHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers The headers to send for an HTTP check.
         * The attributes of each header is given below.
         * 
         * @return builder
         * 
         */
        public Builder headers(ServiceCheckHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param http The HTTP endpoint to call for an HTTP check.
         * 
         * @return builder
         * 
         */
        public Builder http(@Nullable Output<String> http) {
            $.http = http;
            return this;
        }

        /**
         * @param http The HTTP endpoint to call for an HTTP check.
         * 
         * @return builder
         * 
         */
        public Builder http(String http) {
            return http(Output.of(http));
        }

        /**
         * @param interval The interval to wait between each health-check
         * invocation.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<String> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval to wait between each health-check
         * invocation.
         * 
         * @return builder
         * 
         */
        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param method The method to use for HTTP health-checks. Defaults
         * to `GET`.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The method to use for HTTP health-checks. Defaults
         * to `GET`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param name The name of the health-check.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the health-check.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notes An opaque field meant to hold human readable text.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes An opaque field meant to hold human readable text.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param status The initial health-check status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The initial health-check status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tcp The TCP address and port to connect to for a TCP check.
         * 
         * @return builder
         * 
         */
        public Builder tcp(@Nullable Output<String> tcp) {
            $.tcp = tcp;
            return this;
        }

        /**
         * @param tcp The TCP address and port to connect to for a TCP check.
         * 
         * @return builder
         * 
         */
        public Builder tcp(String tcp) {
            return tcp(Output.of(tcp));
        }

        /**
         * @param timeout Specifies a timeout for outgoing connections in
         * the case of a HTTP or TCP check.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Specifies a timeout for outgoing connections in
         * the case of a HTTP or TCP check.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param tlsSkipVerify Whether to deactivate certificate
         * verification for HTTP health-checks. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder tlsSkipVerify(@Nullable Output<Boolean> tlsSkipVerify) {
            $.tlsSkipVerify = tlsSkipVerify;
            return this;
        }

        /**
         * @param tlsSkipVerify Whether to deactivate certificate
         * verification for HTTP health-checks. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder tlsSkipVerify(Boolean tlsSkipVerify) {
            return tlsSkipVerify(Output.of(tlsSkipVerify));
        }

        public ServiceCheckArgs build() {
            $.checkId = Objects.requireNonNull($.checkId, "expected parameter 'checkId' to be non-null");
            $.interval = Objects.requireNonNull($.interval, "expected parameter 'interval' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            return $;
        }
    }

}
