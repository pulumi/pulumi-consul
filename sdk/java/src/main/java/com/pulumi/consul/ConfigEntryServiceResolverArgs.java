// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.inputs.ConfigEntryServiceResolverFailoverArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceResolverLoadBalancerArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceResolverRedirectArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceResolverSubsetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceResolverArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceResolverArgs Empty = new ConfigEntryServiceResolverArgs();

    /**
     * Specifies the timeout duration for establishing new network connections to this service.
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<String> connectTimeout;

    /**
     * @return Specifies the timeout duration for establishing new network connections to this service.
     * 
     */
    public Optional<Output<String>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
     * 
     */
    @Import(name="defaultSubset")
    private @Nullable Output<String> defaultSubset;

    /**
     * @return Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
     * 
     */
    public Optional<Output<String>> defaultSubset() {
        return Optional.ofNullable(this.defaultSubset);
    }

    /**
     * Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
     * 
     */
    @Import(name="failovers")
    private @Nullable Output<List<ConfigEntryServiceResolverFailoverArgs>> failovers;

    /**
     * @return Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceResolverFailoverArgs>>> failovers() {
        return Optional.ofNullable(this.failovers);
    }

    /**
     * Specifies the load balancing policy and configuration for services issuing requests to this upstream.
     * 
     */
    @Import(name="loadBalancers")
    private @Nullable Output<List<ConfigEntryServiceResolverLoadBalancerArgs>> loadBalancers;

    /**
     * @return Specifies the load balancing policy and configuration for services issuing requests to this upstream.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceResolverLoadBalancerArgs>>> loadBalancers() {
        return Optional.ofNullable(this.loadBalancers);
    }

    /**
     * Specifies key-value pairs to add to the KV store.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<Map<String,String>> meta;

    /**
     * @return Specifies key-value pairs to add to the KV store.
     * 
     */
    public Optional<Output<Map<String,String>>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * Specifies a name for the configuration entry.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies a name for the configuration entry.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the namespace that the service resolver applies to.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Specifies the namespace that the service resolver applies to.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the admin partition that the service resolver applies to.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Specifies the admin partition that the service resolver applies to.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
     * 
     */
    @Import(name="redirects")
    private @Nullable Output<List<ConfigEntryServiceResolverRedirectArgs>> redirects;

    /**
     * @return Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceResolverRedirectArgs>>> redirects() {
        return Optional.ofNullable(this.redirects);
    }

    /**
     * Specifies the timeout duration for receiving an HTTP response from this service.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Output<String> requestTimeout;

    /**
     * @return Specifies the timeout duration for receiving an HTTP response from this service.
     * 
     */
    public Optional<Output<String>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
     * 
     */
    @Import(name="subsets")
    private @Nullable Output<List<ConfigEntryServiceResolverSubsetArgs>> subsets;

    /**
     * @return Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceResolverSubsetArgs>>> subsets() {
        return Optional.ofNullable(this.subsets);
    }

    private ConfigEntryServiceResolverArgs() {}

    private ConfigEntryServiceResolverArgs(ConfigEntryServiceResolverArgs $) {
        this.connectTimeout = $.connectTimeout;
        this.defaultSubset = $.defaultSubset;
        this.failovers = $.failovers;
        this.loadBalancers = $.loadBalancers;
        this.meta = $.meta;
        this.name = $.name;
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.redirects = $.redirects;
        this.requestTimeout = $.requestTimeout;
        this.subsets = $.subsets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceResolverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceResolverArgs $;

        public Builder() {
            $ = new ConfigEntryServiceResolverArgs();
        }

        public Builder(ConfigEntryServiceResolverArgs defaults) {
            $ = new ConfigEntryServiceResolverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectTimeout Specifies the timeout duration for establishing new network connections to this service.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<String> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout Specifies the timeout duration for establishing new network connections to this service.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(String connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param defaultSubset Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
         * 
         * @return builder
         * 
         */
        public Builder defaultSubset(@Nullable Output<String> defaultSubset) {
            $.defaultSubset = defaultSubset;
            return this;
        }

        /**
         * @param defaultSubset Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
         * 
         * @return builder
         * 
         */
        public Builder defaultSubset(String defaultSubset) {
            return defaultSubset(Output.of(defaultSubset));
        }

        /**
         * @param failovers Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
         * 
         * @return builder
         * 
         */
        public Builder failovers(@Nullable Output<List<ConfigEntryServiceResolverFailoverArgs>> failovers) {
            $.failovers = failovers;
            return this;
        }

        /**
         * @param failovers Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
         * 
         * @return builder
         * 
         */
        public Builder failovers(List<ConfigEntryServiceResolverFailoverArgs> failovers) {
            return failovers(Output.of(failovers));
        }

        /**
         * @param failovers Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
         * 
         * @return builder
         * 
         */
        public Builder failovers(ConfigEntryServiceResolverFailoverArgs... failovers) {
            return failovers(List.of(failovers));
        }

        /**
         * @param loadBalancers Specifies the load balancing policy and configuration for services issuing requests to this upstream.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancers(@Nullable Output<List<ConfigEntryServiceResolverLoadBalancerArgs>> loadBalancers) {
            $.loadBalancers = loadBalancers;
            return this;
        }

        /**
         * @param loadBalancers Specifies the load balancing policy and configuration for services issuing requests to this upstream.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancers(List<ConfigEntryServiceResolverLoadBalancerArgs> loadBalancers) {
            return loadBalancers(Output.of(loadBalancers));
        }

        /**
         * @param loadBalancers Specifies the load balancing policy and configuration for services issuing requests to this upstream.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancers(ConfigEntryServiceResolverLoadBalancerArgs... loadBalancers) {
            return loadBalancers(List.of(loadBalancers));
        }

        /**
         * @param meta Specifies key-value pairs to add to the KV store.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<Map<String,String>> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Specifies key-value pairs to add to the KV store.
         * 
         * @return builder
         * 
         */
        public Builder meta(Map<String,String> meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param name Specifies a name for the configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies a name for the configuration entry.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Specifies the namespace that the service resolver applies to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Specifies the namespace that the service resolver applies to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition Specifies the admin partition that the service resolver applies to.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Specifies the admin partition that the service resolver applies to.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param redirects Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
         * 
         * @return builder
         * 
         */
        public Builder redirects(@Nullable Output<List<ConfigEntryServiceResolverRedirectArgs>> redirects) {
            $.redirects = redirects;
            return this;
        }

        /**
         * @param redirects Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
         * 
         * @return builder
         * 
         */
        public Builder redirects(List<ConfigEntryServiceResolverRedirectArgs> redirects) {
            return redirects(Output.of(redirects));
        }

        /**
         * @param redirects Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
         * 
         * @return builder
         * 
         */
        public Builder redirects(ConfigEntryServiceResolverRedirectArgs... redirects) {
            return redirects(List.of(redirects));
        }

        /**
         * @param requestTimeout Specifies the timeout duration for receiving an HTTP response from this service.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Output<String> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param requestTimeout Specifies the timeout duration for receiving an HTTP response from this service.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(String requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        /**
         * @param subsets Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
         * 
         * @return builder
         * 
         */
        public Builder subsets(@Nullable Output<List<ConfigEntryServiceResolverSubsetArgs>> subsets) {
            $.subsets = subsets;
            return this;
        }

        /**
         * @param subsets Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
         * 
         * @return builder
         * 
         */
        public Builder subsets(List<ConfigEntryServiceResolverSubsetArgs> subsets) {
            return subsets(Output.of(subsets));
        }

        /**
         * @param subsets Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
         * 
         * @return builder
         * 
         */
        public Builder subsets(ConfigEntryServiceResolverSubsetArgs... subsets) {
            return subsets(List.of(subsets));
        }

        public ConfigEntryServiceResolverArgs build() {
            return $;
        }
    }

}
