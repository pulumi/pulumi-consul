// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentServiceArgs Empty = new AgentServiceArgs();

    /**
     * The address of the service. Defaults to the
     * address of the agent.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The address of the service. Defaults to the
     * address of the agent.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The name of the service.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the service.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The port of the service.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port of the service.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * A list of values that are opaque to Consul,
     * but can be used to distinguish between services or nodes.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of values that are opaque to Consul,
     * but can be used to distinguish between services or nodes.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AgentServiceArgs() {}

    private AgentServiceArgs(AgentServiceArgs $) {
        this.address = $.address;
        this.name = $.name;
        this.port = $.port;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentServiceArgs $;

        public Builder() {
            $ = new AgentServiceArgs();
        }

        public Builder(AgentServiceArgs defaults) {
            $ = new AgentServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The address of the service. Defaults to the
         * address of the agent.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The address of the service. Defaults to the
         * address of the agent.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param name The name of the service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port The port of the service.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port of the service.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param tags A list of values that are opaque to Consul,
         * but can be used to distinguish between services or nodes.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of values that are opaque to Consul,
         * but can be used to distinguish between services or nodes.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of values that are opaque to Consul,
         * but can be used to distinguish between services or nodes.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public AgentServiceArgs build() {
            return $;
        }
    }

}
