// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.ConfigEntryServiceSplitterSplitRequestHeadersArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceSplitterSplitResponseHeadersArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceSplitterSplitArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceSplitterSplitArgs Empty = new ConfigEntryServiceSplitterSplitArgs();

    /**
     * Specifies the namespace to use in the FQDN when resolving the service.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Specifies the namespace to use in the FQDN when resolving the service.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the admin partition to use in the FQDN when resolving the service.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Specifies the admin partition to use in the FQDN when resolving the service.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Specifies a set of HTTP-specific header modification rules applied to requests routed with the service split. You cannot configure request headers if the listener protocol is set to `tcp`.
     * 
     */
    @Import(name="requestHeaders")
    private @Nullable Output<ConfigEntryServiceSplitterSplitRequestHeadersArgs> requestHeaders;

    /**
     * @return Specifies a set of HTTP-specific header modification rules applied to requests routed with the service split. You cannot configure request headers if the listener protocol is set to `tcp`.
     * 
     */
    public Optional<Output<ConfigEntryServiceSplitterSplitRequestHeadersArgs>> requestHeaders() {
        return Optional.ofNullable(this.requestHeaders);
    }

    /**
     * Specifies a set of HTTP-specific header modification rules applied to responses routed with the service split. You cannot configure request headers if the listener protocol is set to `tcp`.
     * 
     */
    @Import(name="responseHeaders")
    private @Nullable Output<ConfigEntryServiceSplitterSplitResponseHeadersArgs> responseHeaders;

    /**
     * @return Specifies a set of HTTP-specific header modification rules applied to responses routed with the service split. You cannot configure request headers if the listener protocol is set to `tcp`.
     * 
     */
    public Optional<Output<ConfigEntryServiceSplitterSplitResponseHeadersArgs>> responseHeaders() {
        return Optional.ofNullable(this.responseHeaders);
    }

    /**
     * Specifies the name of the service to resolve.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return Specifies the name of the service to resolve.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    /**
     * Specifies a subset of the service to resolve. A service subset assigns a name to a specific subset of discoverable service instances within a datacenter, such as `version2` or `canary`. All services have an unnamed default subset that returns all healthy instances.
     * 
     */
    @Import(name="serviceSubset")
    private @Nullable Output<String> serviceSubset;

    /**
     * @return Specifies a subset of the service to resolve. A service subset assigns a name to a specific subset of discoverable service instances within a datacenter, such as `version2` or `canary`. All services have an unnamed default subset that returns all healthy instances.
     * 
     */
    public Optional<Output<String>> serviceSubset() {
        return Optional.ofNullable(this.serviceSubset);
    }

    /**
     * Specifies the percentage of traffic sent to the set of service instances specified in the `service` field. Each weight must be a floating integer between `0` and `100`. The smallest representable value is `.01`. The sum of weights across all splits must add up to `100`.
     * 
     */
    @Import(name="weight", required=true)
    private Output<Double> weight;

    /**
     * @return Specifies the percentage of traffic sent to the set of service instances specified in the `service` field. Each weight must be a floating integer between `0` and `100`. The smallest representable value is `.01`. The sum of weights across all splits must add up to `100`.
     * 
     */
    public Output<Double> weight() {
        return this.weight;
    }

    private ConfigEntryServiceSplitterSplitArgs() {}

    private ConfigEntryServiceSplitterSplitArgs(ConfigEntryServiceSplitterSplitArgs $) {
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.requestHeaders = $.requestHeaders;
        this.responseHeaders = $.responseHeaders;
        this.service = $.service;
        this.serviceSubset = $.serviceSubset;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceSplitterSplitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceSplitterSplitArgs $;

        public Builder() {
            $ = new ConfigEntryServiceSplitterSplitArgs();
        }

        public Builder(ConfigEntryServiceSplitterSplitArgs defaults) {
            $ = new ConfigEntryServiceSplitterSplitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespace Specifies the namespace to use in the FQDN when resolving the service.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Specifies the namespace to use in the FQDN when resolving the service.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition Specifies the admin partition to use in the FQDN when resolving the service.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Specifies the admin partition to use in the FQDN when resolving the service.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param requestHeaders Specifies a set of HTTP-specific header modification rules applied to requests routed with the service split. You cannot configure request headers if the listener protocol is set to `tcp`.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(@Nullable Output<ConfigEntryServiceSplitterSplitRequestHeadersArgs> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * @param requestHeaders Specifies a set of HTTP-specific header modification rules applied to requests routed with the service split. You cannot configure request headers if the listener protocol is set to `tcp`.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(ConfigEntryServiceSplitterSplitRequestHeadersArgs requestHeaders) {
            return requestHeaders(Output.of(requestHeaders));
        }

        /**
         * @param responseHeaders Specifies a set of HTTP-specific header modification rules applied to responses routed with the service split. You cannot configure request headers if the listener protocol is set to `tcp`.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaders(@Nullable Output<ConfigEntryServiceSplitterSplitResponseHeadersArgs> responseHeaders) {
            $.responseHeaders = responseHeaders;
            return this;
        }

        /**
         * @param responseHeaders Specifies a set of HTTP-specific header modification rules applied to responses routed with the service split. You cannot configure request headers if the listener protocol is set to `tcp`.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaders(ConfigEntryServiceSplitterSplitResponseHeadersArgs responseHeaders) {
            return responseHeaders(Output.of(responseHeaders));
        }

        /**
         * @param service Specifies the name of the service to resolve.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Specifies the name of the service to resolve.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceSubset Specifies a subset of the service to resolve. A service subset assigns a name to a specific subset of discoverable service instances within a datacenter, such as `version2` or `canary`. All services have an unnamed default subset that returns all healthy instances.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(@Nullable Output<String> serviceSubset) {
            $.serviceSubset = serviceSubset;
            return this;
        }

        /**
         * @param serviceSubset Specifies a subset of the service to resolve. A service subset assigns a name to a specific subset of discoverable service instances within a datacenter, such as `version2` or `canary`. All services have an unnamed default subset that returns all healthy instances.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(String serviceSubset) {
            return serviceSubset(Output.of(serviceSubset));
        }

        /**
         * @param weight Specifies the percentage of traffic sent to the set of service instances specified in the `service` field. Each weight must be a floating integer between `0` and `100`. The smallest representable value is `.01`. The sum of weights across all splits must add up to `100`.
         * 
         * @return builder
         * 
         */
        public Builder weight(Output<Double> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight Specifies the percentage of traffic sent to the set of service instances specified in the `service` field. Each weight must be a floating integer between `0` and `100`. The smallest representable value is `.01`. The sum of weights across all splits must add up to `100`.
         * 
         * @return builder
         * 
         */
        public Builder weight(Double weight) {
            return weight(Output.of(weight));
        }

        public ConfigEntryServiceSplitterSplitArgs build() {
            if ($.service == null) {
                throw new MissingRequiredPropertyException("ConfigEntryServiceSplitterSplitArgs", "service");
            }
            if ($.weight == null) {
                throw new MissingRequiredPropertyException("ConfigEntryServiceSplitterSplitArgs", "weight");
            }
            return $;
        }
    }

}
