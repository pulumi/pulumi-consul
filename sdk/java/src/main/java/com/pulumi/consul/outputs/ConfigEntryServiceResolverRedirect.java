// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigEntryServiceResolverRedirect {
    /**
     * @return Specifies the datacenter at the redirect’s destination that resolves local upstream requests.
     * 
     */
    private @Nullable String datacenter;
    /**
     * @return Specifies the namespace at the redirect’s destination that resolves local upstream requests.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return Specifies the admin partition at the redirect’s destination that resolves local upstream requests.
     * 
     */
    private @Nullable String partition;
    /**
     * @return Specifies the cluster with an active cluster peering connection at the redirect’s destination that resolves local upstream requests.
     * 
     */
    private @Nullable String peer;
    /**
     * @return Specifies the sameness group at the redirect’s destination that resolves local upstream requests.
     * 
     */
    private @Nullable String samenessGroup;
    /**
     * @return Specifies the name of a service at the redirect’s destination that resolves local upstream requests.
     * 
     */
    private @Nullable String service;
    /**
     * @return Specifies the name of a subset of services at the redirect’s destination that resolves local upstream requests. If empty, the default subset is used. If specified, you must also specify at least one of the following in the same Redirect map: Service, Namespace, andDatacenter.
     * 
     */
    private @Nullable String serviceSubset;

    private ConfigEntryServiceResolverRedirect() {}
    /**
     * @return Specifies the datacenter at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<String> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }
    /**
     * @return Specifies the namespace at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Specifies the admin partition at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<String> partition() {
        return Optional.ofNullable(this.partition);
    }
    /**
     * @return Specifies the cluster with an active cluster peering connection at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<String> peer() {
        return Optional.ofNullable(this.peer);
    }
    /**
     * @return Specifies the sameness group at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<String> samenessGroup() {
        return Optional.ofNullable(this.samenessGroup);
    }
    /**
     * @return Specifies the name of a service at the redirect’s destination that resolves local upstream requests.
     * 
     */
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }
    /**
     * @return Specifies the name of a subset of services at the redirect’s destination that resolves local upstream requests. If empty, the default subset is used. If specified, you must also specify at least one of the following in the same Redirect map: Service, Namespace, andDatacenter.
     * 
     */
    public Optional<String> serviceSubset() {
        return Optional.ofNullable(this.serviceSubset);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigEntryServiceResolverRedirect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String datacenter;
        private @Nullable String namespace;
        private @Nullable String partition;
        private @Nullable String peer;
        private @Nullable String samenessGroup;
        private @Nullable String service;
        private @Nullable String serviceSubset;
        public Builder() {}
        public Builder(ConfigEntryServiceResolverRedirect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenter = defaults.datacenter;
    	      this.namespace = defaults.namespace;
    	      this.partition = defaults.partition;
    	      this.peer = defaults.peer;
    	      this.samenessGroup = defaults.samenessGroup;
    	      this.service = defaults.service;
    	      this.serviceSubset = defaults.serviceSubset;
        }

        @CustomType.Setter
        public Builder datacenter(@Nullable String datacenter) {

            this.datacenter = datacenter;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder partition(@Nullable String partition) {

            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder peer(@Nullable String peer) {

            this.peer = peer;
            return this;
        }
        @CustomType.Setter
        public Builder samenessGroup(@Nullable String samenessGroup) {

            this.samenessGroup = samenessGroup;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {

            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder serviceSubset(@Nullable String serviceSubset) {

            this.serviceSubset = serviceSubset;
            return this;
        }
        public ConfigEntryServiceResolverRedirect build() {
            final var _resultValue = new ConfigEntryServiceResolverRedirect();
            _resultValue.datacenter = datacenter;
            _resultValue.namespace = namespace;
            _resultValue.partition = partition;
            _resultValue.peer = peer;
            _resultValue.samenessGroup = samenessGroup;
            _resultValue.service = service;
            _resultValue.serviceSubset = serviceSubset;
            return _resultValue;
        }
    }
}
