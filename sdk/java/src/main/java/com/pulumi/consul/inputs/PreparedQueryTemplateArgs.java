// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class PreparedQueryTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreparedQueryTemplateArgs Empty = new PreparedQueryTemplateArgs();

    /**
     * The regular expression to match with. When using
     * `name_prefix_match`, this regex is applied against the query name.
     * 
     */
    @Import(name="regexp", required=true)
    private Output<String> regexp;

    /**
     * @return The regular expression to match with. When using
     * `name_prefix_match`, this regex is applied against the query name.
     * 
     */
    public Output<String> regexp() {
        return this.regexp;
    }

    /**
     * The type of template matching to perform. Currently
     * only `name_prefix_match` is supported.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of template matching to perform. Currently
     * only `name_prefix_match` is supported.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private PreparedQueryTemplateArgs() {}

    private PreparedQueryTemplateArgs(PreparedQueryTemplateArgs $) {
        this.regexp = $.regexp;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreparedQueryTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreparedQueryTemplateArgs $;

        public Builder() {
            $ = new PreparedQueryTemplateArgs();
        }

        public Builder(PreparedQueryTemplateArgs defaults) {
            $ = new PreparedQueryTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param regexp The regular expression to match with. When using
         * `name_prefix_match`, this regex is applied against the query name.
         * 
         * @return builder
         * 
         */
        public Builder regexp(Output<String> regexp) {
            $.regexp = regexp;
            return this;
        }

        /**
         * @param regexp The regular expression to match with. When using
         * `name_prefix_match`, this regex is applied against the query name.
         * 
         * @return builder
         * 
         */
        public Builder regexp(String regexp) {
            return regexp(Output.of(regexp));
        }

        /**
         * @param type The type of template matching to perform. Currently
         * only `name_prefix_match` is supported.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of template matching to perform. Currently
         * only `name_prefix_match` is supported.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PreparedQueryTemplateArgs build() {
            $.regexp = Objects.requireNonNull($.regexp, "expected parameter 'regexp' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
