// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.KeyPrefixSubkeyCollectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyPrefixState extends com.pulumi.resources.ResourceArgs {

    public static final KeyPrefixState Empty = new KeyPrefixState();

    /**
     * The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * The namespace to create the keys within.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to create the keys within.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The admin partition to create the keys within.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return The admin partition to create the keys within.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Specifies the common prefix shared by all keys
     * that will be managed by this resource instance. In most cases this will
     * end with a slash, to manage a &#34;folder&#34; of keys.
     * 
     */
    @Import(name="pathPrefix")
    private @Nullable Output<String> pathPrefix;

    /**
     * @return Specifies the common prefix shared by all keys
     * that will be managed by this resource instance. In most cases this will
     * end with a slash, to manage a &#34;folder&#34; of keys.
     * 
     */
    public Optional<Output<String>> pathPrefix() {
        return Optional.ofNullable(this.pathPrefix);
    }

    /**
     * A subkey to add. Supported values documented below.
     * Multiple blocks supported.
     * 
     */
    @Import(name="subkeyCollection")
    private @Nullable Output<List<KeyPrefixSubkeyCollectionArgs>> subkeyCollection;

    /**
     * @return A subkey to add. Supported values documented below.
     * Multiple blocks supported.
     * 
     */
    public Optional<Output<List<KeyPrefixSubkeyCollectionArgs>>> subkeyCollection() {
        return Optional.ofNullable(this.subkeyCollection);
    }

    /**
     * A mapping from subkey name (which will be appended
     * to the given `path_prefix`) to the value that should be stored at that key.
     * Use slashes, as shown in the above example, to create &#34;sub-folders&#34; under
     * the given path prefix.
     * 
     */
    @Import(name="subkeys")
    private @Nullable Output<Map<String,String>> subkeys;

    /**
     * @return A mapping from subkey name (which will be appended
     * to the given `path_prefix`) to the value that should be stored at that key.
     * Use slashes, as shown in the above example, to create &#34;sub-folders&#34; under
     * the given path prefix.
     * 
     */
    public Optional<Output<Map<String,String>>> subkeys() {
        return Optional.ofNullable(this.subkeys);
    }

    /**
     * The ACL token to use. This overrides the
     * token that the agent provides by default.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The ACL token to use. This overrides the
     * token that the agent provides by default.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private KeyPrefixState() {}

    private KeyPrefixState(KeyPrefixState $) {
        this.datacenter = $.datacenter;
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.pathPrefix = $.pathPrefix;
        this.subkeyCollection = $.subkeyCollection;
        this.subkeys = $.subkeys;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyPrefixState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyPrefixState $;

        public Builder() {
            $ = new KeyPrefixState();
        }

        public Builder(KeyPrefixState defaults) {
            $ = new KeyPrefixState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenter The datacenter to use. This overrides the
         * agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The datacenter to use. This overrides the
         * agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param namespace The namespace to create the keys within.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to create the keys within.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition The admin partition to create the keys within.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition The admin partition to create the keys within.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param pathPrefix Specifies the common prefix shared by all keys
         * that will be managed by this resource instance. In most cases this will
         * end with a slash, to manage a &#34;folder&#34; of keys.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(@Nullable Output<String> pathPrefix) {
            $.pathPrefix = pathPrefix;
            return this;
        }

        /**
         * @param pathPrefix Specifies the common prefix shared by all keys
         * that will be managed by this resource instance. In most cases this will
         * end with a slash, to manage a &#34;folder&#34; of keys.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(String pathPrefix) {
            return pathPrefix(Output.of(pathPrefix));
        }

        /**
         * @param subkeyCollection A subkey to add. Supported values documented below.
         * Multiple blocks supported.
         * 
         * @return builder
         * 
         */
        public Builder subkeyCollection(@Nullable Output<List<KeyPrefixSubkeyCollectionArgs>> subkeyCollection) {
            $.subkeyCollection = subkeyCollection;
            return this;
        }

        /**
         * @param subkeyCollection A subkey to add. Supported values documented below.
         * Multiple blocks supported.
         * 
         * @return builder
         * 
         */
        public Builder subkeyCollection(List<KeyPrefixSubkeyCollectionArgs> subkeyCollection) {
            return subkeyCollection(Output.of(subkeyCollection));
        }

        /**
         * @param subkeyCollection A subkey to add. Supported values documented below.
         * Multiple blocks supported.
         * 
         * @return builder
         * 
         */
        public Builder subkeyCollection(KeyPrefixSubkeyCollectionArgs... subkeyCollection) {
            return subkeyCollection(List.of(subkeyCollection));
        }

        /**
         * @param subkeys A mapping from subkey name (which will be appended
         * to the given `path_prefix`) to the value that should be stored at that key.
         * Use slashes, as shown in the above example, to create &#34;sub-folders&#34; under
         * the given path prefix.
         * 
         * @return builder
         * 
         */
        public Builder subkeys(@Nullable Output<Map<String,String>> subkeys) {
            $.subkeys = subkeys;
            return this;
        }

        /**
         * @param subkeys A mapping from subkey name (which will be appended
         * to the given `path_prefix`) to the value that should be stored at that key.
         * Use slashes, as shown in the above example, to create &#34;sub-folders&#34; under
         * the given path prefix.
         * 
         * @return builder
         * 
         */
        public Builder subkeys(Map<String,String> subkeys) {
            return subkeys(Output.of(subkeys));
        }

        /**
         * @param token The ACL token to use. This overrides the
         * token that the agent provides by default.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The ACL token to use. This overrides the
         * token that the agent provides by default.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public KeyPrefixState build() {
            return $;
        }
    }

}
