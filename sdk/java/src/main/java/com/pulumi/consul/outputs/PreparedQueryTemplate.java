// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class PreparedQueryTemplate {
    /**
     * @return The regular expression to match with. When using
     * `name_prefix_match`, this regex is applied against the query name.
     * 
     */
    private String regexp;
    /**
     * @return The type of template matching to perform. Currently
     * only `name_prefix_match` is supported.
     * 
     */
    private String type;

    private PreparedQueryTemplate() {}
    /**
     * @return The regular expression to match with. When using
     * `name_prefix_match`, this regex is applied against the query name.
     * 
     */
    public String regexp() {
        return this.regexp;
    }
    /**
     * @return The type of template matching to perform. Currently
     * only `name_prefix_match` is supported.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreparedQueryTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String regexp;
        private String type;
        public Builder() {}
        public Builder(PreparedQueryTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.regexp = defaults.regexp;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder regexp(String regexp) {
            this.regexp = Objects.requireNonNull(regexp);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public PreparedQueryTemplate build() {
            final var o = new PreparedQueryTemplate();
            o.regexp = regexp;
            o.type = type;
            return o;
        }
    }
}
