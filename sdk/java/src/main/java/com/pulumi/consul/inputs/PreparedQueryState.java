// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.PreparedQueryDnsArgs;
import com.pulumi.consul.inputs.PreparedQueryFailoverArgs;
import com.pulumi.consul.inputs.PreparedQueryTemplateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreparedQueryState extends com.pulumi.resources.ResourceArgs {

    public static final PreparedQueryState Empty = new PreparedQueryState();

    /**
     * When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
     * 
     */
    @Import(name="connect")
    private @Nullable Output<Boolean> connect;

    /**
     * @return When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> connect() {
        return Optional.ofNullable(this.connect);
    }

    /**
     * The datacenter to use. This overrides the agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The datacenter to use. This overrides the agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * Settings for controlling the DNS response details.
     * 
     */
    @Import(name="dns")
    private @Nullable Output<PreparedQueryDnsArgs> dns;

    /**
     * @return Settings for controlling the DNS response details.
     * 
     */
    public Optional<Output<PreparedQueryDnsArgs>> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * Options for controlling behavior when no healthy nodes are available in the local DC.
     * 
     */
    @Import(name="failover")
    private @Nullable Output<PreparedQueryFailoverArgs> failover;

    /**
     * @return Options for controlling behavior when no healthy nodes are available in the local DC.
     * 
     */
    public Optional<Output<PreparedQueryFailoverArgs>> failover() {
        return Optional.ofNullable(this.failover);
    }

    /**
     * Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
     * 
     */
    @Import(name="ignoreCheckIds")
    private @Nullable Output<List<String>> ignoreCheckIds;

    /**
     * @return Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
     * 
     */
    public Optional<Output<List<String>>> ignoreCheckIds() {
        return Optional.ofNullable(this.ignoreCheckIds);
    }

    /**
     * The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Allows specifying the name of a node to sort results near using Consul&#39;s distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
     * 
     */
    @Import(name="near")
    private @Nullable Output<String> near;

    /**
     * @return Allows specifying the name of a node to sort results near using Consul&#39;s distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
     * 
     */
    public Optional<Output<String>> near() {
        return Optional.ofNullable(this.near);
    }

    /**
     * Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
     * 
     */
    @Import(name="nodeMeta")
    private @Nullable Output<Map<String,String>> nodeMeta;

    /**
     * @return Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
     * 
     */
    public Optional<Output<Map<String,String>>> nodeMeta() {
        return Optional.ofNullable(this.nodeMeta);
    }

    /**
     * When `true`, the prepared query will only return nodes with passing health checks in the result.
     * 
     */
    @Import(name="onlyPassing")
    private @Nullable Output<Boolean> onlyPassing;

    /**
     * @return When `true`, the prepared query will only return nodes with passing health checks in the result.
     * 
     */
    public Optional<Output<Boolean>> onlyPassing() {
        return Optional.ofNullable(this.onlyPassing);
    }

    /**
     * The name of the service to query
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return The name of the service to query
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
     * 
     */
    @Import(name="serviceMeta")
    private @Nullable Output<Map<String,String>> serviceMeta;

    /**
     * @return Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
     * 
     */
    public Optional<Output<Map<String,String>>> serviceMeta() {
        return Optional.ofNullable(this.serviceMeta);
    }

    /**
     * The name of the Consul session to tie this query&#39;s lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
     * 
     */
    @Import(name="session")
    private @Nullable Output<String> session;

    /**
     * @return The name of the Consul session to tie this query&#39;s lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
     * 
     */
    public Optional<Output<String>> session() {
        return Optional.ofNullable(this.session);
    }

    /**
     * The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
     * 
     */
    @Import(name="storedToken")
    private @Nullable Output<String> storedToken;

    /**
     * @return The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
     * 
     */
    public Optional<Output<String>> storedToken() {
        return Optional.ofNullable(this.storedToken);
    }

    /**
     * The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a &#34;!&#34; then it is disallowed.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a &#34;!&#34; then it is disallowed.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Query templating options. This is used to make a single prepared query respond to many different requests
     * 
     */
    @Import(name="template")
    private @Nullable Output<PreparedQueryTemplateArgs> template;

    /**
     * @return Query templating options. This is used to make a single prepared query respond to many different requests
     * 
     */
    public Optional<Output<PreparedQueryTemplateArgs>> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
     * 
     * @deprecated
     * The token argument has been deprecated and will be removed in a future release.
     * Please use the token argument in the provider configuration
     * 
     */
    @Deprecated /* The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
     * 
     * @deprecated
     * The token argument has been deprecated and will be removed in a future release.
     * Please use the token argument in the provider configuration
     * 
     */
    @Deprecated /* The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private PreparedQueryState() {}

    private PreparedQueryState(PreparedQueryState $) {
        this.connect = $.connect;
        this.datacenter = $.datacenter;
        this.dns = $.dns;
        this.failover = $.failover;
        this.ignoreCheckIds = $.ignoreCheckIds;
        this.name = $.name;
        this.near = $.near;
        this.nodeMeta = $.nodeMeta;
        this.onlyPassing = $.onlyPassing;
        this.service = $.service;
        this.serviceMeta = $.serviceMeta;
        this.session = $.session;
        this.storedToken = $.storedToken;
        this.tags = $.tags;
        this.template = $.template;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreparedQueryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreparedQueryState $;

        public Builder() {
            $ = new PreparedQueryState();
        }

        public Builder(PreparedQueryState defaults) {
            $ = new PreparedQueryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connect When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder connect(@Nullable Output<Boolean> connect) {
            $.connect = connect;
            return this;
        }

        /**
         * @param connect When `true` the prepared query will return connect proxy services for a queried service.  Conditions such as `tags` in the prepared query will be matched against the proxy service. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder connect(Boolean connect) {
            return connect(Output.of(connect));
        }

        /**
         * @param datacenter The datacenter to use. This overrides the agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The datacenter to use. This overrides the agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param dns Settings for controlling the DNS response details.
         * 
         * @return builder
         * 
         */
        public Builder dns(@Nullable Output<PreparedQueryDnsArgs> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns Settings for controlling the DNS response details.
         * 
         * @return builder
         * 
         */
        public Builder dns(PreparedQueryDnsArgs dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param failover Options for controlling behavior when no healthy nodes are available in the local DC.
         * 
         * @return builder
         * 
         */
        public Builder failover(@Nullable Output<PreparedQueryFailoverArgs> failover) {
            $.failover = failover;
            return this;
        }

        /**
         * @param failover Options for controlling behavior when no healthy nodes are available in the local DC.
         * 
         * @return builder
         * 
         */
        public Builder failover(PreparedQueryFailoverArgs failover) {
            return failover(Output.of(failover));
        }

        /**
         * @param ignoreCheckIds Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCheckIds(@Nullable Output<List<String>> ignoreCheckIds) {
            $.ignoreCheckIds = ignoreCheckIds;
            return this;
        }

        /**
         * @param ignoreCheckIds Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCheckIds(List<String> ignoreCheckIds) {
            return ignoreCheckIds(Output.of(ignoreCheckIds));
        }

        /**
         * @param ignoreCheckIds Specifies a list of check IDs that should be ignored when filtering unhealthy instances. This is mostly useful in an emergency or as a temporary measure when a health check is found to be unreliable. Being able to ignore it in centrally-defined queries can be simpler than de-registering the check as an interim solution until the check can be fixed.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCheckIds(String... ignoreCheckIds) {
            return ignoreCheckIds(List.of(ignoreCheckIds));
        }

        /**
         * @param name The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the prepared query. Used to identify the prepared query during requests. Can be specified as an empty string to configure the query as a catch-all.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param near Allows specifying the name of a node to sort results near using Consul&#39;s distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
         * 
         * @return builder
         * 
         */
        public Builder near(@Nullable Output<String> near) {
            $.near = near;
            return this;
        }

        /**
         * @param near Allows specifying the name of a node to sort results near using Consul&#39;s distance sorting and network coordinates. The magic `_agent` value can be used to always sort nearest the node servicing the request.
         * 
         * @return builder
         * 
         */
        public Builder near(String near) {
            return near(Output.of(near));
        }

        /**
         * @param nodeMeta Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
         * 
         * @return builder
         * 
         */
        public Builder nodeMeta(@Nullable Output<Map<String,String>> nodeMeta) {
            $.nodeMeta = nodeMeta;
            return this;
        }

        /**
         * @param nodeMeta Specifies a list of user-defined key/value pairs that will be used for filtering the query results to nodes with the given metadata values present.
         * 
         * @return builder
         * 
         */
        public Builder nodeMeta(Map<String,String> nodeMeta) {
            return nodeMeta(Output.of(nodeMeta));
        }

        /**
         * @param onlyPassing When `true`, the prepared query will only return nodes with passing health checks in the result.
         * 
         * @return builder
         * 
         */
        public Builder onlyPassing(@Nullable Output<Boolean> onlyPassing) {
            $.onlyPassing = onlyPassing;
            return this;
        }

        /**
         * @param onlyPassing When `true`, the prepared query will only return nodes with passing health checks in the result.
         * 
         * @return builder
         * 
         */
        public Builder onlyPassing(Boolean onlyPassing) {
            return onlyPassing(Output.of(onlyPassing));
        }

        /**
         * @param service The name of the service to query
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The name of the service to query
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceMeta Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
         * 
         * @return builder
         * 
         */
        public Builder serviceMeta(@Nullable Output<Map<String,String>> serviceMeta) {
            $.serviceMeta = serviceMeta;
            return this;
        }

        /**
         * @param serviceMeta Specifies a list of user-defined key/value pairs that will be used for filtering the query results to services with the given metadata values present.
         * 
         * @return builder
         * 
         */
        public Builder serviceMeta(Map<String,String> serviceMeta) {
            return serviceMeta(Output.of(serviceMeta));
        }

        /**
         * @param session The name of the Consul session to tie this query&#39;s lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
         * 
         * @return builder
         * 
         */
        public Builder session(@Nullable Output<String> session) {
            $.session = session;
            return this;
        }

        /**
         * @param session The name of the Consul session to tie this query&#39;s lifetime to.  This is an advanced parameter that should not be used without a complete understanding of Consul sessions and the implications of their use (it is recommended to leave this blank in nearly all cases).  If this parameter is omitted the query will not expire.
         * 
         * @return builder
         * 
         */
        public Builder session(String session) {
            return session(Output.of(session));
        }

        /**
         * @param storedToken The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
         * 
         * @return builder
         * 
         */
        public Builder storedToken(@Nullable Output<String> storedToken) {
            $.storedToken = storedToken;
            return this;
        }

        /**
         * @param storedToken The ACL token to store with the prepared query. This token will be used by default whenever the query is executed.
         * 
         * @return builder
         * 
         */
        public Builder storedToken(String storedToken) {
            return storedToken(Output.of(storedToken));
        }

        /**
         * @param tags The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a &#34;!&#34; then it is disallowed.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a &#34;!&#34; then it is disallowed.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The list of required and/or disallowed tags.  If a tag is in this list it must be present.  If the tag is preceded with a &#34;!&#34; then it is disallowed.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param template Query templating options. This is used to make a single prepared query respond to many different requests
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<PreparedQueryTemplateArgs> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template Query templating options. This is used to make a single prepared query respond to many different requests
         * 
         * @return builder
         * 
         */
        public Builder template(PreparedQueryTemplateArgs template) {
            return template(Output.of(template));
        }

        /**
         * @param token The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
         * 
         * @return builder
         * 
         * @deprecated
         * The token argument has been deprecated and will be removed in a future release.
         * Please use the token argument in the provider configuration
         * 
         */
        @Deprecated /* The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The ACL token to use when saving the prepared query. This overrides the token that the agent provides by default.
         * 
         * @return builder
         * 
         * @deprecated
         * The token argument has been deprecated and will be removed in a future release.
         * Please use the token argument in the provider configuration
         * 
         */
        @Deprecated /* The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public PreparedQueryState build() {
            return $;
        }
    }

}
