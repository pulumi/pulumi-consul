// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.ConfigEntryServiceResolverFailoverTargetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceResolverFailoverArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceResolverFailoverArgs Empty = new ConfigEntryServiceResolverFailoverArgs();

    /**
     * Specifies an ordered list of datacenters at the failover location to attempt connections to during a failover scenario. When Consul cannot establish a connection with the first datacenter in the list, it proceeds sequentially until establishing a connection with another datacenter.
     * 
     */
    @Import(name="datacenters")
    private @Nullable Output<List<String>> datacenters;

    /**
     * @return Specifies an ordered list of datacenters at the failover location to attempt connections to during a failover scenario. When Consul cannot establish a connection with the first datacenter in the list, it proceeds sequentially until establishing a connection with another datacenter.
     * 
     */
    public Optional<Output<List<String>>> datacenters() {
        return Optional.ofNullable(this.datacenters);
    }

    /**
     * Specifies the namespace at the failover location where the failover services are deployed.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Specifies the namespace at the failover location where the failover services are deployed.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the sameness group at the failover location where the failover services are deployed.
     * 
     */
    @Import(name="samenessGroup")
    private @Nullable Output<String> samenessGroup;

    /**
     * @return Specifies the sameness group at the failover location where the failover services are deployed.
     * 
     */
    public Optional<Output<String>> samenessGroup() {
        return Optional.ofNullable(this.samenessGroup);
    }

    /**
     * Specifies the name of the service to resolve at the failover location during a failover scenario.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Specifies the name of the service to resolve at the failover location during a failover scenario.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * Specifies the name of a subset of service instances to resolve at the failover location during a failover scenario.
     * 
     */
    @Import(name="serviceSubset")
    private @Nullable Output<String> serviceSubset;

    /**
     * @return Specifies the name of a subset of service instances to resolve at the failover location during a failover scenario.
     * 
     */
    public Optional<Output<String>> serviceSubset() {
        return Optional.ofNullable(this.serviceSubset);
    }

    /**
     * Name of subset.
     * 
     */
    @Import(name="subsetName", required=true)
    private Output<String> subsetName;

    /**
     * @return Name of subset.
     * 
     */
    public Output<String> subsetName() {
        return this.subsetName;
    }

    /**
     * Specifies a fixed list of failover targets to try during failover. This list can express complicated failover scenarios.
     * 
     */
    @Import(name="targets")
    private @Nullable Output<List<ConfigEntryServiceResolverFailoverTargetArgs>> targets;

    /**
     * @return Specifies a fixed list of failover targets to try during failover. This list can express complicated failover scenarios.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceResolverFailoverTargetArgs>>> targets() {
        return Optional.ofNullable(this.targets);
    }

    private ConfigEntryServiceResolverFailoverArgs() {}

    private ConfigEntryServiceResolverFailoverArgs(ConfigEntryServiceResolverFailoverArgs $) {
        this.datacenters = $.datacenters;
        this.namespace = $.namespace;
        this.samenessGroup = $.samenessGroup;
        this.service = $.service;
        this.serviceSubset = $.serviceSubset;
        this.subsetName = $.subsetName;
        this.targets = $.targets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceResolverFailoverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceResolverFailoverArgs $;

        public Builder() {
            $ = new ConfigEntryServiceResolverFailoverArgs();
        }

        public Builder(ConfigEntryServiceResolverFailoverArgs defaults) {
            $ = new ConfigEntryServiceResolverFailoverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenters Specifies an ordered list of datacenters at the failover location to attempt connections to during a failover scenario. When Consul cannot establish a connection with the first datacenter in the list, it proceeds sequentially until establishing a connection with another datacenter.
         * 
         * @return builder
         * 
         */
        public Builder datacenters(@Nullable Output<List<String>> datacenters) {
            $.datacenters = datacenters;
            return this;
        }

        /**
         * @param datacenters Specifies an ordered list of datacenters at the failover location to attempt connections to during a failover scenario. When Consul cannot establish a connection with the first datacenter in the list, it proceeds sequentially until establishing a connection with another datacenter.
         * 
         * @return builder
         * 
         */
        public Builder datacenters(List<String> datacenters) {
            return datacenters(Output.of(datacenters));
        }

        /**
         * @param datacenters Specifies an ordered list of datacenters at the failover location to attempt connections to during a failover scenario. When Consul cannot establish a connection with the first datacenter in the list, it proceeds sequentially until establishing a connection with another datacenter.
         * 
         * @return builder
         * 
         */
        public Builder datacenters(String... datacenters) {
            return datacenters(List.of(datacenters));
        }

        /**
         * @param namespace Specifies the namespace at the failover location where the failover services are deployed.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Specifies the namespace at the failover location where the failover services are deployed.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param samenessGroup Specifies the sameness group at the failover location where the failover services are deployed.
         * 
         * @return builder
         * 
         */
        public Builder samenessGroup(@Nullable Output<String> samenessGroup) {
            $.samenessGroup = samenessGroup;
            return this;
        }

        /**
         * @param samenessGroup Specifies the sameness group at the failover location where the failover services are deployed.
         * 
         * @return builder
         * 
         */
        public Builder samenessGroup(String samenessGroup) {
            return samenessGroup(Output.of(samenessGroup));
        }

        /**
         * @param service Specifies the name of the service to resolve at the failover location during a failover scenario.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Specifies the name of the service to resolve at the failover location during a failover scenario.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceSubset Specifies the name of a subset of service instances to resolve at the failover location during a failover scenario.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(@Nullable Output<String> serviceSubset) {
            $.serviceSubset = serviceSubset;
            return this;
        }

        /**
         * @param serviceSubset Specifies the name of a subset of service instances to resolve at the failover location during a failover scenario.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubset(String serviceSubset) {
            return serviceSubset(Output.of(serviceSubset));
        }

        /**
         * @param subsetName Name of subset.
         * 
         * @return builder
         * 
         */
        public Builder subsetName(Output<String> subsetName) {
            $.subsetName = subsetName;
            return this;
        }

        /**
         * @param subsetName Name of subset.
         * 
         * @return builder
         * 
         */
        public Builder subsetName(String subsetName) {
            return subsetName(Output.of(subsetName));
        }

        /**
         * @param targets Specifies a fixed list of failover targets to try during failover. This list can express complicated failover scenarios.
         * 
         * @return builder
         * 
         */
        public Builder targets(@Nullable Output<List<ConfigEntryServiceResolverFailoverTargetArgs>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets Specifies a fixed list of failover targets to try during failover. This list can express complicated failover scenarios.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<ConfigEntryServiceResolverFailoverTargetArgs> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets Specifies a fixed list of failover targets to try during failover. This list can express complicated failover scenarios.
         * 
         * @return builder
         * 
         */
        public Builder targets(ConfigEntryServiceResolverFailoverTargetArgs... targets) {
            return targets(List.of(targets));
        }

        public ConfigEntryServiceResolverFailoverArgs build() {
            if ($.subsetName == null) {
                throw new MissingRequiredPropertyException("ConfigEntryServiceResolverFailoverArgs", "subsetName");
            }
            return $;
        }
    }

}
