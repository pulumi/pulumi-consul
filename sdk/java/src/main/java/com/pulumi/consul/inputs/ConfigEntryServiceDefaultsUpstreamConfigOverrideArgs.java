// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.consul.inputs.ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGatewayArgs;
import com.pulumi.consul.inputs.ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheckArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs Empty = new ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs();

    /**
     * Sets the strategy for allocating outbound connections from upstreams across Envoy proxy threads.
     * 
     */
    @Import(name="balanceOutboundConnections")
    private @Nullable Output<String> balanceOutboundConnections;

    /**
     * @return Sets the strategy for allocating outbound connections from upstreams across Envoy proxy threads.
     * 
     */
    public Optional<Output<String>> balanceOutboundConnections() {
        return Optional.ofNullable(this.balanceOutboundConnections);
    }

    @Import(name="connectTimeoutMs")
    private @Nullable Output<Integer> connectTimeoutMs;

    public Optional<Output<Integer>> connectTimeoutMs() {
        return Optional.ofNullable(this.connectTimeoutMs);
    }

    @Import(name="envoyListenerJson")
    private @Nullable Output<String> envoyListenerJson;

    public Optional<Output<String>> envoyListenerJson() {
        return Optional.ofNullable(this.envoyListenerJson);
    }

    /**
     * Map that specifies a set of limits to apply to when connecting upstream services.
     * 
     */
    @Import(name="limits")
    private @Nullable Output<List<ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs>> limits;

    /**
     * @return Map that specifies a set of limits to apply to when connecting upstream services.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs>>> limits() {
        return Optional.ofNullable(this.limits);
    }

    /**
     * Specifies the default mesh gateway mode field for all upstreams.
     * 
     */
    @Import(name="meshGateways")
    private @Nullable Output<List<ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGatewayArgs>> meshGateways;

    /**
     * @return Specifies the default mesh gateway mode field for all upstreams.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGatewayArgs>>> meshGateways() {
        return Optional.ofNullable(this.meshGateways);
    }

    /**
     * Specifies the name of the service you are setting the defaults for.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the service you are setting the defaults for.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the namespace containing the upstream service that the configuration applies to.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Specifies the namespace containing the upstream service that the configuration applies to.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Map that specifies a set of rules that enable Consul to remove hosts from the upstream cluster that are unreachable or that return errors.
     * 
     */
    @Import(name="passiveHealthChecks")
    private @Nullable Output<List<ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheckArgs>> passiveHealthChecks;

    /**
     * @return Map that specifies a set of rules that enable Consul to remove hosts from the upstream cluster that are unreachable or that return errors.
     * 
     */
    public Optional<Output<List<ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheckArgs>>> passiveHealthChecks() {
        return Optional.ofNullable(this.passiveHealthChecks);
    }

    /**
     * Specifies the peer name of the upstream service that the configuration applies to.
     * 
     */
    @Import(name="peer")
    private @Nullable Output<String> peer;

    /**
     * @return Specifies the peer name of the upstream service that the configuration applies to.
     * 
     */
    public Optional<Output<String>> peer() {
        return Optional.ofNullable(this.peer);
    }

    /**
     * Specifies the default protocol for the service.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Specifies the default protocol for the service.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs() {}

    private ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs(ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs $) {
        this.balanceOutboundConnections = $.balanceOutboundConnections;
        this.connectTimeoutMs = $.connectTimeoutMs;
        this.envoyListenerJson = $.envoyListenerJson;
        this.limits = $.limits;
        this.meshGateways = $.meshGateways;
        this.name = $.name;
        this.namespace = $.namespace;
        this.partition = $.partition;
        this.passiveHealthChecks = $.passiveHealthChecks;
        this.peer = $.peer;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs $;

        public Builder() {
            $ = new ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs();
        }

        public Builder(ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs defaults) {
            $ = new ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param balanceOutboundConnections Sets the strategy for allocating outbound connections from upstreams across Envoy proxy threads.
         * 
         * @return builder
         * 
         */
        public Builder balanceOutboundConnections(@Nullable Output<String> balanceOutboundConnections) {
            $.balanceOutboundConnections = balanceOutboundConnections;
            return this;
        }

        /**
         * @param balanceOutboundConnections Sets the strategy for allocating outbound connections from upstreams across Envoy proxy threads.
         * 
         * @return builder
         * 
         */
        public Builder balanceOutboundConnections(String balanceOutboundConnections) {
            return balanceOutboundConnections(Output.of(balanceOutboundConnections));
        }

        public Builder connectTimeoutMs(@Nullable Output<Integer> connectTimeoutMs) {
            $.connectTimeoutMs = connectTimeoutMs;
            return this;
        }

        public Builder connectTimeoutMs(Integer connectTimeoutMs) {
            return connectTimeoutMs(Output.of(connectTimeoutMs));
        }

        public Builder envoyListenerJson(@Nullable Output<String> envoyListenerJson) {
            $.envoyListenerJson = envoyListenerJson;
            return this;
        }

        public Builder envoyListenerJson(String envoyListenerJson) {
            return envoyListenerJson(Output.of(envoyListenerJson));
        }

        /**
         * @param limits Map that specifies a set of limits to apply to when connecting upstream services.
         * 
         * @return builder
         * 
         */
        public Builder limits(@Nullable Output<List<ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs>> limits) {
            $.limits = limits;
            return this;
        }

        /**
         * @param limits Map that specifies a set of limits to apply to when connecting upstream services.
         * 
         * @return builder
         * 
         */
        public Builder limits(List<ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs> limits) {
            return limits(Output.of(limits));
        }

        /**
         * @param limits Map that specifies a set of limits to apply to when connecting upstream services.
         * 
         * @return builder
         * 
         */
        public Builder limits(ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs... limits) {
            return limits(List.of(limits));
        }

        /**
         * @param meshGateways Specifies the default mesh gateway mode field for all upstreams.
         * 
         * @return builder
         * 
         */
        public Builder meshGateways(@Nullable Output<List<ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGatewayArgs>> meshGateways) {
            $.meshGateways = meshGateways;
            return this;
        }

        /**
         * @param meshGateways Specifies the default mesh gateway mode field for all upstreams.
         * 
         * @return builder
         * 
         */
        public Builder meshGateways(List<ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGatewayArgs> meshGateways) {
            return meshGateways(Output.of(meshGateways));
        }

        /**
         * @param meshGateways Specifies the default mesh gateway mode field for all upstreams.
         * 
         * @return builder
         * 
         */
        public Builder meshGateways(ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGatewayArgs... meshGateways) {
            return meshGateways(List.of(meshGateways));
        }

        /**
         * @param name Specifies the name of the service you are setting the defaults for.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the service you are setting the defaults for.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Specifies the namespace containing the upstream service that the configuration applies to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Specifies the namespace containing the upstream service that the configuration applies to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param partition Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Specifies the name of the name of the Consul admin partition that the configuration entry applies to.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param passiveHealthChecks Map that specifies a set of rules that enable Consul to remove hosts from the upstream cluster that are unreachable or that return errors.
         * 
         * @return builder
         * 
         */
        public Builder passiveHealthChecks(@Nullable Output<List<ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheckArgs>> passiveHealthChecks) {
            $.passiveHealthChecks = passiveHealthChecks;
            return this;
        }

        /**
         * @param passiveHealthChecks Map that specifies a set of rules that enable Consul to remove hosts from the upstream cluster that are unreachable or that return errors.
         * 
         * @return builder
         * 
         */
        public Builder passiveHealthChecks(List<ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheckArgs> passiveHealthChecks) {
            return passiveHealthChecks(Output.of(passiveHealthChecks));
        }

        /**
         * @param passiveHealthChecks Map that specifies a set of rules that enable Consul to remove hosts from the upstream cluster that are unreachable or that return errors.
         * 
         * @return builder
         * 
         */
        public Builder passiveHealthChecks(ConfigEntryServiceDefaultsUpstreamConfigOverridePassiveHealthCheckArgs... passiveHealthChecks) {
            return passiveHealthChecks(List.of(passiveHealthChecks));
        }

        /**
         * @param peer Specifies the peer name of the upstream service that the configuration applies to.
         * 
         * @return builder
         * 
         */
        public Builder peer(@Nullable Output<String> peer) {
            $.peer = peer;
            return this;
        }

        /**
         * @param peer Specifies the peer name of the upstream service that the configuration applies to.
         * 
         * @return builder
         * 
         */
        public Builder peer(String peer) {
            return peer(Output.of(peer));
        }

        /**
         * @param protocol Specifies the default protocol for the service.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Specifies the default protocol for the service.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs build() {
            return $;
        }
    }

}
