// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.AclTokenArgs;
import com.pulumi.consul.Utilities;
import com.pulumi.consul.inputs.AclTokenState;
import com.pulumi.consul.outputs.AclTokenNodeIdentity;
import com.pulumi.consul.outputs.AclTokenServiceIdentity;
import com.pulumi.consul.outputs.AclTokenTemplatedPolicy;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.AclPolicy;
 * import com.pulumi.consul.AclPolicyArgs;
 * import com.pulumi.consul.AclToken;
 * import com.pulumi.consul.AclTokenArgs;
 * import com.pulumi.random.RandomUuid;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Basic usage
 *         var agent = new AclPolicy(&#34;agent&#34;, AclPolicyArgs.builder()        
 *             .rules(&#34;&#34;&#34;
 * node_prefix &#34;&#34; {
 *   policy = &#34;read&#34;
 * }
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *         var testAclToken = new AclToken(&#34;testAclToken&#34;, AclTokenArgs.builder()        
 *             .description(&#34;my test token&#34;)
 *             .policies(agent.name())
 *             .local(true)
 *             .build());
 * 
 *         // Explicitly set the `accessor_id`
 *         var testRandomUuid = new RandomUuid(&#34;testRandomUuid&#34;);
 * 
 *         var testPredefinedId = new AclToken(&#34;testPredefinedId&#34;, AclTokenArgs.builder()        
 *             .accessorId(random_uuid.test_uuid().result())
 *             .description(&#34;my test uuid token&#34;)
 *             .policies(agent.name())
 *             .local(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import consul:index/aclToken:AclToken anonymous 00000000-0000-0000-0000-000000000002
 * ```
 * 
 * ```sh
 * $ pulumi import consul:index/aclToken:AclToken master-token 624d94ca-bc5c-f960-4e83-0a609cf588be
 * ```
 * 
 */
@ResourceType(type="consul:index/aclToken:AclToken")
public class AclToken extends com.pulumi.resources.CustomResource {
    /**
     * The uuid of the token. If omitted, Consul will generate a random uuid.
     * 
     */
    @Export(name="accessorId", refs={String.class}, tree="[0]")
    private Output<String> accessorId;

    /**
     * @return The uuid of the token. If omitted, Consul will generate a random uuid.
     * 
     */
    public Output<String> accessorId() {
        return this.accessorId;
    }
    /**
     * The description of the token.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the token.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     * 
     */
    @Export(name="expirationTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> expirationTime;

    /**
     * @return If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     * 
     */
    public Output<Optional<String>> expirationTime() {
        return Codegen.optional(this.expirationTime);
    }
    /**
     * The flag to set the token local to the current datacenter.
     * 
     */
    @Export(name="local", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> local;

    /**
     * @return The flag to set the token local to the current datacenter.
     * 
     */
    public Output<Optional<Boolean>> local() {
        return Codegen.optional(this.local);
    }
    /**
     * The namespace to create the token within.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace to create the token within.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * The list of node identities that should be applied to the token.
     * 
     */
    @Export(name="nodeIdentities", refs={List.class,AclTokenNodeIdentity.class}, tree="[0,1]")
    private Output</* @Nullable */ List<AclTokenNodeIdentity>> nodeIdentities;

    /**
     * @return The list of node identities that should be applied to the token.
     * 
     */
    public Output<Optional<List<AclTokenNodeIdentity>>> nodeIdentities() {
        return Codegen.optional(this.nodeIdentities);
    }
    /**
     * The partition the ACL token is associated with.
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return The partition the ACL token is associated with.
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }
    /**
     * The list of policies attached to the token.
     * 
     */
    @Export(name="policies", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> policies;

    /**
     * @return The list of policies attached to the token.
     * 
     */
    public Output<Optional<List<String>>> policies() {
        return Codegen.optional(this.policies);
    }
    /**
     * The list of roles attached to the token.
     * 
     */
    @Export(name="roles", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> roles;

    /**
     * @return The list of roles attached to the token.
     * 
     */
    public Output<Optional<List<String>>> roles() {
        return Codegen.optional(this.roles);
    }
    /**
     * The list of service identities that should be applied to the token.
     * 
     */
    @Export(name="serviceIdentities", refs={List.class,AclTokenServiceIdentity.class}, tree="[0,1]")
    private Output</* @Nullable */ List<AclTokenServiceIdentity>> serviceIdentities;

    /**
     * @return The list of service identities that should be applied to the token.
     * 
     */
    public Output<Optional<List<AclTokenServiceIdentity>>> serviceIdentities() {
        return Codegen.optional(this.serviceIdentities);
    }
    /**
     * The list of templated policies that should be applied to the token.
     * 
     */
    @Export(name="templatedPolicies", refs={List.class,AclTokenTemplatedPolicy.class}, tree="[0,1]")
    private Output</* @Nullable */ List<AclTokenTemplatedPolicy>> templatedPolicies;

    /**
     * @return The list of templated policies that should be applied to the token.
     * 
     */
    public Output<Optional<List<AclTokenTemplatedPolicy>>> templatedPolicies() {
        return Codegen.optional(this.templatedPolicies);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AclToken(String name) {
        this(name, AclTokenArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AclToken(String name, @Nullable AclTokenArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AclToken(String name, @Nullable AclTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/aclToken:AclToken", name, args == null ? AclTokenArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AclToken(String name, Output<String> id, @Nullable AclTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/aclToken:AclToken", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AclToken get(String name, Output<String> id, @Nullable AclTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AclToken(name, id, state, options);
    }
}
