// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.ConfigEntryArgs;
import com.pulumi.consul.Utilities;
import com.pulumi.consul.inputs.ConfigEntryState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var proxyDefaults = new ConfigEntry(&#34;proxyDefaults&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;proxy-defaults&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Config&#34;, jsonObject(
 *                         jsonProperty(&#34;local_connect_timeout_ms&#34;, 1000),
 *                         jsonProperty(&#34;handshake_timeout_ms&#34;, 10000)
 *                     ))
 *                 )))
 *             .build());
 * 
 *         var web = new ConfigEntry(&#34;web&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;service-defaults&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Protocol&#34;, &#34;http&#34;)
 *                 )))
 *             .build());
 * 
 *         var admin = new ConfigEntry(&#34;admin&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;service-defaults&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Protocol&#34;, &#34;http&#34;)
 *                 )))
 *             .build());
 * 
 *         var serviceResolver = new ConfigEntry(&#34;serviceResolver&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;service-resolver&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;DefaultSubset&#34;, &#34;v1&#34;),
 *                     jsonProperty(&#34;Subsets&#34;, jsonObject(
 *                         jsonProperty(&#34;v1&#34;, jsonObject(
 *                             jsonProperty(&#34;Filter&#34;, &#34;Service.Meta.version == v1&#34;)
 *                         )),
 *                         jsonProperty(&#34;v2&#34;, jsonObject(
 *                             jsonProperty(&#34;Filter&#34;, &#34;Service.Meta.version == v2&#34;)
 *                         ))
 *                     ))
 *                 )))
 *             .build());
 * 
 *         var serviceSplitter = new ConfigEntry(&#34;serviceSplitter&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;service-splitter&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Splits&#34;, jsonArray(
 *                         jsonObject(
 *                             jsonProperty(&#34;Weight&#34;, 90),
 *                             jsonProperty(&#34;ServiceSubset&#34;, &#34;v1&#34;)
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty(&#34;Weight&#34;, 10),
 *                             jsonProperty(&#34;ServiceSubset&#34;, &#34;v2&#34;)
 *                         )
 *                     ))
 *                 )))
 *             .build());
 * 
 *         var serviceRouter = new ConfigEntry(&#34;serviceRouter&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;service-router&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Routes&#34;, jsonArray(jsonObject(
 *                         jsonProperty(&#34;Match&#34;, jsonObject(
 *                             jsonProperty(&#34;HTTP&#34;, jsonObject(
 *                                 jsonProperty(&#34;PathPrefix&#34;, &#34;/admin&#34;)
 *                             ))
 *                         )),
 *                         jsonProperty(&#34;Destination&#34;, jsonObject(
 *                             jsonProperty(&#34;Service&#34;, &#34;admin&#34;)
 *                         ))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var ingressGateway = new ConfigEntry(&#34;ingressGateway&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;ingress-gateway&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;TLS&#34;, jsonObject(
 *                         jsonProperty(&#34;Enabled&#34;, true)
 *                     )),
 *                     jsonProperty(&#34;Listeners&#34;, jsonArray(jsonObject(
 *                         jsonProperty(&#34;Port&#34;, 8000),
 *                         jsonProperty(&#34;Protocol&#34;, &#34;http&#34;),
 *                         jsonProperty(&#34;Services&#34;, jsonArray(jsonObject(
 *                             jsonProperty(&#34;Name&#34;, &#34;*&#34;)
 *                         )))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var terminatingGateway = new ConfigEntry(&#34;terminatingGateway&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;terminating-gateway&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Services&#34;, jsonArray(jsonObject(
 *                         jsonProperty(&#34;Name&#34;, &#34;billing&#34;)
 *                     )))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### `service-intentions` config entry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var serviceIntentions = new ConfigEntry(&#34;serviceIntentions&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;service-intentions&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Sources&#34;, jsonArray(
 *                         jsonObject(
 *                             jsonProperty(&#34;Action&#34;, &#34;allow&#34;),
 *                             jsonProperty(&#34;Name&#34;, &#34;frontend-webapp&#34;),
 *                             jsonProperty(&#34;Precedence&#34;, 9),
 *                             jsonProperty(&#34;Type&#34;, &#34;consul&#34;)
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty(&#34;Action&#34;, &#34;allow&#34;),
 *                             jsonProperty(&#34;Name&#34;, &#34;nightly-cronjob&#34;),
 *                             jsonProperty(&#34;Precedence&#34;, 9),
 *                             jsonProperty(&#34;Type&#34;, &#34;consul&#34;)
 *                         )
 *                     ))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sd = new ConfigEntry(&#34;sd&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;service-defaults&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Protocol&#34;, &#34;http&#34;)
 *                 )))
 *             .build());
 * 
 *         var jwtProvider = new ConfigEntry(&#34;jwtProvider&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;jwt-provider&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Issuer&#34;, &#34;test-issuer&#34;),
 *                     jsonProperty(&#34;JSONWebKeySet&#34;, jsonObject(
 *                         jsonProperty(&#34;Remote&#34;, jsonObject(
 *                             jsonProperty(&#34;URI&#34;, &#34;https://127.0.0.1:9091&#34;),
 *                             jsonProperty(&#34;FetchAsynchronously&#34;, true)
 *                         ))
 *                     )),
 *                     jsonProperty(&#34;Forwarding&#34;, jsonObject(
 *                         jsonProperty(&#34;HeaderName&#34;, &#34;test-token&#34;)
 *                     ))
 *                 )))
 *             .build());
 * 
 *         var serviceIntentions = new ConfigEntry(&#34;serviceIntentions&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;service-intentions&#34;)
 *             .configJson(jwtProvider.name().applyValue(name -&gt; serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Sources&#34;, jsonArray(
 *                         jsonObject(
 *                             jsonProperty(&#34;Name&#34;, &#34;contractor-webapp&#34;),
 *                             jsonProperty(&#34;Permissions&#34;, jsonArray(jsonObject(
 *                                 jsonProperty(&#34;Action&#34;, &#34;allow&#34;),
 *                                 jsonProperty(&#34;HTTP&#34;, jsonObject(
 *                                     jsonProperty(&#34;Methods&#34;, jsonArray(
 *                                         &#34;GET&#34;, 
 *                                         &#34;HEAD&#34;
 *                                     )),
 *                                     jsonProperty(&#34;PathExact&#34;, &#34;/healtz&#34;)
 *                                 )),
 *                                 jsonProperty(&#34;JWT&#34;, jsonObject(
 *                                     jsonProperty(&#34;Providers&#34;, jsonArray(jsonObject(
 *                                         jsonProperty(&#34;Name&#34;, name)
 *                                     )))
 *                                 ))
 *                             ))),
 *                             jsonProperty(&#34;Precedence&#34;, 9),
 *                             jsonProperty(&#34;Type&#34;, &#34;consul&#34;)
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty(&#34;Name&#34;, &#34;admin-dashboard-webapp&#34;),
 *                             jsonProperty(&#34;Permissions&#34;, jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty(&#34;Action&#34;, &#34;deny&#34;),
 *                                     jsonProperty(&#34;HTTP&#34;, jsonObject(
 *                                         jsonProperty(&#34;PathPrefix&#34;, &#34;/debugz&#34;)
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty(&#34;Action&#34;, &#34;allow&#34;),
 *                                     jsonProperty(&#34;HTTP&#34;, jsonObject(
 *                                         jsonProperty(&#34;PathPrefix&#34;, &#34;/&#34;)
 *                                     ))
 *                                 )
 *                             )),
 *                             jsonProperty(&#34;Precedence&#34;, 9),
 *                             jsonProperty(&#34;Type&#34;, &#34;consul&#34;)
 *                         )
 *                     ))
 *                 ))))
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### `exported-services` config entry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exportedServices = new ConfigEntry(&#34;exportedServices&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;exported-services&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Services&#34;, jsonArray(jsonObject(
 *                         jsonProperty(&#34;Name&#34;, &#34;test&#34;),
 *                         jsonProperty(&#34;Namespace&#34;, &#34;default&#34;),
 *                         jsonProperty(&#34;Consumers&#34;, jsonArray(jsonObject(
 *                             jsonProperty(&#34;Partition&#34;, &#34;default&#34;)
 *                         )))
 *                     )))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### `mesh` config entry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mesh = new ConfigEntry(&#34;mesh&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;mesh&#34;)
 *             .partition(&#34;default&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;TransparentProxy&#34;, jsonObject(
 *                         jsonProperty(&#34;MeshDestinationsOnly&#34;, true)
 *                     ))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### `jwt-provider` config entry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var jwtProvider = new ConfigEntry(&#34;jwtProvider&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;jwt-provider&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;Issuer&#34;, &#34;https://your.issuer.com&#34;),
 *                     jsonProperty(&#34;JSONWebKeySet&#34;, jsonObject(
 *                         jsonProperty(&#34;Remote&#34;, jsonObject(
 *                             jsonProperty(&#34;URI&#34;, &#34;https://your-remote.jwks.com&#34;),
 *                             jsonProperty(&#34;FetchAsynchronously&#34;, true),
 *                             jsonProperty(&#34;CacheDuration&#34;, &#34;10s&#34;)
 *                         ))
 *                     )),
 *                     jsonProperty(&#34;Forwarding&#34;, jsonObject(
 *                         jsonProperty(&#34;HeaderName&#34;, &#34;test-token&#34;)
 *                     ))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * `consul_config_entry` can be imported using the syntax `&lt;kind&gt;/&lt;name&gt;` if the
 * config entry is in the default partition and default namespace, or
 * `&lt;partition&gt;/&lt;namespace&gt;/&lt;kind&gt;/&lt;name&gt;` for config entries in a non-default
 * partition or namespace:
 * 
 * ```sh
 * $ pulumi import consul:index/configEntry:ConfigEntry service_splitter 816a195f-6cb1-2e8d-92af-3011ae706318
 * ```
 * 
 */
@ResourceType(type="consul:index/configEntry:ConfigEntry")
public class ConfigEntry extends com.pulumi.resources.CustomResource {
    /**
     * An arbitrary map of configuration values.
     * 
     */
    @Export(name="configJson", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> configJson;

    /**
     * @return An arbitrary map of configuration values.
     * 
     */
    public Output<Optional<String>> configJson() {
        return Codegen.optional(this.configJson);
    }
    /**
     * The kind of configuration entry to register.
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return The kind of configuration entry to register.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * The name of the configuration entry being registered.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the configuration entry being registered.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The namespace to create the config entry within.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace to create the config entry within.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * The partition the config entry is associated with.
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return The partition the config entry is associated with.
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConfigEntry(String name) {
        this(name, ConfigEntryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConfigEntry(String name, ConfigEntryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConfigEntry(String name, ConfigEntryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/configEntry:ConfigEntry", name, args == null ? ConfigEntryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ConfigEntry(String name, Output<String> id, @Nullable ConfigEntryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/configEntry:ConfigEntry", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConfigEntry get(String name, Output<String> id, @Nullable ConfigEntryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConfigEntry(name, id, state, options);
    }
}
