// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.ConfigEntryArgs;
import com.pulumi.consul.Utilities;
import com.pulumi.consul.inputs.ConfigEntryState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var proxyDefaults = new ConfigEntry("proxyDefaults", ConfigEntryArgs.builder()
 *             .kind("proxy-defaults")
 *             .name("global")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Config", jsonObject(
 *                         jsonProperty("local_connect_timeout_ms", 1000),
 *                         jsonProperty("handshake_timeout_ms", 10000)
 *                     ))
 *                 )))
 *             .build());
 * 
 *         var web = new ConfigEntry("web", ConfigEntryArgs.builder()
 *             .name("web")
 *             .kind("service-defaults")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Protocol", "http")
 *                 )))
 *             .build());
 * 
 *         var admin = new ConfigEntry("admin", ConfigEntryArgs.builder()
 *             .name("admin")
 *             .kind("service-defaults")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Protocol", "http")
 *                 )))
 *             .build());
 * 
 *         var serviceResolver = new ConfigEntry("serviceResolver", ConfigEntryArgs.builder()
 *             .kind("service-resolver")
 *             .name(web.name())
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("DefaultSubset", "v1"),
 *                     jsonProperty("Subsets", jsonObject(
 *                         jsonProperty("v1", jsonObject(
 *                             jsonProperty("Filter", "Service.Meta.version == v1")
 *                         )),
 *                         jsonProperty("v2", jsonObject(
 *                             jsonProperty("Filter", "Service.Meta.version == v2")
 *                         ))
 *                     ))
 *                 )))
 *             .build());
 * 
 *         var serviceSplitter = new ConfigEntry("serviceSplitter", ConfigEntryArgs.builder()
 *             .kind("service-splitter")
 *             .name(serviceResolver.name())
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Splits", jsonArray(
 *                         jsonObject(
 *                             jsonProperty("Weight", 90),
 *                             jsonProperty("ServiceSubset", "v1")
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty("Weight", 10),
 *                             jsonProperty("ServiceSubset", "v2")
 *                         )
 *                     ))
 *                 )))
 *             .build());
 * 
 *         var serviceRouter = new ConfigEntry("serviceRouter", ConfigEntryArgs.builder()
 *             .kind("service-router")
 *             .name("web")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Routes", jsonArray(jsonObject(
 *                         jsonProperty("Match", jsonObject(
 *                             jsonProperty("HTTP", jsonObject(
 *                                 jsonProperty("PathPrefix", "/admin")
 *                             ))
 *                         )),
 *                         jsonProperty("Destination", jsonObject(
 *                             jsonProperty("Service", "admin")
 *                         ))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var ingressGateway = new ConfigEntry("ingressGateway", ConfigEntryArgs.builder()
 *             .name("us-east-ingress")
 *             .kind("ingress-gateway")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("TLS", jsonObject(
 *                         jsonProperty("Enabled", true)
 *                     )),
 *                     jsonProperty("Listeners", jsonArray(jsonObject(
 *                         jsonProperty("Port", 8000),
 *                         jsonProperty("Protocol", "http"),
 *                         jsonProperty("Services", jsonArray(jsonObject(
 *                             jsonProperty("Name", "*")
 *                         )))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var terminatingGateway = new ConfigEntry("terminatingGateway", ConfigEntryArgs.builder()
 *             .name("us-west-gateway")
 *             .kind("terminating-gateway")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Services", jsonArray(jsonObject(
 *                         jsonProperty("Name", "billing")
 *                     )))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### `service-intentions` config entry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var serviceIntentions = new ConfigEntry("serviceIntentions", ConfigEntryArgs.builder()
 *             .name("api-service")
 *             .kind("service-intentions")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Sources", jsonArray(
 *                         jsonObject(
 *                             jsonProperty("Action", "allow"),
 *                             jsonProperty("Name", "frontend-webapp"),
 *                             jsonProperty("Precedence", 9),
 *                             jsonProperty("Type", "consul")
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty("Action", "allow"),
 *                             jsonProperty("Name", "nightly-cronjob"),
 *                             jsonProperty("Precedence", 9),
 *                             jsonProperty("Type", "consul")
 *                         )
 *                     ))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sd = new ConfigEntry("sd", ConfigEntryArgs.builder()
 *             .name("fort-knox")
 *             .kind("service-defaults")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Protocol", "http")
 *                 )))
 *             .build());
 * 
 *         var jwtProvider = new ConfigEntry("jwtProvider", ConfigEntryArgs.builder()
 *             .name("test-provider")
 *             .kind("jwt-provider")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Issuer", "test-issuer"),
 *                     jsonProperty("JSONWebKeySet", jsonObject(
 *                         jsonProperty("Remote", jsonObject(
 *                             jsonProperty("URI", "https://127.0.0.1:9091"),
 *                             jsonProperty("FetchAsynchronously", true)
 *                         ))
 *                     )),
 *                     jsonProperty("Forwarding", jsonObject(
 *                         jsonProperty("HeaderName", "test-token")
 *                     ))
 *                 )))
 *             .build());
 * 
 *         var serviceIntentions = new ConfigEntry("serviceIntentions", ConfigEntryArgs.builder()
 *             .name(sd.name())
 *             .kind("service-intentions")
 *             .configJson(jwtProvider.name().applyValue(name -> serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Sources", jsonArray(
 *                         jsonObject(
 *                             jsonProperty("Name", "contractor-webapp"),
 *                             jsonProperty("Permissions", jsonArray(jsonObject(
 *                                 jsonProperty("Action", "allow"),
 *                                 jsonProperty("HTTP", jsonObject(
 *                                     jsonProperty("Methods", jsonArray(
 *                                         "GET", 
 *                                         "HEAD"
 *                                     )),
 *                                     jsonProperty("PathExact", "/healtz")
 *                                 )),
 *                                 jsonProperty("JWT", jsonObject(
 *                                     jsonProperty("Providers", jsonArray(jsonObject(
 *                                         jsonProperty("Name", name)
 *                                     )))
 *                                 ))
 *                             ))),
 *                             jsonProperty("Precedence", 9),
 *                             jsonProperty("Type", "consul")
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty("Name", "admin-dashboard-webapp"),
 *                             jsonProperty("Permissions", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("Action", "deny"),
 *                                     jsonProperty("HTTP", jsonObject(
 *                                         jsonProperty("PathPrefix", "/debugz")
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("Action", "allow"),
 *                                     jsonProperty("HTTP", jsonObject(
 *                                         jsonProperty("PathPrefix", "/")
 *                                     ))
 *                                 )
 *                             )),
 *                             jsonProperty("Precedence", 9),
 *                             jsonProperty("Type", "consul")
 *                         )
 *                     ))
 *                 ))))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### `exported-services` config entry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exportedServices = new ConfigEntry("exportedServices", ConfigEntryArgs.builder()
 *             .name("test")
 *             .kind("exported-services")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Services", jsonArray(jsonObject(
 *                         jsonProperty("Name", "test"),
 *                         jsonProperty("Namespace", "default"),
 *                         jsonProperty("Consumers", jsonArray(jsonObject(
 *                             jsonProperty("Partition", "default")
 *                         )))
 *                     )))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### `mesh` config entry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mesh = new ConfigEntry("mesh", ConfigEntryArgs.builder()
 *             .name("mesh")
 *             .kind("mesh")
 *             .partition("default")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("TransparentProxy", jsonObject(
 *                         jsonProperty("MeshDestinationsOnly", true)
 *                     ))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### `jwt-provider` config entry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var jwtProvider = new ConfigEntry("jwtProvider", ConfigEntryArgs.builder()
 *             .name("provider-name")
 *             .kind("jwt-provider")
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Issuer", "https://your.issuer.com"),
 *                     jsonProperty("JSONWebKeySet", jsonObject(
 *                         jsonProperty("Remote", jsonObject(
 *                             jsonProperty("URI", "https://your-remote.jwks.com"),
 *                             jsonProperty("FetchAsynchronously", true),
 *                             jsonProperty("CacheDuration", "10s")
 *                         ))
 *                     )),
 *                     jsonProperty("Forwarding", jsonObject(
 *                         jsonProperty("HeaderName", "test-token")
 *                     ))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * `consul_config_entry` can be imported using the syntax `&lt;kind&gt;/&lt;name&gt;` if the
 * config entry is in the default partition and default namespace, or
 * `&lt;partition&gt;/&lt;namespace&gt;/&lt;kind&gt;/&lt;name&gt;` for config entries in a non-default
 * partition or namespace:
 * 
 * ```sh
 * $ pulumi import consul:index/configEntry:ConfigEntry service_splitter 816a195f-6cb1-2e8d-92af-3011ae706318
 * ```
 * 
 */
@ResourceType(type="consul:index/configEntry:ConfigEntry")
public class ConfigEntry extends com.pulumi.resources.CustomResource {
    /**
     * An arbitrary map of configuration values.
     * 
     */
    @Export(name="configJson", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> configJson;

    /**
     * @return An arbitrary map of configuration values.
     * 
     */
    public Output<Optional<String>> configJson() {
        return Codegen.optional(this.configJson);
    }
    /**
     * The kind of configuration entry to register.
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return The kind of configuration entry to register.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * The name of the configuration entry being registered.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the configuration entry being registered.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The namespace to create the config entry within.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace to create the config entry within.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * The partition the config entry is associated with.
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return The partition the config entry is associated with.
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConfigEntry(String name) {
        this(name, ConfigEntryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConfigEntry(String name, ConfigEntryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConfigEntry(String name, ConfigEntryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/configEntry:ConfigEntry", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private ConfigEntry(String name, Output<String> id, @Nullable ConfigEntryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/configEntry:ConfigEntry", name, state, makeResourceOptions(options, id));
    }

    private static ConfigEntryArgs makeArgs(ConfigEntryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ConfigEntryArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConfigEntry get(String name, Output<String> id, @Nullable ConfigEntryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConfigEntry(name, id, state, options);
    }
}
