// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicenseState extends com.pulumi.resources.ResourceArgs {

    public static final LicenseState Empty = new LicenseState();

    /**
     * The ID of the customer the license is attached to.
     * 
     */
    @Import(name="customerId")
    private @Nullable Output<String> customerId;

    /**
     * @return The ID of the customer the license is attached to.
     * 
     */
    public Optional<Output<String>> customerId() {
        return Optional.ofNullable(this.customerId);
    }

    /**
     * The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * The expiration time of the license.
     * 
     */
    @Import(name="expirationTime")
    private @Nullable Output<String> expirationTime;

    /**
     * @return The expiration time of the license.
     * 
     */
    public Optional<Output<String>> expirationTime() {
        return Optional.ofNullable(this.expirationTime);
    }

    /**
     * The features for which the license is valid.
     * 
     */
    @Import(name="features")
    private @Nullable Output<List<String>> features;

    /**
     * @return The features for which the license is valid.
     * 
     */
    public Optional<Output<List<String>>> features() {
        return Optional.ofNullable(this.features);
    }

    /**
     * The ID of the current installation.
     * 
     */
    @Import(name="installationId")
    private @Nullable Output<String> installationId;

    /**
     * @return The ID of the current installation.
     * 
     */
    public Optional<Output<String>> installationId() {
        return Optional.ofNullable(this.installationId);
    }

    /**
     * The date the license was issued.
     * 
     */
    @Import(name="issueTime")
    private @Nullable Output<String> issueTime;

    /**
     * @return The date the license was issued.
     * 
     */
    public Optional<Output<String>> issueTime() {
        return Optional.ofNullable(this.issueTime);
    }

    /**
     * The Consul license to use.
     * 
     */
    @Import(name="license")
    private @Nullable Output<String> license;

    /**
     * @return The Consul license to use.
     * 
     */
    public Optional<Output<String>> license() {
        return Optional.ofNullable(this.license);
    }

    /**
     * The ID of the license used.
     * 
     */
    @Import(name="licenseId")
    private @Nullable Output<String> licenseId;

    /**
     * @return The ID of the license used.
     * 
     */
    public Optional<Output<String>> licenseId() {
        return Optional.ofNullable(this.licenseId);
    }

    /**
     * The product for which the license is valid.
     * 
     */
    @Import(name="product")
    private @Nullable Output<String> product;

    /**
     * @return The product for which the license is valid.
     * 
     */
    public Optional<Output<String>> product() {
        return Optional.ofNullable(this.product);
    }

    /**
     * The start time of the license.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The start time of the license.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Whether the license is valid.
     * 
     */
    @Import(name="valid")
    private @Nullable Output<Boolean> valid;

    /**
     * @return Whether the license is valid.
     * 
     */
    public Optional<Output<Boolean>> valid() {
        return Optional.ofNullable(this.valid);
    }

    /**
     * A list of warning messages regarding the license validity.
     * 
     */
    @Import(name="warnings")
    private @Nullable Output<List<String>> warnings;

    /**
     * @return A list of warning messages regarding the license validity.
     * 
     */
    public Optional<Output<List<String>>> warnings() {
        return Optional.ofNullable(this.warnings);
    }

    private LicenseState() {}

    private LicenseState(LicenseState $) {
        this.customerId = $.customerId;
        this.datacenter = $.datacenter;
        this.expirationTime = $.expirationTime;
        this.features = $.features;
        this.installationId = $.installationId;
        this.issueTime = $.issueTime;
        this.license = $.license;
        this.licenseId = $.licenseId;
        this.product = $.product;
        this.startTime = $.startTime;
        this.valid = $.valid;
        this.warnings = $.warnings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseState $;

        public Builder() {
            $ = new LicenseState();
        }

        public Builder(LicenseState defaults) {
            $ = new LicenseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customerId The ID of the customer the license is attached to.
         * 
         * @return builder
         * 
         */
        public Builder customerId(@Nullable Output<String> customerId) {
            $.customerId = customerId;
            return this;
        }

        /**
         * @param customerId The ID of the customer the license is attached to.
         * 
         * @return builder
         * 
         */
        public Builder customerId(String customerId) {
            return customerId(Output.of(customerId));
        }

        /**
         * @param datacenter The datacenter to use. This overrides the
         * agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The datacenter to use. This overrides the
         * agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param expirationTime The expiration time of the license.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(@Nullable Output<String> expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param expirationTime The expiration time of the license.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(String expirationTime) {
            return expirationTime(Output.of(expirationTime));
        }

        /**
         * @param features The features for which the license is valid.
         * 
         * @return builder
         * 
         */
        public Builder features(@Nullable Output<List<String>> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features The features for which the license is valid.
         * 
         * @return builder
         * 
         */
        public Builder features(List<String> features) {
            return features(Output.of(features));
        }

        /**
         * @param features The features for which the license is valid.
         * 
         * @return builder
         * 
         */
        public Builder features(String... features) {
            return features(List.of(features));
        }

        /**
         * @param installationId The ID of the current installation.
         * 
         * @return builder
         * 
         */
        public Builder installationId(@Nullable Output<String> installationId) {
            $.installationId = installationId;
            return this;
        }

        /**
         * @param installationId The ID of the current installation.
         * 
         * @return builder
         * 
         */
        public Builder installationId(String installationId) {
            return installationId(Output.of(installationId));
        }

        /**
         * @param issueTime The date the license was issued.
         * 
         * @return builder
         * 
         */
        public Builder issueTime(@Nullable Output<String> issueTime) {
            $.issueTime = issueTime;
            return this;
        }

        /**
         * @param issueTime The date the license was issued.
         * 
         * @return builder
         * 
         */
        public Builder issueTime(String issueTime) {
            return issueTime(Output.of(issueTime));
        }

        /**
         * @param license The Consul license to use.
         * 
         * @return builder
         * 
         */
        public Builder license(@Nullable Output<String> license) {
            $.license = license;
            return this;
        }

        /**
         * @param license The Consul license to use.
         * 
         * @return builder
         * 
         */
        public Builder license(String license) {
            return license(Output.of(license));
        }

        /**
         * @param licenseId The ID of the license used.
         * 
         * @return builder
         * 
         */
        public Builder licenseId(@Nullable Output<String> licenseId) {
            $.licenseId = licenseId;
            return this;
        }

        /**
         * @param licenseId The ID of the license used.
         * 
         * @return builder
         * 
         */
        public Builder licenseId(String licenseId) {
            return licenseId(Output.of(licenseId));
        }

        /**
         * @param product The product for which the license is valid.
         * 
         * @return builder
         * 
         */
        public Builder product(@Nullable Output<String> product) {
            $.product = product;
            return this;
        }

        /**
         * @param product The product for which the license is valid.
         * 
         * @return builder
         * 
         */
        public Builder product(String product) {
            return product(Output.of(product));
        }

        /**
         * @param startTime The start time of the license.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The start time of the license.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param valid Whether the license is valid.
         * 
         * @return builder
         * 
         */
        public Builder valid(@Nullable Output<Boolean> valid) {
            $.valid = valid;
            return this;
        }

        /**
         * @param valid Whether the license is valid.
         * 
         * @return builder
         * 
         */
        public Builder valid(Boolean valid) {
            return valid(Output.of(valid));
        }

        /**
         * @param warnings A list of warning messages regarding the license validity.
         * 
         * @return builder
         * 
         */
        public Builder warnings(@Nullable Output<List<String>> warnings) {
            $.warnings = warnings;
            return this;
        }

        /**
         * @param warnings A list of warning messages regarding the license validity.
         * 
         * @return builder
         * 
         */
        public Builder warnings(List<String> warnings) {
            return warnings(Output.of(warnings));
        }

        /**
         * @param warnings A list of warning messages regarding the license validity.
         * 
         * @return builder
         * 
         */
        public Builder warnings(String... warnings) {
            return warnings(List.of(warnings));
        }

        public LicenseState build() {
            return $;
        }
    }

}
