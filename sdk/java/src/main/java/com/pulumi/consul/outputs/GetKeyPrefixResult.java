// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.consul.outputs.GetKeyPrefixSubkeyCollection;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKeyPrefixResult {
    /**
     * @return The datacenter the keys are being read from.
     * 
     */
    private String datacenter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String namespace;
    private @Nullable String partition;
    /**
     * @return the common prefix shared by all keys being read.
     * * `var.&lt;name&gt;` - For each name given, the corresponding attribute
     *   has the value of the key.
     * 
     */
    private String pathPrefix;
    private @Nullable List<GetKeyPrefixSubkeyCollection> subkeyCollection;
    /**
     * @return A map of the subkeys and values is set if no `subkey`
     * block is provided.
     * 
     */
    private Map<String,String> subkeys;
    /**
     * @deprecated
     * The token argument has been deprecated and will be removed in a future release.
     * Please use the token argument in the provider configuration
     * 
     */
    @Deprecated /* The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration */
    private @Nullable String token;
    private Map<String,String> var_;

    private GetKeyPrefixResult() {}
    /**
     * @return The datacenter the keys are being read from.
     * 
     */
    public String datacenter() {
        return this.datacenter;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    public Optional<String> partition() {
        return Optional.ofNullable(this.partition);
    }
    /**
     * @return the common prefix shared by all keys being read.
     * * `var.&lt;name&gt;` - For each name given, the corresponding attribute
     *   has the value of the key.
     * 
     */
    public String pathPrefix() {
        return this.pathPrefix;
    }
    public List<GetKeyPrefixSubkeyCollection> subkeyCollection() {
        return this.subkeyCollection == null ? List.of() : this.subkeyCollection;
    }
    /**
     * @return A map of the subkeys and values is set if no `subkey`
     * block is provided.
     * 
     */
    public Map<String,String> subkeys() {
        return this.subkeys;
    }
    /**
     * @deprecated
     * The token argument has been deprecated and will be removed in a future release.
     * Please use the token argument in the provider configuration
     * 
     */
    @Deprecated /* The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }
    public Map<String,String> var_() {
        return this.var_;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyPrefixResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datacenter;
        private String id;
        private @Nullable String namespace;
        private @Nullable String partition;
        private String pathPrefix;
        private @Nullable List<GetKeyPrefixSubkeyCollection> subkeyCollection;
        private Map<String,String> subkeys;
        private @Nullable String token;
        private Map<String,String> var_;
        public Builder() {}
        public Builder(GetKeyPrefixResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenter = defaults.datacenter;
    	      this.id = defaults.id;
    	      this.namespace = defaults.namespace;
    	      this.partition = defaults.partition;
    	      this.pathPrefix = defaults.pathPrefix;
    	      this.subkeyCollection = defaults.subkeyCollection;
    	      this.subkeys = defaults.subkeys;
    	      this.token = defaults.token;
    	      this.var_ = defaults.var_;
        }

        @CustomType.Setter
        public Builder datacenter(String datacenter) {
            this.datacenter = Objects.requireNonNull(datacenter);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder partition(@Nullable String partition) {
            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder pathPrefix(String pathPrefix) {
            this.pathPrefix = Objects.requireNonNull(pathPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder subkeyCollection(@Nullable List<GetKeyPrefixSubkeyCollection> subkeyCollection) {
            this.subkeyCollection = subkeyCollection;
            return this;
        }
        public Builder subkeyCollection(GetKeyPrefixSubkeyCollection... subkeyCollection) {
            return subkeyCollection(List.of(subkeyCollection));
        }
        @CustomType.Setter
        public Builder subkeys(Map<String,String> subkeys) {
            this.subkeys = Objects.requireNonNull(subkeys);
            return this;
        }
        @CustomType.Setter
        public Builder token(@Nullable String token) {
            this.token = token;
            return this;
        }
        @CustomType.Setter("var")
        public Builder var_(Map<String,String> var_) {
            this.var_ = Objects.requireNonNull(var_);
            return this;
        }
        public GetKeyPrefixResult build() {
            final var o = new GetKeyPrefixResult();
            o.datacenter = datacenter;
            o.id = id;
            o.namespace = namespace;
            o.partition = partition;
            o.pathPrefix = pathPrefix;
            o.subkeyCollection = subkeyCollection;
            o.subkeys = subkeys;
            o.token = token;
            o.var_ = var_;
            return o;
        }
    }
}
