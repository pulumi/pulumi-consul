// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntentionArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntentionArgs Empty = new IntentionArgs();

    /**
     * The intention action. Must be one of `allow` or `deny`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The intention action. Must be one of `allow` or `deny`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The datacenter to use. This overrides the
     * agent&#39;s default datacenter and the datacenter in the provider setup.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * Optional description that can be used by Consul
     * tooling, but is not used internally.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional description that can be used by Consul
     * tooling, but is not used internally.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the destination service for the intention. This
     * service does not have to exist.
     * 
     */
    @Import(name="destinationName", required=true)
    private Output<String> destinationName;

    /**
     * @return The name of the destination service for the intention. This
     * service does not have to exist.
     * 
     */
    public Output<String> destinationName() {
        return this.destinationName;
    }

    /**
     * The destination
     * namespace of the intention.
     * 
     */
    @Import(name="destinationNamespace")
    private @Nullable Output<String> destinationNamespace;

    /**
     * @return The destination
     * namespace of the intention.
     * 
     */
    public Optional<Output<String>> destinationNamespace() {
        return Optional.ofNullable(this.destinationNamespace);
    }

    /**
     * Key/value pairs that are opaque to Consul and are associated
     * with the intention.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<Map<String,String>> meta;

    /**
     * @return Key/value pairs that are opaque to Consul and are associated
     * with the intention.
     * 
     */
    public Optional<Output<Map<String,String>>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * The name of the source service for the intention. This
     * service does not have to exist.
     * 
     */
    @Import(name="sourceName", required=true)
    private Output<String> sourceName;

    /**
     * @return The name of the source service for the intention. This
     * service does not have to exist.
     * 
     */
    public Output<String> sourceName() {
        return this.sourceName;
    }

    /**
     * The source namespace of the
     * intention.
     * 
     */
    @Import(name="sourceNamespace")
    private @Nullable Output<String> sourceNamespace;

    /**
     * @return The source namespace of the
     * intention.
     * 
     */
    public Optional<Output<String>> sourceNamespace() {
        return Optional.ofNullable(this.sourceNamespace);
    }

    private IntentionArgs() {}

    private IntentionArgs(IntentionArgs $) {
        this.action = $.action;
        this.datacenter = $.datacenter;
        this.description = $.description;
        this.destinationName = $.destinationName;
        this.destinationNamespace = $.destinationNamespace;
        this.meta = $.meta;
        this.sourceName = $.sourceName;
        this.sourceNamespace = $.sourceNamespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntentionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntentionArgs $;

        public Builder() {
            $ = new IntentionArgs();
        }

        public Builder(IntentionArgs defaults) {
            $ = new IntentionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The intention action. Must be one of `allow` or `deny`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The intention action. Must be one of `allow` or `deny`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param datacenter The datacenter to use. This overrides the
         * agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The datacenter to use. This overrides the
         * agent&#39;s default datacenter and the datacenter in the provider setup.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param description Optional description that can be used by Consul
         * tooling, but is not used internally.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional description that can be used by Consul
         * tooling, but is not used internally.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationName The name of the destination service for the intention. This
         * service does not have to exist.
         * 
         * @return builder
         * 
         */
        public Builder destinationName(Output<String> destinationName) {
            $.destinationName = destinationName;
            return this;
        }

        /**
         * @param destinationName The name of the destination service for the intention. This
         * service does not have to exist.
         * 
         * @return builder
         * 
         */
        public Builder destinationName(String destinationName) {
            return destinationName(Output.of(destinationName));
        }

        /**
         * @param destinationNamespace The destination
         * namespace of the intention.
         * 
         * @return builder
         * 
         */
        public Builder destinationNamespace(@Nullable Output<String> destinationNamespace) {
            $.destinationNamespace = destinationNamespace;
            return this;
        }

        /**
         * @param destinationNamespace The destination
         * namespace of the intention.
         * 
         * @return builder
         * 
         */
        public Builder destinationNamespace(String destinationNamespace) {
            return destinationNamespace(Output.of(destinationNamespace));
        }

        /**
         * @param meta Key/value pairs that are opaque to Consul and are associated
         * with the intention.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<Map<String,String>> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Key/value pairs that are opaque to Consul and are associated
         * with the intention.
         * 
         * @return builder
         * 
         */
        public Builder meta(Map<String,String> meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param sourceName The name of the source service for the intention. This
         * service does not have to exist.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(Output<String> sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        /**
         * @param sourceName The name of the source service for the intention. This
         * service does not have to exist.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(String sourceName) {
            return sourceName(Output.of(sourceName));
        }

        /**
         * @param sourceNamespace The source namespace of the
         * intention.
         * 
         * @return builder
         * 
         */
        public Builder sourceNamespace(@Nullable Output<String> sourceNamespace) {
            $.sourceNamespace = sourceNamespace;
            return this;
        }

        /**
         * @param sourceNamespace The source namespace of the
         * intention.
         * 
         * @return builder
         * 
         */
        public Builder sourceNamespace(String sourceNamespace) {
            return sourceNamespace(Output.of(sourceNamespace));
        }

        public IntentionArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.destinationName = Objects.requireNonNull($.destinationName, "expected parameter 'destinationName' to be non-null");
            $.sourceName = Objects.requireNonNull($.sourceName, "expected parameter 'sourceName' to be non-null");
            return $;
        }
    }

}
