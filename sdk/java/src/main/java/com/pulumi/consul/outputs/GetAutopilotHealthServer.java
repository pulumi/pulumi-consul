// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAutopilotHealthServer {
    /**
     * @return The address of the server
     * 
     */
    private String address;
    /**
     * @return Whether the server is healthy according to the current Autopilot
     * configuration
     * 
     */
    private Boolean healthy;
    /**
     * @return The Raft ID of the server
     * 
     */
    private String id;
    /**
     * @return The time elapsed since the server&#39;s last contact with
     * the leader
     * 
     */
    private String lastContact;
    /**
     * @return The index of the server&#39;s last committed Raft log entry
     * 
     */
    private Integer lastIndex;
    /**
     * @return The server&#39;s last known Raft leader term
     * 
     */
    private Integer lastTerm;
    /**
     * @return Whether the server is currently leader
     * 
     */
    private Boolean leader;
    /**
     * @return The node name of the server
     * 
     */
    private String name;
    /**
     * @return The status of the SerfHealth check of the server
     * 
     */
    private String serfStatus;
    /**
     * @return The time this server has been in its current ``Healthy``
     * state
     * 
     */
    private String stableSince;
    /**
     * @return The Consul version of the server
     * 
     */
    private String version;
    /**
     * @return Whether the server is a voting member of the Raft cluster
     * 
     */
    private Boolean voter;

    private GetAutopilotHealthServer() {}
    /**
     * @return The address of the server
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Whether the server is healthy according to the current Autopilot
     * configuration
     * 
     */
    public Boolean healthy() {
        return this.healthy;
    }
    /**
     * @return The Raft ID of the server
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The time elapsed since the server&#39;s last contact with
     * the leader
     * 
     */
    public String lastContact() {
        return this.lastContact;
    }
    /**
     * @return The index of the server&#39;s last committed Raft log entry
     * 
     */
    public Integer lastIndex() {
        return this.lastIndex;
    }
    /**
     * @return The server&#39;s last known Raft leader term
     * 
     */
    public Integer lastTerm() {
        return this.lastTerm;
    }
    /**
     * @return Whether the server is currently leader
     * 
     */
    public Boolean leader() {
        return this.leader;
    }
    /**
     * @return The node name of the server
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of the SerfHealth check of the server
     * 
     */
    public String serfStatus() {
        return this.serfStatus;
    }
    /**
     * @return The time this server has been in its current ``Healthy``
     * state
     * 
     */
    public String stableSince() {
        return this.stableSince;
    }
    /**
     * @return The Consul version of the server
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return Whether the server is a voting member of the Raft cluster
     * 
     */
    public Boolean voter() {
        return this.voter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutopilotHealthServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private Boolean healthy;
        private String id;
        private String lastContact;
        private Integer lastIndex;
        private Integer lastTerm;
        private Boolean leader;
        private String name;
        private String serfStatus;
        private String stableSince;
        private String version;
        private Boolean voter;
        public Builder() {}
        public Builder(GetAutopilotHealthServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.healthy = defaults.healthy;
    	      this.id = defaults.id;
    	      this.lastContact = defaults.lastContact;
    	      this.lastIndex = defaults.lastIndex;
    	      this.lastTerm = defaults.lastTerm;
    	      this.leader = defaults.leader;
    	      this.name = defaults.name;
    	      this.serfStatus = defaults.serfStatus;
    	      this.stableSince = defaults.stableSince;
    	      this.version = defaults.version;
    	      this.voter = defaults.voter;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder healthy(Boolean healthy) {
            if (healthy == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "healthy");
            }
            this.healthy = healthy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastContact(String lastContact) {
            if (lastContact == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "lastContact");
            }
            this.lastContact = lastContact;
            return this;
        }
        @CustomType.Setter
        public Builder lastIndex(Integer lastIndex) {
            if (lastIndex == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "lastIndex");
            }
            this.lastIndex = lastIndex;
            return this;
        }
        @CustomType.Setter
        public Builder lastTerm(Integer lastTerm) {
            if (lastTerm == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "lastTerm");
            }
            this.lastTerm = lastTerm;
            return this;
        }
        @CustomType.Setter
        public Builder leader(Boolean leader) {
            if (leader == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "leader");
            }
            this.leader = leader;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder serfStatus(String serfStatus) {
            if (serfStatus == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "serfStatus");
            }
            this.serfStatus = serfStatus;
            return this;
        }
        @CustomType.Setter
        public Builder stableSince(String stableSince) {
            if (stableSince == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "stableSince");
            }
            this.stableSince = stableSince;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder voter(Boolean voter) {
            if (voter == null) {
              throw new MissingRequiredPropertyException("GetAutopilotHealthServer", "voter");
            }
            this.voter = voter;
            return this;
        }
        public GetAutopilotHealthServer build() {
            final var _resultValue = new GetAutopilotHealthServer();
            _resultValue.address = address;
            _resultValue.healthy = healthy;
            _resultValue.id = id;
            _resultValue.lastContact = lastContact;
            _resultValue.lastIndex = lastIndex;
            _resultValue.lastTerm = lastTerm;
            _resultValue.leader = leader;
            _resultValue.name = name;
            _resultValue.serfStatus = serfStatus;
            _resultValue.stableSince = stableSince;
            _resultValue.version = version;
            _resultValue.voter = voter;
            return _resultValue;
        }
    }
}
