// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.ConfigEntryServiceIntentionsArgs;
import com.pulumi.consul.Utilities;
import com.pulumi.consul.inputs.ConfigEntryServiceIntentionsState;
import com.pulumi.consul.outputs.ConfigEntryServiceIntentionsJwt;
import com.pulumi.consul.outputs.ConfigEntryServiceIntentionsSource;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntry;
 * import com.pulumi.consul.ConfigEntryArgs;
 * import com.pulumi.consul.ConfigEntryServiceIntentions;
 * import com.pulumi.consul.ConfigEntryServiceIntentionsArgs;
 * import com.pulumi.consul.inputs.ConfigEntryServiceIntentionsJwtArgs;
 * import com.pulumi.consul.inputs.ConfigEntryServiceIntentionsSourceArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var jwtProvider = new ConfigEntry(&#34;jwtProvider&#34;, ConfigEntryArgs.builder()        
 *             .kind(&#34;jwt-provider&#34;)
 *             .configJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;ClockSkewSeconds&#34;, 30),
 *                     jsonProperty(&#34;Issuer&#34;, &#34;test-issuer&#34;),
 *                     jsonProperty(&#34;JSONWebKeySet&#34;, jsonObject(
 *                         jsonProperty(&#34;Remote&#34;, jsonObject(
 *                             jsonProperty(&#34;URI&#34;, &#34;https://127.0.0.1:9091&#34;),
 *                             jsonProperty(&#34;FetchAsynchronously&#34;, true)
 *                         ))
 *                     ))
 *                 )))
 *             .build());
 * 
 *         var web = new ConfigEntryServiceIntentions(&#34;web&#34;, ConfigEntryServiceIntentionsArgs.builder()        
 *             .jwts(ConfigEntryServiceIntentionsJwtArgs.builder()
 *                 .providers(ConfigEntryServiceIntentionsJwtProviderArgs.builder()
 *                     .name(jwtProvider.name())
 *                     .verifyClaims(ConfigEntryServiceIntentionsJwtProviderVerifyClaimArgs.builder()
 *                         .paths(                        
 *                             &#34;perms&#34;,
 *                             &#34;role&#34;)
 *                         .value(&#34;admin&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .sources(            
 *                 ConfigEntryServiceIntentionsSourceArgs.builder()
 *                     .name(&#34;frontend-webapp&#34;)
 *                     .type(&#34;consul&#34;)
 *                     .action(&#34;allow&#34;)
 *                     .build(),
 *                 ConfigEntryServiceIntentionsSourceArgs.builder()
 *                     .name(&#34;nightly-cronjob&#34;)
 *                     .type(&#34;consul&#34;)
 *                     .action(&#34;deny&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="consul:index/configEntryServiceIntentions:ConfigEntryServiceIntentions")
public class ConfigEntryServiceIntentions extends com.pulumi.resources.CustomResource {
    /**
     * Specifies a JSON Web Token provider configured in a JWT provider configuration entry, as well as additional configurations for verifying a service&#39;s JWT before authorizing communication between services
     * 
     */
    @Export(name="jwts", refs={List.class,ConfigEntryServiceIntentionsJwt.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConfigEntryServiceIntentionsJwt>> jwts;

    /**
     * @return Specifies a JSON Web Token provider configured in a JWT provider configuration entry, as well as additional configurations for verifying a service&#39;s JWT before authorizing communication between services
     * 
     */
    public Output<Optional<List<ConfigEntryServiceIntentionsJwt>>> jwts() {
        return Codegen.optional(this.jwts);
    }
    /**
     * Specifies key-value pairs to add to the KV store.
     * 
     */
    @Export(name="meta", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> meta;

    /**
     * @return Specifies key-value pairs to add to the KV store.
     * 
     */
    public Output<Optional<Map<String,String>>> meta() {
        return Codegen.optional(this.meta);
    }
    /**
     * Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the traffic source namespace that the intention allows or denies traffic from.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return Specifies the traffic source namespace that the intention allows or denies traffic from.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * Specifies the name of an admin partition that the intention allows or denies traffic from.
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return Specifies the name of an admin partition that the intention allows or denies traffic from.
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }
    /**
     * List of configurations that define intention sources and the authorization granted to the sources.
     * 
     */
    @Export(name="sources", refs={List.class,ConfigEntryServiceIntentionsSource.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConfigEntryServiceIntentionsSource>> sources;

    /**
     * @return List of configurations that define intention sources and the authorization granted to the sources.
     * 
     */
    public Output<Optional<List<ConfigEntryServiceIntentionsSource>>> sources() {
        return Codegen.optional(this.sources);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConfigEntryServiceIntentions(String name) {
        this(name, ConfigEntryServiceIntentionsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConfigEntryServiceIntentions(String name, @Nullable ConfigEntryServiceIntentionsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConfigEntryServiceIntentions(String name, @Nullable ConfigEntryServiceIntentionsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/configEntryServiceIntentions:ConfigEntryServiceIntentions", name, args == null ? ConfigEntryServiceIntentionsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ConfigEntryServiceIntentions(String name, Output<String> id, @Nullable ConfigEntryServiceIntentionsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/configEntryServiceIntentions:ConfigEntryServiceIntentions", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConfigEntryServiceIntentions get(String name, Output<String> id, @Nullable ConfigEntryServiceIntentionsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConfigEntryServiceIntentions(name, id, state, options);
    }
}
