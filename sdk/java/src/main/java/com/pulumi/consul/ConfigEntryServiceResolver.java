// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.ConfigEntryServiceResolverArgs;
import com.pulumi.consul.Utilities;
import com.pulumi.consul.inputs.ConfigEntryServiceResolverState;
import com.pulumi.consul.outputs.ConfigEntryServiceResolverFailover;
import com.pulumi.consul.outputs.ConfigEntryServiceResolverLoadBalancer;
import com.pulumi.consul.outputs.ConfigEntryServiceResolverRedirect;
import com.pulumi.consul.outputs.ConfigEntryServiceResolverSubset;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.consul.ConfigEntryServiceResolver;
 * import com.pulumi.consul.ConfigEntryServiceResolverArgs;
 * import com.pulumi.consul.inputs.ConfigEntryServiceResolverSubsetArgs;
 * import com.pulumi.consul.inputs.ConfigEntryServiceResolverRedirectArgs;
 * import com.pulumi.consul.inputs.ConfigEntryServiceResolverFailoverArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var web = new ConfigEntryServiceResolver("web", ConfigEntryServiceResolverArgs.builder()
 *             .name("web")
 *             .defaultSubset("v1")
 *             .connectTimeout("15s")
 *             .subsets(            
 *                 ConfigEntryServiceResolverSubsetArgs.builder()
 *                     .name("v1")
 *                     .filter("Service.Meta.version == v1")
 *                     .build(),
 *                 ConfigEntryServiceResolverSubsetArgs.builder()
 *                     .name("v2")
 *                     .filter("Service.Meta.version == v2")
 *                     .build())
 *             .redirects(ConfigEntryServiceResolverRedirectArgs.builder()
 *                 .service("web")
 *                 .datacenter("dc2")
 *                 .build())
 *             .failovers(            
 *                 ConfigEntryServiceResolverFailoverArgs.builder()
 *                     .subsetName("v2")
 *                     .datacenters("dc2")
 *                     .build(),
 *                 ConfigEntryServiceResolverFailoverArgs.builder()
 *                     .subsetName("*")
 *                     .datacenters(                    
 *                         "dc3",
 *                         "dc4")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="consul:index/configEntryServiceResolver:ConfigEntryServiceResolver")
public class ConfigEntryServiceResolver extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the timeout duration for establishing new network connections to this service.
     * 
     */
    @Export(name="connectTimeout", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> connectTimeout;

    /**
     * @return Specifies the timeout duration for establishing new network connections to this service.
     * 
     */
    public Output<Optional<String>> connectTimeout() {
        return Codegen.optional(this.connectTimeout);
    }
    /**
     * Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
     * 
     */
    @Export(name="defaultSubset", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultSubset;

    /**
     * @return Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
     * 
     */
    public Output<Optional<String>> defaultSubset() {
        return Codegen.optional(this.defaultSubset);
    }
    /**
     * Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
     * 
     */
    @Export(name="failovers", refs={List.class,ConfigEntryServiceResolverFailover.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConfigEntryServiceResolverFailover>> failovers;

    /**
     * @return Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
     * 
     */
    public Output<Optional<List<ConfigEntryServiceResolverFailover>>> failovers() {
        return Codegen.optional(this.failovers);
    }
    /**
     * Specifies the load balancing policy and configuration for services issuing requests to this upstream.
     * 
     */
    @Export(name="loadBalancers", refs={List.class,ConfigEntryServiceResolverLoadBalancer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConfigEntryServiceResolverLoadBalancer>> loadBalancers;

    /**
     * @return Specifies the load balancing policy and configuration for services issuing requests to this upstream.
     * 
     */
    public Output<Optional<List<ConfigEntryServiceResolverLoadBalancer>>> loadBalancers() {
        return Codegen.optional(this.loadBalancers);
    }
    /**
     * Specifies key-value pairs to add to the KV store.
     * 
     */
    @Export(name="meta", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> meta;

    /**
     * @return Specifies key-value pairs to add to the KV store.
     * 
     */
    public Output<Optional<Map<String,String>>> meta() {
        return Codegen.optional(this.meta);
    }
    /**
     * Specifies a name for the configuration entry.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies a name for the configuration entry.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the namespace that the service resolver applies to.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return Specifies the namespace that the service resolver applies to.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * Specifies the admin partition that the service resolver applies to.
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return Specifies the admin partition that the service resolver applies to.
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }
    /**
     * Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
     * 
     */
    @Export(name="redirects", refs={List.class,ConfigEntryServiceResolverRedirect.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConfigEntryServiceResolverRedirect>> redirects;

    /**
     * @return Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
     * 
     */
    public Output<Optional<List<ConfigEntryServiceResolverRedirect>>> redirects() {
        return Codegen.optional(this.redirects);
    }
    /**
     * Specifies the timeout duration for receiving an HTTP response from this service.
     * 
     */
    @Export(name="requestTimeout", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> requestTimeout;

    /**
     * @return Specifies the timeout duration for receiving an HTTP response from this service.
     * 
     */
    public Output<Optional<String>> requestTimeout() {
        return Codegen.optional(this.requestTimeout);
    }
    /**
     * Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
     * 
     */
    @Export(name="subsets", refs={List.class,ConfigEntryServiceResolverSubset.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConfigEntryServiceResolverSubset>> subsets;

    /**
     * @return Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
     * 
     */
    public Output<Optional<List<ConfigEntryServiceResolverSubset>>> subsets() {
        return Codegen.optional(this.subsets);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConfigEntryServiceResolver(String name) {
        this(name, ConfigEntryServiceResolverArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConfigEntryServiceResolver(String name, @Nullable ConfigEntryServiceResolverArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConfigEntryServiceResolver(String name, @Nullable ConfigEntryServiceResolverArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/configEntryServiceResolver:ConfigEntryServiceResolver", name, args == null ? ConfigEntryServiceResolverArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ConfigEntryServiceResolver(String name, Output<String> id, @Nullable ConfigEntryServiceResolverState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("consul:index/configEntryServiceResolver:ConfigEntryServiceResolver", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConfigEntryServiceResolver get(String name, Output<String> id, @Nullable ConfigEntryServiceResolverState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConfigEntryServiceResolver(name, id, state, options);
    }
}
