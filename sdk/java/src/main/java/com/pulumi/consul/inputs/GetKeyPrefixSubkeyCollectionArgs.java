// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetKeyPrefixSubkeyCollectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetKeyPrefixSubkeyCollectionArgs Empty = new GetKeyPrefixSubkeyCollectionArgs();

    /**
     * This is the default value to set for `var.&lt;name&gt;`
     * if the key does not exist in Consul. Defaults to an empty string.
     * 
     */
    @Import(name="default")
    private @Nullable Output<String> default_;

    /**
     * @return This is the default value to set for `var.&lt;name&gt;`
     * if the key does not exist in Consul. Defaults to an empty string.
     * 
     */
    public Optional<Output<String>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * This is the name of the key. This value of the
     * key is exposed as `var.&lt;name&gt;`. This is not the path of the subkey
     * in Consul.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return This is the name of the key. This value of the
     * key is exposed as `var.&lt;name&gt;`. This is not the path of the subkey
     * in Consul.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * This is the subkey path in Consul (which will be appended
     * to the given `path_prefix`) to construct the full key that will be used
     * to read the value.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return This is the subkey path in Consul (which will be appended
     * to the given `path_prefix`) to construct the full key that will be used
     * to read the value.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private GetKeyPrefixSubkeyCollectionArgs() {}

    private GetKeyPrefixSubkeyCollectionArgs(GetKeyPrefixSubkeyCollectionArgs $) {
        this.default_ = $.default_;
        this.name = $.name;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetKeyPrefixSubkeyCollectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetKeyPrefixSubkeyCollectionArgs $;

        public Builder() {
            $ = new GetKeyPrefixSubkeyCollectionArgs();
        }

        public Builder(GetKeyPrefixSubkeyCollectionArgs defaults) {
            $ = new GetKeyPrefixSubkeyCollectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param default_ This is the default value to set for `var.&lt;name&gt;`
         * if the key does not exist in Consul. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<String> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ This is the default value to set for `var.&lt;name&gt;`
         * if the key does not exist in Consul. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder default_(String default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param name This is the name of the key. This value of the
         * key is exposed as `var.&lt;name&gt;`. This is not the path of the subkey
         * in Consul.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name This is the name of the key. This value of the
         * key is exposed as `var.&lt;name&gt;`. This is not the path of the subkey
         * in Consul.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param path This is the subkey path in Consul (which will be appended
         * to the given `path_prefix`) to construct the full key that will be used
         * to read the value.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path This is the subkey path in Consul (which will be appended
         * to the given `path_prefix`) to construct the full key that will be used
         * to read the value.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public GetKeyPrefixSubkeyCollectionArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetKeyPrefixSubkeyCollectionArgs", "name");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetKeyPrefixSubkeyCollectionArgs", "path");
            }
            return $;
        }
    }

}
