// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs Empty = new ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs();

    /**
     * Specifies the maximum number of concurrent requests.
     * 
     */
    @Import(name="maxConcurrentRequests")
    private @Nullable Output<Integer> maxConcurrentRequests;

    /**
     * @return Specifies the maximum number of concurrent requests.
     * 
     */
    public Optional<Output<Integer>> maxConcurrentRequests() {
        return Optional.ofNullable(this.maxConcurrentRequests);
    }

    /**
     * Specifies the maximum number of connections a service instance can establish against the upstream.
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return Specifies the maximum number of connections a service instance can establish against the upstream.
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * Specifies the maximum number of requests that are queued while waiting for a connection to establish.
     * 
     */
    @Import(name="maxPendingRequests")
    private @Nullable Output<Integer> maxPendingRequests;

    /**
     * @return Specifies the maximum number of requests that are queued while waiting for a connection to establish.
     * 
     */
    public Optional<Output<Integer>> maxPendingRequests() {
        return Optional.ofNullable(this.maxPendingRequests);
    }

    private ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs() {}

    private ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs(ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs $) {
        this.maxConcurrentRequests = $.maxConcurrentRequests;
        this.maxConnections = $.maxConnections;
        this.maxPendingRequests = $.maxPendingRequests;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs $;

        public Builder() {
            $ = new ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs();
        }

        public Builder(ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs defaults) {
            $ = new ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxConcurrentRequests Specifies the maximum number of concurrent requests.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentRequests(@Nullable Output<Integer> maxConcurrentRequests) {
            $.maxConcurrentRequests = maxConcurrentRequests;
            return this;
        }

        /**
         * @param maxConcurrentRequests Specifies the maximum number of concurrent requests.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentRequests(Integer maxConcurrentRequests) {
            return maxConcurrentRequests(Output.of(maxConcurrentRequests));
        }

        /**
         * @param maxConnections Specifies the maximum number of connections a service instance can establish against the upstream.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections Specifies the maximum number of connections a service instance can establish against the upstream.
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param maxPendingRequests Specifies the maximum number of requests that are queued while waiting for a connection to establish.
         * 
         * @return builder
         * 
         */
        public Builder maxPendingRequests(@Nullable Output<Integer> maxPendingRequests) {
            $.maxPendingRequests = maxPendingRequests;
            return this;
        }

        /**
         * @param maxPendingRequests Specifies the maximum number of requests that are queued while waiting for a connection to establish.
         * 
         * @return builder
         * 
         */
        public Builder maxPendingRequests(Integer maxPendingRequests) {
            return maxPendingRequests(Output.of(maxPendingRequests));
        }

        public ConfigEntryServiceDefaultsUpstreamConfigOverrideLimitArgs build() {
            return $;
        }
    }

}
