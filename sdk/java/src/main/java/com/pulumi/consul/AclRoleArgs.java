// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.consul.inputs.AclRoleNodeIdentityArgs;
import com.pulumi.consul.inputs.AclRoleServiceIdentityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclRoleArgs Empty = new AclRoleArgs();

    /**
     * A free form human readable description of the role.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free form human readable description of the role.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the ACL role.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the ACL role.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to create the role within.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to create the role within.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The list of node identities that should be applied to the role.
     * 
     */
    @Import(name="nodeIdentities")
    private @Nullable Output<List<AclRoleNodeIdentityArgs>> nodeIdentities;

    /**
     * @return The list of node identities that should be applied to the role.
     * 
     */
    public Optional<Output<List<AclRoleNodeIdentityArgs>>> nodeIdentities() {
        return Optional.ofNullable(this.nodeIdentities);
    }

    /**
     * The partition the ACL role is associated with.
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return The partition the ACL role is associated with.
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * The list of policies that should be applied to the role.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<String>> policies;

    /**
     * @return The list of policies that should be applied to the role.
     * 
     */
    public Optional<Output<List<String>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * The list of service identities that should be applied to the role.
     * 
     */
    @Import(name="serviceIdentities")
    private @Nullable Output<List<AclRoleServiceIdentityArgs>> serviceIdentities;

    /**
     * @return The list of service identities that should be applied to the role.
     * 
     */
    public Optional<Output<List<AclRoleServiceIdentityArgs>>> serviceIdentities() {
        return Optional.ofNullable(this.serviceIdentities);
    }

    private AclRoleArgs() {}

    private AclRoleArgs(AclRoleArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.namespace = $.namespace;
        this.nodeIdentities = $.nodeIdentities;
        this.partition = $.partition;
        this.policies = $.policies;
        this.serviceIdentities = $.serviceIdentities;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclRoleArgs $;

        public Builder() {
            $ = new AclRoleArgs();
        }

        public Builder(AclRoleArgs defaults) {
            $ = new AclRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A free form human readable description of the role.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free form human readable description of the role.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the ACL role.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the ACL role.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to create the role within.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to create the role within.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param nodeIdentities The list of node identities that should be applied to the role.
         * 
         * @return builder
         * 
         */
        public Builder nodeIdentities(@Nullable Output<List<AclRoleNodeIdentityArgs>> nodeIdentities) {
            $.nodeIdentities = nodeIdentities;
            return this;
        }

        /**
         * @param nodeIdentities The list of node identities that should be applied to the role.
         * 
         * @return builder
         * 
         */
        public Builder nodeIdentities(List<AclRoleNodeIdentityArgs> nodeIdentities) {
            return nodeIdentities(Output.of(nodeIdentities));
        }

        /**
         * @param nodeIdentities The list of node identities that should be applied to the role.
         * 
         * @return builder
         * 
         */
        public Builder nodeIdentities(AclRoleNodeIdentityArgs... nodeIdentities) {
            return nodeIdentities(List.of(nodeIdentities));
        }

        /**
         * @param partition The partition the ACL role is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition The partition the ACL role is associated with.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param policies The list of policies that should be applied to the role.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<String>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies The list of policies that should be applied to the role.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<String> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies The list of policies that should be applied to the role.
         * 
         * @return builder
         * 
         */
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param serviceIdentities The list of service identities that should be applied to the role.
         * 
         * @return builder
         * 
         */
        public Builder serviceIdentities(@Nullable Output<List<AclRoleServiceIdentityArgs>> serviceIdentities) {
            $.serviceIdentities = serviceIdentities;
            return this;
        }

        /**
         * @param serviceIdentities The list of service identities that should be applied to the role.
         * 
         * @return builder
         * 
         */
        public Builder serviceIdentities(List<AclRoleServiceIdentityArgs> serviceIdentities) {
            return serviceIdentities(Output.of(serviceIdentities));
        }

        /**
         * @param serviceIdentities The list of service identities that should be applied to the role.
         * 
         * @return builder
         * 
         */
        public Builder serviceIdentities(AclRoleServiceIdentityArgs... serviceIdentities) {
            return serviceIdentities(List.of(serviceIdentities));
        }

        public AclRoleArgs build() {
            return $;
        }
    }

}
