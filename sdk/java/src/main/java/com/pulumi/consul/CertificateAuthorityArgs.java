// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class CertificateAuthorityArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityArgs Empty = new CertificateAuthorityArgs();

    /**
     * The raw configuration to use for the chosen provider.
     * 
     */
    @Import(name="config", required=true)
    private Output<Map<String,String>> config;

    /**
     * @return The raw configuration to use for the chosen provider.
     * 
     */
    public Output<Map<String,String>> config() {
        return this.config;
    }

    /**
     * Specifies the CA provider type to use.
     * 
     */
    @Import(name="connectProvider", required=true)
    private Output<String> connectProvider;

    /**
     * @return Specifies the CA provider type to use.
     * 
     */
    public Output<String> connectProvider() {
        return this.connectProvider;
    }

    private CertificateAuthorityArgs() {}

    private CertificateAuthorityArgs(CertificateAuthorityArgs $) {
        this.config = $.config;
        this.connectProvider = $.connectProvider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateAuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateAuthorityArgs $;

        public Builder() {
            $ = new CertificateAuthorityArgs();
        }

        public Builder(CertificateAuthorityArgs defaults) {
            $ = new CertificateAuthorityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config The raw configuration to use for the chosen provider.
         * 
         * @return builder
         * 
         */
        public Builder config(Output<Map<String,String>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The raw configuration to use for the chosen provider.
         * 
         * @return builder
         * 
         */
        public Builder config(Map<String,String> config) {
            return config(Output.of(config));
        }

        /**
         * @param connectProvider Specifies the CA provider type to use.
         * 
         * @return builder
         * 
         */
        public Builder connectProvider(Output<String> connectProvider) {
            $.connectProvider = connectProvider;
            return this;
        }

        /**
         * @param connectProvider Specifies the CA provider type to use.
         * 
         * @return builder
         * 
         */
        public Builder connectProvider(String connectProvider) {
            return connectProvider(Output.of(connectProvider));
        }

        public CertificateAuthorityArgs build() {
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            $.connectProvider = Objects.requireNonNull($.connectProvider, "expected parameter 'connectProvider' to be non-null");
            return $;
        }
    }

}
