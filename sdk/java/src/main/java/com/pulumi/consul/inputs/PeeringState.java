// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PeeringState extends com.pulumi.resources.ResourceArgs {

    public static final PeeringState Empty = new PeeringState();

    @Import(name="deletedAt")
    private @Nullable Output<String> deletedAt;

    public Optional<Output<String>> deletedAt() {
        return Optional.ofNullable(this.deletedAt);
    }

    /**
     * Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the cluster peering process.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<Map<String,String>> meta;

    /**
     * @return Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the cluster peering process.
     * 
     */
    public Optional<Output<Map<String,String>>> meta() {
        return Optional.ofNullable(this.meta);
    }

    @Import(name="partition")
    private @Nullable Output<String> partition;

    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    @Import(name="peerCaPems")
    private @Nullable Output<List<String>> peerCaPems;

    public Optional<Output<List<String>>> peerCaPems() {
        return Optional.ofNullable(this.peerCaPems);
    }

    @Import(name="peerId")
    private @Nullable Output<String> peerId;

    public Optional<Output<String>> peerId() {
        return Optional.ofNullable(this.peerId);
    }

    /**
     * The name assigned to the peer cluster. The `peer_name` is used to reference the peer cluster in service discovery queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
     * 
     */
    @Import(name="peerName")
    private @Nullable Output<String> peerName;

    /**
     * @return The name assigned to the peer cluster. The `peer_name` is used to reference the peer cluster in service discovery queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
     * 
     */
    public Optional<Output<String>> peerName() {
        return Optional.ofNullable(this.peerName);
    }

    @Import(name="peerServerAddresses")
    private @Nullable Output<List<String>> peerServerAddresses;

    public Optional<Output<List<String>>> peerServerAddresses() {
        return Optional.ofNullable(this.peerServerAddresses);
    }

    @Import(name="peerServerName")
    private @Nullable Output<String> peerServerName;

    public Optional<Output<String>> peerServerName() {
        return Optional.ofNullable(this.peerServerName);
    }

    /**
     * The peering token fetched from the peer cluster.
     * 
     */
    @Import(name="peeringToken")
    private @Nullable Output<String> peeringToken;

    /**
     * @return The peering token fetched from the peer cluster.
     * 
     */
    public Optional<Output<String>> peeringToken() {
        return Optional.ofNullable(this.peeringToken);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private PeeringState() {}

    private PeeringState(PeeringState $) {
        this.deletedAt = $.deletedAt;
        this.meta = $.meta;
        this.partition = $.partition;
        this.peerCaPems = $.peerCaPems;
        this.peerId = $.peerId;
        this.peerName = $.peerName;
        this.peerServerAddresses = $.peerServerAddresses;
        this.peerServerName = $.peerServerName;
        this.peeringToken = $.peeringToken;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PeeringState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PeeringState $;

        public Builder() {
            $ = new PeeringState();
        }

        public Builder(PeeringState defaults) {
            $ = new PeeringState(Objects.requireNonNull(defaults));
        }

        public Builder deletedAt(@Nullable Output<String> deletedAt) {
            $.deletedAt = deletedAt;
            return this;
        }

        public Builder deletedAt(String deletedAt) {
            return deletedAt(Output.of(deletedAt));
        }

        /**
         * @param meta Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the cluster peering process.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<Map<String,String>> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the cluster peering process.
         * 
         * @return builder
         * 
         */
        public Builder meta(Map<String,String> meta) {
            return meta(Output.of(meta));
        }

        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        public Builder peerCaPems(@Nullable Output<List<String>> peerCaPems) {
            $.peerCaPems = peerCaPems;
            return this;
        }

        public Builder peerCaPems(List<String> peerCaPems) {
            return peerCaPems(Output.of(peerCaPems));
        }

        public Builder peerCaPems(String... peerCaPems) {
            return peerCaPems(List.of(peerCaPems));
        }

        public Builder peerId(@Nullable Output<String> peerId) {
            $.peerId = peerId;
            return this;
        }

        public Builder peerId(String peerId) {
            return peerId(Output.of(peerId));
        }

        /**
         * @param peerName The name assigned to the peer cluster. The `peer_name` is used to reference the peer cluster in service discovery queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
         * 
         * @return builder
         * 
         */
        public Builder peerName(@Nullable Output<String> peerName) {
            $.peerName = peerName;
            return this;
        }

        /**
         * @param peerName The name assigned to the peer cluster. The `peer_name` is used to reference the peer cluster in service discovery queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
         * 
         * @return builder
         * 
         */
        public Builder peerName(String peerName) {
            return peerName(Output.of(peerName));
        }

        public Builder peerServerAddresses(@Nullable Output<List<String>> peerServerAddresses) {
            $.peerServerAddresses = peerServerAddresses;
            return this;
        }

        public Builder peerServerAddresses(List<String> peerServerAddresses) {
            return peerServerAddresses(Output.of(peerServerAddresses));
        }

        public Builder peerServerAddresses(String... peerServerAddresses) {
            return peerServerAddresses(List.of(peerServerAddresses));
        }

        public Builder peerServerName(@Nullable Output<String> peerServerName) {
            $.peerServerName = peerServerName;
            return this;
        }

        public Builder peerServerName(String peerServerName) {
            return peerServerName(Output.of(peerServerName));
        }

        /**
         * @param peeringToken The peering token fetched from the peer cluster.
         * 
         * @return builder
         * 
         */
        public Builder peeringToken(@Nullable Output<String> peeringToken) {
            $.peeringToken = peeringToken;
            return this;
        }

        /**
         * @param peeringToken The peering token fetched from the peer cluster.
         * 
         * @return builder
         * 
         */
        public Builder peeringToken(String peeringToken) {
            return peeringToken(Output.of(peeringToken));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public PeeringState build() {
            return $;
        }
    }

}
