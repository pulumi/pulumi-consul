// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.consul;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class NamespacePolicyAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespacePolicyAttachmentArgs Empty = new NamespacePolicyAttachmentArgs();

    /**
     * The namespace to attach the policy to.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The namespace to attach the policy to.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The name of the policy attached to the namespace.
     * 
     */
    @Import(name="policy", required=true)
    private Output<String> policy;

    /**
     * @return The name of the policy attached to the namespace.
     * 
     */
    public Output<String> policy() {
        return this.policy;
    }

    private NamespacePolicyAttachmentArgs() {}

    private NamespacePolicyAttachmentArgs(NamespacePolicyAttachmentArgs $) {
        this.namespace = $.namespace;
        this.policy = $.policy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespacePolicyAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespacePolicyAttachmentArgs $;

        public Builder() {
            $ = new NamespacePolicyAttachmentArgs();
        }

        public Builder(NamespacePolicyAttachmentArgs defaults) {
            $ = new NamespacePolicyAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespace The namespace to attach the policy to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to attach the policy to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param policy The name of the policy attached to the namespace.
         * 
         * @return builder
         * 
         */
        public Builder policy(Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy The name of the policy attached to the namespace.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        public NamespacePolicyAttachmentArgs build() {
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("NamespacePolicyAttachmentArgs", "namespace");
            }
            if ($.policy == null) {
                throw new MissingRequiredPropertyException("NamespacePolicyAttachmentArgs", "policy");
            }
            return $;
        }
    }

}
