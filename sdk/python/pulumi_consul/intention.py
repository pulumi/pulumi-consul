# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Intention(pulumi.CustomResource):
    action: pulumi.Output[str]
    """
    The intention action. Must be one of `allow` or `deny`.
    """
    description: pulumi.Output[str]
    """
    Optional description that can be used by Consul
    tooling, but is not used internally.
    """
    destination_name: pulumi.Output[str]
    """
    The name of the destination service for the intention. This
    service does not have to exist.
    """
    destination_namespace: pulumi.Output[str]
    """
    The destination
    namespace of the intention.
    """
    meta: pulumi.Output[dict]
    """
    Key/value pairs that are opaque to Consul and are associated
    with the intention.
    """
    source_name: pulumi.Output[str]
    """
    The name of the source service for the intention. This
    service does not have to exist.
    """
    source_namespace: pulumi.Output[str]
    """
    The source namespace of the
    intention.
    """
    def __init__(__self__, resource_name, opts=None, action=None, description=None, destination_name=None, destination_namespace=None, meta=None, source_name=None, source_namespace=None, __props__=None, __name__=None, __opts__=None):
        """
        [Intentions](https://www.consul.io/docs/connect/intentions.html) are used to define
        rules for which services may connect to one another when using [Consul Connect](https://www.consul.io/docs/connect/index.html).

        It is appropriate to either reference existing services or specify non-existent services
        that will be created in the future when creating intentions. This resource can be used
        in conjunction with the `.Service` datasource when referencing services
        registered on nodes that have a running Consul agent.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_consul as consul

        database = consul.Intention("database",
            action="allow",
            destination_name="db",
            source_name="api")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: The intention action. Must be one of `allow` or `deny`.
        :param pulumi.Input[str] description: Optional description that can be used by Consul
               tooling, but is not used internally.
        :param pulumi.Input[str] destination_name: The name of the destination service for the intention. This
               service does not have to exist.
        :param pulumi.Input[str] destination_namespace: The destination
               namespace of the intention.
        :param pulumi.Input[dict] meta: Key/value pairs that are opaque to Consul and are associated
               with the intention.
        :param pulumi.Input[str] source_name: The name of the source service for the intention. This
               service does not have to exist.
        :param pulumi.Input[str] source_namespace: The source namespace of the
               intention.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if action is None:
                raise TypeError("Missing required property 'action'")
            __props__['action'] = action
            __props__['description'] = description
            if destination_name is None:
                raise TypeError("Missing required property 'destination_name'")
            __props__['destination_name'] = destination_name
            __props__['destination_namespace'] = destination_namespace
            __props__['meta'] = meta
            if source_name is None:
                raise TypeError("Missing required property 'source_name'")
            __props__['source_name'] = source_name
            __props__['source_namespace'] = source_namespace
        super(Intention, __self__).__init__(
            'consul:index/intention:Intention',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, action=None, description=None, destination_name=None, destination_namespace=None, meta=None, source_name=None, source_namespace=None):
        """
        Get an existing Intention resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: The intention action. Must be one of `allow` or `deny`.
        :param pulumi.Input[str] description: Optional description that can be used by Consul
               tooling, but is not used internally.
        :param pulumi.Input[str] destination_name: The name of the destination service for the intention. This
               service does not have to exist.
        :param pulumi.Input[str] destination_namespace: The destination
               namespace of the intention.
        :param pulumi.Input[dict] meta: Key/value pairs that are opaque to Consul and are associated
               with the intention.
        :param pulumi.Input[str] source_name: The name of the source service for the intention. This
               service does not have to exist.
        :param pulumi.Input[str] source_namespace: The source namespace of the
               intention.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["action"] = action
        __props__["description"] = description
        __props__["destination_name"] = destination_name
        __props__["destination_namespace"] = destination_namespace
        __props__["meta"] = meta
        __props__["source_name"] = source_name
        __props__["source_namespace"] = source_namespace
        return Intention(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

