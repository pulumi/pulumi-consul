# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['License']


class License(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        > **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).

        The `License` resource provides datacenter-level management of
        the Consul Enterprise license. If ACLs are enabled then a token with operator
        privileges may be required in order to use this command.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_consul as consul

        license = consul.License("license", license=(lambda path: open(path).read())("license.hclic"))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] datacenter: The datacenter to use. This overrides the
               agent's default datacenter and the datacenter in the provider setup.
        :param pulumi.Input[str] license: The Consul license to use.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['datacenter'] = datacenter
            if license is None and not opts.urn:
                raise TypeError("Missing required property 'license'")
            __props__['license'] = license
            __props__['customer_id'] = None
            __props__['expiration_time'] = None
            __props__['features'] = None
            __props__['installation_id'] = None
            __props__['issue_time'] = None
            __props__['license_id'] = None
            __props__['product'] = None
            __props__['start_time'] = None
            __props__['valid'] = None
            __props__['warnings'] = None
        super(License, __self__).__init__(
            'consul:index/license:License',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            customer_id: Optional[pulumi.Input[str]] = None,
            datacenter: Optional[pulumi.Input[str]] = None,
            expiration_time: Optional[pulumi.Input[str]] = None,
            features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            installation_id: Optional[pulumi.Input[str]] = None,
            issue_time: Optional[pulumi.Input[str]] = None,
            license: Optional[pulumi.Input[str]] = None,
            license_id: Optional[pulumi.Input[str]] = None,
            product: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            valid: Optional[pulumi.Input[bool]] = None,
            warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'License':
        """
        Get an existing License resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] customer_id: The ID of the customer the license is attached to.
        :param pulumi.Input[str] datacenter: The datacenter to use. This overrides the
               agent's default datacenter and the datacenter in the provider setup.
        :param pulumi.Input[str] expiration_time: The expiration time of the license.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: The features for which the license is valid.
        :param pulumi.Input[str] installation_id: The ID of the current installation.
        :param pulumi.Input[str] issue_time: The date the license was issued.
        :param pulumi.Input[str] license: The Consul license to use.
        :param pulumi.Input[str] license_id: The ID of the license used.
        :param pulumi.Input[str] product: The product for which the license is valid.
        :param pulumi.Input[str] start_time: The start time of the license.
        :param pulumi.Input[bool] valid: Whether the license is valid.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] warnings: A list of warning messages regarding the license validity.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["customer_id"] = customer_id
        __props__["datacenter"] = datacenter
        __props__["expiration_time"] = expiration_time
        __props__["features"] = features
        __props__["installation_id"] = installation_id
        __props__["issue_time"] = issue_time
        __props__["license"] = license
        __props__["license_id"] = license_id
        __props__["product"] = product
        __props__["start_time"] = start_time
        __props__["valid"] = valid
        __props__["warnings"] = warnings
        return License(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> pulumi.Output[str]:
        """
        The ID of the customer the license is attached to.
        """
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[Optional[str]]:
        """
        The datacenter to use. This overrides the
        agent's default datacenter and the datacenter in the provider setup.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> pulumi.Output[str]:
        """
        The expiration time of the license.
        """
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter
    def features(self) -> pulumi.Output[Sequence[str]]:
        """
        The features for which the license is valid.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="installationId")
    def installation_id(self) -> pulumi.Output[str]:
        """
        The ID of the current installation.
        """
        return pulumi.get(self, "installation_id")

    @property
    @pulumi.getter(name="issueTime")
    def issue_time(self) -> pulumi.Output[str]:
        """
        The date the license was issued.
        """
        return pulumi.get(self, "issue_time")

    @property
    @pulumi.getter
    def license(self) -> pulumi.Output[str]:
        """
        The Consul license to use.
        """
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> pulumi.Output[str]:
        """
        The ID of the license used.
        """
        return pulumi.get(self, "license_id")

    @property
    @pulumi.getter
    def product(self) -> pulumi.Output[str]:
        """
        The product for which the license is valid.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        The start time of the license.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def valid(self) -> pulumi.Output[bool]:
        """
        Whether the license is valid.
        """
        return pulumi.get(self, "valid")

    @property
    @pulumi.getter
    def warnings(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of warning messages regarding the license validity.
        """
        return pulumi.get(self, "warnings")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

