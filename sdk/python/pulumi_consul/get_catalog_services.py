# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetCatalogServicesResult:
    """
    A collection of values returned by getCatalogServices.
    """
    def __init__(__self__, datacenter=None, id=None, names=None, query_options=None, services=None):
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        __self__.datacenter = datacenter
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        __self__.names = names
        if query_options and not isinstance(query_options, list):
            raise TypeError("Expected argument 'query_options' to be a list")
        __self__.query_options = query_options
        if services and not isinstance(services, dict):
            raise TypeError("Expected argument 'services' to be a dict")
        __self__.services = services
class AwaitableGetCatalogServicesResult(GetCatalogServicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCatalogServicesResult(
            datacenter=self.datacenter,
            id=self.id,
            names=self.names,
            query_options=self.query_options,
            services=self.services)

def get_catalog_services(query_options=None,opts=None):
    """
    Use this data source to access information about an existing resource.


    The **query_options** object supports the following:

      * `allowStale` (`bool`)
      * `datacenter` (`str`)
      * `namespace` (`str`)
      * `near` (`str`)
      * `node_meta` (`dict`)
      * `requireConsistent` (`bool`)
      * `token` (`str`)
      * `waitIndex` (`float`)
      * `waitTime` (`str`)
    """
    __args__ = dict()


    __args__['queryOptions'] = query_options
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('consul:index/getCatalogServices:getCatalogServices', __args__, opts=opts).value

    return AwaitableGetCatalogServicesResult(
        datacenter=__ret__.get('datacenter'),
        id=__ret__.get('id'),
        names=__ret__.get('names'),
        query_options=__ret__.get('queryOptions'),
        services=__ret__.get('services'))
