# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AclAuthMethodNamespaceRule',
    'AclRoleNodeIdentity',
    'AclRoleServiceIdentity',
    'AclTokenNodeIdentity',
    'AclTokenServiceIdentity',
    'CatalogEntryService',
    'KeyPrefixSubkeyCollection',
    'KeysKey',
    'PreparedQueryDns',
    'PreparedQueryFailover',
    'PreparedQueryFailoverTarget',
    'PreparedQueryTemplate',
    'ServiceCheck',
    'ServiceCheckHeader',
    'GetAclAuthMethodNamespaceRuleResult',
    'GetAclRoleNodeIdentityResult',
    'GetAclRolePolicyResult',
    'GetAclRoleServiceIdentityResult',
    'GetAclTokenNodeIdentityResult',
    'GetAclTokenPolicyResult',
    'GetAclTokenRoleResult',
    'GetAclTokenServiceIdentityResult',
    'GetAutopilotHealthServerResult',
    'GetCatalogNodesNodeResult',
    'GetCatalogNodesQueryOptionResult',
    'GetCatalogServiceQueryOptionResult',
    'GetCatalogServiceServiceResult',
    'GetCatalogServicesQueryOptionResult',
    'GetKeyPrefixSubkeyCollectionResult',
    'GetKeysKeyResult',
    'GetNetworkAreaMembersMemberResult',
    'GetNodesNodeResult',
    'GetNodesQueryOptionResult',
    'GetPeeringsPeerResult',
    'GetServiceHealthResultResult',
    'GetServiceHealthResultCheckResult',
    'GetServiceHealthResultNodeResult',
    'GetServiceHealthResultServiceResult',
    'GetServiceQueryOptionResult',
    'GetServiceServiceResult',
    'GetServicesQueryOptionResult',
]

@pulumi.output_type
class AclAuthMethodNamespaceRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bindNamespace":
            suggest = "bind_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclAuthMethodNamespaceRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclAuthMethodNamespaceRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclAuthMethodNamespaceRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bind_namespace: str,
                 selector: Optional[str] = None):
        """
        :param str bind_namespace: If the namespace rule's `selector` matches then
               this is used to control the namespace where the token is created.
        :param str selector: Specifies the expression used to match this namespace
               rule against valid identities returned from an auth method validation.
               Defaults to `""`.
        """
        pulumi.set(__self__, "bind_namespace", bind_namespace)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="bindNamespace")
    def bind_namespace(self) -> str:
        """
        If the namespace rule's `selector` matches then
        this is used to control the namespace where the token is created.
        """
        return pulumi.get(self, "bind_namespace")

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        """
        Specifies the expression used to match this namespace
        rule against valid identities returned from an auth method validation.
        Defaults to `""`.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class AclRoleNodeIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeName":
            suggest = "node_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclRoleNodeIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclRoleNodeIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclRoleNodeIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: str,
                 node_name: str):
        """
        :param str datacenter: The datacenter of the node.
        :param str node_name: The name of the node.
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        """
        The datacenter of the node.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        """
        The name of the node.
        """
        return pulumi.get(self, "node_name")


@pulumi.output_type
class AclRoleServiceIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclRoleServiceIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclRoleServiceIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclRoleServiceIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: str,
                 datacenters: Optional[Sequence[str]] = None):
        """
        :param str service_name: The name of the service.
        :param Sequence[str] datacenters: The datacenters the effective policy is valid within.
        """
        pulumi.set(__self__, "service_name", service_name)
        if datacenters is not None:
            pulumi.set(__self__, "datacenters", datacenters)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def datacenters(self) -> Optional[Sequence[str]]:
        """
        The datacenters the effective policy is valid within.
        """
        return pulumi.get(self, "datacenters")


@pulumi.output_type
class AclTokenNodeIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeName":
            suggest = "node_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclTokenNodeIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclTokenNodeIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclTokenNodeIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: str,
                 node_name: str):
        """
        :param str datacenter: The datacenter of the node.
        :param str node_name: The name of the node.
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        """
        The datacenter of the node.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        """
        The name of the node.
        """
        return pulumi.get(self, "node_name")


@pulumi.output_type
class AclTokenServiceIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclTokenServiceIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclTokenServiceIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclTokenServiceIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: str,
                 datacenters: Optional[Sequence[str]] = None):
        """
        :param str service_name: The name of the service.
        :param Sequence[str] datacenters: The list of datacenters the policy is valid within.
        """
        pulumi.set(__self__, "service_name", service_name)
        if datacenters is not None:
            pulumi.set(__self__, "datacenters", datacenters)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def datacenters(self) -> Optional[Sequence[str]]:
        """
        The list of datacenters the policy is valid within.
        """
        return pulumi.get(self, "datacenters")


@pulumi.output_type
class CatalogEntryService(dict):
    def __init__(__self__, *,
                 name: str,
                 address: Optional[str] = None,
                 id: Optional[str] = None,
                 port: Optional[int] = None,
                 tags: Optional[Sequence[str]] = None):
        """
        :param str name: The name of the service
        :param str address: The address of the service. Defaults to the
               node address.
        :param str id: The ID of the service. Defaults to the `name`.
        :param int port: The port of the service.
        :param Sequence[str] tags: A list of values that are opaque to Consul,
               but can be used to distinguish between services or nodes.
        """
        pulumi.set(__self__, "name", name)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        The address of the service. Defaults to the
        node address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the service. Defaults to the `name`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port of the service.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        A list of values that are opaque to Consul,
        but can be used to distinguish between services or nodes.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class KeyPrefixSubkeyCollection(dict):
    def __init__(__self__, *,
                 path: str,
                 value: str,
                 flags: Optional[int] = None):
        """
        :param str path: This is the path (which will be appended to the given
               `path_prefix`) in Consul that should be written to.
        :param str value: The value to write to the given path.
        :param int flags: An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
               to attach to the key (defaults to 0).
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "value", value)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        This is the path (which will be appended to the given
        `path_prefix`) in Consul that should be written to.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value to write to the given path.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
        to attach to the key (defaults to 0).
        """
        return pulumi.get(self, "flags")


@pulumi.output_type
class KeysKey(dict):
    def __init__(__self__, *,
                 path: str,
                 default: Optional[str] = None,
                 delete: Optional[bool] = None,
                 flags: Optional[int] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str path: This is the path in Consul that should be written to.
        :param bool delete: If true, then the key will be deleted when
               either its configuration block is removed from the configuration or
               the entire resource is destroyed. Otherwise, it will be left in Consul.
               Defaults to false.
        :param int flags: An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
               to attach to the key (defaults to 0).
        :param str value: The value to write to the given path.
        """
        pulumi.set(__self__, "path", path)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        This is the path in Consul that should be written to.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def delete(self) -> Optional[bool]:
        """
        If true, then the key will be deleted when
        either its configuration block is removed from the configuration or
        the entire resource is destroyed. Otherwise, it will be left in Consul.
        Defaults to false.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
        to attach to the key (defaults to 0).
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        warnings.warn("""Using consul_keys resource to *read* is deprecated; please use consul_keys data source instead""", DeprecationWarning)
        pulumi.log.warn("""name is deprecated: Using consul_keys resource to *read* is deprecated; please use consul_keys data source instead""")

        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value to write to the given path.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PreparedQueryDns(dict):
    def __init__(__self__, *,
                 ttl: Optional[str] = None):
        """
        :param str ttl: The TTL to send when returning DNS results.
        """
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        """
        The TTL to send when returning DNS results.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class PreparedQueryFailover(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nearestN":
            suggest = "nearest_n"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PreparedQueryFailover. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PreparedQueryFailover.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PreparedQueryFailover.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenters: Optional[Sequence[str]] = None,
                 nearest_n: Optional[int] = None,
                 targets: Optional[Sequence['outputs.PreparedQueryFailoverTarget']] = None):
        """
        :param Sequence[str] datacenters: Remote datacenters to return results from.
        :param int nearest_n: Return results from this many datacenters, sorted in ascending order of estimated RTT.
        :param Sequence['PreparedQueryFailoverTargetArgs'] targets: Specifies a sequential list of remote datacenters and cluster peers to failover to if there are no healthy service instances in the local datacenter. This option cannot be used with `nearest_n` or `datacenters`.
        """
        if datacenters is not None:
            pulumi.set(__self__, "datacenters", datacenters)
        if nearest_n is not None:
            pulumi.set(__self__, "nearest_n", nearest_n)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def datacenters(self) -> Optional[Sequence[str]]:
        """
        Remote datacenters to return results from.
        """
        return pulumi.get(self, "datacenters")

    @property
    @pulumi.getter(name="nearestN")
    def nearest_n(self) -> Optional[int]:
        """
        Return results from this many datacenters, sorted in ascending order of estimated RTT.
        """
        return pulumi.get(self, "nearest_n")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.PreparedQueryFailoverTarget']]:
        """
        Specifies a sequential list of remote datacenters and cluster peers to failover to if there are no healthy service instances in the local datacenter. This option cannot be used with `nearest_n` or `datacenters`.
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class PreparedQueryFailoverTarget(dict):
    def __init__(__self__, *,
                 datacenter: Optional[str] = None,
                 peer: Optional[str] = None):
        """
        :param str datacenter: The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def peer(self) -> Optional[str]:
        return pulumi.get(self, "peer")


@pulumi.output_type
class PreparedQueryTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "removeEmptyTags":
            suggest = "remove_empty_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PreparedQueryTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PreparedQueryTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PreparedQueryTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 regexp: str,
                 type: str,
                 remove_empty_tags: Optional[bool] = None):
        """
        :param str regexp: The regular expression to match with. When using `name_prefix_match`, this regex is applied against the query name.
        :param str type: The type of template matching to perform. Currently only `name_prefix_match` is supported.
        :param bool remove_empty_tags: If set to true, will cause the tags list inside the service structure to be stripped of any empty strings.
        """
        pulumi.set(__self__, "regexp", regexp)
        pulumi.set(__self__, "type", type)
        if remove_empty_tags is not None:
            pulumi.set(__self__, "remove_empty_tags", remove_empty_tags)

    @property
    @pulumi.getter
    def regexp(self) -> str:
        """
        The regular expression to match with. When using `name_prefix_match`, this regex is applied against the query name.
        """
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of template matching to perform. Currently only `name_prefix_match` is supported.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="removeEmptyTags")
    def remove_empty_tags(self) -> Optional[bool]:
        """
        If set to true, will cause the tags list inside the service structure to be stripped of any empty strings.
        """
        return pulumi.get(self, "remove_empty_tags")


@pulumi.output_type
class ServiceCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkId":
            suggest = "check_id"
        elif key == "deregisterCriticalServiceAfter":
            suggest = "deregister_critical_service_after"
        elif key == "tlsSkipVerify":
            suggest = "tls_skip_verify"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_id: str,
                 interval: str,
                 name: str,
                 timeout: str,
                 deregister_critical_service_after: Optional[str] = None,
                 headers: Optional[Sequence['outputs.ServiceCheckHeader']] = None,
                 http: Optional[str] = None,
                 method: Optional[str] = None,
                 notes: Optional[str] = None,
                 status: Optional[str] = None,
                 tcp: Optional[str] = None,
                 tls_skip_verify: Optional[bool] = None):
        """
        :param str check_id: An ID, *unique per agent*. Will default to *name*
               if not set.
        :param str interval: The interval to wait between each health-check
               invocation.
        :param str name: The name of the health-check.
        :param str timeout: Specifies a timeout for outgoing connections in
               the case of a HTTP or TCP check.
        :param str deregister_critical_service_after: The time after which
               the service is automatically deregistered when in the `critical` state.
               Defaults to `30s`.
        :param Sequence['ServiceCheckHeaderArgs'] headers: The headers to send for an HTTP check.
               The attributes of each header is given below.
        :param str http: The HTTP endpoint to call for an HTTP check.
        :param str method: The method to use for HTTP health-checks. Defaults
               to `GET`.
        :param str notes: An opaque field meant to hold human readable text.
        :param str status: The initial health-check status.
        :param str tcp: The TCP address and port to connect to for a TCP check.
        :param bool tls_skip_verify: Whether to deactivate certificate
               verification for HTTP health-checks. Defaults to `false`.
        """
        pulumi.set(__self__, "check_id", check_id)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "timeout", timeout)
        if deregister_critical_service_after is not None:
            pulumi.set(__self__, "deregister_critical_service_after", deregister_critical_service_after)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if tls_skip_verify is not None:
            pulumi.set(__self__, "tls_skip_verify", tls_skip_verify)

    @property
    @pulumi.getter(name="checkId")
    def check_id(self) -> str:
        """
        An ID, *unique per agent*. Will default to *name*
        if not set.
        """
        return pulumi.get(self, "check_id")

    @property
    @pulumi.getter
    def interval(self) -> str:
        """
        The interval to wait between each health-check
        invocation.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the health-check.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        """
        Specifies a timeout for outgoing connections in
        the case of a HTTP or TCP check.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="deregisterCriticalServiceAfter")
    def deregister_critical_service_after(self) -> Optional[str]:
        """
        The time after which
        the service is automatically deregistered when in the `critical` state.
        Defaults to `30s`.
        """
        return pulumi.get(self, "deregister_critical_service_after")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.ServiceCheckHeader']]:
        """
        The headers to send for an HTTP check.
        The attributes of each header is given below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def http(self) -> Optional[str]:
        """
        The HTTP endpoint to call for an HTTP check.
        """
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        The method to use for HTTP health-checks. Defaults
        to `GET`.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        An opaque field meant to hold human readable text.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The initial health-check status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tcp(self) -> Optional[str]:
        """
        The TCP address and port to connect to for a TCP check.
        """
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter(name="tlsSkipVerify")
    def tls_skip_verify(self) -> Optional[bool]:
        """
        Whether to deactivate certificate
        verification for HTTP health-checks. Defaults to `false`.
        """
        return pulumi.get(self, "tls_skip_verify")


@pulumi.output_type
class ServiceCheckHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The name of the header.
        :param Sequence[str] values: The header's list of values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the header.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The header's list of values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAclAuthMethodNamespaceRuleResult(dict):
    def __init__(__self__, *,
                 bind_namespace: str,
                 selector: str):
        pulumi.set(__self__, "bind_namespace", bind_namespace)
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="bindNamespace")
    def bind_namespace(self) -> str:
        return pulumi.get(self, "bind_namespace")

    @property
    @pulumi.getter
    def selector(self) -> str:
        return pulumi.get(self, "selector")


@pulumi.output_type
class GetAclRoleNodeIdentityResult(dict):
    def __init__(__self__, *,
                 datacenter: str,
                 node_name: str):
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        return pulumi.get(self, "node_name")


@pulumi.output_type
class GetAclRolePolicyResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str name: The name of the ACL Role.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ACL Role.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAclRoleServiceIdentityResult(dict):
    def __init__(__self__, *,
                 datacenters: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if datacenters is not None:
            pulumi.set(__self__, "datacenters", datacenters)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def datacenters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "datacenters")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetAclTokenNodeIdentityResult(dict):
    def __init__(__self__, *,
                 datacenter: str,
                 node_name: str):
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        return pulumi.get(self, "node_name")


@pulumi.output_type
class GetAclTokenPolicyResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAclTokenRoleResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAclTokenServiceIdentityResult(dict):
    def __init__(__self__, *,
                 datacenters: Sequence[str],
                 service_name: str):
        pulumi.set(__self__, "datacenters", datacenters)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def datacenters(self) -> Sequence[str]:
        return pulumi.get(self, "datacenters")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetAutopilotHealthServerResult(dict):
    def __init__(__self__, *,
                 address: str,
                 healthy: bool,
                 id: str,
                 last_contact: str,
                 last_index: int,
                 last_term: int,
                 leader: bool,
                 name: str,
                 serf_status: str,
                 stable_since: str,
                 version: str,
                 voter: bool):
        """
        :param str address: The address of the server
        :param bool healthy: Whether the server is healthy according to the current Autopilot
               configuration
        :param str id: The Raft ID of the server
        :param str last_contact: The time elapsed since the server's last contact with
               the leader
        :param int last_index: The index of the server's last committed Raft log entry
        :param int last_term: The server's last known Raft leader term
        :param bool leader: Whether the server is currently leader
        :param str name: The node name of the server
        :param str serf_status: The status of the SerfHealth check of the server
        :param str stable_since: The time this server has been in its current ``Healthy``
               state
        :param str version: The Consul version of the server
        :param bool voter: Whether the server is a voting member of the Raft cluster
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_contact", last_contact)
        pulumi.set(__self__, "last_index", last_index)
        pulumi.set(__self__, "last_term", last_term)
        pulumi.set(__self__, "leader", leader)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serf_status", serf_status)
        pulumi.set(__self__, "stable_since", stable_since)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "voter", voter)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of the server
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        """
        Whether the server is healthy according to the current Autopilot
        configuration
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Raft ID of the server
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastContact")
    def last_contact(self) -> str:
        """
        The time elapsed since the server's last contact with
        the leader
        """
        return pulumi.get(self, "last_contact")

    @property
    @pulumi.getter(name="lastIndex")
    def last_index(self) -> int:
        """
        The index of the server's last committed Raft log entry
        """
        return pulumi.get(self, "last_index")

    @property
    @pulumi.getter(name="lastTerm")
    def last_term(self) -> int:
        """
        The server's last known Raft leader term
        """
        return pulumi.get(self, "last_term")

    @property
    @pulumi.getter
    def leader(self) -> bool:
        """
        Whether the server is currently leader
        """
        return pulumi.get(self, "leader")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The node name of the server
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serfStatus")
    def serf_status(self) -> str:
        """
        The status of the SerfHealth check of the server
        """
        return pulumi.get(self, "serf_status")

    @property
    @pulumi.getter(name="stableSince")
    def stable_since(self) -> str:
        """
        The time this server has been in its current ``Healthy``
        state
        """
        return pulumi.get(self, "stable_since")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The Consul version of the server
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def voter(self) -> bool:
        """
        Whether the server is a voting member of the Raft cluster
        """
        return pulumi.get(self, "voter")


@pulumi.output_type
class GetCatalogNodesNodeResult(dict):
    def __init__(__self__, *,
                 address: str,
                 id: str,
                 meta: Mapping[str, str],
                 name: str,
                 tagged_addresses: Mapping[str, str]):
        """
        :param str id: The Node ID of the Consul agent.
               * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta
               data tag information, if any.
               * [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name
               of the Consul node.
               * [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The
               IP address the node is advertising to the Consul cluster.
               * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
               List of explicit LAN and WAN IP addresses for the agent.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "meta", meta)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tagged_addresses", tagged_addresses)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Node ID of the Consul agent.
        * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta
        data tag information, if any.
        * [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name
        of the Consul node.
        * [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The
        IP address the node is advertising to the Consul cluster.
        * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
        List of explicit LAN and WAN IP addresses for the agent.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def meta(self) -> Mapping[str, str]:
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="taggedAddresses")
    def tagged_addresses(self) -> Mapping[str, str]:
        return pulumi.get(self, "tagged_addresses")


@pulumi.output_type
class GetCatalogNodesQueryOptionResult(dict):
    def __init__(__self__, *,
                 allow_stale: Optional[bool] = None,
                 datacenter: Optional[str] = None,
                 near: Optional[str] = None,
                 node_meta: Optional[Mapping[str, str]] = None,
                 partition: Optional[str] = None,
                 require_consistent: Optional[bool] = None,
                 token: Optional[str] = None,
                 wait_index: Optional[int] = None,
                 wait_time: Optional[str] = None):
        """
        :param bool allow_stale: When `true`, the default, allow responses from
               Consul servers that are followers.
        :param str datacenter: The Consul datacenter to query.  Defaults to the
               same value found in `query_options` parameter specified below, or if that is
               empty, the `datacenter` value found in the Consul agent that this provider is
               configured to talk to then the datacenter in the provider setup.
        :param bool require_consistent: When `true` force the client to perform a
               read on at least quorum servers and verify the result is the same.  Defaults
               to `false`.
        :param str token: Specify the Consul ACL token to use when performing the
               request.  This defaults to the same API token configured by the `consul`
               provider but may be overridden if necessary.
        :param int wait_index: Index number used to enable blocking queries.
        :param str wait_time: Max time the client should wait for a blocking query
               to return.
        """
        if allow_stale is not None:
            pulumi.set(__self__, "allow_stale", allow_stale)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if near is not None:
            pulumi.set(__self__, "near", near)
        if node_meta is not None:
            pulumi.set(__self__, "node_meta", node_meta)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if require_consistent is not None:
            pulumi.set(__self__, "require_consistent", require_consistent)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if wait_index is not None:
            pulumi.set(__self__, "wait_index", wait_index)
        if wait_time is not None:
            pulumi.set(__self__, "wait_time", wait_time)

    @property
    @pulumi.getter(name="allowStale")
    def allow_stale(self) -> Optional[bool]:
        """
        When `true`, the default, allow responses from
        Consul servers that are followers.
        """
        return pulumi.get(self, "allow_stale")

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        The Consul datacenter to query.  Defaults to the
        same value found in `query_options` parameter specified below, or if that is
        empty, the `datacenter` value found in the Consul agent that this provider is
        configured to talk to then the datacenter in the provider setup.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def near(self) -> Optional[str]:
        return pulumi.get(self, "near")

    @property
    @pulumi.getter(name="nodeMeta")
    def node_meta(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_meta")

    @property
    @pulumi.getter
    def partition(self) -> Optional[str]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="requireConsistent")
    def require_consistent(self) -> Optional[bool]:
        """
        When `true` force the client to perform a
        read on at least quorum servers and verify the result is the same.  Defaults
        to `false`.
        """
        return pulumi.get(self, "require_consistent")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Specify the Consul ACL token to use when performing the
        request.  This defaults to the same API token configured by the `consul`
        provider but may be overridden if necessary.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="waitIndex")
    def wait_index(self) -> Optional[int]:
        """
        Index number used to enable blocking queries.
        """
        return pulumi.get(self, "wait_index")

    @property
    @pulumi.getter(name="waitTime")
    def wait_time(self) -> Optional[str]:
        """
        Max time the client should wait for a blocking query
        to return.
        """
        return pulumi.get(self, "wait_time")


@pulumi.output_type
class GetCatalogServiceQueryOptionResult(dict):
    def __init__(__self__, *,
                 allow_stale: Optional[bool] = None,
                 datacenter: Optional[str] = None,
                 namespace: Optional[str] = None,
                 near: Optional[str] = None,
                 node_meta: Optional[Mapping[str, str]] = None,
                 partition: Optional[str] = None,
                 require_consistent: Optional[bool] = None,
                 token: Optional[str] = None,
                 wait_index: Optional[int] = None,
                 wait_time: Optional[str] = None):
        """
        :param bool allow_stale: When `true`, the default, allow responses from
               Consul servers that are followers.
        :param str datacenter: The Consul datacenter to query.  Defaults to the
               same value found in `query_options` parameter specified below, or if that is
               empty, the `datacenter` value found in the Consul agent that this provider is
               configured to talk to.
        :param str namespace: The namespace to lookup the service.
        :param bool require_consistent: When `true` force the client to perform a
               read on at least quorum servers and verify the result is the same.  Defaults
               to `false`.
        :param str token: Specify the Consul ACL token to use when performing the
               request.  This defaults to the same API token configured by the `consul`
               provider but may be overridden if necessary.
        :param int wait_index: Index number used to enable blocking queries.
        :param str wait_time: Max time the client should wait for a blocking query
               to return.
        """
        if allow_stale is not None:
            pulumi.set(__self__, "allow_stale", allow_stale)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if near is not None:
            pulumi.set(__self__, "near", near)
        if node_meta is not None:
            pulumi.set(__self__, "node_meta", node_meta)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if require_consistent is not None:
            pulumi.set(__self__, "require_consistent", require_consistent)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if wait_index is not None:
            pulumi.set(__self__, "wait_index", wait_index)
        if wait_time is not None:
            pulumi.set(__self__, "wait_time", wait_time)

    @property
    @pulumi.getter(name="allowStale")
    def allow_stale(self) -> Optional[bool]:
        """
        When `true`, the default, allow responses from
        Consul servers that are followers.
        """
        return pulumi.get(self, "allow_stale")

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        The Consul datacenter to query.  Defaults to the
        same value found in `query_options` parameter specified below, or if that is
        empty, the `datacenter` value found in the Consul agent that this provider is
        configured to talk to.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace to lookup the service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def near(self) -> Optional[str]:
        return pulumi.get(self, "near")

    @property
    @pulumi.getter(name="nodeMeta")
    def node_meta(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_meta")

    @property
    @pulumi.getter
    def partition(self) -> Optional[str]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="requireConsistent")
    def require_consistent(self) -> Optional[bool]:
        """
        When `true` force the client to perform a
        read on at least quorum servers and verify the result is the same.  Defaults
        to `false`.
        """
        return pulumi.get(self, "require_consistent")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Specify the Consul ACL token to use when performing the
        request.  This defaults to the same API token configured by the `consul`
        provider but may be overridden if necessary.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="waitIndex")
    def wait_index(self) -> Optional[int]:
        """
        Index number used to enable blocking queries.
        """
        return pulumi.get(self, "wait_index")

    @property
    @pulumi.getter(name="waitTime")
    def wait_time(self) -> Optional[str]:
        """
        Max time the client should wait for a blocking query
        to return.
        """
        return pulumi.get(self, "wait_time")


@pulumi.output_type
class GetCatalogServiceServiceResult(dict):
    def __init__(__self__, *,
                 address: str,
                 create_index: str,
                 enable_tag_override: str,
                 id: str,
                 meta: Mapping[str, str],
                 modify_index: str,
                 name: str,
                 node_address: str,
                 node_id: str,
                 node_meta: Mapping[str, str],
                 node_name: str,
                 port: str,
                 tagged_addresses: Mapping[str, str],
                 tags: Sequence[str]):
        """
        :param str name: The service name to select.
        :param str node_id: The Node ID of the Consul agent advertising the service.
               * [`node_meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node
               meta data tag information, if any.
               * [`node_name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The
               name of the Consul node.
               * [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -
               The IP address of the service.  If the `ServiceAddress` in the Consul catalog
               is empty, this value is automatically populated with the `node_address` (the
               `Address` in the Consul Catalog).
               * [`enable_tag_override`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -
               Whether service tags can be overridden on this service.
               * [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A
               unique service instance identifier.
               * [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The
               name of the service.
               * [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -
               Port number of the service.
               * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
               List of explicit LAN and WAN IP addresses for the agent.
               * [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -
               List of tags for the service.
               * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta
               data tag information, if any.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "create_index", create_index)
        pulumi.set(__self__, "enable_tag_override", enable_tag_override)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "meta", meta)
        pulumi.set(__self__, "modify_index", modify_index)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_address", node_address)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_meta", node_meta)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "tagged_addresses", tagged_addresses)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="createIndex")
    def create_index(self) -> str:
        return pulumi.get(self, "create_index")

    @property
    @pulumi.getter(name="enableTagOverride")
    def enable_tag_override(self) -> str:
        return pulumi.get(self, "enable_tag_override")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def meta(self) -> Mapping[str, str]:
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter(name="modifyIndex")
    def modify_index(self) -> str:
        return pulumi.get(self, "modify_index")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The service name to select.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeAddress")
    def node_address(self) -> str:
        return pulumi.get(self, "node_address")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        The Node ID of the Consul agent advertising the service.
        * [`node_meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node
        meta data tag information, if any.
        * [`node_name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The
        name of the Consul node.
        * [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -
        The IP address of the service.  If the `ServiceAddress` in the Consul catalog
        is empty, this value is automatically populated with the `node_address` (the
        `Address` in the Consul Catalog).
        * [`enable_tag_override`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -
        Whether service tags can be overridden on this service.
        * [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A
        unique service instance identifier.
        * [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The
        name of the service.
        * [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -
        Port number of the service.
        * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
        List of explicit LAN and WAN IP addresses for the agent.
        * [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -
        List of tags for the service.
        * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta
        data tag information, if any.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="nodeMeta")
    def node_meta(self) -> Mapping[str, str]:
        return pulumi.get(self, "node_meta")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="taggedAddresses")
    def tagged_addresses(self) -> Mapping[str, str]:
        return pulumi.get(self, "tagged_addresses")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetCatalogServicesQueryOptionResult(dict):
    def __init__(__self__, *,
                 allow_stale: Optional[bool] = None,
                 datacenter: Optional[str] = None,
                 namespace: Optional[str] = None,
                 near: Optional[str] = None,
                 node_meta: Optional[Mapping[str, str]] = None,
                 partition: Optional[str] = None,
                 require_consistent: Optional[bool] = None,
                 token: Optional[str] = None,
                 wait_index: Optional[int] = None,
                 wait_time: Optional[str] = None):
        """
        :param bool allow_stale: When `true`, the default, allow responses from
               Consul servers that are followers.
        :param str datacenter: The Consul datacenter to query.  Defaults to the
               same value found in `query_options` parameter specified below, or if that is
               empty, the `datacenter` value found in the Consul agent that this provider is
               configured to talk to.
        :param str namespace: The namespace to lookup the services.
        :param bool require_consistent: When `true` force the client to perform a
               read on at least quorum servers and verify the result is the same.  Defaults
               to `false`.
        :param str token: Specify the Consul ACL token to use when performing the
               request.  This defaults to the same API token configured by the `consul`
               provider but may be overridden if necessary.
        :param int wait_index: Index number used to enable blocking queries.
        :param str wait_time: Max time the client should wait for a blocking query
               to return.
        """
        if allow_stale is not None:
            pulumi.set(__self__, "allow_stale", allow_stale)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if near is not None:
            pulumi.set(__self__, "near", near)
        if node_meta is not None:
            pulumi.set(__self__, "node_meta", node_meta)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if require_consistent is not None:
            pulumi.set(__self__, "require_consistent", require_consistent)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if wait_index is not None:
            pulumi.set(__self__, "wait_index", wait_index)
        if wait_time is not None:
            pulumi.set(__self__, "wait_time", wait_time)

    @property
    @pulumi.getter(name="allowStale")
    def allow_stale(self) -> Optional[bool]:
        """
        When `true`, the default, allow responses from
        Consul servers that are followers.
        """
        return pulumi.get(self, "allow_stale")

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        The Consul datacenter to query.  Defaults to the
        same value found in `query_options` parameter specified below, or if that is
        empty, the `datacenter` value found in the Consul agent that this provider is
        configured to talk to.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace to lookup the services.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def near(self) -> Optional[str]:
        return pulumi.get(self, "near")

    @property
    @pulumi.getter(name="nodeMeta")
    def node_meta(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_meta")

    @property
    @pulumi.getter
    def partition(self) -> Optional[str]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="requireConsistent")
    def require_consistent(self) -> Optional[bool]:
        """
        When `true` force the client to perform a
        read on at least quorum servers and verify the result is the same.  Defaults
        to `false`.
        """
        return pulumi.get(self, "require_consistent")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Specify the Consul ACL token to use when performing the
        request.  This defaults to the same API token configured by the `consul`
        provider but may be overridden if necessary.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="waitIndex")
    def wait_index(self) -> Optional[int]:
        """
        Index number used to enable blocking queries.
        """
        return pulumi.get(self, "wait_index")

    @property
    @pulumi.getter(name="waitTime")
    def wait_time(self) -> Optional[str]:
        """
        Max time the client should wait for a blocking query
        to return.
        """
        return pulumi.get(self, "wait_time")


@pulumi.output_type
class GetKeyPrefixSubkeyCollectionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 default: Optional[str] = None):
        """
        :param str name: This is the name of the key. This value of the
               key is exposed as `var.<name>`. This is not the path of the subkey
               in Consul.
        :param str path: This is the subkey path in Consul (which will be appended
               to the given `path_prefix`) to construct the full key that will be used
               to read the value.
        :param str default: This is the default value to set for `var.<name>`
               if the key does not exist in Consul. Defaults to an empty string.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This is the name of the key. This value of the
        key is exposed as `var.<name>`. This is not the path of the subkey
        in Consul.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        This is the subkey path in Consul (which will be appended
        to the given `path_prefix`) to construct the full key that will be used
        to read the value.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        This is the default value to set for `var.<name>`
        if the key does not exist in Consul. Defaults to an empty string.
        """
        return pulumi.get(self, "default")


@pulumi.output_type
class GetKeysKeyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 default: Optional[str] = None):
        """
        :param str name: This is the name of the key. This value of the
               key is exposed as `var.<name>`. This is not the path of the key
               in Consul.
        :param str path: This is the path in Consul that should be read
               or written to.
        :param str default: This is the default value to set for `var.<name>`
               if the key does not exist in Consul. Defaults to an empty string.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This is the name of the key. This value of the
        key is exposed as `var.<name>`. This is not the path of the key
        in Consul.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        This is the path in Consul that should be read
        or written to.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        This is the default value to set for `var.<name>`
        if the key does not exist in Consul. Defaults to an empty string.
        """
        return pulumi.get(self, "default")


@pulumi.output_type
class GetNetworkAreaMembersMemberResult(dict):
    def __init__(__self__, *,
                 address: str,
                 build: str,
                 datacenter: str,
                 id: str,
                 name: str,
                 port: int,
                 protocol: int,
                 role: str,
                 rtt: int,
                 status: str):
        """
        :param str address: The IP address of the server.
        :param str build: The Consul version running on the node.
        :param str datacenter: The datacenter to use. This overrides the
               agent's default datacenter and the datacenter in the provider setup.
        :param str id: The node ID of the server.
        :param str name: The node name of the server, with its datacenter appended.
        :param int port: The server RPC port the node.
        :param int protocol: The protocol version being spoken by the node.
        :param str role: Role is always `"server"` since only Consul servers can participate
               in network areas.
        :param int rtt: An estimated network round trip time from the server answering the
               query to the given server, in nanoseconds. This is computed using network
               coordinates.
        :param str status: The current health status of the node, as determined by the
               network area distributed failure detector. This will be `"alive"`, `"leaving"`,
               or `"failed"`. A `"failed"` status means that other servers are not able to
               probe this server over its server RPC interface.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "rtt", rtt)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The IP address of the server.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The Consul version running on the node.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        """
        The datacenter to use. This overrides the
        agent's default datacenter and the datacenter in the provider setup.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The node ID of the server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The node name of the server, with its datacenter appended.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The server RPC port the node.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        """
        The protocol version being spoken by the node.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role is always `"server"` since only Consul servers can participate
        in network areas.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def rtt(self) -> int:
        """
        An estimated network round trip time from the server answering the
        query to the given server, in nanoseconds. This is computed using network
        coordinates.
        """
        return pulumi.get(self, "rtt")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current health status of the node, as determined by the
        network area distributed failure detector. This will be `"alive"`, `"leaving"`,
        or `"failed"`. A `"failed"` status means that other servers are not able to
        probe this server over its server RPC interface.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNodesNodeResult(dict):
    def __init__(__self__, *,
                 address: str,
                 id: str,
                 meta: Mapping[str, str],
                 name: str,
                 tagged_addresses: Mapping[str, str]):
        """
        :param str id: The Node ID of the Consul agent.
               * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta
               data tag information, if any.
               * [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name
               of the Consul node.
               * [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The
               IP address the node is advertising to the Consul cluster.
               * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
               List of explicit LAN and WAN IP addresses for the agent.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "meta", meta)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tagged_addresses", tagged_addresses)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Node ID of the Consul agent.
        * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta
        data tag information, if any.
        * [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name
        of the Consul node.
        * [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The
        IP address the node is advertising to the Consul cluster.
        * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
        List of explicit LAN and WAN IP addresses for the agent.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def meta(self) -> Mapping[str, str]:
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="taggedAddresses")
    def tagged_addresses(self) -> Mapping[str, str]:
        return pulumi.get(self, "tagged_addresses")


@pulumi.output_type
class GetNodesQueryOptionResult(dict):
    def __init__(__self__, *,
                 allow_stale: Optional[bool] = None,
                 datacenter: Optional[str] = None,
                 near: Optional[str] = None,
                 node_meta: Optional[Mapping[str, str]] = None,
                 partition: Optional[str] = None,
                 require_consistent: Optional[bool] = None,
                 token: Optional[str] = None,
                 wait_index: Optional[int] = None,
                 wait_time: Optional[str] = None):
        """
        :param bool allow_stale: When `true`, the default, allow responses from
               Consul servers that are followers.
        :param str datacenter: The Consul datacenter to query.  Defaults to the
               same value found in `query_options` parameter specified below, or if that is
               empty, the `datacenter` value found in the Consul agent that this provider is
               configured to talk to then the datacenter in the provider setup.
        :param bool require_consistent: When `true` force the client to perform a
               read on at least quorum servers and verify the result is the same.  Defaults
               to `false`.
        :param str token: Specify the Consul ACL token to use when performing the
               request.  This defaults to the same API token configured by the `consul`
               provider but may be overridden if necessary.
        :param int wait_index: Index number used to enable blocking queries.
        :param str wait_time: Max time the client should wait for a blocking query
               to return.
        """
        if allow_stale is not None:
            pulumi.set(__self__, "allow_stale", allow_stale)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if near is not None:
            pulumi.set(__self__, "near", near)
        if node_meta is not None:
            pulumi.set(__self__, "node_meta", node_meta)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if require_consistent is not None:
            pulumi.set(__self__, "require_consistent", require_consistent)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if wait_index is not None:
            pulumi.set(__self__, "wait_index", wait_index)
        if wait_time is not None:
            pulumi.set(__self__, "wait_time", wait_time)

    @property
    @pulumi.getter(name="allowStale")
    def allow_stale(self) -> Optional[bool]:
        """
        When `true`, the default, allow responses from
        Consul servers that are followers.
        """
        return pulumi.get(self, "allow_stale")

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        The Consul datacenter to query.  Defaults to the
        same value found in `query_options` parameter specified below, or if that is
        empty, the `datacenter` value found in the Consul agent that this provider is
        configured to talk to then the datacenter in the provider setup.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def near(self) -> Optional[str]:
        return pulumi.get(self, "near")

    @property
    @pulumi.getter(name="nodeMeta")
    def node_meta(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_meta")

    @property
    @pulumi.getter
    def partition(self) -> Optional[str]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="requireConsistent")
    def require_consistent(self) -> Optional[bool]:
        """
        When `true` force the client to perform a
        read on at least quorum servers and verify the result is the same.  Defaults
        to `false`.
        """
        return pulumi.get(self, "require_consistent")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Specify the Consul ACL token to use when performing the
        request.  This defaults to the same API token configured by the `consul`
        provider but may be overridden if necessary.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="waitIndex")
    def wait_index(self) -> Optional[int]:
        """
        Index number used to enable blocking queries.
        """
        return pulumi.get(self, "wait_index")

    @property
    @pulumi.getter(name="waitTime")
    def wait_time(self) -> Optional[str]:
        """
        Max time the client should wait for a blocking query
        to return.
        """
        return pulumi.get(self, "wait_time")


@pulumi.output_type
class GetPeeringsPeerResult(dict):
    def __init__(__self__, *,
                 deleted_at: str,
                 id: str,
                 meta: Mapping[str, str],
                 name: str,
                 partition: str,
                 peer_ca_pems: Sequence[str],
                 peer_id: str,
                 peer_server_addresses: Sequence[str],
                 peer_server_name: str,
                 state: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "meta", meta)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "partition", partition)
        pulumi.set(__self__, "peer_ca_pems", peer_ca_pems)
        pulumi.set(__self__, "peer_id", peer_id)
        pulumi.set(__self__, "peer_server_addresses", peer_server_addresses)
        pulumi.set(__self__, "peer_server_name", peer_server_name)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> str:
        return pulumi.get(self, "deleted_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def meta(self) -> Mapping[str, str]:
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def partition(self) -> str:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="peerCaPems")
    def peer_ca_pems(self) -> Sequence[str]:
        return pulumi.get(self, "peer_ca_pems")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> str:
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerServerAddresses")
    def peer_server_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "peer_server_addresses")

    @property
    @pulumi.getter(name="peerServerName")
    def peer_server_name(self) -> str:
        return pulumi.get(self, "peer_server_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetServiceHealthResultResult(dict):
    def __init__(__self__, *,
                 checks: Sequence['outputs.GetServiceHealthResultCheckResult'],
                 nodes: Sequence['outputs.GetServiceHealthResultNodeResult'],
                 services: Sequence['outputs.GetServiceHealthResultServiceResult']):
        """
        :param Sequence['GetServiceHealthResultNodeArgs'] nodes: The name of the node associated with this health-check.
        """
        pulumi.set(__self__, "checks", checks)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def checks(self) -> Sequence['outputs.GetServiceHealthResultCheckResult']:
        return pulumi.get(self, "checks")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetServiceHealthResultNodeResult']:
        """
        The name of the node associated with this health-check.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetServiceHealthResultServiceResult']:
        return pulumi.get(self, "services")


@pulumi.output_type
class GetServiceHealthResultCheckResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 node: str,
                 notes: str,
                 output: str,
                 service_id: str,
                 service_name: str,
                 service_tags: Sequence[str],
                 status: str):
        """
        :param str id: The ID of this health-check.
        :param str name: The service name to select.
        :param str node: The name of the node associated with this health-check.
        :param str notes: A human readable description of the current state of the health-check.
        :param str output: The output of the health-check.
        :param str service_id: The ID of the service associated to this health-check.
        :param str service_name: The name of the service associated with this health-check.
        :param Sequence[str] service_tags: The list of tags associated with this health-check.
        :param str status: The status of this health-check.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node", node)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_tags", service_tags)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this health-check.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The service name to select.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def node(self) -> str:
        """
        The name of the node associated with this health-check.
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter
    def notes(self) -> str:
        """
        A human readable description of the current state of the health-check.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def output(self) -> str:
        """
        The output of the health-check.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The ID of the service associated to this health-check.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service associated with this health-check.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceTags")
    def service_tags(self) -> Sequence[str]:
        """
        The list of tags associated with this health-check.
        """
        return pulumi.get(self, "service_tags")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this health-check.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetServiceHealthResultNodeResult(dict):
    def __init__(__self__, *,
                 address: str,
                 datacenter: str,
                 id: str,
                 meta: Mapping[str, str],
                 name: str,
                 tagged_addresses: Mapping[str, str]):
        """
        :param str address: The address of this instance.
        :param str datacenter: The Consul datacenter to query.
        :param str id: The ID of this health-check.
        :param Mapping[str, str] meta: Service metadata tag information, if any.
        :param str name: The service name to select.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "meta", meta)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tagged_addresses", tagged_addresses)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of this instance.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        """
        The Consul datacenter to query.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this health-check.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def meta(self) -> Mapping[str, str]:
        """
        Service metadata tag information, if any.
        """
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The service name to select.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="taggedAddresses")
    def tagged_addresses(self) -> Mapping[str, str]:
        return pulumi.get(self, "tagged_addresses")


@pulumi.output_type
class GetServiceHealthResultServiceResult(dict):
    def __init__(__self__, *,
                 address: str,
                 id: str,
                 meta: Mapping[str, str],
                 name: str,
                 port: int,
                 tags: Sequence[str]):
        """
        :param str address: The address of this instance.
        :param str id: The ID of this health-check.
        :param Mapping[str, str] meta: Service metadata tag information, if any.
        :param str name: The service name to select.
        :param int port: The port of this instance.
        :param Sequence[str] tags: The list of tags associated with this instance.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "meta", meta)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of this instance.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this health-check.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def meta(self) -> Mapping[str, str]:
        """
        Service metadata tag information, if any.
        """
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The service name to select.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of this instance.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The list of tags associated with this instance.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetServiceQueryOptionResult(dict):
    def __init__(__self__, *,
                 allow_stale: Optional[bool] = None,
                 datacenter: Optional[str] = None,
                 namespace: Optional[str] = None,
                 near: Optional[str] = None,
                 node_meta: Optional[Mapping[str, str]] = None,
                 partition: Optional[str] = None,
                 require_consistent: Optional[bool] = None,
                 token: Optional[str] = None,
                 wait_index: Optional[int] = None,
                 wait_time: Optional[str] = None):
        """
        :param bool allow_stale: When `true`, the default, allow responses from
               Consul servers that are followers.
        :param str datacenter: The Consul datacenter to query.  Defaults to the
               same value found in `query_options` parameter specified below, or if that is
               empty, the `datacenter` value found in the Consul agent that this provider is
               configured to talk to.
        :param str namespace: The namespace to lookup the service.
        :param bool require_consistent: When `true` force the client to perform a
               read on at least quorum servers and verify the result is the same.  Defaults
               to `false`.
        :param str token: Specify the Consul ACL token to use when performing the
               request.  This defaults to the same API token configured by the `consul`
               provider but may be overridden if necessary.
        :param int wait_index: Index number used to enable blocking queries.
        :param str wait_time: Max time the client should wait for a blocking query
               to return.
        """
        if allow_stale is not None:
            pulumi.set(__self__, "allow_stale", allow_stale)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if near is not None:
            pulumi.set(__self__, "near", near)
        if node_meta is not None:
            pulumi.set(__self__, "node_meta", node_meta)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if require_consistent is not None:
            pulumi.set(__self__, "require_consistent", require_consistent)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if wait_index is not None:
            pulumi.set(__self__, "wait_index", wait_index)
        if wait_time is not None:
            pulumi.set(__self__, "wait_time", wait_time)

    @property
    @pulumi.getter(name="allowStale")
    def allow_stale(self) -> Optional[bool]:
        """
        When `true`, the default, allow responses from
        Consul servers that are followers.
        """
        return pulumi.get(self, "allow_stale")

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        The Consul datacenter to query.  Defaults to the
        same value found in `query_options` parameter specified below, or if that is
        empty, the `datacenter` value found in the Consul agent that this provider is
        configured to talk to.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace to lookup the service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def near(self) -> Optional[str]:
        return pulumi.get(self, "near")

    @property
    @pulumi.getter(name="nodeMeta")
    def node_meta(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_meta")

    @property
    @pulumi.getter
    def partition(self) -> Optional[str]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="requireConsistent")
    def require_consistent(self) -> Optional[bool]:
        """
        When `true` force the client to perform a
        read on at least quorum servers and verify the result is the same.  Defaults
        to `false`.
        """
        return pulumi.get(self, "require_consistent")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Specify the Consul ACL token to use when performing the
        request.  This defaults to the same API token configured by the `consul`
        provider but may be overridden if necessary.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="waitIndex")
    def wait_index(self) -> Optional[int]:
        """
        Index number used to enable blocking queries.
        """
        return pulumi.get(self, "wait_index")

    @property
    @pulumi.getter(name="waitTime")
    def wait_time(self) -> Optional[str]:
        """
        Max time the client should wait for a blocking query
        to return.
        """
        return pulumi.get(self, "wait_time")


@pulumi.output_type
class GetServiceServiceResult(dict):
    def __init__(__self__, *,
                 address: str,
                 create_index: str,
                 enable_tag_override: str,
                 id: str,
                 meta: Mapping[str, str],
                 modify_index: str,
                 name: str,
                 node_address: str,
                 node_id: str,
                 node_meta: Mapping[str, str],
                 node_name: str,
                 port: str,
                 tagged_addresses: Mapping[str, str],
                 tags: Sequence[str]):
        """
        :param str name: The service name to select.
        :param str node_id: The Node ID of the Consul agent advertising the service.
               * [`node_meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node
               meta data tag information, if any.
               * [`node_name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The
               name of the Consul node.
               * [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -
               The IP address of the service.  If the `ServiceAddress` in the Consul catalog
               is empty, this value is automatically populated with the `node_address` (the
               `Address` in the Consul Catalog).
               * [`enable_tag_override`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -
               Whether service tags can be overridden on this service.
               * [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A
               unique service instance identifier.
               * [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The
               name of the service.
               * [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -
               Port number of the service.
               * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
               List of explicit LAN and WAN IP addresses for the agent.
               * [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -
               List of tags for the service.
               * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta
               data tag information, if any.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "create_index", create_index)
        pulumi.set(__self__, "enable_tag_override", enable_tag_override)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "meta", meta)
        pulumi.set(__self__, "modify_index", modify_index)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_address", node_address)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_meta", node_meta)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "tagged_addresses", tagged_addresses)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="createIndex")
    def create_index(self) -> str:
        return pulumi.get(self, "create_index")

    @property
    @pulumi.getter(name="enableTagOverride")
    def enable_tag_override(self) -> str:
        return pulumi.get(self, "enable_tag_override")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def meta(self) -> Mapping[str, str]:
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter(name="modifyIndex")
    def modify_index(self) -> str:
        return pulumi.get(self, "modify_index")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The service name to select.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeAddress")
    def node_address(self) -> str:
        return pulumi.get(self, "node_address")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        The Node ID of the Consul agent advertising the service.
        * [`node_meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node
        meta data tag information, if any.
        * [`node_name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The
        name of the Consul node.
        * [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -
        The IP address of the service.  If the `ServiceAddress` in the Consul catalog
        is empty, this value is automatically populated with the `node_address` (the
        `Address` in the Consul Catalog).
        * [`enable_tag_override`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -
        Whether service tags can be overridden on this service.
        * [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A
        unique service instance identifier.
        * [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The
        name of the service.
        * [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -
        Port number of the service.
        * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
        List of explicit LAN and WAN IP addresses for the agent.
        * [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -
        List of tags for the service.
        * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta
        data tag information, if any.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="nodeMeta")
    def node_meta(self) -> Mapping[str, str]:
        return pulumi.get(self, "node_meta")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="taggedAddresses")
    def tagged_addresses(self) -> Mapping[str, str]:
        return pulumi.get(self, "tagged_addresses")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetServicesQueryOptionResult(dict):
    def __init__(__self__, *,
                 allow_stale: Optional[bool] = None,
                 datacenter: Optional[str] = None,
                 namespace: Optional[str] = None,
                 near: Optional[str] = None,
                 node_meta: Optional[Mapping[str, str]] = None,
                 partition: Optional[str] = None,
                 require_consistent: Optional[bool] = None,
                 token: Optional[str] = None,
                 wait_index: Optional[int] = None,
                 wait_time: Optional[str] = None):
        """
        :param bool allow_stale: When `true`, the default, allow responses from
               Consul servers that are followers.
        :param str datacenter: The Consul datacenter to query.  Defaults to the
               same value found in `query_options` parameter specified below, or if that is
               empty, the `datacenter` value found in the Consul agent that this provider is
               configured to talk to.
        :param str namespace: The namespace to lookup the services.
        :param bool require_consistent: When `true` force the client to perform a
               read on at least quorum servers and verify the result is the same.  Defaults
               to `false`.
        :param str token: Specify the Consul ACL token to use when performing the
               request.  This defaults to the same API token configured by the `consul`
               provider but may be overridden if necessary.
        :param int wait_index: Index number used to enable blocking queries.
        :param str wait_time: Max time the client should wait for a blocking query
               to return.
        """
        if allow_stale is not None:
            pulumi.set(__self__, "allow_stale", allow_stale)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if near is not None:
            pulumi.set(__self__, "near", near)
        if node_meta is not None:
            pulumi.set(__self__, "node_meta", node_meta)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if require_consistent is not None:
            pulumi.set(__self__, "require_consistent", require_consistent)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if wait_index is not None:
            pulumi.set(__self__, "wait_index", wait_index)
        if wait_time is not None:
            pulumi.set(__self__, "wait_time", wait_time)

    @property
    @pulumi.getter(name="allowStale")
    def allow_stale(self) -> Optional[bool]:
        """
        When `true`, the default, allow responses from
        Consul servers that are followers.
        """
        return pulumi.get(self, "allow_stale")

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        The Consul datacenter to query.  Defaults to the
        same value found in `query_options` parameter specified below, or if that is
        empty, the `datacenter` value found in the Consul agent that this provider is
        configured to talk to.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace to lookup the services.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def near(self) -> Optional[str]:
        return pulumi.get(self, "near")

    @property
    @pulumi.getter(name="nodeMeta")
    def node_meta(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_meta")

    @property
    @pulumi.getter
    def partition(self) -> Optional[str]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="requireConsistent")
    def require_consistent(self) -> Optional[bool]:
        """
        When `true` force the client to perform a
        read on at least quorum servers and verify the result is the same.  Defaults
        to `false`.
        """
        return pulumi.get(self, "require_consistent")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Specify the Consul ACL token to use when performing the
        request.  This defaults to the same API token configured by the `consul`
        provider but may be overridden if necessary.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="waitIndex")
    def wait_index(self) -> Optional[int]:
        """
        Index number used to enable blocking queries.
        """
        return pulumi.get(self, "wait_index")

    @property
    @pulumi.getter(name="waitTime")
    def wait_time(self) -> Optional[str]:
        """
        Max time the client should wait for a blocking query
        to return.
        """
        return pulumi.get(self, "wait_time")


