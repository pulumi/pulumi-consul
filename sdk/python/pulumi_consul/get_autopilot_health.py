# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetAutopilotHealthResult:
    """
    A collection of values returned by getAutopilotHealth.
    """
    def __init__(__self__, datacenter=None, failure_tolerance=None, healthy=None, id=None, servers=None):
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        __self__.datacenter = datacenter
        if failure_tolerance and not isinstance(failure_tolerance, float):
            raise TypeError("Expected argument 'failure_tolerance' to be a float")
        __self__.failure_tolerance = failure_tolerance
        """
        The number of redundant healthy servers that could fail
        without causing an outage
        """
        if healthy and not isinstance(healthy, bool):
            raise TypeError("Expected argument 'healthy' to be a bool")
        __self__.healthy = healthy
        """
        Whether the server is healthy according to the current Autopilot
        configuration
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        __self__.servers = servers
        """
        A list of server health information. See below for details on the
        available information.
        """
class AwaitableGetAutopilotHealthResult(GetAutopilotHealthResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutopilotHealthResult(
            datacenter=self.datacenter,
            failure_tolerance=self.failure_tolerance,
            healthy=self.healthy,
            id=self.id,
            servers=self.servers)

def get_autopilot_health(datacenter=None,opts=None):
    """
    The `.getAutopilotHealth` data source returns
    [autopilot health information](https://www.consul.io/api/operator/autopilot.html#read-health)
    about the current Consul cluster.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_consul as consul

    read = consul.get_autopilot_health()
    pulumi.export("health", read.healthy)
    ```



    :param str datacenter: The datacenter to use. This overrides the agent's
           default datacenter and the datacenter in the provider setup.
    """
    __args__ = dict()


    __args__['datacenter'] = datacenter
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('consul:index/getAutopilotHealth:getAutopilotHealth', __args__, opts=opts).value

    return AwaitableGetAutopilotHealthResult(
        datacenter=__ret__.get('datacenter'),
        failure_tolerance=__ret__.get('failureTolerance'),
        healthy=__ret__.get('healthy'),
        id=__ret__.get('id'),
        servers=__ret__.get('servers'))
