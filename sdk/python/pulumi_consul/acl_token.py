# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['AclToken']


class AclToken(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accessor_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 local: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        The `AclToken` resource writes an ACL token into Consul.

        ## Example Usage
        ### Basic usage

        ```python
        import pulumi
        import pulumi_consul as consul

        agent = consul.AclPolicy("agent", rules=\"\"\"node_prefix "" {
          policy = "read"
        }

        \"\"\")
        test = consul.AclToken("test",
            description="my test token",
            local=True,
            policies=[agent.name])
        ```

        ## Import

        `consul_acl_token` can be imported. This is especially useful to manage the anonymous and the master token with Terraform

        ```sh
         $ pulumi import consul:index/aclToken:AclToken anonymous 00000000-0000-0000-0000-000000000002
        ```

        ```sh
         $ pulumi import consul:index/aclToken:AclToken master-token 624d94ca-bc5c-f960-4e83-0a609cf588be
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accessor_id: The uuid of the token. If omitted, Consul will
               generate a random uuid.
        :param pulumi.Input[str] description: The description of the token.
        :param pulumi.Input[bool] local: The flag to set the token local to the current datacenter.
        :param pulumi.Input[str] namespace: The namespace to create the token within.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policies: The list of policies attached to the token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The list of roles attached to the token.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['accessor_id'] = accessor_id
            __props__['description'] = description
            __props__['local'] = local
            __props__['namespace'] = namespace
            __props__['policies'] = policies
            __props__['roles'] = roles
        super(AclToken, __self__).__init__(
            'consul:index/aclToken:AclToken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accessor_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            local: Optional[pulumi.Input[bool]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'AclToken':
        """
        Get an existing AclToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accessor_id: The uuid of the token. If omitted, Consul will
               generate a random uuid.
        :param pulumi.Input[str] description: The description of the token.
        :param pulumi.Input[bool] local: The flag to set the token local to the current datacenter.
        :param pulumi.Input[str] namespace: The namespace to create the token within.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policies: The list of policies attached to the token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The list of roles attached to the token.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["accessor_id"] = accessor_id
        __props__["description"] = description
        __props__["local"] = local
        __props__["namespace"] = namespace
        __props__["policies"] = policies
        __props__["roles"] = roles
        return AclToken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessorId")
    def accessor_id(self) -> pulumi.Output[str]:
        """
        The uuid of the token. If omitted, Consul will
        generate a random uuid.
        """
        return pulumi.get(self, "accessor_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the token.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def local(self) -> pulumi.Output[Optional[bool]]:
        """
        The flag to set the token local to the current datacenter.
        """
        return pulumi.get(self, "local")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        The namespace to create the token within.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of policies attached to the token.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of roles attached to the token.
        """
        return pulumi.get(self, "roles")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

