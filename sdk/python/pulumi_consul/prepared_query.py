# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['PreparedQuery']


class PreparedQuery(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connect: Optional[pulumi.Input[bool]] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[pulumi.InputType['PreparedQueryDnsArgs']]] = None,
                 failover: Optional[pulumi.Input[pulumi.InputType['PreparedQueryFailoverArgs']]] = None,
                 ignore_check_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 near: Optional[pulumi.Input[str]] = None,
                 node_meta: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 only_passing: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 service_meta: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session: Optional[pulumi.Input[str]] = None,
                 stored_token: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[pulumi.InputType['PreparedQueryTemplateArgs']]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        ## Import

        `consul_prepared_query` can be imported with the query's ID in the Consul HTTP API.

        ```sh
         $ pulumi import consul:index/preparedQuery:PreparedQuery my_service 71ecfb82-717a-4258-b4b6-2fb75144d856
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] connect: When `true` the prepared query will return connect
               proxy services for a queried service.  Conditions such as `tags` in the
               prepared query will be matched against the proxy service. Defaults to false.
        :param pulumi.Input[str] datacenter: The datacenter to use. This overrides the
               agent's default datacenter and the datacenter in the provider setup.
        :param pulumi.Input[pulumi.InputType['PreparedQueryDnsArgs']] dns: Settings for controlling the DNS response details.
        :param pulumi.Input[pulumi.InputType['PreparedQueryFailoverArgs']] failover: Options for controlling behavior when no healthy
               nodes are available in the local DC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignore_check_ids: Specifies a list of check IDs that should be
               ignored when filtering unhealthy instances. This is mostly useful in an
               emergency or as a temporary measure when a health check is found to be
               unreliable. Being able to ignore it in centrally-defined queries can be
               simpler than de-registering the check as an interim solution until the check
               can be fixed.
        :param pulumi.Input[str] name: The name of the prepared query. Used to identify
               the prepared query during requests. Can be specified as an empty string
               to configure the query as a catch-all.
        :param pulumi.Input[str] near: Allows specifying the name of a node to sort results
               near using Consul's distance sorting and network coordinates. The magic
               `_agent` value can be used to always sort nearest the node servicing the
               request.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_meta: Specifies a list of user-defined key/value pairs that
               will be used for filtering the query results to nodes with the given metadata
               values present.
        :param pulumi.Input[bool] only_passing: When `true`, the prepared query will only
               return nodes with passing health checks in the result.
        :param pulumi.Input[str] service: The name of the service to query.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_meta: Specifies a list of user-defined key/value pairs
               that will be used for filtering the query results to services with the given
               metadata values present.
        :param pulumi.Input[str] session: The name of the Consul session to tie this query's
               lifetime to.  This is an advanced parameter that should not be used without a
               complete understanding of Consul sessions and the implications of their use
               (it is recommended to leave this blank in nearly all cases).  If this
               parameter is omitted the query will not expire.
        :param pulumi.Input[str] stored_token: The ACL token to store with the prepared
               query. This token will be used by default whenever the query is executed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The list of required and/or disallowed tags.  If a tag is
               in this list it must be present.  If the tag is preceded with a "!" then it is
               disallowed.
        :param pulumi.Input[pulumi.InputType['PreparedQueryTemplateArgs']] template: Query templating options. This is used to make a
               single prepared query respond to many different requests.
        :param pulumi.Input[str] token: The ACL token to use when saving the prepared query.
               This overrides the token that the agent provides by default.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['connect'] = connect
            __props__['datacenter'] = datacenter
            __props__['dns'] = dns
            __props__['failover'] = failover
            __props__['ignore_check_ids'] = ignore_check_ids
            __props__['name'] = name
            __props__['near'] = near
            __props__['node_meta'] = node_meta
            __props__['only_passing'] = only_passing
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__['service'] = service
            __props__['service_meta'] = service_meta
            __props__['session'] = session
            __props__['stored_token'] = stored_token
            __props__['tags'] = tags
            __props__['template'] = template
            __props__['token'] = token
        super(PreparedQuery, __self__).__init__(
            'consul:index/preparedQuery:PreparedQuery',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connect: Optional[pulumi.Input[bool]] = None,
            datacenter: Optional[pulumi.Input[str]] = None,
            dns: Optional[pulumi.Input[pulumi.InputType['PreparedQueryDnsArgs']]] = None,
            failover: Optional[pulumi.Input[pulumi.InputType['PreparedQueryFailoverArgs']]] = None,
            ignore_check_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            near: Optional[pulumi.Input[str]] = None,
            node_meta: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            only_passing: Optional[pulumi.Input[bool]] = None,
            service: Optional[pulumi.Input[str]] = None,
            service_meta: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            session: Optional[pulumi.Input[str]] = None,
            stored_token: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            template: Optional[pulumi.Input[pulumi.InputType['PreparedQueryTemplateArgs']]] = None,
            token: Optional[pulumi.Input[str]] = None) -> 'PreparedQuery':
        """
        Get an existing PreparedQuery resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] connect: When `true` the prepared query will return connect
               proxy services for a queried service.  Conditions such as `tags` in the
               prepared query will be matched against the proxy service. Defaults to false.
        :param pulumi.Input[str] datacenter: The datacenter to use. This overrides the
               agent's default datacenter and the datacenter in the provider setup.
        :param pulumi.Input[pulumi.InputType['PreparedQueryDnsArgs']] dns: Settings for controlling the DNS response details.
        :param pulumi.Input[pulumi.InputType['PreparedQueryFailoverArgs']] failover: Options for controlling behavior when no healthy
               nodes are available in the local DC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignore_check_ids: Specifies a list of check IDs that should be
               ignored when filtering unhealthy instances. This is mostly useful in an
               emergency or as a temporary measure when a health check is found to be
               unreliable. Being able to ignore it in centrally-defined queries can be
               simpler than de-registering the check as an interim solution until the check
               can be fixed.
        :param pulumi.Input[str] name: The name of the prepared query. Used to identify
               the prepared query during requests. Can be specified as an empty string
               to configure the query as a catch-all.
        :param pulumi.Input[str] near: Allows specifying the name of a node to sort results
               near using Consul's distance sorting and network coordinates. The magic
               `_agent` value can be used to always sort nearest the node servicing the
               request.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_meta: Specifies a list of user-defined key/value pairs that
               will be used for filtering the query results to nodes with the given metadata
               values present.
        :param pulumi.Input[bool] only_passing: When `true`, the prepared query will only
               return nodes with passing health checks in the result.
        :param pulumi.Input[str] service: The name of the service to query.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_meta: Specifies a list of user-defined key/value pairs
               that will be used for filtering the query results to services with the given
               metadata values present.
        :param pulumi.Input[str] session: The name of the Consul session to tie this query's
               lifetime to.  This is an advanced parameter that should not be used without a
               complete understanding of Consul sessions and the implications of their use
               (it is recommended to leave this blank in nearly all cases).  If this
               parameter is omitted the query will not expire.
        :param pulumi.Input[str] stored_token: The ACL token to store with the prepared
               query. This token will be used by default whenever the query is executed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The list of required and/or disallowed tags.  If a tag is
               in this list it must be present.  If the tag is preceded with a "!" then it is
               disallowed.
        :param pulumi.Input[pulumi.InputType['PreparedQueryTemplateArgs']] template: Query templating options. This is used to make a
               single prepared query respond to many different requests.
        :param pulumi.Input[str] token: The ACL token to use when saving the prepared query.
               This overrides the token that the agent provides by default.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["connect"] = connect
        __props__["datacenter"] = datacenter
        __props__["dns"] = dns
        __props__["failover"] = failover
        __props__["ignore_check_ids"] = ignore_check_ids
        __props__["name"] = name
        __props__["near"] = near
        __props__["node_meta"] = node_meta
        __props__["only_passing"] = only_passing
        __props__["service"] = service
        __props__["service_meta"] = service_meta
        __props__["session"] = session
        __props__["stored_token"] = stored_token
        __props__["tags"] = tags
        __props__["template"] = template
        __props__["token"] = token
        return PreparedQuery(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def connect(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true` the prepared query will return connect
        proxy services for a queried service.  Conditions such as `tags` in the
        prepared query will be matched against the proxy service. Defaults to false.
        """
        return pulumi.get(self, "connect")

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[Optional[str]]:
        """
        The datacenter to use. This overrides the
        agent's default datacenter and the datacenter in the provider setup.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Output[Optional['outputs.PreparedQueryDns']]:
        """
        Settings for controlling the DNS response details.
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def failover(self) -> pulumi.Output[Optional['outputs.PreparedQueryFailover']]:
        """
        Options for controlling behavior when no healthy
        nodes are available in the local DC.
        """
        return pulumi.get(self, "failover")

    @property
    @pulumi.getter(name="ignoreCheckIds")
    def ignore_check_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies a list of check IDs that should be
        ignored when filtering unhealthy instances. This is mostly useful in an
        emergency or as a temporary measure when a health check is found to be
        unreliable. Being able to ignore it in centrally-defined queries can be
        simpler than de-registering the check as an interim solution until the check
        can be fixed.
        """
        return pulumi.get(self, "ignore_check_ids")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the prepared query. Used to identify
        the prepared query during requests. Can be specified as an empty string
        to configure the query as a catch-all.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def near(self) -> pulumi.Output[Optional[str]]:
        """
        Allows specifying the name of a node to sort results
        near using Consul's distance sorting and network coordinates. The magic
        `_agent` value can be used to always sort nearest the node servicing the
        request.
        """
        return pulumi.get(self, "near")

    @property
    @pulumi.getter(name="nodeMeta")
    def node_meta(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies a list of user-defined key/value pairs that
        will be used for filtering the query results to nodes with the given metadata
        values present.
        """
        return pulumi.get(self, "node_meta")

    @property
    @pulumi.getter(name="onlyPassing")
    def only_passing(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true`, the prepared query will only
        return nodes with passing health checks in the result.
        """
        return pulumi.get(self, "only_passing")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[str]:
        """
        The name of the service to query.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="serviceMeta")
    def service_meta(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies a list of user-defined key/value pairs
        that will be used for filtering the query results to services with the given
        metadata values present.
        """
        return pulumi.get(self, "service_meta")

    @property
    @pulumi.getter
    def session(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the Consul session to tie this query's
        lifetime to.  This is an advanced parameter that should not be used without a
        complete understanding of Consul sessions and the implications of their use
        (it is recommended to leave this blank in nearly all cases).  If this
        parameter is omitted the query will not expire.
        """
        return pulumi.get(self, "session")

    @property
    @pulumi.getter(name="storedToken")
    def stored_token(self) -> pulumi.Output[Optional[str]]:
        """
        The ACL token to store with the prepared
        query. This token will be used by default whenever the query is executed.
        """
        return pulumi.get(self, "stored_token")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of required and/or disallowed tags.  If a tag is
        in this list it must be present.  If the tag is preceded with a "!" then it is
        disallowed.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output[Optional['outputs.PreparedQueryTemplate']]:
        """
        Query templating options. This is used to make a
        single prepared query respond to many different requests.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[Optional[str]]:
        """
        The ACL token to use when saving the prepared query.
        This overrides the token that the agent provides by default.
        """
        return pulumi.get(self, "token")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

