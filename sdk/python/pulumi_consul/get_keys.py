# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetKeysResult:
    """
    A collection of values returned by getKeys.
    """
    def __init__(__self__, datacenter=None, id=None, keys=None, namespace=None, token=None, var=None):
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        __self__.datacenter = datacenter
        """
        The datacenter the keys are being read from.
        * `var.<name>` - For each name given, the corresponding attribute
        has the value of the key.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        __self__.keys = keys
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        __self__.namespace = namespace
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        __self__.token = token
        if var and not isinstance(var, dict):
            raise TypeError("Expected argument 'var' to be a dict")
        __self__.var = var
class AwaitableGetKeysResult(GetKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKeysResult(
            datacenter=self.datacenter,
            id=self.id,
            keys=self.keys,
            namespace=self.namespace,
            token=self.token,
            var=self.var)

def get_keys(datacenter=None,keys=None,namespace=None,token=None,opts=None):
    """
    The `.Keys` resource reads values from the Consul key/value store.
    This is a powerful way dynamically set values in templates.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_aws as aws
    import pulumi_consul as consul

    app_keys = consul.get_keys(datacenter="nyc1",
        keys=[{
            "default": "ami-1234",
            "name": "ami",
            "path": "service/app/launch_ami",
        }],
        token="abcd")
    # Start our instance with the dynamic ami value
    app_instance = aws.ec2.Instance("appInstance", ami=app_keys.var["ami"])
    ```



    :param str datacenter: The datacenter to use. This overrides the
           agent's default datacenter and the datacenter in the provider setup.
    :param list keys: Specifies a key in Consul to be read. Supported
           values documented below. Multiple blocks supported.
    :param str namespace: The namespace to lookup the keys.
    :param str token: The ACL token to use. This overrides the
           token that the agent provides by default.

    The **keys** object supports the following:

      * `default` (`str`) - This is the default value to set for `var.<name>`
        if the key does not exist in Consul. Defaults to an empty string.
      * `name` (`str`) - This is the name of the key. This value of the
        key is exposed as `var.<name>`. This is not the path of the key
        in Consul.
      * `path` (`str`) - This is the path in Consul that should be read
        or written to.
    """
    __args__ = dict()


    __args__['datacenter'] = datacenter
    __args__['keys'] = keys
    __args__['namespace'] = namespace
    __args__['token'] = token
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('consul:index/getKeys:getKeys', __args__, opts=opts).value

    return AwaitableGetKeysResult(
        datacenter=__ret__.get('datacenter'),
        id=__ret__.get('id'),
        keys=__ret__.get('keys'),
        namespace=__ret__.get('namespace'),
        token=__ret__.get('token'),
        var=__ret__.get('var'))
