# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class AclRole(pulumi.CustomResource):
    description: pulumi.Output[str]
    """
    A free form human readable description of the role.
    """
    name: pulumi.Output[str]
    """
    The name of the ACL role.
    """
    namespace: pulumi.Output[str]
    """
    The namespace to create the role within.
    """
    policies: pulumi.Output[list]
    """
    The list of policies that should be applied to the role.
    """
    service_identities: pulumi.Output[list]
    """
    The list of service identities that should
    be applied to the role.

      * `datacenters` (`list`) - The datacenters the effective policy is valid within.
      * `serviceName` (`str`) - The name of the service.
    """
    def __init__(__self__, resource_name, opts=None, description=None, name=None, namespace=None, policies=None, service_identities=None, __props__=None, __name__=None, __opts__=None):
        """
        Starting with Consul 1.5.0, the .AclRole can be used to managed Consul ACL roles.


        ## Example Usage



        ```python
        import pulumi
        import pulumi_consul as consul

        read_policy = consul.AclPolicy("read-policy",
            datacenters=["dc1"],
            rules="node \"\" { policy = \"read\" }")
        read = consul.AclRole("read",
            description="bar",
            policies=[read_policy.id],
            service_identities=[{
                "serviceName": "foo",
            }])
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A free form human readable description of the role.
        :param pulumi.Input[str] name: The name of the ACL role.
        :param pulumi.Input[str] namespace: The namespace to create the role within.
        :param pulumi.Input[list] policies: The list of policies that should be applied to the role.
        :param pulumi.Input[list] service_identities: The list of service identities that should
               be applied to the role.

        The **service_identities** object supports the following:

          * `datacenters` (`pulumi.Input[list]`) - The datacenters the effective policy is valid within.
          * `serviceName` (`pulumi.Input[str]`) - The name of the service.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['name'] = name
            __props__['namespace'] = namespace
            __props__['policies'] = policies
            __props__['service_identities'] = service_identities
        super(AclRole, __self__).__init__(
            'consul:index/aclRole:AclRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, description=None, name=None, namespace=None, policies=None, service_identities=None):
        """
        Get an existing AclRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A free form human readable description of the role.
        :param pulumi.Input[str] name: The name of the ACL role.
        :param pulumi.Input[str] namespace: The namespace to create the role within.
        :param pulumi.Input[list] policies: The list of policies that should be applied to the role.
        :param pulumi.Input[list] service_identities: The list of service identities that should
               be applied to the role.

        The **service_identities** object supports the following:

          * `datacenters` (`pulumi.Input[list]`) - The datacenters the effective policy is valid within.
          * `serviceName` (`pulumi.Input[str]`) - The name of the service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["name"] = name
        __props__["namespace"] = namespace
        __props__["policies"] = policies
        __props__["service_identities"] = service_identities
        return AclRole(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

