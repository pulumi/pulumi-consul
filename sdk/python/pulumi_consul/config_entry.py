# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['ConfigEntry']


class ConfigEntry(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_json: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        The [Configuration Entry](https://www.consul.io/docs/agent/config_entries.html)
        resource can be used to provide cluster-wide defaults for various aspects of
        Consul.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_consul as consul

        proxy_defaults = consul.ConfigEntry("proxyDefaults",
            kind="proxy-defaults",
            config_json=json.dumps({
                "Config": {
                    "local_connect_timeout_ms": 1000,
                    "handshake_timeout_ms": 10000,
                },
            }))
        web = consul.ConfigEntry("web",
            kind="service-defaults",
            config_json=json.dumps({
                "Protocol": "http",
            }))
        admin = consul.ConfigEntry("admin",
            kind="service-defaults",
            config_json=json.dumps({
                "Protocol": "http",
            }))
        service_resolver = consul.ConfigEntry("serviceResolver",
            kind="service-resolver",
            config_json=json.dumps({
                "DefaultSubset": "v1",
                "Subsets": {
                    "v1": {
                        "Filter": "Service.Meta.version == v1",
                    },
                    "v2": {
                        "Filter": "Service.Meta.version == v2",
                    },
                },
            }))
        service_splitter = consul.ConfigEntry("serviceSplitter",
            kind="service-splitter",
            config_json=json.dumps({
                "Splits": [
                    {
                        "Weight": 90,
                        "ServiceSubset": "v1",
                    },
                    {
                        "Weight": 10,
                        "ServiceSubset": "v2",
                    },
                ],
            }))
        service_router = consul.ConfigEntry("serviceRouter",
            kind="service-router",
            config_json=json.dumps({
                "Routes": [{
                    "Match": {
                        "HTTP": {
                            "PathPrefix": "/admin",
                        },
                    },
                    "Destination": {
                        "Service": "admin",
                    },
                }],
            }))
        ingress_gateway = consul.ConfigEntry("ingressGateway",
            kind="ingress-gateway",
            config_json=json.dumps({
                "TLS": {
                    "Enabled": True,
                },
                "Listeners": [{
                    "Port": 8000,
                    "Protocol": "http",
                    "Services": [{
                        "Name": "*",
                    }],
                }],
            }))
        terminating_gateway = consul.ConfigEntry("terminatingGateway",
            kind="terminating-gateway",
            config_json=json.dumps({
                "Services": [{
                    "Name": "billing",
                }],
            }))
        ```
        ### `service-intentions` config entry

        ```python
        import pulumi
        import json
        import pulumi_consul as consul

        service_intentions = consul.ConfigEntry("serviceIntentions",
            kind="service-intentions",
            config_json=json.dumps({
                "Sources": [
                    {
                        "Action": "allow",
                        "Name": "frontend-webapp",
                        "Precedence": 9,
                        "Type": "consul",
                    },
                    {
                        "Action": "allow",
                        "Name": "nightly-cronjob",
                        "Precedence": 9,
                        "Type": "consul",
                    },
                ],
            }))
        ```

        ```python
        import pulumi
        import json
        import pulumi_consul as consul

        sd = consul.ConfigEntry("sd",
            kind="service-defaults",
            config_json=json.dumps({
                "Protocol": "http",
            }))
        service_intentions = consul.ConfigEntry("serviceIntentions",
            kind="service-intentions",
            config_json=json.dumps({
                "Sources": [
                    {
                        "Name": "contractor-webapp",
                        "Permissions": [{
                            "Action": "allow",
                            "HTTP": {
                                "Methods": [
                                    "GET",
                                    "HEAD",
                                ],
                                "PathExact": "/healtz",
                            },
                        }],
                        "Precedence": 9,
                        "Type": "consul",
                    },
                    {
                        "Name": "admin-dashboard-webapp",
                        "Permissions": [
                            {
                                "Action": "deny",
                                "HTTP": {
                                    "PathPrefix": "/debugz",
                                },
                            },
                            {
                                "Action": "allow",
                                "HTTP": {
                                    "PathPrefix": "/",
                                },
                            },
                        ],
                        "Precedence": 9,
                        "Type": "consul",
                    },
                ],
            }))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_json: An arbitrary map of configuration values.
        :param pulumi.Input[str] kind: The kind of configuration entry to register.
        :param pulumi.Input[str] name: The name of the configuration entry being registred.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['config_json'] = config_json
            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__['kind'] = kind
            __props__['name'] = name
        super(ConfigEntry, __self__).__init__(
            'consul:index/configEntry:ConfigEntry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_json: Optional[pulumi.Input[str]] = None,
            kind: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'ConfigEntry':
        """
        Get an existing ConfigEntry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_json: An arbitrary map of configuration values.
        :param pulumi.Input[str] kind: The kind of configuration entry to register.
        :param pulumi.Input[str] name: The name of the configuration entry being registred.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config_json"] = config_json
        __props__["kind"] = kind
        __props__["name"] = name
        return ConfigEntry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configJson")
    def config_json(self) -> pulumi.Output[Optional[str]]:
        """
        An arbitrary map of configuration values.
        """
        return pulumi.get(self, "config_json")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        The kind of configuration entry to register.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the configuration entry being registred.
        """
        return pulumi.get(self, "name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

