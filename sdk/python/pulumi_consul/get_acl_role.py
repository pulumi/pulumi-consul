# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetAclRoleResult:
    """
    A collection of values returned by getAclRole.
    """
    def __init__(__self__, description=None, name=None, policies=None, service_identities=None, id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        The description of the ACL Role.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        __self__.policies = policies
        """
        The list of policies associated with the ACL Role. Each entry has
        an `id` and a `name` attribute.
        """
        if service_identities and not isinstance(service_identities, list):
            raise TypeError("Expected argument 'service_identities' to be a list")
        __self__.service_identities = service_identities
        """
        The list of service identities associated with the ACL
        Role. Each entry has a `service_name` attribute and a list of `datacenters`.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
class AwaitableGetAclRoleResult(GetAclRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAclRoleResult(
            description=self.description,
            name=self.name,
            policies=self.policies,
            service_identities=self.service_identities,
            id=self.id)

def get_acl_role(description=None,name=None,policies=None,service_identities=None,opts=None):
    """
    The `.AclRole` data source returns the information related to a
    [Consul ACL Role](https://www.consul.io/api/acl/roles.html).
    
    :param str name: The name of the ACL Role.
    
    The **policies** object supports the following:
    
      * `id` (`str`)
      * `name` (`str`) - The name of the ACL Role.
    
    The **service_identities** object supports the following:
    
      * `datacenters` (`list`)
      * `serviceName` (`str`)

    > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/d/acl_role.html.markdown.
    """
    __args__ = dict()

    __args__['description'] = description
    __args__['name'] = name
    __args__['policies'] = policies
    __args__['serviceIdentities'] = service_identities
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('consul:index/getAclRole:getAclRole', __args__, opts=opts).value

    return AwaitableGetAclRoleResult(
        description=__ret__.get('description'),
        name=__ret__.get('name'),
        policies=__ret__.get('policies'),
        service_identities=__ret__.get('serviceIdentities'),
        id=__ret__.get('id'))
