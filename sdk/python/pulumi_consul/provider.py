# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Provider']


class Provider(pulumi.ProviderResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 ca_file: Optional[pulumi.Input[str]] = None,
                 ca_path: Optional[pulumi.Input[str]] = None,
                 ca_pem: Optional[pulumi.Input[str]] = None,
                 cert_file: Optional[pulumi.Input[str]] = None,
                 cert_pem: Optional[pulumi.Input[str]] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 http_auth: Optional[pulumi.Input[str]] = None,
                 insecure_https: Optional[pulumi.Input[bool]] = None,
                 key_file: Optional[pulumi.Input[str]] = None,
                 key_pem: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        The provider type for the consul package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if address is None:
                address = (_utilities.get_env('CONSUL_ADDRESS', 'CONSUL_HTTP_ADDR') or 'localhost:8500')
            __props__['address'] = address
            if ca_file is None:
                ca_file = _utilities.get_env('CONSUL_CA_FILE')
            __props__['ca_file'] = ca_file
            if ca_path is None:
                ca_path = _utilities.get_env('CONSUL_CAPATH')
            __props__['ca_path'] = ca_path
            __props__['ca_pem'] = ca_pem
            if cert_file is None:
                cert_file = _utilities.get_env('CONSUL_CERT_FILE')
            __props__['cert_file'] = cert_file
            __props__['cert_pem'] = cert_pem
            __props__['datacenter'] = datacenter
            if http_auth is None:
                http_auth = _utilities.get_env('CONSUL_HTTP_AUTH')
            __props__['http_auth'] = http_auth
            __props__['insecure_https'] = pulumi.Output.from_input(insecure_https).apply(pulumi.runtime.to_json) if insecure_https is not None else None
            if key_file is None:
                key_file = _utilities.get_env('CONSUL_KEY_FILE')
            __props__['key_file'] = key_file
            __props__['key_pem'] = key_pem
            __props__['namespace'] = namespace
            if scheme is None:
                scheme = (_utilities.get_env('CONSUL_SCHEME', 'CONSUL_HTTP_SCHEME') or 'http')
            __props__['scheme'] = scheme
            if token is None:
                token = _utilities.get_env('CONSUL_TOKEN', 'CONSUL_HTTP_TOKEN')
            __props__['token'] = token
        super(Provider, __self__).__init__(
            'consul',
            resource_name,
            __props__,
            opts)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

