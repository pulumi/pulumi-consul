# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Service(pulumi.CustomResource):
    address: pulumi.Output[str]
    """
    The address of the service. Defaults to the
    address of the node.
    """
    checks: pulumi.Output[list]
    datacenter: pulumi.Output[str]
    """
    The datacenter to use. This overrides the
    agent's default datacenter and the datacenter in the provider setup.
    """
    external: pulumi.Output[bool]
    meta: pulumi.Output[dict]
    """
    A map of arbitrary KV metadata linked to the service
    instance.
    """
    name: pulumi.Output[str]
    """
    The name of the health-check.
    """
    namespace: pulumi.Output[str]
    """
    The namespace to create the service within.
    """
    node: pulumi.Output[str]
    """
    The name of the node the to register the service on.
    """
    port: pulumi.Output[float]
    """
    The port of the service.
    """
    service_id: pulumi.Output[str]
    """
    - If the service ID is not provided, it will be defaulted to the value
    of the `name` attribute.
    """
    tags: pulumi.Output[list]
    """
    A list of values that are opaque to Consul,
    but can be used to distinguish between services or nodes.
    """
    def __init__(__self__, resource_name, opts=None, address=None, checks=None, datacenter=None, external=None, meta=None, name=None, namespace=None, node=None, port=None, service_id=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        A high-level resource for creating a Service in Consul in the Consul catalog. This
        is appropriate for registering [external services](https://www.consul.io/docs/guides/external.html) and
        can be used to create services addressable by Consul that cannot be registered
        with a [local agent](https://www.consul.io/docs/agent/basics.html).

        If the Consul agent is running on the node where this service is registered, it is
        not recommended to use this resource.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_consul as consul

        compute = consul.Node("compute", address="www.google.com")
        google = consul.Service("google",
            node=compute.name,
            port=80,
            tags=["tag0"])
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: The address of the service. Defaults to the
               address of the node.
        :param pulumi.Input[str] datacenter: The datacenter to use. This overrides the
               agent's default datacenter and the datacenter in the provider setup.
        :param pulumi.Input[dict] meta: A map of arbitrary KV metadata linked to the service
               instance.
        :param pulumi.Input[str] name: The name of the health-check.
        :param pulumi.Input[str] namespace: The namespace to create the service within.
        :param pulumi.Input[str] node: The name of the node the to register the service on.
        :param pulumi.Input[float] port: The port of the service.
        :param pulumi.Input[str] service_id: - If the service ID is not provided, it will be defaulted to the value
               of the `name` attribute.
        :param pulumi.Input[list] tags: A list of values that are opaque to Consul,
               but can be used to distinguish between services or nodes.

        The **checks** object supports the following:

          * `checkId` (`pulumi.Input[str]`) - An ID, *unique per agent*. Will default to *name*
            if not set.
          * `deregisterCriticalServiceAfter` (`pulumi.Input[str]`) - The time after which
            the service is automatically deregistered when in the `critical` state.
            Defaults to `30s`.
          * `headers` (`pulumi.Input[list]`) - The headers to send for an HTTP check.
            The attributes of each header is given below.
            * `name` (`pulumi.Input[str]`) - The name of the header.
            * `values` (`pulumi.Input[list]`) - The header's list of values.

          * `http` (`pulumi.Input[str]`) - The HTTP endpoint to call for an HTTP check.
          * `interval` (`pulumi.Input[str]`) - The interval to wait between each health-check
            invocation.
          * `method` (`pulumi.Input[str]`) - The method to use for HTTP health-checks. Defaults
            to `GET`.
          * `name` (`pulumi.Input[str]`) - The name of the health-check.
          * `notes` (`pulumi.Input[str]`) - An opaque field meant to hold human readable text.
          * `status` (`pulumi.Input[str]`) - The initial health-check status.
          * `tcp` (`pulumi.Input[str]`) - The TCP address and port to connect to for a TCP check.
          * `timeout` (`pulumi.Input[str]`) - The timeout value for HTTP checks.
          * `tlsSkipVerify` (`pulumi.Input[bool]`) - Whether to deactivate certificate
            verification for HTTP health-checks. Defaults to `false`.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['address'] = address
            __props__['checks'] = checks
            __props__['datacenter'] = datacenter
            if external is not None:
                warnings.warn("The external field has been deprecated and does nothing.", DeprecationWarning)
                pulumi.log.warn("external is deprecated: The external field has been deprecated and does nothing.")
            __props__['external'] = external
            __props__['meta'] = meta
            __props__['name'] = name
            __props__['namespace'] = namespace
            if node is None:
                raise TypeError("Missing required property 'node'")
            __props__['node'] = node
            __props__['port'] = port
            __props__['service_id'] = service_id
            __props__['tags'] = tags
        super(Service, __self__).__init__(
            'consul:index/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, address=None, checks=None, datacenter=None, external=None, meta=None, name=None, namespace=None, node=None, port=None, service_id=None, tags=None):
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: The address of the service. Defaults to the
               address of the node.
        :param pulumi.Input[str] datacenter: The datacenter to use. This overrides the
               agent's default datacenter and the datacenter in the provider setup.
        :param pulumi.Input[dict] meta: A map of arbitrary KV metadata linked to the service
               instance.
        :param pulumi.Input[str] name: The name of the health-check.
        :param pulumi.Input[str] namespace: The namespace to create the service within.
        :param pulumi.Input[str] node: The name of the node the to register the service on.
        :param pulumi.Input[float] port: The port of the service.
        :param pulumi.Input[str] service_id: - If the service ID is not provided, it will be defaulted to the value
               of the `name` attribute.
        :param pulumi.Input[list] tags: A list of values that are opaque to Consul,
               but can be used to distinguish between services or nodes.

        The **checks** object supports the following:

          * `checkId` (`pulumi.Input[str]`) - An ID, *unique per agent*. Will default to *name*
            if not set.
          * `deregisterCriticalServiceAfter` (`pulumi.Input[str]`) - The time after which
            the service is automatically deregistered when in the `critical` state.
            Defaults to `30s`.
          * `headers` (`pulumi.Input[list]`) - The headers to send for an HTTP check.
            The attributes of each header is given below.
            * `name` (`pulumi.Input[str]`) - The name of the header.
            * `values` (`pulumi.Input[list]`) - The header's list of values.

          * `http` (`pulumi.Input[str]`) - The HTTP endpoint to call for an HTTP check.
          * `interval` (`pulumi.Input[str]`) - The interval to wait between each health-check
            invocation.
          * `method` (`pulumi.Input[str]`) - The method to use for HTTP health-checks. Defaults
            to `GET`.
          * `name` (`pulumi.Input[str]`) - The name of the health-check.
          * `notes` (`pulumi.Input[str]`) - An opaque field meant to hold human readable text.
          * `status` (`pulumi.Input[str]`) - The initial health-check status.
          * `tcp` (`pulumi.Input[str]`) - The TCP address and port to connect to for a TCP check.
          * `timeout` (`pulumi.Input[str]`) - The timeout value for HTTP checks.
          * `tlsSkipVerify` (`pulumi.Input[bool]`) - Whether to deactivate certificate
            verification for HTTP health-checks. Defaults to `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["address"] = address
        __props__["checks"] = checks
        __props__["datacenter"] = datacenter
        __props__["external"] = external
        __props__["meta"] = meta
        __props__["name"] = name
        __props__["namespace"] = namespace
        __props__["node"] = node
        __props__["port"] = port
        __props__["service_id"] = service_id
        __props__["tags"] = tags
        return Service(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

