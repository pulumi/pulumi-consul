# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AuthJwt',
    'Headers',
]

@pulumi.output_type
class AuthJwt(dict):
    def __init__(__self__, *,
                 auth_method: str,
                 bearer_token: Optional[str] = None,
                 meta: Optional[Mapping[str, str]] = None,
                 use_terraform_cloud_workload_identity: Optional[bool] = None):
        AuthJwt._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_method=auth_method,
            bearer_token=bearer_token,
            meta=meta,
            use_terraform_cloud_workload_identity=use_terraform_cloud_workload_identity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_method: str,
             bearer_token: Optional[str] = None,
             meta: Optional[Mapping[str, str]] = None,
             use_terraform_cloud_workload_identity: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("auth_method", auth_method)
        if bearer_token is not None:
            _setter("bearer_token", bearer_token)
        if meta is not None:
            _setter("meta", meta)
        if use_terraform_cloud_workload_identity is not None:
            _setter("use_terraform_cloud_workload_identity", use_terraform_cloud_workload_identity)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[str]:
        return pulumi.get(self, "bearer_token")

    @property
    @pulumi.getter
    def meta(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter(name="useTerraformCloudWorkloadIdentity")
    def use_terraform_cloud_workload_identity(self) -> Optional[bool]:
        return pulumi.get(self, "use_terraform_cloud_workload_identity")


@pulumi.output_type
class Headers(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        Headers._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


