# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetConfigEntryResult',
    'AwaitableGetConfigEntryResult',
    'get_config_entry',
    'get_config_entry_output',
]

@pulumi.output_type
class GetConfigEntryResult:
    """
    A collection of values returned by getConfigEntry.
    """
    def __init__(__self__, config_json=None, id=None, kind=None, name=None, namespace=None, partition=None):
        if config_json and not isinstance(config_json, str):
            raise TypeError("Expected argument 'config_json' to be a str")
        pulumi.set(__self__, "config_json", config_json)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if partition and not isinstance(partition, str):
            raise TypeError("Expected argument 'partition' to be a str")
        pulumi.set(__self__, "partition", partition)

    @property
    @pulumi.getter(name="configJson")
    def config_json(self) -> str:
        return pulumi.get(self, "config_json")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def partition(self) -> Optional[str]:
        return pulumi.get(self, "partition")


class AwaitableGetConfigEntryResult(GetConfigEntryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigEntryResult(
            config_json=self.config_json,
            id=self.id,
            kind=self.kind,
            name=self.name,
            namespace=self.namespace,
            partition=self.partition)


def get_config_entry(kind: Optional[str] = None,
                     name: Optional[str] = None,
                     namespace: Optional[str] = None,
                     partition: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigEntryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['kind'] = kind
    __args__['name'] = name
    __args__['namespace'] = namespace
    __args__['partition'] = partition
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('consul:index/getConfigEntry:getConfigEntry', __args__, opts=opts, typ=GetConfigEntryResult).value

    return AwaitableGetConfigEntryResult(
        config_json=__ret__.config_json,
        id=__ret__.id,
        kind=__ret__.kind,
        name=__ret__.name,
        namespace=__ret__.namespace,
        partition=__ret__.partition)


@_utilities.lift_output_func(get_config_entry)
def get_config_entry_output(kind: Optional[pulumi.Input[str]] = None,
                            name: Optional[pulumi.Input[str]] = None,
                            namespace: Optional[pulumi.Input[Optional[str]]] = None,
                            partition: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConfigEntryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
