# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['AclBindingRule']


class AclBindingRule(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 bind_name: Optional[pulumi.Input[str]] = None,
                 bind_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 selector: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Starting with Consul 1.5.0, the AclBindingRule resource can be used to
        managed Consul ACL binding rules.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_consul as consul

        minikube = consul.AclAuthMethod("minikube",
            config={
                "CACert": \"\"\"-----BEGIN CERTIFICATE-----
        ...-----END CERTIFICATE-----

        \"\"\",
                "Host": "https://192.0.2.42:8443",
                "ServiceAccountJWT": "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...",
            },
            description="dev minikube cluster",
            type="kubernetes")
        test = consul.AclBindingRule("test",
            auth_method=minikube.name,
            bind_name="minikube",
            bind_type="service",
            description="foobar",
            selector="serviceaccount.namespace==default")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_method: The name of the ACL auth method this rule apply.
        :param pulumi.Input[str] bind_name: The name to bind to a token at login-time.
        :param pulumi.Input[str] bind_type: Specifies the way the binding rule affects a token
               created at login.
        :param pulumi.Input[str] description: A free form human readable description of the
               binding rule.
        :param pulumi.Input[str] namespace: The namespace to create the binding
               rule within.
        :param pulumi.Input[str] selector: The expression used to math this rule against valid
               identities returned from an auth method validation.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if auth_method is None and not opts.urn:
                raise TypeError("Missing required property 'auth_method'")
            __props__['auth_method'] = auth_method
            if bind_name is None and not opts.urn:
                raise TypeError("Missing required property 'bind_name'")
            __props__['bind_name'] = bind_name
            if bind_type is None and not opts.urn:
                raise TypeError("Missing required property 'bind_type'")
            __props__['bind_type'] = bind_type
            __props__['description'] = description
            __props__['namespace'] = namespace
            __props__['selector'] = selector
        super(AclBindingRule, __self__).__init__(
            'consul:index/aclBindingRule:AclBindingRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_method: Optional[pulumi.Input[str]] = None,
            bind_name: Optional[pulumi.Input[str]] = None,
            bind_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            selector: Optional[pulumi.Input[str]] = None) -> 'AclBindingRule':
        """
        Get an existing AclBindingRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_method: The name of the ACL auth method this rule apply.
        :param pulumi.Input[str] bind_name: The name to bind to a token at login-time.
        :param pulumi.Input[str] bind_type: Specifies the way the binding rule affects a token
               created at login.
        :param pulumi.Input[str] description: A free form human readable description of the
               binding rule.
        :param pulumi.Input[str] namespace: The namespace to create the binding
               rule within.
        :param pulumi.Input[str] selector: The expression used to math this rule against valid
               identities returned from an auth method validation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["auth_method"] = auth_method
        __props__["bind_name"] = bind_name
        __props__["bind_type"] = bind_type
        __props__["description"] = description
        __props__["namespace"] = namespace
        __props__["selector"] = selector
        return AclBindingRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Output[str]:
        """
        The name of the ACL auth method this rule apply.
        """
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="bindName")
    def bind_name(self) -> pulumi.Output[str]:
        """
        The name to bind to a token at login-time.
        """
        return pulumi.get(self, "bind_name")

    @property
    @pulumi.getter(name="bindType")
    def bind_type(self) -> pulumi.Output[str]:
        """
        Specifies the way the binding rule affects a token
        created at login.
        """
        return pulumi.get(self, "bind_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A free form human readable description of the
        binding rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        The namespace to create the binding
        rule within.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Output[Optional[str]]:
        """
        The expression used to math this rule against valid
        identities returned from an auth method validation.
        """
        return pulumi.get(self, "selector")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

