# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Namespace(pulumi.CustomResource):
    description: pulumi.Output[str]
    """
    Free form namespace description.
    """
    meta: pulumi.Output[dict]
    """
    Specifies arbitrary KV metadata to associate with the
    namespace.
    """
    name: pulumi.Output[str]
    """
    The namespace name.
    """
    policy_defaults: pulumi.Output[list]
    """
    The list of default policies that should be
    applied to all tokens created in this namespace.
    """
    role_defaults: pulumi.Output[list]
    """
    The list of default roles that should be applied
    to all tokens created in this namespace.
    """
    def __init__(__self__, resource_name, opts=None, description=None, meta=None, name=None, policy_defaults=None, role_defaults=None, __props__=None, __name__=None, __opts__=None):
        """
        > **NOTE:** This feature requires Consul Enterprise.

        The `.Namespace` resource provides isolated [Consul Enterprise Namespaces](https://www.consul.io/docs/enterprise/namespaces/index.html).

        ## Example Usage



        ```python
        import pulumi
        import pulumi_consul as consul

        production = consul.Namespace("production",
            description="Production namespace",
            meta={
                "foo": "bar",
            })
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Free form namespace description.
        :param pulumi.Input[dict] meta: Specifies arbitrary KV metadata to associate with the
               namespace.
        :param pulumi.Input[str] name: The namespace name.
        :param pulumi.Input[list] policy_defaults: The list of default policies that should be
               applied to all tokens created in this namespace.
        :param pulumi.Input[list] role_defaults: The list of default roles that should be applied
               to all tokens created in this namespace.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['meta'] = meta
            __props__['name'] = name
            __props__['policy_defaults'] = policy_defaults
            __props__['role_defaults'] = role_defaults
        super(Namespace, __self__).__init__(
            'consul:index/namespace:Namespace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, description=None, meta=None, name=None, policy_defaults=None, role_defaults=None):
        """
        Get an existing Namespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Free form namespace description.
        :param pulumi.Input[dict] meta: Specifies arbitrary KV metadata to associate with the
               namespace.
        :param pulumi.Input[str] name: The namespace name.
        :param pulumi.Input[list] policy_defaults: The list of default policies that should be
               applied to all tokens created in this namespace.
        :param pulumi.Input[list] role_defaults: The list of default roles that should be applied
               to all tokens created in this namespace.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["meta"] = meta
        __props__["name"] = name
        __props__["policy_defaults"] = policy_defaults
        __props__["role_defaults"] = role_defaults
        return Namespace(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

