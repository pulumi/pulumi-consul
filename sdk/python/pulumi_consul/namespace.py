# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Namespace']


class Namespace(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 meta: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role_defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        > **NOTE:** This feature requires Consul Enterprise.

        The `Namespace` resource provides isolated [Consul Enterprise Namespaces](https://www.consul.io/docs/enterprise/namespaces/index.html).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_consul as consul

        production = consul.Namespace("production",
            description="Production namespace",
            meta={
                "foo": "bar",
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Free form namespace description.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] meta: Specifies arbitrary KV metadata to associate with the
               namespace.
        :param pulumi.Input[str] name: The namespace name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policy_defaults: The list of default policies that should be
               applied to all tokens created in this namespace.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] role_defaults: The list of default roles that should be applied
               to all tokens created in this namespace.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['meta'] = meta
            __props__['name'] = name
            __props__['policy_defaults'] = policy_defaults
            __props__['role_defaults'] = role_defaults
        super(Namespace, __self__).__init__(
            'consul:index/namespace:Namespace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            meta: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policy_defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            role_defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Namespace':
        """
        Get an existing Namespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Free form namespace description.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] meta: Specifies arbitrary KV metadata to associate with the
               namespace.
        :param pulumi.Input[str] name: The namespace name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policy_defaults: The list of default policies that should be
               applied to all tokens created in this namespace.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] role_defaults: The list of default roles that should be applied
               to all tokens created in this namespace.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["meta"] = meta
        __props__["name"] = name
        __props__["policy_defaults"] = policy_defaults
        __props__["role_defaults"] = role_defaults
        return Namespace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Free form namespace description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def meta(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies arbitrary KV metadata to associate with the
        namespace.
        """
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The namespace name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyDefaults")
    def policy_defaults(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of default policies that should be
        applied to all tokens created in this namespace.
        """
        return pulumi.get(self, "policy_defaults")

    @property
    @pulumi.getter(name="roleDefaults")
    def role_defaults(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of default roles that should be applied
        to all tokens created in this namespace.
        """
        return pulumi.get(self, "role_defaults")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

