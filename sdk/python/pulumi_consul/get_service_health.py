# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetServiceHealthResult:
    """
    A collection of values returned by getServiceHealth.
    """
    def __init__(__self__, datacenter=None, id=None, name=None, near=None, node_meta=None, passing=None, results=None, tag=None, wait_for=None):
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        __self__.datacenter = datacenter
        """
        The datacenter in which the node is running.
        * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
        List of explicit LAN and WAN IP addresses for the agent.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of this health-check.
        """
        if near and not isinstance(near, str):
            raise TypeError("Expected argument 'near' to be a str")
        __self__.near = near
        """
        The node to which the result must be sorted to.
        """
        if node_meta and not isinstance(node_meta, dict):
            raise TypeError("Expected argument 'node_meta' to be a dict")
        __self__.node_meta = node_meta
        """
        The list of metadata to filter the nodes.
        """
        if passing and not isinstance(passing, bool):
            raise TypeError("Expected argument 'passing' to be a bool")
        __self__.passing = passing
        """
        Whether to return only nodes with all checks in the
        passing state.
        """
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        __self__.results = results
        """
        A list of entries and details about each endpoint advertising a
        service.  Each element in the list has three attributes: `node`, `service` and
        `checks`.  The list of the attributes of each one is detailed below.
        """
        if tag and not isinstance(tag, str):
            raise TypeError("Expected argument 'tag' to be a str")
        __self__.tag = tag
        """
        The name of the tag used to filter the list.
        """
        if wait_for and not isinstance(wait_for, str):
            raise TypeError("Expected argument 'wait_for' to be a str")
        __self__.wait_for = wait_for
class AwaitableGetServiceHealthResult(GetServiceHealthResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceHealthResult(
            datacenter=self.datacenter,
            id=self.id,
            name=self.name,
            near=self.near,
            node_meta=self.node_meta,
            passing=self.passing,
            results=self.results,
            tag=self.tag,
            wait_for=self.wait_for)

def get_service_health(datacenter=None,name=None,near=None,node_meta=None,passing=None,tag=None,wait_for=None,opts=None):
    """
    `.getServiceHealth` can be used to get the list of the instances that
    are currently healthy, according to their associated  health-checks.
    The result includes the list of service instances, the node associated to each
    instance and its health-checks.

    This resource is likely to change as frequently as the health-checks are being
    updated, you should expect different results in a frequent basis.




    :param str datacenter: The Consul datacenter to query.
    :param str name: The service name to select.
    :param str near: Specifies a node name to sort the node list in ascending order
           based on the estimated round trip time from that node.
    :param dict node_meta: Filter the results to nodes with the specified key/value
           pairs.
    :param bool passing: Whether to return only nodes with all checks in the
           passing state. Defaults to `true`.
    :param str tag: A single tag that can be used to filter the list to return
           based on a single matching tag.
    """
    __args__ = dict()


    __args__['datacenter'] = datacenter
    __args__['name'] = name
    __args__['near'] = near
    __args__['nodeMeta'] = node_meta
    __args__['passing'] = passing
    __args__['tag'] = tag
    __args__['waitFor'] = wait_for
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('consul:index/getServiceHealth:getServiceHealth', __args__, opts=opts).value

    return AwaitableGetServiceHealthResult(
        datacenter=__ret__.get('datacenter'),
        id=__ret__.get('id'),
        name=__ret__.get('name'),
        near=__ret__.get('near'),
        node_meta=__ret__.get('nodeMeta'),
        passing=__ret__.get('passing'),
        results=__ret__.get('results'),
        tag=__ret__.get('tag'),
        wait_for=__ret__.get('waitFor'))
