# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class AclAuthMethod(pulumi.CustomResource):
    config: pulumi.Output[dict]
    """
    The raw configuration for this ACL auth method. This
    attribute is deprecated and will be removed in a future version. `config_json`
    should be used instead.
    """
    config_json: pulumi.Output[str]
    """
    The raw configuration for this ACL auth method.
    """
    description: pulumi.Output[str]
    """
    A free form human readable description of the auth method.
    """
    display_name: pulumi.Output[str]
    """
    An optional name to use instead of the name
    attribute when displaying information about this auth method.
    """
    max_token_ttl: pulumi.Output[str]
    """
    The maximum life of any token created by this
    auth method.
    """
    name: pulumi.Output[str]
    """
    The name of the ACL auth method.
    """
    namespace: pulumi.Output[str]
    """
    The namespace to create the policy within.
    """
    namespace_rules: pulumi.Output[list]
    """
    A set of rules that control
    which namespace tokens created via this auth method will be created within.

      * `bindNamespace` (`str`) - If the namespace rule's `selector` matches then
        this is used to control the namespace where the token is created.
      * `selector` (`str`) - Specifies the expression used to match this namespace
        rule against valid identities returned from an auth method validation.
        Defaults to `""`.
    """
    token_locality: pulumi.Output[str]
    """
    The kind of token that this auth method
    produces. This can be either 'local' or 'global'.
    """
    type: pulumi.Output[str]
    """
    The type of the ACL auth method.
    """
    def __init__(__self__, resource_name, opts=None, config=None, config_json=None, description=None, display_name=None, max_token_ttl=None, name=None, namespace=None, namespace_rules=None, token_locality=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Starting with Consul 1.5.0, the AclAuthMethod resource can be used to
        managed [Consul ACL auth methods](https://www.consul.io/docs/acl/auth-methods).

        ## Example Usage

        Define a `kubernetes` auth method:
        ```python
        import pulumi
        import json
        import pulumi_consul as consul

        minikube = consul.AclAuthMethod("minikube",
            type="kubernetes",
            description="dev minikube cluster",
            config_json=json.dumps({
                "Host": "https://192.0.2.42:8443",
                "CACert": \"\"\"-----BEGIN CERTIFICATE-----
        ...-----END CERTIFICATE-----
        \"\"\",
                "ServiceAccountJWT": "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...",
            }))
        ```

        Define a `jwt` auth method:
        ```python
        import pulumi
        import json
        import pulumi_consul as consul

        minikube = consul.AclAuthMethod("minikube",
            type="jwt",
            config_json=json.dumps({
                "JWKSURL": "https://example.com/identity/oidc/.well-known/keys",
                "JWTSupportedAlgs": "RS256",
                "BoundIssuer": "https://example.com",
                "ClaimMappings": {
                    "subject": "subject",
                },
            }))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: The raw configuration for this ACL auth method. This
               attribute is deprecated and will be removed in a future version. `config_json`
               should be used instead.
        :param pulumi.Input[str] config_json: The raw configuration for this ACL auth method.
        :param pulumi.Input[str] description: A free form human readable description of the auth method.
        :param pulumi.Input[str] display_name: An optional name to use instead of the name
               attribute when displaying information about this auth method.
        :param pulumi.Input[str] max_token_ttl: The maximum life of any token created by this
               auth method.
        :param pulumi.Input[str] name: The name of the ACL auth method.
        :param pulumi.Input[str] namespace: The namespace to create the policy within.
        :param pulumi.Input[list] namespace_rules: A set of rules that control
               which namespace tokens created via this auth method will be created within.
        :param pulumi.Input[str] token_locality: The kind of token that this auth method
               produces. This can be either 'local' or 'global'.
        :param pulumi.Input[str] type: The type of the ACL auth method.

        The **namespace_rules** object supports the following:

          * `bindNamespace` (`pulumi.Input[str]`) - If the namespace rule's `selector` matches then
            this is used to control the namespace where the token is created.
          * `selector` (`pulumi.Input[str]`) - Specifies the expression used to match this namespace
            rule against valid identities returned from an auth method validation.
            Defaults to `""`.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if config is not None:
                warnings.warn("The config attribute is deprecated, please use config_json instead.", DeprecationWarning)
                pulumi.log.warn("config is deprecated: The config attribute is deprecated, please use config_json instead.")
            __props__['config'] = config
            __props__['config_json'] = config_json
            __props__['description'] = description
            __props__['display_name'] = display_name
            __props__['max_token_ttl'] = max_token_ttl
            __props__['name'] = name
            __props__['namespace'] = namespace
            __props__['namespace_rules'] = namespace_rules
            __props__['token_locality'] = token_locality
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
        super(AclAuthMethod, __self__).__init__(
            'consul:index/aclAuthMethod:AclAuthMethod',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, config=None, config_json=None, description=None, display_name=None, max_token_ttl=None, name=None, namespace=None, namespace_rules=None, token_locality=None, type=None):
        """
        Get an existing AclAuthMethod resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: The raw configuration for this ACL auth method. This
               attribute is deprecated and will be removed in a future version. `config_json`
               should be used instead.
        :param pulumi.Input[str] config_json: The raw configuration for this ACL auth method.
        :param pulumi.Input[str] description: A free form human readable description of the auth method.
        :param pulumi.Input[str] display_name: An optional name to use instead of the name
               attribute when displaying information about this auth method.
        :param pulumi.Input[str] max_token_ttl: The maximum life of any token created by this
               auth method.
        :param pulumi.Input[str] name: The name of the ACL auth method.
        :param pulumi.Input[str] namespace: The namespace to create the policy within.
        :param pulumi.Input[list] namespace_rules: A set of rules that control
               which namespace tokens created via this auth method will be created within.
        :param pulumi.Input[str] token_locality: The kind of token that this auth method
               produces. This can be either 'local' or 'global'.
        :param pulumi.Input[str] type: The type of the ACL auth method.

        The **namespace_rules** object supports the following:

          * `bindNamespace` (`pulumi.Input[str]`) - If the namespace rule's `selector` matches then
            this is used to control the namespace where the token is created.
          * `selector` (`pulumi.Input[str]`) - Specifies the expression used to match this namespace
            rule against valid identities returned from an auth method validation.
            Defaults to `""`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config"] = config
        __props__["config_json"] = config_json
        __props__["description"] = description
        __props__["display_name"] = display_name
        __props__["max_token_ttl"] = max_token_ttl
        __props__["name"] = name
        __props__["namespace"] = namespace
        __props__["namespace_rules"] = namespace_rules
        __props__["token_locality"] = token_locality
        __props__["type"] = type
        return AclAuthMethod(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
