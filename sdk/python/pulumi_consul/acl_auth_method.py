# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['AclAuthMethod']


class AclAuthMethod(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config_json: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 max_token_ttl: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 namespace_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclAuthMethodNamespaceRuleArgs']]]]] = None,
                 token_locality: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Starting with Consul 1.5.0, the AclAuthMethod resource can be used to
        managed [Consul ACL auth methods](https://www.consul.io/docs/acl/auth-methods).

        ## Example Usage

        Define a `kubernetes` auth method:
        ```python
        import pulumi
        import json
        import pulumi_consul as consul

        minikube = consul.AclAuthMethod("minikube",
            type="kubernetes",
            description="dev minikube cluster",
            config_json=json.dumps({
                "Host": "https://192.0.2.42:8443",
                "CACert": \"\"\"-----BEGIN CERTIFICATE-----
        ...-----END CERTIFICATE-----
        \"\"\",
                "ServiceAccountJWT": "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...",
            }))
        ```

        Define a `jwt` auth method:
        ```python
        import pulumi
        import json
        import pulumi_consul as consul

        minikube = consul.AclAuthMethod("minikube",
            type="jwt",
            config_json=json.dumps({
                "JWKSURL": "https://example.com/identity/oidc/.well-known/keys",
                "JWTSupportedAlgs": "RS256",
                "BoundIssuer": "https://example.com",
                "ClaimMappings": {
                    "subject": "subject",
                },
            }))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: The raw configuration for this ACL auth method. This
               attribute is deprecated and will be removed in a future version. `config_json`
               should be used instead.
        :param pulumi.Input[str] config_json: The raw configuration for this ACL auth method.
        :param pulumi.Input[str] description: A free form human readable description of the auth method.
        :param pulumi.Input[str] display_name: An optional name to use instead of the name
               attribute when displaying information about this auth method.
        :param pulumi.Input[str] max_token_ttl: The maximum life of any token created by this
               auth method.
        :param pulumi.Input[str] name: The name of the ACL auth method.
        :param pulumi.Input[str] namespace: The namespace to create the policy within.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclAuthMethodNamespaceRuleArgs']]]] namespace_rules: A set of rules that control
               which namespace tokens created via this auth method will be created within.
        :param pulumi.Input[str] token_locality: The kind of token that this auth method
               produces. This can be either 'local' or 'global'.
        :param pulumi.Input[str] type: The type of the ACL auth method.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if config is not None and not opts.urn:
                warnings.warn("""The config attribute is deprecated, please use config_json instead.""", DeprecationWarning)
                pulumi.log.warn("config is deprecated: The config attribute is deprecated, please use config_json instead.")
            __props__['config'] = config
            __props__['config_json'] = config_json
            __props__['description'] = description
            __props__['display_name'] = display_name
            __props__['max_token_ttl'] = max_token_ttl
            __props__['name'] = name
            __props__['namespace'] = namespace
            __props__['namespace_rules'] = namespace_rules
            __props__['token_locality'] = token_locality
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
        super(AclAuthMethod, __self__).__init__(
            'consul:index/aclAuthMethod:AclAuthMethod',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            config_json: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            max_token_ttl: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            namespace_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclAuthMethodNamespaceRuleArgs']]]]] = None,
            token_locality: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'AclAuthMethod':
        """
        Get an existing AclAuthMethod resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: The raw configuration for this ACL auth method. This
               attribute is deprecated and will be removed in a future version. `config_json`
               should be used instead.
        :param pulumi.Input[str] config_json: The raw configuration for this ACL auth method.
        :param pulumi.Input[str] description: A free form human readable description of the auth method.
        :param pulumi.Input[str] display_name: An optional name to use instead of the name
               attribute when displaying information about this auth method.
        :param pulumi.Input[str] max_token_ttl: The maximum life of any token created by this
               auth method.
        :param pulumi.Input[str] name: The name of the ACL auth method.
        :param pulumi.Input[str] namespace: The namespace to create the policy within.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclAuthMethodNamespaceRuleArgs']]]] namespace_rules: A set of rules that control
               which namespace tokens created via this auth method will be created within.
        :param pulumi.Input[str] token_locality: The kind of token that this auth method
               produces. This can be either 'local' or 'global'.
        :param pulumi.Input[str] type: The type of the ACL auth method.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config"] = config
        __props__["config_json"] = config_json
        __props__["description"] = description
        __props__["display_name"] = display_name
        __props__["max_token_ttl"] = max_token_ttl
        __props__["name"] = name
        __props__["namespace"] = namespace
        __props__["namespace_rules"] = namespace_rules
        __props__["token_locality"] = token_locality
        __props__["type"] = type
        return AclAuthMethod(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        The raw configuration for this ACL auth method. This
        attribute is deprecated and will be removed in a future version. `config_json`
        should be used instead.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="configJson")
    def config_json(self) -> pulumi.Output[Optional[str]]:
        """
        The raw configuration for this ACL auth method.
        """
        return pulumi.get(self, "config_json")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A free form human readable description of the auth method.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        An optional name to use instead of the name
        attribute when displaying information about this auth method.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxTokenTtl")
    def max_token_ttl(self) -> pulumi.Output[Optional[str]]:
        """
        The maximum life of any token created by this
        auth method.
        """
        return pulumi.get(self, "max_token_ttl")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the ACL auth method.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        The namespace to create the policy within.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="namespaceRules")
    def namespace_rules(self) -> pulumi.Output[Optional[Sequence['outputs.AclAuthMethodNamespaceRule']]]:
        """
        A set of rules that control
        which namespace tokens created via this auth method will be created within.
        """
        return pulumi.get(self, "namespace_rules")

    @property
    @pulumi.getter(name="tokenLocality")
    def token_locality(self) -> pulumi.Output[Optional[str]]:
        """
        The kind of token that this auth method
        produces. This can be either 'local' or 'global'.
        """
        return pulumi.get(self, "token_locality")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the ACL auth method.
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

