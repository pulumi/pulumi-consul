# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class AclAuthMethod(pulumi.CustomResource):
    config: pulumi.Output[dict]
    """
    The raw configuration for this ACL auth method.
    """
    description: pulumi.Output[str]
    """
    A free form human readable description of the auth method.
    """
    name: pulumi.Output[str]
    """
    The name of the ACL auth method.
    """
    namespace: pulumi.Output[str]
    """
    The namespace to create the policy within.
    """
    type: pulumi.Output[str]
    """
    The type of the ACL auth method.
    """
    def __init__(__self__, resource_name, opts=None, config=None, description=None, name=None, namespace=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Starting with Consul 1.5.0, the .AclAuthMethod resource can be used to
        managed Consul ACL auth methods.


        ## Example Usage



        ```python
        import pulumi
        import pulumi_consul as consul

        minikube = consul.AclAuthMethod("minikube",
            config={
                "CACert": \"\"\"-----BEGIN CERTIFICATE-----
        ...-----END CERTIFICATE-----

        \"\"\",
                "Host": "https://192.0.2.42:8443",
                "ServiceAccountJWT": "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...",
            },
            description="dev minikube cluster",
            type="kubernetes")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: The raw configuration for this ACL auth method.
        :param pulumi.Input[str] description: A free form human readable description of the auth method.
        :param pulumi.Input[str] name: The name of the ACL auth method.
        :param pulumi.Input[str] namespace: The namespace to create the policy within.
        :param pulumi.Input[str] type: The type of the ACL auth method.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if config is None:
                raise TypeError("Missing required property 'config'")
            __props__['config'] = config
            __props__['description'] = description
            __props__['name'] = name
            __props__['namespace'] = namespace
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
        super(AclAuthMethod, __self__).__init__(
            'consul:index/aclAuthMethod:AclAuthMethod',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, config=None, description=None, name=None, namespace=None, type=None):
        """
        Get an existing AclAuthMethod resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: The raw configuration for this ACL auth method.
        :param pulumi.Input[str] description: A free form human readable description of the auth method.
        :param pulumi.Input[str] name: The name of the ACL auth method.
        :param pulumi.Input[str] namespace: The namespace to create the policy within.
        :param pulumi.Input[str] type: The type of the ACL auth method.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config"] = config
        __props__["description"] = description
        __props__["name"] = name
        __props__["namespace"] = namespace
        __props__["type"] = type
        return AclAuthMethod(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

