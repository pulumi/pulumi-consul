# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetKeyPrefixResult:
    """
    A collection of values returned by getKeyPrefix.
    """
    def __init__(__self__, datacenter=None, id=None, namespace=None, path_prefix=None, subkey_collection=None, subkeys=None, token=None, var=None):
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        __self__.datacenter = datacenter
        """
        The datacenter the keys are being read from.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        __self__.namespace = namespace
        if path_prefix and not isinstance(path_prefix, str):
            raise TypeError("Expected argument 'path_prefix' to be a str")
        __self__.path_prefix = path_prefix
        """
        the common prefix shared by all keys being read.
        * `var.<name>` - For each name given, the corresponding attribute
        has the value of the key.
        """
        if subkey_collection and not isinstance(subkey_collection, list):
            raise TypeError("Expected argument 'subkey_collection' to be a list")
        __self__.subkey_collection = subkey_collection
        if subkeys and not isinstance(subkeys, dict):
            raise TypeError("Expected argument 'subkeys' to be a dict")
        __self__.subkeys = subkeys
        """
        A map of the subkeys and values is set if no `subkey`
        block is provided.
        """
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        __self__.token = token
        if var and not isinstance(var, dict):
            raise TypeError("Expected argument 'var' to be a dict")
        __self__.var = var
class AwaitableGetKeyPrefixResult(GetKeyPrefixResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKeyPrefixResult(
            datacenter=self.datacenter,
            id=self.id,
            namespace=self.namespace,
            path_prefix=self.path_prefix,
            subkey_collection=self.subkey_collection,
            subkeys=self.subkeys,
            token=self.token,
            var=self.var)

def get_key_prefix(datacenter=None,namespace=None,path_prefix=None,subkey_collection=None,token=None,opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str datacenter: The datacenter to use. This overrides the
           agent's default datacenter and the datacenter in the provider setup.
    :param str namespace: The namespace to create the keys within.
    :param str path_prefix: Specifies the common prefix shared by all keys
           that will be read by this data source instance. In most cases, this will
           end with a slash to read a "folder" of subkeys.
    :param list subkey_collection: Specifies a subkey in Consul to be read. Supported
           values documented below. Multiple blocks supported.
    :param str token: The ACL token to use. This overrides the
           token that the agent provides by default.

    The **subkey_collection** object supports the following:

      * `default` (`str`) - This is the default value to set for `var.<name>`
        if the key does not exist in Consul. Defaults to an empty string.
      * `name` (`str`) - This is the name of the key. This value of the
        key is exposed as `var.<name>`. This is not the path of the subkey
        in Consul.
      * `path` (`str`) - This is the subkey path in Consul (which will be appended
        to the given `path_prefix`) to construct the full key that will be used
        to read the value.
    """
    __args__ = dict()


    __args__['datacenter'] = datacenter
    __args__['namespace'] = namespace
    __args__['pathPrefix'] = path_prefix
    __args__['subkeyCollection'] = subkey_collection
    __args__['token'] = token
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('consul:index/getKeyPrefix:getKeyPrefix', __args__, opts=opts).value

    return AwaitableGetKeyPrefixResult(
        datacenter=__ret__.get('datacenter'),
        id=__ret__.get('id'),
        namespace=__ret__.get('namespace'),
        path_prefix=__ret__.get('pathPrefix'),
        subkey_collection=__ret__.get('subkeyCollection'),
        subkeys=__ret__.get('subkeys'),
        token=__ret__.get('token'),
        var=__ret__.get('var'))
