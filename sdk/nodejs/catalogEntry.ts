// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * !> The `consul.CatalogEntry` resource has been deprecated in version 2.0.0 of the provider
 * and will be removed in a future release. Please read the [upgrade guide](https://www.terraform.io/docs/providers/consul/guides/upgrading.html#deprecation-of-consul_catalog_entry)
 * for more information.
 *
 * Registers a node or service with the [Consul Catalog](https://www.consul.io/docs/agent/http/catalog.html#catalog_register).
 * Currently, defining health checks is not supported.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const app = new consul.CatalogEntry("app", {
 *     address: "192.168.10.10",
 *     node: "foobar",
 *     services: [{
 *         address: "127.0.0.1",
 *         id: "redis1",
 *         name: "redis",
 *         port: 8000,
 *         tags: [
 *             "master",
 *             "v1",
 *         ],
 *     }],
 * });
 * ```
 */
export class CatalogEntry extends pulumi.CustomResource {
    /**
     * Get an existing CatalogEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogEntryState, opts?: pulumi.CustomResourceOptions): CatalogEntry {
        return new CatalogEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/catalogEntry:CatalogEntry';

    /**
     * Returns true if the given object is an instance of CatalogEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogEntry.__pulumiType;
    }

    /**
     * The address of the node being added to,
     * or referenced in the catalog.
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    public readonly datacenter!: pulumi.Output<string>;
    /**
     * The name of the node being added to, or
     * referenced in the catalog.
     */
    public readonly node!: pulumi.Output<string>;
    /**
     * A service to optionally associated with
     * the node. Supported values are documented below.
     */
    public readonly services!: pulumi.Output<outputs.CatalogEntryService[] | undefined>;
    /**
     * ACL token.
     *
     * @deprecated The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration
     */
    public readonly token!: pulumi.Output<string | undefined>;

    /**
     * Create a CatalogEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogEntryArgs | CatalogEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogEntryState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["node"] = state ? state.node : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as CatalogEntryArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.node === undefined) && !opts.urn) {
                throw new Error("Missing required property 'node'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["node"] = args ? args.node : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CatalogEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CatalogEntry resources.
 */
export interface CatalogEntryState {
    /**
     * The address of the node being added to,
     * or referenced in the catalog.
     */
    address?: pulumi.Input<string>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * The name of the node being added to, or
     * referenced in the catalog.
     */
    node?: pulumi.Input<string>;
    /**
     * A service to optionally associated with
     * the node. Supported values are documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.CatalogEntryService>[]>;
    /**
     * ACL token.
     *
     * @deprecated The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CatalogEntry resource.
 */
export interface CatalogEntryArgs {
    /**
     * The address of the node being added to,
     * or referenced in the catalog.
     */
    address: pulumi.Input<string>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * The name of the node being added to, or
     * referenced in the catalog.
     */
    node: pulumi.Input<string>;
    /**
     * A service to optionally associated with
     * the node. Supported values are documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.CatalogEntryService>[]>;
    /**
     * ACL token.
     *
     * @deprecated The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration
     */
    token?: pulumi.Input<string>;
}
