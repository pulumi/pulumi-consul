// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 * import * as random from "@pulumi/random";
 *
 * // Basic usage
 * const agent = new consul.AclPolicy("agent", {
 *     name: "agent",
 *     rules: `node_prefix "" {
 *   policy = "read"
 * }
 * `,
 * });
 * const test = new consul.AclToken("test", {
 *     description: "my test token",
 *     policies: [agent.name],
 *     local: true,
 * });
 * // Explicitly set the `accessor_id`
 * const testRandomUuid = new random.RandomUuid("test", {});
 * const testPredefinedId = new consul.AclToken("test_predefined_id", {
 *     accessorId: testUuid.result,
 *     description: "my test uuid token",
 *     policies: [agent.name],
 *     local: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import consul:index/aclToken:AclToken anonymous 00000000-0000-0000-0000-000000000002
 * ```
 *
 * ```sh
 * $ pulumi import consul:index/aclToken:AclToken master-token 624d94ca-bc5c-f960-4e83-0a609cf588be
 * ```
 */
export class AclToken extends pulumi.CustomResource {
    /**
     * Get an existing AclToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclTokenState, opts?: pulumi.CustomResourceOptions): AclToken {
        return new AclToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/aclToken:AclToken';

    /**
     * Returns true if the given object is an instance of AclToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclToken.__pulumiType;
    }

    /**
     * The uuid of the token. If omitted, Consul will generate a random uuid.
     */
    public readonly accessorId!: pulumi.Output<string>;
    /**
     * The description of the token.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     */
    public readonly expirationTime!: pulumi.Output<string | undefined>;
    /**
     * The flag to set the token local to the current datacenter.
     */
    public readonly local!: pulumi.Output<boolean | undefined>;
    /**
     * The namespace to create the token within.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The list of node identities that should be applied to the token.
     */
    public readonly nodeIdentities!: pulumi.Output<outputs.AclTokenNodeIdentity[] | undefined>;
    /**
     * The partition the ACL token is associated with.
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * The list of policies attached to the token.
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;
    /**
     * The list of roles attached to the token.
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * The list of service identities that should be applied to the token.
     */
    public readonly serviceIdentities!: pulumi.Output<outputs.AclTokenServiceIdentity[] | undefined>;
    /**
     * The list of templated policies that should be applied to the token.
     */
    public readonly templatedPolicies!: pulumi.Output<outputs.AclTokenTemplatedPolicy[] | undefined>;

    /**
     * Create a AclToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AclTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclTokenArgs | AclTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclTokenState | undefined;
            resourceInputs["accessorId"] = state ? state.accessorId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expirationTime"] = state ? state.expirationTime : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["nodeIdentities"] = state ? state.nodeIdentities : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["serviceIdentities"] = state ? state.serviceIdentities : undefined;
            resourceInputs["templatedPolicies"] = state ? state.templatedPolicies : undefined;
        } else {
            const args = argsOrState as AclTokenArgs | undefined;
            resourceInputs["accessorId"] = args ? args.accessorId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expirationTime"] = args ? args.expirationTime : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["nodeIdentities"] = args ? args.nodeIdentities : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["serviceIdentities"] = args ? args.serviceIdentities : undefined;
            resourceInputs["templatedPolicies"] = args ? args.templatedPolicies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AclToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclToken resources.
 */
export interface AclTokenState {
    /**
     * The uuid of the token. If omitted, Consul will generate a random uuid.
     */
    accessorId?: pulumi.Input<string>;
    /**
     * The description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * The flag to set the token local to the current datacenter.
     */
    local?: pulumi.Input<boolean>;
    /**
     * The namespace to create the token within.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The list of node identities that should be applied to the token.
     */
    nodeIdentities?: pulumi.Input<pulumi.Input<inputs.AclTokenNodeIdentity>[]>;
    /**
     * The partition the ACL token is associated with.
     */
    partition?: pulumi.Input<string>;
    /**
     * The list of policies attached to the token.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of roles attached to the token.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of service identities that should be applied to the token.
     */
    serviceIdentities?: pulumi.Input<pulumi.Input<inputs.AclTokenServiceIdentity>[]>;
    /**
     * The list of templated policies that should be applied to the token.
     */
    templatedPolicies?: pulumi.Input<pulumi.Input<inputs.AclTokenTemplatedPolicy>[]>;
}

/**
 * The set of arguments for constructing a AclToken resource.
 */
export interface AclTokenArgs {
    /**
     * The uuid of the token. If omitted, Consul will generate a random uuid.
     */
    accessorId?: pulumi.Input<string>;
    /**
     * The description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * The flag to set the token local to the current datacenter.
     */
    local?: pulumi.Input<boolean>;
    /**
     * The namespace to create the token within.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The list of node identities that should be applied to the token.
     */
    nodeIdentities?: pulumi.Input<pulumi.Input<inputs.AclTokenNodeIdentity>[]>;
    /**
     * The partition the ACL token is associated with.
     */
    partition?: pulumi.Input<string>;
    /**
     * The list of policies attached to the token.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of roles attached to the token.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of service identities that should be applied to the token.
     */
    serviceIdentities?: pulumi.Input<pulumi.Input<inputs.AclTokenServiceIdentity>[]>;
    /**
     * The list of templated policies that should be applied to the token.
     */
    templatedPolicies?: pulumi.Input<pulumi.Input<inputs.AclTokenTemplatedPolicy>[]>;
}
