// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("consul");

/**
 * The HTTP(S) API address of the agent to use. Defaults to "127.0.0.1:8500".
 */
export declare const address: string | undefined;
Object.defineProperty(exports, "address", {
    get() {
        return __config.get("address");
    },
    enumerable: true,
});

/**
 * Authenticates to Consul using a JWT authentication method.
 */
export declare const authJwt: outputs.config.AuthJwt | undefined;
Object.defineProperty(exports, "authJwt", {
    get() {
        return __config.getObject<outputs.config.AuthJwt>("authJwt");
    },
    enumerable: true,
});

/**
 * A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
 */
export declare const caFile: string | undefined;
Object.defineProperty(exports, "caFile", {
    get() {
        return __config.get("caFile");
    },
    enumerable: true,
});

/**
 * A path to a directory of PEM-encoded certificate authority files to use to check the authenticity of client and server
 * connections. Can also be specified with the `CONSUL_CAPATH` environment variable.
 */
export declare const caPath: string | undefined;
Object.defineProperty(exports, "caPath", {
    get() {
        return __config.get("caPath");
    },
    enumerable: true,
});

/**
 * PEM-encoded certificate authority used to verify the remote agent's certificate.
 */
export declare const caPem: string | undefined;
Object.defineProperty(exports, "caPem", {
    get() {
        return __config.get("caPem");
    },
    enumerable: true,
});

/**
 * A path to a PEM-encoded certificate provided to the remote agent; requires use of `keyFile` or `keyPem`.
 */
export declare const certFile: string | undefined;
Object.defineProperty(exports, "certFile", {
    get() {
        return __config.get("certFile");
    },
    enumerable: true,
});

/**
 * PEM-encoded certificate provided to the remote agent; requires use of `keyFile` or `keyPem`.
 */
export declare const certPem: string | undefined;
Object.defineProperty(exports, "certPem", {
    get() {
        return __config.get("certPem");
    },
    enumerable: true,
});

/**
 * The datacenter to use. Defaults to that of the agent.
 */
export declare const datacenter: string | undefined;
Object.defineProperty(exports, "datacenter", {
    get() {
        return __config.get("datacenter");
    },
    enumerable: true,
});

/**
 * A configuration block, described below, that provides additional headers to be sent along with all requests to the
 * Consul server. This block can be specified multiple times.
 */
export declare const headers: outputs.config.Headers[] | undefined;
Object.defineProperty(exports, "headers", {
    get() {
        return __config.getObject<outputs.config.Headers[]>("headers");
    },
    enumerable: true,
});

/**
 * HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either `user` or
 * `user:pass`. This may also be specified using the `CONSUL_HTTP_AUTH` environment variable.
 */
export declare const httpAuth: string | undefined;
Object.defineProperty(exports, "httpAuth", {
    get() {
        return __config.get("httpAuth");
    },
    enumerable: true,
});

/**
 * Boolean value to disable SSL certificate verification; setting this value to true is not recommended for production use.
 * Only use this with scheme set to "https".
 */
export declare const insecureHttps: boolean | undefined;
Object.defineProperty(exports, "insecureHttps", {
    get() {
        return __config.getObject<boolean>("insecureHttps");
    },
    enumerable: true,
});

/**
 * A path to a PEM-encoded private key, required if `certFile` or `certPem` is specified.
 */
export declare const keyFile: string | undefined;
Object.defineProperty(exports, "keyFile", {
    get() {
        return __config.get("keyFile");
    },
    enumerable: true,
});

/**
 * PEM-encoded private key, required if `certFile` or `certPem` is specified.
 */
export declare const keyPem: string | undefined;
Object.defineProperty(exports, "keyPem", {
    get() {
        return __config.get("keyPem");
    },
    enumerable: true,
});

export declare const namespace: string | undefined;
Object.defineProperty(exports, "namespace", {
    get() {
        return __config.get("namespace");
    },
    enumerable: true,
});

/**
 * The URL scheme of the agent to use ("http" or "https"). Defaults to "http".
 */
export declare const scheme: string | undefined;
Object.defineProperty(exports, "scheme", {
    get() {
        return __config.get("scheme");
    },
    enumerable: true,
});

/**
 * The ACL token to use by default when making requests to the agent. Can also be specified with `CONSUL_HTTP_TOKEN` or
 * `CONSUL_TOKEN` as an environment variable.
 */
export declare const token: string | undefined;
Object.defineProperty(exports, "token", {
    get() {
        return __config.get("token");
    },
    enumerable: true,
});

