// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";

export interface AclRoleServiceIdentity {
    /**
     * The datacenters the effective policy is valid within.
     */
    datacenters?: string[];
    /**
     * The name of the service.
     */
    serviceName: string;
}

export interface CatalogEntryService {
    /**
     * The address of the node being added to,
     * or referenced in the catalog.
     */
    address?: string;
    id: string;
    name: string;
    port?: number;
    tags?: string[];
}

export interface GetAclRolePolicy {
    id: string;
    /**
     * The name of the ACL Role.
     */
    name: string;
}

export interface GetAclRoleServiceIdentity {
    datacenters?: string[];
    serviceName?: string;
}

export interface GetAclTokenPolicy {
    id: string;
    name: string;
}

export interface GetAgentSelfAddresses {
    /**
     * A map of DNS configuration attributes.  See below for details on the
     * contents of the `dns` attribute.
     * * [`dnsRecursors`](https://www.consul.io/docs/agent/options.html#recursors) - A
     * list of all DNS recursors.
     * * [`dataDir`](https://www.consul.io/docs/agent/options.html#_data_dir)
     * * [`datacenter`](https://www.consul.io/docs/agent/options.html#_datacenter)
     * * [`devMode`](https://www.consul.io/docs/agent/options.html#_dev)
     * * [`domain`](https://www.consul.io/docs/agent/options.html#_domain)
     * * [`enableAnonymousSignature`](https://www.consul.io/docs/agent/options.html#disable_anonymous_signature)
     * * `enableCoordinates`
     * * [`enableDebug`](https://www.consul.io/docs/agent/options.html#enable_debug)
     * * [`enableRemoteExec`](https://www.consul.io/docs/agent/options.html#disable_remote_exec)
     * * [`enableSyslog`](https://www.consul.io/docs/agent/options.html#_syslog)
     * * [`enableUi`](https://www.consul.io/docs/agent/options.html#_ui)
     * * [`enableUpdateCheck`](https://www.consul.io/docs/agent/options.html#disable_update_check)
     * * [`id`](https://www.consul.io/docs/agent/options.html#_node_id)
     * * [`leaveOnInt`](https://www.consul.io/docs/agent/options.html#skip_leave_on_interrupt)
     * * [`leaveOnTerm`](https://www.consul.io/docs/agent/options.html#leave_on_terminate)
     * * [`logLevel`](https://www.consul.io/docs/agent/options.html#_log_level)
     * * [`name`](https://www.consul.io/docs/agent/options.html#_node)
     * * [`performance`](https://www.consul.io/docs/agent/options.html#performance)
     * * [`pidFile`](https://www.consul.io/docs/agent/options.html#_pid_file)
     * * [`ports`](https://www.consul.io/docs/agent/options.html#ports)
     * * [`protocolVersion`](https://www.consul.io/docs/agent/options.html#_protocol)
     * * [`reconnectTimeoutLan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout)
     * * [`reconnectTimeoutWan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout_wan)
     * * [`rejoinAfterLeave`](https://www.consul.io/docs/agent/options.html#_rejoin)
     * * [`retryJoin`](https://www.consul.io/docs/agent/options.html#retry_join)
     * * [`retryJoinEc2`](https://www.consul.io/docs/agent/options.html#retry_join_ec2) -
     * A map of EC2 retry attributes.  See below for details on the available
     * information.
     * * [`retryJoinGce`](https://www.consul.io/docs/agent/options.html#retry_join_gce) -
     * A map of GCE retry attributes.  See below for details on the available
     * information.
     * * [`retryJoinWan`](https://www.consul.io/docs/agent/options.html#_retry_join_wan)
     * * [`retryMaxAttempts`](https://www.consul.io/docs/agent/options.html#_retry_max)
     * * [`retryMaxAttemptsWan`](https://www.consul.io/docs/agent/options.html#_retry_max_wan)
     * * [`serfLanBindAddr`](https://www.consul.io/docs/agent/options.html#_serf_lan_bind)
     * * [`serfWanBindAddr`](https://www.consul.io/docs/agent/options.html#_serf_wan_bind)
     * * [`serverMode`](https://www.consul.io/docs/agent/options.html#_server)
     * * [`serverName`](https://www.consul.io/docs/agent/options.html#server_name)
     * * [`sessionTtlMin`](https://www.consul.io/docs/agent/options.html#session_ttl_min)
     * * [`startJoin`](https://www.consul.io/docs/agent/options.html#start_join)
     * * [`startJoinWan`](https://www.consul.io/docs/agent/options.html#start_join_wan)
     * * [`syslogFacility`](https://www.consul.io/docs/agent/options.html#syslog_facility)
     * * [`tlsCaFile`](https://www.consul.io/docs/agent/options.html#ca_file)
     * * [`tlsCertFile`](https://www.consul.io/docs/agent/options.html#cert_file)
     * * [`tlsKeyFile`](https://www.consul.io/docs/agent/options.html#key_file)
     * * [`tlsMinVersion`](https://www.consul.io/docs/agent/options.html#tls_min_version)
     * * [`tlsVerifyIncoming`](https://www.consul.io/docs/agent/options.html#verify_incoming)
     * * [`tlsVerifyOutgoing`](https://www.consul.io/docs/agent/options.html#verify_outgoing)
     * * [`tlsVerifyServerHostname`](https://www.consul.io/docs/agent/options.html#verify_server_hostname)
     * * [`taggedAddresses`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)
     * * [`telemetry`](https://www.consul.io/docs/agent/options.html#telemetry) - A map
     * of telemetry configuration.
     * * [`translateWanAddrs`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)
     * * [`uiDir`](https://www.consul.io/docs/agent/options.html#ui_dir)
     * * [`unixSockets`](https://www.consul.io/docs/agent/options.html#unix_sockets)
     */
    dns: string;
    http: string;
    https: string;
    rpc: string;
}

export interface GetAgentSelfAdvertiseAddrs {
    rpc: string;
    serfLan: string;
    serfWan: string;
}

export interface GetAgentSelfDns {
    allowStale: boolean;
    enableCompression: boolean;
    enableTruncate: boolean;
    maxStale: string;
    nodeTtl: string;
    onlyPassing: boolean;
    recursorTimeout: string;
    serviceTtl: string;
    udpAnswerLimit: number;
}

export interface GetAgentSelfPerformance {
    raftMultiplier: string;
}

export interface GetAgentSelfPorts {
    /**
     * A map of DNS configuration attributes.  See below for details on the
     * contents of the `dns` attribute.
     * * [`dnsRecursors`](https://www.consul.io/docs/agent/options.html#recursors) - A
     * list of all DNS recursors.
     * * [`dataDir`](https://www.consul.io/docs/agent/options.html#_data_dir)
     * * [`datacenter`](https://www.consul.io/docs/agent/options.html#_datacenter)
     * * [`devMode`](https://www.consul.io/docs/agent/options.html#_dev)
     * * [`domain`](https://www.consul.io/docs/agent/options.html#_domain)
     * * [`enableAnonymousSignature`](https://www.consul.io/docs/agent/options.html#disable_anonymous_signature)
     * * `enableCoordinates`
     * * [`enableDebug`](https://www.consul.io/docs/agent/options.html#enable_debug)
     * * [`enableRemoteExec`](https://www.consul.io/docs/agent/options.html#disable_remote_exec)
     * * [`enableSyslog`](https://www.consul.io/docs/agent/options.html#_syslog)
     * * [`enableUi`](https://www.consul.io/docs/agent/options.html#_ui)
     * * [`enableUpdateCheck`](https://www.consul.io/docs/agent/options.html#disable_update_check)
     * * [`id`](https://www.consul.io/docs/agent/options.html#_node_id)
     * * [`leaveOnInt`](https://www.consul.io/docs/agent/options.html#skip_leave_on_interrupt)
     * * [`leaveOnTerm`](https://www.consul.io/docs/agent/options.html#leave_on_terminate)
     * * [`logLevel`](https://www.consul.io/docs/agent/options.html#_log_level)
     * * [`name`](https://www.consul.io/docs/agent/options.html#_node)
     * * [`performance`](https://www.consul.io/docs/agent/options.html#performance)
     * * [`pidFile`](https://www.consul.io/docs/agent/options.html#_pid_file)
     * * [`ports`](https://www.consul.io/docs/agent/options.html#ports)
     * * [`protocolVersion`](https://www.consul.io/docs/agent/options.html#_protocol)
     * * [`reconnectTimeoutLan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout)
     * * [`reconnectTimeoutWan`](https://www.consul.io/docs/agent/options.html#reconnect_timeout_wan)
     * * [`rejoinAfterLeave`](https://www.consul.io/docs/agent/options.html#_rejoin)
     * * [`retryJoin`](https://www.consul.io/docs/agent/options.html#retry_join)
     * * [`retryJoinEc2`](https://www.consul.io/docs/agent/options.html#retry_join_ec2) -
     * A map of EC2 retry attributes.  See below for details on the available
     * information.
     * * [`retryJoinGce`](https://www.consul.io/docs/agent/options.html#retry_join_gce) -
     * A map of GCE retry attributes.  See below for details on the available
     * information.
     * * [`retryJoinWan`](https://www.consul.io/docs/agent/options.html#_retry_join_wan)
     * * [`retryMaxAttempts`](https://www.consul.io/docs/agent/options.html#_retry_max)
     * * [`retryMaxAttemptsWan`](https://www.consul.io/docs/agent/options.html#_retry_max_wan)
     * * [`serfLanBindAddr`](https://www.consul.io/docs/agent/options.html#_serf_lan_bind)
     * * [`serfWanBindAddr`](https://www.consul.io/docs/agent/options.html#_serf_wan_bind)
     * * [`serverMode`](https://www.consul.io/docs/agent/options.html#_server)
     * * [`serverName`](https://www.consul.io/docs/agent/options.html#server_name)
     * * [`sessionTtlMin`](https://www.consul.io/docs/agent/options.html#session_ttl_min)
     * * [`startJoin`](https://www.consul.io/docs/agent/options.html#start_join)
     * * [`startJoinWan`](https://www.consul.io/docs/agent/options.html#start_join_wan)
     * * [`syslogFacility`](https://www.consul.io/docs/agent/options.html#syslog_facility)
     * * [`tlsCaFile`](https://www.consul.io/docs/agent/options.html#ca_file)
     * * [`tlsCertFile`](https://www.consul.io/docs/agent/options.html#cert_file)
     * * [`tlsKeyFile`](https://www.consul.io/docs/agent/options.html#key_file)
     * * [`tlsMinVersion`](https://www.consul.io/docs/agent/options.html#tls_min_version)
     * * [`tlsVerifyIncoming`](https://www.consul.io/docs/agent/options.html#verify_incoming)
     * * [`tlsVerifyOutgoing`](https://www.consul.io/docs/agent/options.html#verify_outgoing)
     * * [`tlsVerifyServerHostname`](https://www.consul.io/docs/agent/options.html#verify_server_hostname)
     * * [`taggedAddresses`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)
     * * [`telemetry`](https://www.consul.io/docs/agent/options.html#telemetry) - A map
     * of telemetry configuration.
     * * [`translateWanAddrs`](https://www.consul.io/docs/agent/options.html#translate_wan_addrs)
     * * [`uiDir`](https://www.consul.io/docs/agent/options.html#ui_dir)
     * * [`unixSockets`](https://www.consul.io/docs/agent/options.html#unix_sockets)
     */
    dns: number;
    http: number;
    https: number;
    rpc: number;
    serfLan: number;
    serfWan: number;
    server: number;
}

export interface GetAgentSelfRetryJoinEc2 {
    region: string;
    tagKey: string;
    tagValue: string;
}

export interface GetAgentSelfRetryJoinGce {
    credentialsFile: string;
    projectName: string;
    tagValue: string;
    zonePattern: string;
}

export interface GetAgentSelfTaggedAddresses {
    lan: string;
    wan: string;
}

export interface GetAgentSelfTelemetry {
    circonusApiApp: string;
    circonusApiToken: string;
    circonusApiUrl: string;
    circonusBrokerId: string;
    circonusCheckId: string;
    circonusCheckTags: string;
    circonusDisplayName: string;
    circonusForceMetricActivation: boolean;
    circonusInstanceId: string;
    circonusSearchTag: string;
    circonusSelectTag: string;
    circonusSubmissionInterval: string;
    circonusSubmissionUrl: string;
    dogstatsdAddr: string;
    dogstatsdTags: string[];
    enableHostname: string;
    statsdAddr: string;
    statsiteAddr: string;
    statsitePrefix: string;
}

export interface GetAgentSelfUnixSockets {
    group: string;
    mode: string;
    user: string;
}

export interface GetAutopilotHealthServer {
    /**
     * The address of the server
     */
    address: string;
    /**
     * Whether the server is healthy according to the current Autopilot
     * configuration
     */
    healthy: boolean;
    /**
     * The Raft ID of the server
     */
    id: string;
    /**
     * The time elapsed since the server's last contact with
     * the leader
     */
    lastContact: string;
    /**
     * The index of the server's last committed Raft log entry
     */
    lastIndex: number;
    /**
     * The server's last known Raft leader term
     */
    lastTerm: number;
    /**
     * Whether the server is currently leader
     */
    leader: boolean;
    /**
     * The node name of the server
     */
    name: string;
    /**
     * The status of the SerfHealth check of the server
     */
    serfStatus: string;
    /**
     * The time this server has been in its current ``Healthy``
     * state
     */
    stableSince: string;
    /**
     * The Consul version of the server
     */
    version: string;
    /**
     * Whether the server is a voting member of the Raft cluster
     */
    voter: boolean;
}

export interface GetCatalogNodesNode {
    address: string;
    id: string;
    meta: {[key: string]: any};
    name: string;
    taggedAddresses: outputs.GetCatalogNodesNodeTaggedAddresses;
}

export interface GetCatalogNodesNodeTaggedAddresses {
    lan: string;
    wan: string;
}

export interface GetCatalogNodesQueryOption {
    allowStale?: boolean;
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetCatalogServiceQueryOption {
    allowStale?: boolean;
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetCatalogServiceService {
    address: string;
    createIndex: string;
    enableTagOverride: string;
    id: string;
    meta: {[key: string]: any};
    modifyIndex: string;
    name: string;
    nodeAddress: string;
    nodeId: string;
    nodeMeta: {[key: string]: any};
    nodeName: string;
    port: string;
    taggedAddresses: outputs.GetCatalogServiceServiceTaggedAddresses;
    tags: string[];
}

export interface GetCatalogServiceServiceTaggedAddresses {
    lan: string;
    wan: string;
}

export interface GetCatalogServicesQueryOption {
    allowStale?: boolean;
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetCatalogServicesServices {
    tags: string[];
}

export interface GetKeyPrefixSubkeyCollection {
    default?: string;
    name: string;
    path: string;
}

export interface GetKeysKey {
    default?: string;
    name: string;
    path: string;
}

export interface GetNodesNode {
    address: string;
    /**
     * The Node ID of the Consul agent.
     * * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta
     * data tag information, if any.
     * * [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name
     * of the Consul node.
     * * [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The
     * IP address the node is advertising to the Consul cluster.
     * * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
     * List of explicit LAN and WAN IP addresses for the agent.
     */
    id: string;
    meta: {[key: string]: any};
    name: string;
    taggedAddresses: outputs.GetNodesNodeTaggedAddresses;
}

export interface GetNodesNodeTaggedAddresses {
    lan: string;
    wan: string;
}

export interface GetNodesQueryOption {
    allowStale?: boolean;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to then the datacenter in the provider setup.
     */
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetServiceHealthResult {
    checks: outputs.GetServiceHealthResultCheck[];
    /**
     * The name of the node associated with this health-check.
     */
    node: outputs.GetServiceHealthResultNode;
    service: outputs.GetServiceHealthResultService;
}

export interface GetServiceHealthResultCheck {
    /**
     * The ID of this health-check.
     */
    id: string;
    /**
     * The service name to select.
     */
    name: string;
    /**
     * The name of the node associated with this health-check.
     */
    node: string;
    /**
     * A human readable description of the current state of the health-check.
     */
    notes: string;
    /**
     * The output of the health-check.
     */
    output: string;
    /**
     * The ID of the service associated to this health-check.
     */
    serviceId: string;
    /**
     * The name of the service associated with this health-check.
     */
    serviceName: string;
    /**
     * The list of tags associated with this health-check.
     */
    serviceTags: string[];
    /**
     * The status of this health-check.
     */
    status: string;
}

export interface GetServiceHealthResultNode {
    /**
     * The address of this instance.
     */
    address: string;
    /**
     * The Consul datacenter to query.
     */
    datacenter: string;
    /**
     * The ID of this health-check.
     */
    id: string;
    /**
     * Service metadata tag information, if any.
     */
    meta: {[key: string]: string};
    /**
     * The service name to select.
     */
    name: string;
    taggedAddresses: {[key: string]: string};
}

export interface GetServiceHealthResultService {
    /**
     * The address of this instance.
     */
    address: string;
    /**
     * The ID of this health-check.
     */
    id: string;
    /**
     * Service metadata tag information, if any.
     */
    meta: {[key: string]: string};
    /**
     * The service name to select.
     */
    name: string;
    /**
     * The port of this instance.
     */
    port: number;
    /**
     * The list of tags associated with this instance.
     */
    tags: string[];
}

export interface GetServiceQueryOption {
    allowStale?: boolean;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to.
     */
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetServiceService {
    address: string;
    createIndex: string;
    enableTagOverride: string;
    id: string;
    meta: {[key: string]: any};
    modifyIndex: string;
    /**
     * The service name to select.
     */
    name: string;
    nodeAddress: string;
    /**
     * The Node ID of the Consul agent advertising the service.
     * * [`nodeMeta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node
     * meta data tag information, if any.
     * * [`nodeName`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The
     * name of the Consul node.
     * * [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -
     * The IP address of the service.  If the `ServiceAddress` in the Consul catalog
     * is empty, this value is automatically populated with the `nodeAddress` (the
     * `Address` in the Consul Catalog).
     * * [`enableTagOverride`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -
     * Whether service tags can be overridden on this service.
     * * [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A
     * unique service instance identifier.
     * * [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The
     * name of the service.
     * * [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -
     * Port number of the service.
     * * [`taggedAddresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
     * List of explicit LAN and WAN IP addresses for the agent.
     * * [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -
     * List of tags for the service.
     * * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta
     * data tag information, if any.
     */
    nodeId: string;
    nodeMeta: {[key: string]: any};
    nodeName: string;
    port: string;
    taggedAddresses: outputs.GetServiceServiceTaggedAddresses;
    tags: string[];
}

export interface GetServiceServiceTaggedAddresses {
    lan: string;
    wan: string;
}

export interface GetServicesQueryOption {
    allowStale?: boolean;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to.
     */
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetServicesServices {
    /**
     * A map of the tags found for each service.  If more than one service
     * shares the same tag, unique service names will be joined by whitespace (this
     * is the inverse of `services` and can be used to lookup the services that match
     * a single tag).
     */
    tags: string[];
}

export interface KeyPrefixSubkeyCollection {
    flags?: number;
    path: string;
    value: string;
}

export interface KeysKey {
    default?: string;
    delete?: boolean;
    flags?: number;
    name?: string;
    path: string;
    value: string;
}

export interface PreparedQueryDns {
    /**
     * The TTL to send when returning DNS results.
     */
    ttl?: string;
}

export interface PreparedQueryFailover {
    /**
     * Remote datacenters to return results from.
     */
    datacenters?: string[];
    /**
     * Return results from this many datacenters,
     * sorted in ascending order of estimated RTT.
     */
    nearestN?: number;
}

export interface PreparedQueryTemplate {
    /**
     * The regular expression to match with. When using
     * `namePrefixMatch`, this regex is applied against the query name.
     */
    regexp: string;
    /**
     * The type of template matching to perform. Currently
     * only `namePrefixMatch` is supported.
     */
    type: string;
}

export interface ServiceCheck {
    /**
     * An ID, *unique per agent*. Will default to *name*
     * if not set.
     */
    checkId: string;
    /**
     * The time after which
     * the service is automatically deregistered when in the `critical` state.
     * Defaults to `30s`.
     */
    deregisterCriticalServiceAfter?: string;
    /**
     * The headers to send for an HTTP check.
     * The attributes of each header is given below.
     */
    headers?: outputs.ServiceCheckHeader[];
    /**
     * The HTTP endpoint to call for an HTTP check.
     */
    http?: string;
    /**
     * The interval to wait between each health-check
     * invocation.
     */
    interval: string;
    /**
     * The method to use for HTTP health-checks. Defaults
     * to `GET`.
     */
    method?: string;
    /**
     * The name of the header.
     */
    name: string;
    /**
     * An opaque field meant to hold human readable text.
     */
    notes?: string;
    /**
     * The initial health-check status.
     */
    status: string;
    /**
     * The TCP address and port to connect to for a TCP check.
     */
    tcp?: string;
    /**
     * The timeout value for HTTP checks.
     */
    timeout: string;
    /**
     * Whether to deactivate certificate
     * verification for HTTP health-checks. Defaults to `false`.
     */
    tlsSkipVerify?: boolean;
}

export interface ServiceCheckHeader {
    /**
     * The name of the header.
     */
    name: string;
    /**
     * The header's list of values.
     */
    values: string[];
}
