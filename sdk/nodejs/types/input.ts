// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AclAuthMethodNamespaceRule {
    /**
     * If the namespace rule's `selector` matches then
     * this is used to control the namespace where the token is created.
     */
    bindNamespace: pulumi.Input<string>;
    /**
     * Specifies the expression used to match this namespace
     * rule against valid identities returned from an auth method validation.
     * Defaults to `""`.
     */
    selector?: pulumi.Input<string>;
}

export interface AclRoleNodeIdentity {
    /**
     * The datacenter of the node.
     */
    datacenter: pulumi.Input<string>;
    /**
     * The name of the node.
     */
    nodeName: pulumi.Input<string>;
}

export interface AclRoleServiceIdentity {
    /**
     * The datacenters the effective policy is valid within.
     */
    datacenters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the service.
     */
    serviceName: pulumi.Input<string>;
}

export interface AclTokenNodeIdentity {
    /**
     * The datacenter of the node.
     */
    datacenter: pulumi.Input<string>;
    /**
     * The name of the node.
     */
    nodeName: pulumi.Input<string>;
}

export interface AclTokenServiceIdentity {
    /**
     * The list of datacenters the policy is valid within.
     */
    datacenters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the service.
     */
    serviceName: pulumi.Input<string>;
}

export interface CatalogEntryService {
    /**
     * The address of the service. Defaults to the
     * node address.
     */
    address?: pulumi.Input<string>;
    /**
     * The ID of the service. Defaults to the `name`.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the service
     */
    name: pulumi.Input<string>;
    /**
     * The port of the service.
     */
    port?: pulumi.Input<number>;
    /**
     * A list of values that are opaque to Consul,
     * but can be used to distinguish between services or nodes.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCatalogNodesQueryOption {
    allowStale?: boolean;
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: string};
    partition?: string;
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetCatalogNodesQueryOptionArgs {
    allowStale?: pulumi.Input<boolean>;
    datacenter?: pulumi.Input<string>;
    near?: pulumi.Input<string>;
    nodeMeta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partition?: pulumi.Input<string>;
    requireConsistent?: pulumi.Input<boolean>;
    token?: pulumi.Input<string>;
    waitIndex?: pulumi.Input<number>;
    waitTime?: pulumi.Input<string>;
}

export interface GetCatalogServiceQueryOption {
    allowStale?: boolean;
    datacenter?: string;
    namespace?: string;
    near?: string;
    nodeMeta?: {[key: string]: string};
    partition?: string;
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetCatalogServiceQueryOptionArgs {
    allowStale?: pulumi.Input<boolean>;
    datacenter?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    near?: pulumi.Input<string>;
    nodeMeta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partition?: pulumi.Input<string>;
    requireConsistent?: pulumi.Input<boolean>;
    token?: pulumi.Input<string>;
    waitIndex?: pulumi.Input<number>;
    waitTime?: pulumi.Input<string>;
}

export interface GetCatalogServicesQueryOption {
    allowStale?: boolean;
    datacenter?: string;
    namespace?: string;
    near?: string;
    nodeMeta?: {[key: string]: string};
    partition?: string;
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetCatalogServicesQueryOptionArgs {
    allowStale?: pulumi.Input<boolean>;
    datacenter?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    near?: pulumi.Input<string>;
    nodeMeta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partition?: pulumi.Input<string>;
    requireConsistent?: pulumi.Input<boolean>;
    token?: pulumi.Input<string>;
    waitIndex?: pulumi.Input<number>;
    waitTime?: pulumi.Input<string>;
}

export interface GetKeyPrefixSubkeyCollection {
    /**
     * This is the default value to set for `var.<name>`
     * if the key does not exist in Consul. Defaults to an empty string.
     */
    default?: string;
    /**
     * This is the name of the key. This value of the
     * key is exposed as `var.<name>`. This is not the path of the subkey
     * in Consul.
     */
    name: string;
    /**
     * This is the subkey path in Consul (which will be appended
     * to the given `pathPrefix`) to construct the full key that will be used
     * to read the value.
     */
    path: string;
}

export interface GetKeyPrefixSubkeyCollectionArgs {
    /**
     * This is the default value to set for `var.<name>`
     * if the key does not exist in Consul. Defaults to an empty string.
     */
    default?: pulumi.Input<string>;
    /**
     * This is the name of the key. This value of the
     * key is exposed as `var.<name>`. This is not the path of the subkey
     * in Consul.
     */
    name: pulumi.Input<string>;
    /**
     * This is the subkey path in Consul (which will be appended
     * to the given `pathPrefix`) to construct the full key that will be used
     * to read the value.
     */
    path: pulumi.Input<string>;
}

export interface GetKeysKey {
    /**
     * This is the default value to set for `var.<name>`
     * if the key does not exist in Consul. Defaults to an empty string.
     */
    default?: string;
    /**
     * This is the name of the key. This value of the
     * key is exposed as `var.<name>`. This is not the path of the key
     * in Consul.
     */
    name: string;
    /**
     * This is the path in Consul that should be read
     * or written to.
     */
    path: string;
}

export interface GetKeysKeyArgs {
    /**
     * This is the default value to set for `var.<name>`
     * if the key does not exist in Consul. Defaults to an empty string.
     */
    default?: pulumi.Input<string>;
    /**
     * This is the name of the key. This value of the
     * key is exposed as `var.<name>`. This is not the path of the key
     * in Consul.
     */
    name: pulumi.Input<string>;
    /**
     * This is the path in Consul that should be read
     * or written to.
     */
    path: pulumi.Input<string>;
}

export interface GetNodesQueryOption {
    /**
     * When `true`, the default, allow responses from
     * Consul servers that are followers.
     */
    allowStale?: boolean;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to then the datacenter in the provider setup.
     */
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: string};
    partition?: string;
    /**
     * When `true` force the client to perform a
     * read on at least quorum servers and verify the result is the same.  Defaults
     * to `false`.
     */
    requireConsistent?: boolean;
    /**
     * Specify the Consul ACL token to use when performing the
     * request.  This defaults to the same API token configured by the `consul`
     * provider but may be overridden if necessary.
     */
    token?: string;
    /**
     * Index number used to enable blocking queries.
     */
    waitIndex?: number;
    /**
     * Max time the client should wait for a blocking query
     * to return.
     */
    waitTime?: string;
}

export interface GetNodesQueryOptionArgs {
    /**
     * When `true`, the default, allow responses from
     * Consul servers that are followers.
     */
    allowStale?: pulumi.Input<boolean>;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to then the datacenter in the provider setup.
     */
    datacenter?: pulumi.Input<string>;
    near?: pulumi.Input<string>;
    nodeMeta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partition?: pulumi.Input<string>;
    /**
     * When `true` force the client to perform a
     * read on at least quorum servers and verify the result is the same.  Defaults
     * to `false`.
     */
    requireConsistent?: pulumi.Input<boolean>;
    /**
     * Specify the Consul ACL token to use when performing the
     * request.  This defaults to the same API token configured by the `consul`
     * provider but may be overridden if necessary.
     */
    token?: pulumi.Input<string>;
    /**
     * Index number used to enable blocking queries.
     */
    waitIndex?: pulumi.Input<number>;
    /**
     * Max time the client should wait for a blocking query
     * to return.
     */
    waitTime?: pulumi.Input<string>;
}

export interface GetServiceQueryOption {
    /**
     * When `true`, the default, allow responses from
     * Consul servers that are followers.
     */
    allowStale?: boolean;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to.
     */
    datacenter?: string;
    /**
     * The namespace to lookup the service.
     */
    namespace?: string;
    near?: string;
    nodeMeta?: {[key: string]: string};
    partition?: string;
    /**
     * When `true` force the client to perform a
     * read on at least quorum servers and verify the result is the same.  Defaults
     * to `false`.
     */
    requireConsistent?: boolean;
    /**
     * Specify the Consul ACL token to use when performing the
     * request.  This defaults to the same API token configured by the `consul`
     * provider but may be overridden if necessary.
     */
    token?: string;
    /**
     * Index number used to enable blocking queries.
     */
    waitIndex?: number;
    /**
     * Max time the client should wait for a blocking query
     * to return.
     */
    waitTime?: string;
}

export interface GetServiceQueryOptionArgs {
    /**
     * When `true`, the default, allow responses from
     * Consul servers that are followers.
     */
    allowStale?: pulumi.Input<boolean>;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * The namespace to lookup the service.
     */
    namespace?: pulumi.Input<string>;
    near?: pulumi.Input<string>;
    nodeMeta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partition?: pulumi.Input<string>;
    /**
     * When `true` force the client to perform a
     * read on at least quorum servers and verify the result is the same.  Defaults
     * to `false`.
     */
    requireConsistent?: pulumi.Input<boolean>;
    /**
     * Specify the Consul ACL token to use when performing the
     * request.  This defaults to the same API token configured by the `consul`
     * provider but may be overridden if necessary.
     */
    token?: pulumi.Input<string>;
    /**
     * Index number used to enable blocking queries.
     */
    waitIndex?: pulumi.Input<number>;
    /**
     * Max time the client should wait for a blocking query
     * to return.
     */
    waitTime?: pulumi.Input<string>;
}

export interface GetServicesQueryOption {
    /**
     * When `true`, the default, allow responses from
     * Consul servers that are followers.
     */
    allowStale?: boolean;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to.
     */
    datacenter?: string;
    /**
     * The namespace to lookup the services.
     */
    namespace?: string;
    near?: string;
    nodeMeta?: {[key: string]: string};
    partition?: string;
    /**
     * When `true` force the client to perform a
     * read on at least quorum servers and verify the result is the same.  Defaults
     * to `false`.
     */
    requireConsistent?: boolean;
    /**
     * Specify the Consul ACL token to use when performing the
     * request.  This defaults to the same API token configured by the `consul`
     * provider but may be overridden if necessary.
     */
    token?: string;
    /**
     * Index number used to enable blocking queries.
     */
    waitIndex?: number;
    /**
     * Max time the client should wait for a blocking query
     * to return.
     */
    waitTime?: string;
}

export interface GetServicesQueryOptionArgs {
    /**
     * When `true`, the default, allow responses from
     * Consul servers that are followers.
     */
    allowStale?: pulumi.Input<boolean>;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * The namespace to lookup the services.
     */
    namespace?: pulumi.Input<string>;
    near?: pulumi.Input<string>;
    nodeMeta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partition?: pulumi.Input<string>;
    /**
     * When `true` force the client to perform a
     * read on at least quorum servers and verify the result is the same.  Defaults
     * to `false`.
     */
    requireConsistent?: pulumi.Input<boolean>;
    /**
     * Specify the Consul ACL token to use when performing the
     * request.  This defaults to the same API token configured by the `consul`
     * provider but may be overridden if necessary.
     */
    token?: pulumi.Input<string>;
    /**
     * Index number used to enable blocking queries.
     */
    waitIndex?: pulumi.Input<number>;
    /**
     * Max time the client should wait for a blocking query
     * to return.
     */
    waitTime?: pulumi.Input<string>;
}

export interface KeyPrefixSubkeyCollection {
    /**
     * An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
     * to attach to the key (defaults to 0).
     */
    flags?: pulumi.Input<number>;
    /**
     * This is the path (which will be appended to the given
     * `pathPrefix`) in Consul that should be written to.
     */
    path: pulumi.Input<string>;
    /**
     * The value to write to the given path.
     */
    value: pulumi.Input<string>;
}

export interface KeysKey {
    default?: pulumi.Input<string>;
    /**
     * If true, then the key will be deleted when
     * either its configuration block is removed from the configuration or
     * the entire resource is destroyed. Otherwise, it will be left in Consul.
     * Defaults to false.
     */
    delete?: pulumi.Input<boolean>;
    /**
     * An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)
     * to attach to the key (defaults to 0).
     */
    flags?: pulumi.Input<number>;
    /**
     * @deprecated Using consul_keys resource to *read* is deprecated; please use consul_keys data source instead
     */
    name?: pulumi.Input<string>;
    /**
     * This is the path in Consul that should be written to.
     */
    path: pulumi.Input<string>;
    /**
     * The value to write to the given path.
     */
    value?: pulumi.Input<string>;
}

export interface PreparedQueryDns {
    /**
     * The TTL to send when returning DNS results.
     */
    ttl?: pulumi.Input<string>;
}

export interface PreparedQueryFailover {
    /**
     * Remote datacenters to return results from.
     */
    datacenters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Return results from this many datacenters, sorted in ascending order of estimated RTT.
     */
    nearestN?: pulumi.Input<number>;
    /**
     * Specifies a sequential list of remote datacenters and cluster peers to failover to if there are no healthy service instances in the local datacenter. This option cannot be used with `nearestN` or `datacenters`.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.PreparedQueryFailoverTarget>[]>;
}

export interface PreparedQueryFailoverTarget {
    /**
     * The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
     */
    datacenter?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
}

export interface PreparedQueryTemplate {
    /**
     * The regular expression to match with. When using `namePrefixMatch`, this regex is applied against the query name.
     */
    regexp: pulumi.Input<string>;
    /**
     * If set to true, will cause the tags list inside the service structure to be stripped of any empty strings.
     */
    removeEmptyTags?: pulumi.Input<boolean>;
    /**
     * The type of template matching to perform. Currently only `namePrefixMatch` is supported.
     */
    type: pulumi.Input<string>;
}

export interface ProviderAuthJwt {
    authMethod: pulumi.Input<string>;
    bearerToken?: pulumi.Input<string>;
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useTerraformCloudWorkloadIdentity?: pulumi.Input<boolean>;
}

export interface ProviderHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceCheck {
    /**
     * An ID, *unique per agent*. Will default to *name*
     * if not set.
     */
    checkId: pulumi.Input<string>;
    /**
     * The time after which
     * the service is automatically deregistered when in the `critical` state.
     * Defaults to `30s`.
     */
    deregisterCriticalServiceAfter?: pulumi.Input<string>;
    /**
     * The headers to send for an HTTP check.
     * The attributes of each header is given below.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.ServiceCheckHeader>[]>;
    /**
     * The HTTP endpoint to call for an HTTP check.
     */
    http?: pulumi.Input<string>;
    /**
     * The interval to wait between each health-check
     * invocation.
     */
    interval: pulumi.Input<string>;
    /**
     * The method to use for HTTP health-checks. Defaults
     * to `GET`.
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the health-check.
     */
    name: pulumi.Input<string>;
    /**
     * An opaque field meant to hold human readable text.
     */
    notes?: pulumi.Input<string>;
    /**
     * The initial health-check status.
     */
    status?: pulumi.Input<string>;
    /**
     * The TCP address and port to connect to for a TCP check.
     */
    tcp?: pulumi.Input<string>;
    /**
     * Specifies a timeout for outgoing connections in
     * the case of a HTTP or TCP check.
     */
    timeout: pulumi.Input<string>;
    /**
     * Whether to deactivate certificate
     * verification for HTTP health-checks. Defaults to `false`.
     */
    tlsSkipVerify?: pulumi.Input<boolean>;
}

export interface ServiceCheckHeader {
    /**
     * The name of the header.
     */
    name: pulumi.Input<string>;
    /**
     * The header's list of values.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}
export namespace config {
}
