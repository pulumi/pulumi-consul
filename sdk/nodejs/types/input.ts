// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";

export interface AclRoleServiceIdentity {
    /**
     * The datacenters the effective policy is valid within.
     */
    datacenters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the service.
     */
    serviceName: pulumi.Input<string>;
}

export interface CatalogEntryService {
    /**
     * The address of the node being added to,
     * or referenced in the catalog.
     */
    address?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetAclRolePolicy {
    id?: string;
    /**
     * The name of the ACL Role.
     */
    name?: string;
}

export interface GetAclRoleServiceIdentity {
    datacenters?: string[];
    serviceName?: string;
}

export interface GetAclTokenPolicy {
    id?: string;
    name?: string;
}

export interface GetCatalogNodesQueryOption {
    allowStale?: boolean;
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetCatalogServiceQueryOption {
    allowStale?: boolean;
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetCatalogServicesQueryOption {
    allowStale?: boolean;
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetKeyPrefixSubkeyCollection {
    default?: string;
    name: string;
    path: string;
}

export interface GetKeysKey {
    default?: string;
    name: string;
    path: string;
}

export interface GetNodesQueryOption {
    allowStale?: boolean;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to then the datacenter in the provider setup.
     */
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetServiceQueryOption {
    allowStale?: boolean;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to.
     */
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface GetServicesQueryOption {
    allowStale?: boolean;
    /**
     * The Consul datacenter to query.  Defaults to the
     * same value found in `queryOptions` parameter specified below, or if that is
     * empty, the `datacenter` value found in the Consul agent that this provider is
     * configured to talk to.
     */
    datacenter?: string;
    near?: string;
    nodeMeta?: {[key: string]: any};
    requireConsistent?: boolean;
    token?: string;
    waitIndex?: number;
    waitTime?: string;
}

export interface KeyPrefixSubkeyCollection {
    flags?: pulumi.Input<number>;
    path: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface KeysKey {
    default?: pulumi.Input<string>;
    delete?: pulumi.Input<boolean>;
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface PreparedQueryDns {
    /**
     * The TTL to send when returning DNS results.
     */
    ttl?: pulumi.Input<string>;
}

export interface PreparedQueryFailover {
    /**
     * Remote datacenters to return results from.
     */
    datacenters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Return results from this many datacenters,
     * sorted in ascending order of estimated RTT.
     */
    nearestN?: pulumi.Input<number>;
}

export interface PreparedQueryTemplate {
    /**
     * The regular expression to match with. When using
     * `namePrefixMatch`, this regex is applied against the query name.
     */
    regexp: pulumi.Input<string>;
    /**
     * The type of template matching to perform. Currently
     * only `namePrefixMatch` is supported.
     */
    type: pulumi.Input<string>;
}

export interface ServiceCheck {
    /**
     * An ID, *unique per agent*. Will default to *name*
     * if not set.
     */
    checkId: pulumi.Input<string>;
    /**
     * The time after which
     * the service is automatically deregistered when in the `critical` state.
     * Defaults to `30s`.
     */
    deregisterCriticalServiceAfter?: pulumi.Input<string>;
    /**
     * The headers to send for an HTTP check.
     * The attributes of each header is given below.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.ServiceCheckHeader>[]>;
    /**
     * The HTTP endpoint to call for an HTTP check.
     */
    http?: pulumi.Input<string>;
    /**
     * The interval to wait between each health-check
     * invocation.
     */
    interval: pulumi.Input<string>;
    /**
     * The method to use for HTTP health-checks. Defaults
     * to `GET`.
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the header.
     */
    name: pulumi.Input<string>;
    /**
     * An opaque field meant to hold human readable text.
     */
    notes?: pulumi.Input<string>;
    /**
     * The initial health-check status.
     */
    status?: pulumi.Input<string>;
    /**
     * The TCP address and port to connect to for a TCP check.
     */
    tcp?: pulumi.Input<string>;
    /**
     * The timeout value for HTTP checks.
     */
    timeout: pulumi.Input<string>;
    /**
     * Whether to deactivate certificate
     * verification for HTTP health-checks. Defaults to `false`.
     */
    tlsSkipVerify?: pulumi.Input<boolean>;
}

export interface ServiceCheckHeader {
    /**
     * The name of the header.
     */
    name: pulumi.Input<string>;
    /**
     * The header's list of values.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}
