// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/prepared_query.html.markdown.
 */
export class PreparedQuery extends pulumi.CustomResource {
    /**
     * Get an existing PreparedQuery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PreparedQueryState, opts?: pulumi.CustomResourceOptions): PreparedQuery {
        return new PreparedQuery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/preparedQuery:PreparedQuery';

    /**
     * Returns true if the given object is an instance of PreparedQuery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PreparedQuery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PreparedQuery.__pulumiType;
    }

    /**
     * When `true` the prepared query will return connect
     * proxy services for a queried service.  Conditions such as `tags` in the
     * prepared query will be matched against the proxy service. Defaults to false.
     */
    public readonly connect!: pulumi.Output<boolean | undefined>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    public readonly datacenter!: pulumi.Output<string | undefined>;
    /**
     * Settings for controlling the DNS response details.
     */
    public readonly dns!: pulumi.Output<outputs.PreparedQueryDns | undefined>;
    /**
     * Options for controlling behavior when no healthy
     * nodes are available in the local DC.
     */
    public readonly failover!: pulumi.Output<outputs.PreparedQueryFailover | undefined>;
    /**
     * The name of the prepared query. Used to identify
     * the prepared query during requests. Can be specified as an empty string
     * to configure the query as a catch-all.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Allows specifying the name of a node to sort results
     * near using Consul's distance sorting and network coordinates. The magic
     * `_agent` value can be used to always sort nearest the node servicing the
     * request.
     */
    public readonly near!: pulumi.Output<string | undefined>;
    /**
     * When `true`, the prepared query will only
     * return nodes with passing health checks in the result.
     */
    public readonly onlyPassing!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the service to query.
     */
    public readonly service!: pulumi.Output<string>;
    /**
     * The name of the Consul session to tie this query's
     * lifetime to.  This is an advanced parameter that should not be used without a
     * complete understanding of Consul sessions and the implications of their use
     * (it is recommended to leave this blank in nearly all cases).  If this
     * parameter is omitted the query will not expire.
     */
    public readonly session!: pulumi.Output<string | undefined>;
    /**
     * The ACL token to store with the prepared
     * query. This token will be used by default whenever the query is executed.
     */
    public readonly storedToken!: pulumi.Output<string | undefined>;
    /**
     * The list of required and/or disallowed tags.  If a tag is
     * in this list it must be present.  If the tag is preceded with a "!" then it is
     * disallowed.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Query templating options. This is used to make a
     * single prepared query respond to many different requests.
     */
    public readonly template!: pulumi.Output<outputs.PreparedQueryTemplate | undefined>;
    /**
     * The ACL token to use when saving the prepared query.
     * This overrides the token that the agent provides by default.
     */
    public readonly token!: pulumi.Output<string | undefined>;

    /**
     * Create a PreparedQuery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PreparedQueryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PreparedQueryArgs | PreparedQueryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as PreparedQueryState | undefined;
            inputs["connect"] = state ? state.connect : undefined;
            inputs["datacenter"] = state ? state.datacenter : undefined;
            inputs["dns"] = state ? state.dns : undefined;
            inputs["failover"] = state ? state.failover : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["near"] = state ? state.near : undefined;
            inputs["onlyPassing"] = state ? state.onlyPassing : undefined;
            inputs["service"] = state ? state.service : undefined;
            inputs["session"] = state ? state.session : undefined;
            inputs["storedToken"] = state ? state.storedToken : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["template"] = state ? state.template : undefined;
            inputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as PreparedQueryArgs | undefined;
            if (!args || args.service === undefined) {
                throw new Error("Missing required property 'service'");
            }
            inputs["connect"] = args ? args.connect : undefined;
            inputs["datacenter"] = args ? args.datacenter : undefined;
            inputs["dns"] = args ? args.dns : undefined;
            inputs["failover"] = args ? args.failover : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["near"] = args ? args.near : undefined;
            inputs["onlyPassing"] = args ? args.onlyPassing : undefined;
            inputs["service"] = args ? args.service : undefined;
            inputs["session"] = args ? args.session : undefined;
            inputs["storedToken"] = args ? args.storedToken : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["template"] = args ? args.template : undefined;
            inputs["token"] = args ? args.token : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(PreparedQuery.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PreparedQuery resources.
 */
export interface PreparedQueryState {
    /**
     * When `true` the prepared query will return connect
     * proxy services for a queried service.  Conditions such as `tags` in the
     * prepared query will be matched against the proxy service. Defaults to false.
     */
    readonly connect?: pulumi.Input<boolean>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Settings for controlling the DNS response details.
     */
    readonly dns?: pulumi.Input<inputs.PreparedQueryDns>;
    /**
     * Options for controlling behavior when no healthy
     * nodes are available in the local DC.
     */
    readonly failover?: pulumi.Input<inputs.PreparedQueryFailover>;
    /**
     * The name of the prepared query. Used to identify
     * the prepared query during requests. Can be specified as an empty string
     * to configure the query as a catch-all.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Allows specifying the name of a node to sort results
     * near using Consul's distance sorting and network coordinates. The magic
     * `_agent` value can be used to always sort nearest the node servicing the
     * request.
     */
    readonly near?: pulumi.Input<string>;
    /**
     * When `true`, the prepared query will only
     * return nodes with passing health checks in the result.
     */
    readonly onlyPassing?: pulumi.Input<boolean>;
    /**
     * The name of the service to query.
     */
    readonly service?: pulumi.Input<string>;
    /**
     * The name of the Consul session to tie this query's
     * lifetime to.  This is an advanced parameter that should not be used without a
     * complete understanding of Consul sessions and the implications of their use
     * (it is recommended to leave this blank in nearly all cases).  If this
     * parameter is omitted the query will not expire.
     */
    readonly session?: pulumi.Input<string>;
    /**
     * The ACL token to store with the prepared
     * query. This token will be used by default whenever the query is executed.
     */
    readonly storedToken?: pulumi.Input<string>;
    /**
     * The list of required and/or disallowed tags.  If a tag is
     * in this list it must be present.  If the tag is preceded with a "!" then it is
     * disallowed.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Query templating options. This is used to make a
     * single prepared query respond to many different requests.
     */
    readonly template?: pulumi.Input<inputs.PreparedQueryTemplate>;
    /**
     * The ACL token to use when saving the prepared query.
     * This overrides the token that the agent provides by default.
     */
    readonly token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PreparedQuery resource.
 */
export interface PreparedQueryArgs {
    /**
     * When `true` the prepared query will return connect
     * proxy services for a queried service.  Conditions such as `tags` in the
     * prepared query will be matched against the proxy service. Defaults to false.
     */
    readonly connect?: pulumi.Input<boolean>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Settings for controlling the DNS response details.
     */
    readonly dns?: pulumi.Input<inputs.PreparedQueryDns>;
    /**
     * Options for controlling behavior when no healthy
     * nodes are available in the local DC.
     */
    readonly failover?: pulumi.Input<inputs.PreparedQueryFailover>;
    /**
     * The name of the prepared query. Used to identify
     * the prepared query during requests. Can be specified as an empty string
     * to configure the query as a catch-all.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Allows specifying the name of a node to sort results
     * near using Consul's distance sorting and network coordinates. The magic
     * `_agent` value can be used to always sort nearest the node servicing the
     * request.
     */
    readonly near?: pulumi.Input<string>;
    /**
     * When `true`, the prepared query will only
     * return nodes with passing health checks in the result.
     */
    readonly onlyPassing?: pulumi.Input<boolean>;
    /**
     * The name of the service to query.
     */
    readonly service: pulumi.Input<string>;
    /**
     * The name of the Consul session to tie this query's
     * lifetime to.  This is an advanced parameter that should not be used without a
     * complete understanding of Consul sessions and the implications of their use
     * (it is recommended to leave this blank in nearly all cases).  If this
     * parameter is omitted the query will not expire.
     */
    readonly session?: pulumi.Input<string>;
    /**
     * The ACL token to store with the prepared
     * query. This token will be used by default whenever the query is executed.
     */
    readonly storedToken?: pulumi.Input<string>;
    /**
     * The list of required and/or disallowed tags.  If a tag is
     * in this list it must be present.  If the tag is preceded with a "!" then it is
     * disallowed.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Query templating options. This is used to make a
     * single prepared query respond to many different requests.
     */
    readonly template?: pulumi.Input<inputs.PreparedQueryTemplate>;
    /**
     * The ACL token to use when saving the prepared query.
     * This overrides the token that the agent provides by default.
     */
    readonly token?: pulumi.Input<string>;
}
