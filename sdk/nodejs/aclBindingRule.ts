// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Starting with Consul 1.5.0, the consul.AclBindingRule resource can be used to managed Consul ACL binding rules.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const minikube = new consul.AclAuthMethod("minikube", {
 *     name: "minikube",
 *     type: "kubernetes",
 *     description: "dev minikube cluster",
 *     config: {
 *         Host: "https://192.0.2.42:8443",
 *         CACert: `-----BEGIN CERTIFICATE-----
 * ...-----END CERTIFICATE-----
 * `,
 *         ServiceAccountJWT: "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...",
 *     },
 * });
 * const test = new consul.AclBindingRule("test", {
 *     authMethod: minikube.name,
 *     description: "foobar",
 *     selector: "serviceaccount.namespace==default",
 *     bindType: "service",
 *     bindName: "minikube",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class AclBindingRule extends pulumi.CustomResource {
    /**
     * Get an existing AclBindingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclBindingRuleState, opts?: pulumi.CustomResourceOptions): AclBindingRule {
        return new AclBindingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/aclBindingRule:AclBindingRule';

    /**
     * Returns true if the given object is an instance of AclBindingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclBindingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclBindingRule.__pulumiType;
    }

    /**
     * The name of the ACL auth method this rule apply.
     */
    public readonly authMethod!: pulumi.Output<string>;
    /**
     * The name to bind to a token at login-time.
     */
    public readonly bindName!: pulumi.Output<string>;
    /**
     * Specifies the way the binding rule affects a token created at login.
     */
    public readonly bindType!: pulumi.Output<string>;
    /**
     * The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
     */
    public readonly bindVars!: pulumi.Output<outputs.AclBindingRuleBindVars | undefined>;
    /**
     * A free form human readable description of the binding rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The namespace to create the binding rule within.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The partition the ACL binding rule is associated with.
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * The expression used to match this rule against valid identities returned from an auth method validation.
     */
    public readonly selector!: pulumi.Output<string | undefined>;

    /**
     * Create a AclBindingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclBindingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclBindingRuleArgs | AclBindingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclBindingRuleState | undefined;
            resourceInputs["authMethod"] = state ? state.authMethod : undefined;
            resourceInputs["bindName"] = state ? state.bindName : undefined;
            resourceInputs["bindType"] = state ? state.bindType : undefined;
            resourceInputs["bindVars"] = state ? state.bindVars : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["selector"] = state ? state.selector : undefined;
        } else {
            const args = argsOrState as AclBindingRuleArgs | undefined;
            if ((!args || args.authMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMethod'");
            }
            if ((!args || args.bindName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindName'");
            }
            if ((!args || args.bindType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindType'");
            }
            resourceInputs["authMethod"] = args ? args.authMethod : undefined;
            resourceInputs["bindName"] = args ? args.bindName : undefined;
            resourceInputs["bindType"] = args ? args.bindType : undefined;
            resourceInputs["bindVars"] = args ? args.bindVars : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["selector"] = args ? args.selector : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AclBindingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclBindingRule resources.
 */
export interface AclBindingRuleState {
    /**
     * The name of the ACL auth method this rule apply.
     */
    authMethod?: pulumi.Input<string>;
    /**
     * The name to bind to a token at login-time.
     */
    bindName?: pulumi.Input<string>;
    /**
     * Specifies the way the binding rule affects a token created at login.
     */
    bindType?: pulumi.Input<string>;
    /**
     * The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
     */
    bindVars?: pulumi.Input<inputs.AclBindingRuleBindVars>;
    /**
     * A free form human readable description of the binding rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The namespace to create the binding rule within.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The partition the ACL binding rule is associated with.
     */
    partition?: pulumi.Input<string>;
    /**
     * The expression used to match this rule against valid identities returned from an auth method validation.
     */
    selector?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AclBindingRule resource.
 */
export interface AclBindingRuleArgs {
    /**
     * The name of the ACL auth method this rule apply.
     */
    authMethod: pulumi.Input<string>;
    /**
     * The name to bind to a token at login-time.
     */
    bindName: pulumi.Input<string>;
    /**
     * Specifies the way the binding rule affects a token created at login.
     */
    bindType: pulumi.Input<string>;
    /**
     * The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
     */
    bindVars?: pulumi.Input<inputs.AclBindingRuleBindVars>;
    /**
     * A free form human readable description of the binding rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The namespace to create the binding rule within.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The partition the ACL binding rule is associated with.
     */
    partition?: pulumi.Input<string>;
    /**
     * The expression used to match this rule against valid identities returned from an auth method validation.
     */
    selector?: pulumi.Input<string>;
}
