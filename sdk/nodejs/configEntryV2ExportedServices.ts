// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConfigEntryV2ExportedServices extends pulumi.CustomResource {
    /**
     * Get an existing ConfigEntryV2ExportedServices resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigEntryV2ExportedServicesState, opts?: pulumi.CustomResourceOptions): ConfigEntryV2ExportedServices {
        return new ConfigEntryV2ExportedServices(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/configEntryV2ExportedServices:ConfigEntryV2ExportedServices';

    /**
     * Returns true if the given object is an instance of ConfigEntryV2ExportedServices.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigEntryV2ExportedServices {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigEntryV2ExportedServices.__pulumiType;
    }

    /**
     * The kind of exported services config (ExportedServices, NamespaceExportedServices, PartitionExportedServices).
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * The name of the config entry to read.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace the config entry is associated with.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The partition the config entry is associated with.
     */
    public readonly partition!: pulumi.Output<string>;
    /**
     * The exported service partition consumers.
     */
    public readonly partitionConsumers!: pulumi.Output<string[] | undefined>;
    /**
     * The exported service peer consumers.
     */
    public readonly peerConsumers!: pulumi.Output<string[] | undefined>;
    /**
     * The exported service sameness group consumers.
     */
    public readonly samenessGroupConsumers!: pulumi.Output<string[] | undefined>;
    /**
     * The exported services.
     */
    public readonly services!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ConfigEntryV2ExportedServices resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigEntryV2ExportedServicesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigEntryV2ExportedServicesArgs | ConfigEntryV2ExportedServicesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigEntryV2ExportedServicesState | undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["partitionConsumers"] = state ? state.partitionConsumers : undefined;
            resourceInputs["peerConsumers"] = state ? state.peerConsumers : undefined;
            resourceInputs["samenessGroupConsumers"] = state ? state.samenessGroupConsumers : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
        } else {
            const args = argsOrState as ConfigEntryV2ExportedServicesArgs | undefined;
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.partition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partition'");
            }
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["partitionConsumers"] = args ? args.partitionConsumers : undefined;
            resourceInputs["peerConsumers"] = args ? args.peerConsumers : undefined;
            resourceInputs["samenessGroupConsumers"] = args ? args.samenessGroupConsumers : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigEntryV2ExportedServices.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigEntryV2ExportedServices resources.
 */
export interface ConfigEntryV2ExportedServicesState {
    /**
     * The kind of exported services config (ExportedServices, NamespaceExportedServices, PartitionExportedServices).
     */
    kind?: pulumi.Input<string>;
    /**
     * The name of the config entry to read.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace the config entry is associated with.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The partition the config entry is associated with.
     */
    partition?: pulumi.Input<string>;
    /**
     * The exported service partition consumers.
     */
    partitionConsumers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The exported service peer consumers.
     */
    peerConsumers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The exported service sameness group consumers.
     */
    samenessGroupConsumers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The exported services.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ConfigEntryV2ExportedServices resource.
 */
export interface ConfigEntryV2ExportedServicesArgs {
    /**
     * The kind of exported services config (ExportedServices, NamespaceExportedServices, PartitionExportedServices).
     */
    kind: pulumi.Input<string>;
    /**
     * The name of the config entry to read.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace the config entry is associated with.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The partition the config entry is associated with.
     */
    partition: pulumi.Input<string>;
    /**
     * The exported service partition consumers.
     */
    partitionConsumers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The exported service peer consumers.
     */
    peerConsumers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The exported service sameness group consumers.
     */
    samenessGroupConsumers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The exported services.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
}
