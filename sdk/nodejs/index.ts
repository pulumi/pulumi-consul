// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./aclAuthMethod";
export * from "./aclBindingRule";
export * from "./aclPolicy";
export * from "./aclRole";
export * from "./aclToken";
export * from "./aclTokenPolicyAttachment";
export * from "./aclTokenRoleAttachment";
export * from "./adminPartition";
export * from "./agentService";
export * from "./autopilotConfig";
export * from "./catalogEntry";
export * from "./certificateAuthority";
export * from "./configEntry";
export * from "./getAclAuthMethod";
export * from "./getAclPolicy";
export * from "./getAclRole";
export * from "./getAclToken";
export * from "./getAclTokenSecretId";
export * from "./getAgentConfig";
export * from "./getAgentSelf";
export * from "./getAutopilotHealth";
export * from "./getCatalogNodes";
export * from "./getCatalogService";
export * from "./getCatalogServices";
export * from "./getDatacenters";
export * from "./getKeyPrefix";
export * from "./getKeys";
export * from "./getNetworkAreaMembers";
export * from "./getNetworkSegments";
export * from "./getNodes";
export * from "./getService";
export * from "./getServiceHealth";
export * from "./getServices";
export * from "./intention";
export * from "./keyPrefix";
export * from "./keys";
export * from "./license";
export * from "./namespace";
export * from "./namespacePolicyAttachment";
export * from "./namespaceRoleAttachment";
export * from "./networkArea";
export * from "./node";
export * from "./preparedQuery";
export * from "./provider";
export * from "./service";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AclAuthMethod } from "./aclAuthMethod";
import { AclBindingRule } from "./aclBindingRule";
import { AclPolicy } from "./aclPolicy";
import { AclRole } from "./aclRole";
import { AclToken } from "./aclToken";
import { AclTokenPolicyAttachment } from "./aclTokenPolicyAttachment";
import { AclTokenRoleAttachment } from "./aclTokenRoleAttachment";
import { AdminPartition } from "./adminPartition";
import { AgentService } from "./agentService";
import { AutopilotConfig } from "./autopilotConfig";
import { CatalogEntry } from "./catalogEntry";
import { CertificateAuthority } from "./certificateAuthority";
import { ConfigEntry } from "./configEntry";
import { Intention } from "./intention";
import { KeyPrefix } from "./keyPrefix";
import { Keys } from "./keys";
import { License } from "./license";
import { Namespace } from "./namespace";
import { NamespacePolicyAttachment } from "./namespacePolicyAttachment";
import { NamespaceRoleAttachment } from "./namespaceRoleAttachment";
import { NetworkArea } from "./networkArea";
import { Node } from "./node";
import { PreparedQuery } from "./preparedQuery";
import { Service } from "./service";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "consul:index/aclAuthMethod:AclAuthMethod":
                return new AclAuthMethod(name, <any>undefined, { urn })
            case "consul:index/aclBindingRule:AclBindingRule":
                return new AclBindingRule(name, <any>undefined, { urn })
            case "consul:index/aclPolicy:AclPolicy":
                return new AclPolicy(name, <any>undefined, { urn })
            case "consul:index/aclRole:AclRole":
                return new AclRole(name, <any>undefined, { urn })
            case "consul:index/aclToken:AclToken":
                return new AclToken(name, <any>undefined, { urn })
            case "consul:index/aclTokenPolicyAttachment:AclTokenPolicyAttachment":
                return new AclTokenPolicyAttachment(name, <any>undefined, { urn })
            case "consul:index/aclTokenRoleAttachment:AclTokenRoleAttachment":
                return new AclTokenRoleAttachment(name, <any>undefined, { urn })
            case "consul:index/adminPartition:AdminPartition":
                return new AdminPartition(name, <any>undefined, { urn })
            case "consul:index/agentService:AgentService":
                return new AgentService(name, <any>undefined, { urn })
            case "consul:index/autopilotConfig:AutopilotConfig":
                return new AutopilotConfig(name, <any>undefined, { urn })
            case "consul:index/catalogEntry:CatalogEntry":
                return new CatalogEntry(name, <any>undefined, { urn })
            case "consul:index/certificateAuthority:CertificateAuthority":
                return new CertificateAuthority(name, <any>undefined, { urn })
            case "consul:index/configEntry:ConfigEntry":
                return new ConfigEntry(name, <any>undefined, { urn })
            case "consul:index/intention:Intention":
                return new Intention(name, <any>undefined, { urn })
            case "consul:index/keyPrefix:KeyPrefix":
                return new KeyPrefix(name, <any>undefined, { urn })
            case "consul:index/keys:Keys":
                return new Keys(name, <any>undefined, { urn })
            case "consul:index/license:License":
                return new License(name, <any>undefined, { urn })
            case "consul:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "consul:index/namespacePolicyAttachment:NamespacePolicyAttachment":
                return new NamespacePolicyAttachment(name, <any>undefined, { urn })
            case "consul:index/namespaceRoleAttachment:NamespaceRoleAttachment":
                return new NamespaceRoleAttachment(name, <any>undefined, { urn })
            case "consul:index/networkArea:NetworkArea":
                return new NetworkArea(name, <any>undefined, { urn })
            case "consul:index/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "consul:index/preparedQuery:PreparedQuery":
                return new PreparedQuery(name, <any>undefined, { urn })
            case "consul:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("consul", "index/aclAuthMethod", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclBindingRule", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclPolicy", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclRole", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclToken", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclTokenPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclTokenRoleAttachment", _module)
pulumi.runtime.registerResourceModule("consul", "index/adminPartition", _module)
pulumi.runtime.registerResourceModule("consul", "index/agentService", _module)
pulumi.runtime.registerResourceModule("consul", "index/autopilotConfig", _module)
pulumi.runtime.registerResourceModule("consul", "index/catalogEntry", _module)
pulumi.runtime.registerResourceModule("consul", "index/certificateAuthority", _module)
pulumi.runtime.registerResourceModule("consul", "index/configEntry", _module)
pulumi.runtime.registerResourceModule("consul", "index/intention", _module)
pulumi.runtime.registerResourceModule("consul", "index/keyPrefix", _module)
pulumi.runtime.registerResourceModule("consul", "index/keys", _module)
pulumi.runtime.registerResourceModule("consul", "index/license", _module)
pulumi.runtime.registerResourceModule("consul", "index/namespace", _module)
pulumi.runtime.registerResourceModule("consul", "index/namespacePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("consul", "index/namespaceRoleAttachment", _module)
pulumi.runtime.registerResourceModule("consul", "index/networkArea", _module)
pulumi.runtime.registerResourceModule("consul", "index/node", _module)
pulumi.runtime.registerResourceModule("consul", "index/preparedQuery", _module)
pulumi.runtime.registerResourceModule("consul", "index/service", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("consul", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:consul") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
