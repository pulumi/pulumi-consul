// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AclAuthMethodArgs, AclAuthMethodState } from "./aclAuthMethod";
export type AclAuthMethod = import("./aclAuthMethod").AclAuthMethod;
export const AclAuthMethod: typeof import("./aclAuthMethod").AclAuthMethod = null as any;
utilities.lazyLoad(exports, ["AclAuthMethod"], () => require("./aclAuthMethod"));

export { AclBindingRuleArgs, AclBindingRuleState } from "./aclBindingRule";
export type AclBindingRule = import("./aclBindingRule").AclBindingRule;
export const AclBindingRule: typeof import("./aclBindingRule").AclBindingRule = null as any;
utilities.lazyLoad(exports, ["AclBindingRule"], () => require("./aclBindingRule"));

export { AclPolicyArgs, AclPolicyState } from "./aclPolicy";
export type AclPolicy = import("./aclPolicy").AclPolicy;
export const AclPolicy: typeof import("./aclPolicy").AclPolicy = null as any;
utilities.lazyLoad(exports, ["AclPolicy"], () => require("./aclPolicy"));

export { AclRoleArgs, AclRoleState } from "./aclRole";
export type AclRole = import("./aclRole").AclRole;
export const AclRole: typeof import("./aclRole").AclRole = null as any;
utilities.lazyLoad(exports, ["AclRole"], () => require("./aclRole"));

export { AclRolePolicyAttachmentArgs, AclRolePolicyAttachmentState } from "./aclRolePolicyAttachment";
export type AclRolePolicyAttachment = import("./aclRolePolicyAttachment").AclRolePolicyAttachment;
export const AclRolePolicyAttachment: typeof import("./aclRolePolicyAttachment").AclRolePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["AclRolePolicyAttachment"], () => require("./aclRolePolicyAttachment"));

export { AclTokenArgs, AclTokenState } from "./aclToken";
export type AclToken = import("./aclToken").AclToken;
export const AclToken: typeof import("./aclToken").AclToken = null as any;
utilities.lazyLoad(exports, ["AclToken"], () => require("./aclToken"));

export { AclTokenPolicyAttachmentArgs, AclTokenPolicyAttachmentState } from "./aclTokenPolicyAttachment";
export type AclTokenPolicyAttachment = import("./aclTokenPolicyAttachment").AclTokenPolicyAttachment;
export const AclTokenPolicyAttachment: typeof import("./aclTokenPolicyAttachment").AclTokenPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["AclTokenPolicyAttachment"], () => require("./aclTokenPolicyAttachment"));

export { AclTokenRoleAttachmentArgs, AclTokenRoleAttachmentState } from "./aclTokenRoleAttachment";
export type AclTokenRoleAttachment = import("./aclTokenRoleAttachment").AclTokenRoleAttachment;
export const AclTokenRoleAttachment: typeof import("./aclTokenRoleAttachment").AclTokenRoleAttachment = null as any;
utilities.lazyLoad(exports, ["AclTokenRoleAttachment"], () => require("./aclTokenRoleAttachment"));

export { AdminPartitionArgs, AdminPartitionState } from "./adminPartition";
export type AdminPartition = import("./adminPartition").AdminPartition;
export const AdminPartition: typeof import("./adminPartition").AdminPartition = null as any;
utilities.lazyLoad(exports, ["AdminPartition"], () => require("./adminPartition"));

export { AgentServiceArgs, AgentServiceState } from "./agentService";
export type AgentService = import("./agentService").AgentService;
export const AgentService: typeof import("./agentService").AgentService = null as any;
utilities.lazyLoad(exports, ["AgentService"], () => require("./agentService"));

export { AutopilotConfigArgs, AutopilotConfigState } from "./autopilotConfig";
export type AutopilotConfig = import("./autopilotConfig").AutopilotConfig;
export const AutopilotConfig: typeof import("./autopilotConfig").AutopilotConfig = null as any;
utilities.lazyLoad(exports, ["AutopilotConfig"], () => require("./autopilotConfig"));

export { CatalogEntryArgs, CatalogEntryState } from "./catalogEntry";
export type CatalogEntry = import("./catalogEntry").CatalogEntry;
export const CatalogEntry: typeof import("./catalogEntry").CatalogEntry = null as any;
utilities.lazyLoad(exports, ["CatalogEntry"], () => require("./catalogEntry"));

export { CertificateAuthorityArgs, CertificateAuthorityState } from "./certificateAuthority";
export type CertificateAuthority = import("./certificateAuthority").CertificateAuthority;
export const CertificateAuthority: typeof import("./certificateAuthority").CertificateAuthority = null as any;
utilities.lazyLoad(exports, ["CertificateAuthority"], () => require("./certificateAuthority"));

export { ConfigEntryArgs, ConfigEntryState } from "./configEntry";
export type ConfigEntry = import("./configEntry").ConfigEntry;
export const ConfigEntry: typeof import("./configEntry").ConfigEntry = null as any;
utilities.lazyLoad(exports, ["ConfigEntry"], () => require("./configEntry"));

export { ConfigEntryServiceDefaultsArgs, ConfigEntryServiceDefaultsState } from "./configEntryServiceDefaults";
export type ConfigEntryServiceDefaults = import("./configEntryServiceDefaults").ConfigEntryServiceDefaults;
export const ConfigEntryServiceDefaults: typeof import("./configEntryServiceDefaults").ConfigEntryServiceDefaults = null as any;
utilities.lazyLoad(exports, ["ConfigEntryServiceDefaults"], () => require("./configEntryServiceDefaults"));

export { ConfigEntryServiceIntentionsArgs, ConfigEntryServiceIntentionsState } from "./configEntryServiceIntentions";
export type ConfigEntryServiceIntentions = import("./configEntryServiceIntentions").ConfigEntryServiceIntentions;
export const ConfigEntryServiceIntentions: typeof import("./configEntryServiceIntentions").ConfigEntryServiceIntentions = null as any;
utilities.lazyLoad(exports, ["ConfigEntryServiceIntentions"], () => require("./configEntryServiceIntentions"));

export { ConfigEntryServiceResolverArgs, ConfigEntryServiceResolverState } from "./configEntryServiceResolver";
export type ConfigEntryServiceResolver = import("./configEntryServiceResolver").ConfigEntryServiceResolver;
export const ConfigEntryServiceResolver: typeof import("./configEntryServiceResolver").ConfigEntryServiceResolver = null as any;
utilities.lazyLoad(exports, ["ConfigEntryServiceResolver"], () => require("./configEntryServiceResolver"));

export { ConfigEntryServiceRouterArgs, ConfigEntryServiceRouterState } from "./configEntryServiceRouter";
export type ConfigEntryServiceRouter = import("./configEntryServiceRouter").ConfigEntryServiceRouter;
export const ConfigEntryServiceRouter: typeof import("./configEntryServiceRouter").ConfigEntryServiceRouter = null as any;
utilities.lazyLoad(exports, ["ConfigEntryServiceRouter"], () => require("./configEntryServiceRouter"));

export { ConfigEntryServiceSplitterArgs, ConfigEntryServiceSplitterState } from "./configEntryServiceSplitter";
export type ConfigEntryServiceSplitter = import("./configEntryServiceSplitter").ConfigEntryServiceSplitter;
export const ConfigEntryServiceSplitter: typeof import("./configEntryServiceSplitter").ConfigEntryServiceSplitter = null as any;
utilities.lazyLoad(exports, ["ConfigEntryServiceSplitter"], () => require("./configEntryServiceSplitter"));

export { ConfigEntryV2ExportedServicesArgs, ConfigEntryV2ExportedServicesState } from "./configEntryV2ExportedServices";
export type ConfigEntryV2ExportedServices = import("./configEntryV2ExportedServices").ConfigEntryV2ExportedServices;
export const ConfigEntryV2ExportedServices: typeof import("./configEntryV2ExportedServices").ConfigEntryV2ExportedServices = null as any;
utilities.lazyLoad(exports, ["ConfigEntryV2ExportedServices"], () => require("./configEntryV2ExportedServices"));

export { GetAclAuthMethodArgs, GetAclAuthMethodResult, GetAclAuthMethodOutputArgs } from "./getAclAuthMethod";
export const getAclAuthMethod: typeof import("./getAclAuthMethod").getAclAuthMethod = null as any;
export const getAclAuthMethodOutput: typeof import("./getAclAuthMethod").getAclAuthMethodOutput = null as any;
utilities.lazyLoad(exports, ["getAclAuthMethod","getAclAuthMethodOutput"], () => require("./getAclAuthMethod"));

export { GetAclPolicyArgs, GetAclPolicyResult, GetAclPolicyOutputArgs } from "./getAclPolicy";
export const getAclPolicy: typeof import("./getAclPolicy").getAclPolicy = null as any;
export const getAclPolicyOutput: typeof import("./getAclPolicy").getAclPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAclPolicy","getAclPolicyOutput"], () => require("./getAclPolicy"));

export { GetAclRoleArgs, GetAclRoleResult, GetAclRoleOutputArgs } from "./getAclRole";
export const getAclRole: typeof import("./getAclRole").getAclRole = null as any;
export const getAclRoleOutput: typeof import("./getAclRole").getAclRoleOutput = null as any;
utilities.lazyLoad(exports, ["getAclRole","getAclRoleOutput"], () => require("./getAclRole"));

export { GetAclTokenArgs, GetAclTokenResult, GetAclTokenOutputArgs } from "./getAclToken";
export const getAclToken: typeof import("./getAclToken").getAclToken = null as any;
export const getAclTokenOutput: typeof import("./getAclToken").getAclTokenOutput = null as any;
utilities.lazyLoad(exports, ["getAclToken","getAclTokenOutput"], () => require("./getAclToken"));

export { GetAclTokenSecretIdArgs, GetAclTokenSecretIdResult, GetAclTokenSecretIdOutputArgs } from "./getAclTokenSecretId";
export const getAclTokenSecretId: typeof import("./getAclTokenSecretId").getAclTokenSecretId = null as any;
export const getAclTokenSecretIdOutput: typeof import("./getAclTokenSecretId").getAclTokenSecretIdOutput = null as any;
utilities.lazyLoad(exports, ["getAclTokenSecretId","getAclTokenSecretIdOutput"], () => require("./getAclTokenSecretId"));

export { GetAgentConfigResult } from "./getAgentConfig";
export const getAgentConfig: typeof import("./getAgentConfig").getAgentConfig = null as any;
export const getAgentConfigOutput: typeof import("./getAgentConfig").getAgentConfigOutput = null as any;
utilities.lazyLoad(exports, ["getAgentConfig","getAgentConfigOutput"], () => require("./getAgentConfig"));

export { GetAgentSelfResult } from "./getAgentSelf";
export const getAgentSelf: typeof import("./getAgentSelf").getAgentSelf = null as any;
export const getAgentSelfOutput: typeof import("./getAgentSelf").getAgentSelfOutput = null as any;
utilities.lazyLoad(exports, ["getAgentSelf","getAgentSelfOutput"], () => require("./getAgentSelf"));

export { GetAutopilotHealthArgs, GetAutopilotHealthResult, GetAutopilotHealthOutputArgs } from "./getAutopilotHealth";
export const getAutopilotHealth: typeof import("./getAutopilotHealth").getAutopilotHealth = null as any;
export const getAutopilotHealthOutput: typeof import("./getAutopilotHealth").getAutopilotHealthOutput = null as any;
utilities.lazyLoad(exports, ["getAutopilotHealth","getAutopilotHealthOutput"], () => require("./getAutopilotHealth"));

export { GetCatalogNodesArgs, GetCatalogNodesResult, GetCatalogNodesOutputArgs } from "./getCatalogNodes";
export const getCatalogNodes: typeof import("./getCatalogNodes").getCatalogNodes = null as any;
export const getCatalogNodesOutput: typeof import("./getCatalogNodes").getCatalogNodesOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogNodes","getCatalogNodesOutput"], () => require("./getCatalogNodes"));

export { GetCatalogServiceArgs, GetCatalogServiceResult, GetCatalogServiceOutputArgs } from "./getCatalogService";
export const getCatalogService: typeof import("./getCatalogService").getCatalogService = null as any;
export const getCatalogServiceOutput: typeof import("./getCatalogService").getCatalogServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogService","getCatalogServiceOutput"], () => require("./getCatalogService"));

export { GetCatalogServicesArgs, GetCatalogServicesResult, GetCatalogServicesOutputArgs } from "./getCatalogServices";
export const getCatalogServices: typeof import("./getCatalogServices").getCatalogServices = null as any;
export const getCatalogServicesOutput: typeof import("./getCatalogServices").getCatalogServicesOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogServices","getCatalogServicesOutput"], () => require("./getCatalogServices"));

export { GetConfigEntryArgs, GetConfigEntryResult, GetConfigEntryOutputArgs } from "./getConfigEntry";
export const getConfigEntry: typeof import("./getConfigEntry").getConfigEntry = null as any;
export const getConfigEntryOutput: typeof import("./getConfigEntry").getConfigEntryOutput = null as any;
utilities.lazyLoad(exports, ["getConfigEntry","getConfigEntryOutput"], () => require("./getConfigEntry"));

export { GetConfigEntryV2ExportedServicesArgs, GetConfigEntryV2ExportedServicesResult, GetConfigEntryV2ExportedServicesOutputArgs } from "./getConfigEntryV2ExportedServices";
export const getConfigEntryV2ExportedServices: typeof import("./getConfigEntryV2ExportedServices").getConfigEntryV2ExportedServices = null as any;
export const getConfigEntryV2ExportedServicesOutput: typeof import("./getConfigEntryV2ExportedServices").getConfigEntryV2ExportedServicesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigEntryV2ExportedServices","getConfigEntryV2ExportedServicesOutput"], () => require("./getConfigEntryV2ExportedServices"));

export { GetDatacentersResult } from "./getDatacenters";
export const getDatacenters: typeof import("./getDatacenters").getDatacenters = null as any;
export const getDatacentersOutput: typeof import("./getDatacenters").getDatacentersOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenters","getDatacentersOutput"], () => require("./getDatacenters"));

export { GetKeyPrefixArgs, GetKeyPrefixResult, GetKeyPrefixOutputArgs } from "./getKeyPrefix";
export const getKeyPrefix: typeof import("./getKeyPrefix").getKeyPrefix = null as any;
export const getKeyPrefixOutput: typeof import("./getKeyPrefix").getKeyPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPrefix","getKeyPrefixOutput"], () => require("./getKeyPrefix"));

export { GetKeysArgs, GetKeysResult, GetKeysOutputArgs } from "./getKeys";
export const getKeys: typeof import("./getKeys").getKeys = null as any;
export const getKeysOutput: typeof import("./getKeys").getKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKeys","getKeysOutput"], () => require("./getKeys"));

export { GetNetworkAreaMembersArgs, GetNetworkAreaMembersResult, GetNetworkAreaMembersOutputArgs } from "./getNetworkAreaMembers";
export const getNetworkAreaMembers: typeof import("./getNetworkAreaMembers").getNetworkAreaMembers = null as any;
export const getNetworkAreaMembersOutput: typeof import("./getNetworkAreaMembers").getNetworkAreaMembersOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAreaMembers","getNetworkAreaMembersOutput"], () => require("./getNetworkAreaMembers"));

export { GetNetworkSegmentsArgs, GetNetworkSegmentsResult, GetNetworkSegmentsOutputArgs } from "./getNetworkSegments";
export const getNetworkSegments: typeof import("./getNetworkSegments").getNetworkSegments = null as any;
export const getNetworkSegmentsOutput: typeof import("./getNetworkSegments").getNetworkSegmentsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSegments","getNetworkSegmentsOutput"], () => require("./getNetworkSegments"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { GetPeeringArgs, GetPeeringResult, GetPeeringOutputArgs } from "./getPeering";
export const getPeering: typeof import("./getPeering").getPeering = null as any;
export const getPeeringOutput: typeof import("./getPeering").getPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getPeering","getPeeringOutput"], () => require("./getPeering"));

export { GetPeeringsArgs, GetPeeringsResult, GetPeeringsOutputArgs } from "./getPeerings";
export const getPeerings: typeof import("./getPeerings").getPeerings = null as any;
export const getPeeringsOutput: typeof import("./getPeerings").getPeeringsOutput = null as any;
utilities.lazyLoad(exports, ["getPeerings","getPeeringsOutput"], () => require("./getPeerings"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceHealthArgs, GetServiceHealthResult, GetServiceHealthOutputArgs } from "./getServiceHealth";
export const getServiceHealth: typeof import("./getServiceHealth").getServiceHealth = null as any;
export const getServiceHealthOutput: typeof import("./getServiceHealth").getServiceHealthOutput = null as any;
utilities.lazyLoad(exports, ["getServiceHealth","getServiceHealthOutput"], () => require("./getServiceHealth"));

export { GetServicesArgs, GetServicesResult, GetServicesOutputArgs } from "./getServices";
export const getServices: typeof import("./getServices").getServices = null as any;
export const getServicesOutput: typeof import("./getServices").getServicesOutput = null as any;
utilities.lazyLoad(exports, ["getServices","getServicesOutput"], () => require("./getServices"));

export { IntentionArgs, IntentionState } from "./intention";
export type Intention = import("./intention").Intention;
export const Intention: typeof import("./intention").Intention = null as any;
utilities.lazyLoad(exports, ["Intention"], () => require("./intention"));

export { KeyPrefixArgs, KeyPrefixState } from "./keyPrefix";
export type KeyPrefix = import("./keyPrefix").KeyPrefix;
export const KeyPrefix: typeof import("./keyPrefix").KeyPrefix = null as any;
utilities.lazyLoad(exports, ["KeyPrefix"], () => require("./keyPrefix"));

export { KeysArgs, KeysState } from "./keys";
export type Keys = import("./keys").Keys;
export const Keys: typeof import("./keys").Keys = null as any;
utilities.lazyLoad(exports, ["Keys"], () => require("./keys"));

export { LicenseArgs, LicenseState } from "./license";
export type License = import("./license").License;
export const License: typeof import("./license").License = null as any;
utilities.lazyLoad(exports, ["License"], () => require("./license"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NamespacePolicyAttachmentArgs, NamespacePolicyAttachmentState } from "./namespacePolicyAttachment";
export type NamespacePolicyAttachment = import("./namespacePolicyAttachment").NamespacePolicyAttachment;
export const NamespacePolicyAttachment: typeof import("./namespacePolicyAttachment").NamespacePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["NamespacePolicyAttachment"], () => require("./namespacePolicyAttachment"));

export { NamespaceRoleAttachmentArgs, NamespaceRoleAttachmentState } from "./namespaceRoleAttachment";
export type NamespaceRoleAttachment = import("./namespaceRoleAttachment").NamespaceRoleAttachment;
export const NamespaceRoleAttachment: typeof import("./namespaceRoleAttachment").NamespaceRoleAttachment = null as any;
utilities.lazyLoad(exports, ["NamespaceRoleAttachment"], () => require("./namespaceRoleAttachment"));

export { NetworkAreaArgs, NetworkAreaState } from "./networkArea";
export type NetworkArea = import("./networkArea").NetworkArea;
export const NetworkArea: typeof import("./networkArea").NetworkArea = null as any;
utilities.lazyLoad(exports, ["NetworkArea"], () => require("./networkArea"));

export { NodeArgs, NodeState } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { PeeringArgs, PeeringState } from "./peering";
export type Peering = import("./peering").Peering;
export const Peering: typeof import("./peering").Peering = null as any;
utilities.lazyLoad(exports, ["Peering"], () => require("./peering"));

export { PeeringTokenArgs, PeeringTokenState } from "./peeringToken";
export type PeeringToken = import("./peeringToken").PeeringToken;
export const PeeringToken: typeof import("./peeringToken").PeeringToken = null as any;
utilities.lazyLoad(exports, ["PeeringToken"], () => require("./peeringToken"));

export { PreparedQueryArgs, PreparedQueryState } from "./preparedQuery";
export type PreparedQuery = import("./preparedQuery").PreparedQuery;
export const PreparedQuery: typeof import("./preparedQuery").PreparedQuery = null as any;
utilities.lazyLoad(exports, ["PreparedQuery"], () => require("./preparedQuery"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "consul:index/aclAuthMethod:AclAuthMethod":
                return new AclAuthMethod(name, <any>undefined, { urn })
            case "consul:index/aclBindingRule:AclBindingRule":
                return new AclBindingRule(name, <any>undefined, { urn })
            case "consul:index/aclPolicy:AclPolicy":
                return new AclPolicy(name, <any>undefined, { urn })
            case "consul:index/aclRole:AclRole":
                return new AclRole(name, <any>undefined, { urn })
            case "consul:index/aclRolePolicyAttachment:AclRolePolicyAttachment":
                return new AclRolePolicyAttachment(name, <any>undefined, { urn })
            case "consul:index/aclToken:AclToken":
                return new AclToken(name, <any>undefined, { urn })
            case "consul:index/aclTokenPolicyAttachment:AclTokenPolicyAttachment":
                return new AclTokenPolicyAttachment(name, <any>undefined, { urn })
            case "consul:index/aclTokenRoleAttachment:AclTokenRoleAttachment":
                return new AclTokenRoleAttachment(name, <any>undefined, { urn })
            case "consul:index/adminPartition:AdminPartition":
                return new AdminPartition(name, <any>undefined, { urn })
            case "consul:index/agentService:AgentService":
                return new AgentService(name, <any>undefined, { urn })
            case "consul:index/autopilotConfig:AutopilotConfig":
                return new AutopilotConfig(name, <any>undefined, { urn })
            case "consul:index/catalogEntry:CatalogEntry":
                return new CatalogEntry(name, <any>undefined, { urn })
            case "consul:index/certificateAuthority:CertificateAuthority":
                return new CertificateAuthority(name, <any>undefined, { urn })
            case "consul:index/configEntry:ConfigEntry":
                return new ConfigEntry(name, <any>undefined, { urn })
            case "consul:index/configEntryServiceDefaults:ConfigEntryServiceDefaults":
                return new ConfigEntryServiceDefaults(name, <any>undefined, { urn })
            case "consul:index/configEntryServiceIntentions:ConfigEntryServiceIntentions":
                return new ConfigEntryServiceIntentions(name, <any>undefined, { urn })
            case "consul:index/configEntryServiceResolver:ConfigEntryServiceResolver":
                return new ConfigEntryServiceResolver(name, <any>undefined, { urn })
            case "consul:index/configEntryServiceRouter:ConfigEntryServiceRouter":
                return new ConfigEntryServiceRouter(name, <any>undefined, { urn })
            case "consul:index/configEntryServiceSplitter:ConfigEntryServiceSplitter":
                return new ConfigEntryServiceSplitter(name, <any>undefined, { urn })
            case "consul:index/configEntryV2ExportedServices:ConfigEntryV2ExportedServices":
                return new ConfigEntryV2ExportedServices(name, <any>undefined, { urn })
            case "consul:index/intention:Intention":
                return new Intention(name, <any>undefined, { urn })
            case "consul:index/keyPrefix:KeyPrefix":
                return new KeyPrefix(name, <any>undefined, { urn })
            case "consul:index/keys:Keys":
                return new Keys(name, <any>undefined, { urn })
            case "consul:index/license:License":
                return new License(name, <any>undefined, { urn })
            case "consul:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "consul:index/namespacePolicyAttachment:NamespacePolicyAttachment":
                return new NamespacePolicyAttachment(name, <any>undefined, { urn })
            case "consul:index/namespaceRoleAttachment:NamespaceRoleAttachment":
                return new NamespaceRoleAttachment(name, <any>undefined, { urn })
            case "consul:index/networkArea:NetworkArea":
                return new NetworkArea(name, <any>undefined, { urn })
            case "consul:index/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "consul:index/peering:Peering":
                return new Peering(name, <any>undefined, { urn })
            case "consul:index/peeringToken:PeeringToken":
                return new PeeringToken(name, <any>undefined, { urn })
            case "consul:index/preparedQuery:PreparedQuery":
                return new PreparedQuery(name, <any>undefined, { urn })
            case "consul:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("consul", "index/aclAuthMethod", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclBindingRule", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclPolicy", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclRole", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclRolePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclToken", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclTokenPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("consul", "index/aclTokenRoleAttachment", _module)
pulumi.runtime.registerResourceModule("consul", "index/adminPartition", _module)
pulumi.runtime.registerResourceModule("consul", "index/agentService", _module)
pulumi.runtime.registerResourceModule("consul", "index/autopilotConfig", _module)
pulumi.runtime.registerResourceModule("consul", "index/catalogEntry", _module)
pulumi.runtime.registerResourceModule("consul", "index/certificateAuthority", _module)
pulumi.runtime.registerResourceModule("consul", "index/configEntry", _module)
pulumi.runtime.registerResourceModule("consul", "index/configEntryServiceDefaults", _module)
pulumi.runtime.registerResourceModule("consul", "index/configEntryServiceIntentions", _module)
pulumi.runtime.registerResourceModule("consul", "index/configEntryServiceResolver", _module)
pulumi.runtime.registerResourceModule("consul", "index/configEntryServiceRouter", _module)
pulumi.runtime.registerResourceModule("consul", "index/configEntryServiceSplitter", _module)
pulumi.runtime.registerResourceModule("consul", "index/configEntryV2ExportedServices", _module)
pulumi.runtime.registerResourceModule("consul", "index/intention", _module)
pulumi.runtime.registerResourceModule("consul", "index/keyPrefix", _module)
pulumi.runtime.registerResourceModule("consul", "index/keys", _module)
pulumi.runtime.registerResourceModule("consul", "index/license", _module)
pulumi.runtime.registerResourceModule("consul", "index/namespace", _module)
pulumi.runtime.registerResourceModule("consul", "index/namespacePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("consul", "index/namespaceRoleAttachment", _module)
pulumi.runtime.registerResourceModule("consul", "index/networkArea", _module)
pulumi.runtime.registerResourceModule("consul", "index/node", _module)
pulumi.runtime.registerResourceModule("consul", "index/peering", _module)
pulumi.runtime.registerResourceModule("consul", "index/peeringToken", _module)
pulumi.runtime.registerResourceModule("consul", "index/preparedQuery", _module)
pulumi.runtime.registerResourceModule("consul", "index/service", _module)
pulumi.runtime.registerResourcePackage("consul", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:consul") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
