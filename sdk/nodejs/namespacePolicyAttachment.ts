// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * `consul_namespace_policy_attachment` can be imported. This is especially useful
 * to manage the policies attached to the `default` namespace:
 *
 * ```sh
 * $ pulumi import consul:index/namespacePolicyAttachment:NamespacePolicyAttachment default default:policy_name
 * ```
 */
export class NamespacePolicyAttachment extends pulumi.CustomResource {
    /**
     * Get an existing NamespacePolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespacePolicyAttachmentState, opts?: pulumi.CustomResourceOptions): NamespacePolicyAttachment {
        return new NamespacePolicyAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/namespacePolicyAttachment:NamespacePolicyAttachment';

    /**
     * Returns true if the given object is an instance of NamespacePolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NamespacePolicyAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NamespacePolicyAttachment.__pulumiType;
    }

    /**
     * The namespace to attach the policy to.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The name of the policy attached to the namespace.
     */
    public readonly policy!: pulumi.Output<string>;

    /**
     * Create a NamespacePolicyAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespacePolicyAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespacePolicyAttachmentArgs | NamespacePolicyAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespacePolicyAttachmentState | undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
        } else {
            const args = argsOrState as NamespacePolicyAttachmentArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NamespacePolicyAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NamespacePolicyAttachment resources.
 */
export interface NamespacePolicyAttachmentState {
    /**
     * The namespace to attach the policy to.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The name of the policy attached to the namespace.
     */
    policy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NamespacePolicyAttachment resource.
 */
export interface NamespacePolicyAttachmentArgs {
    /**
     * The namespace to attach the policy to.
     */
    namespace: pulumi.Input<string>;
    /**
     * The name of the policy attached to the namespace.
     */
    policy: pulumi.Input<string>;
}
