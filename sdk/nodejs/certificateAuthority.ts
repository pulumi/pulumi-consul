// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `consul.CertificateAuthority` resource can be used to manage the configuration of
 * the Certificate Authority used by [Consul Connect](https://www.consul.io/docs/connect/ca).
 *
 * ## Example Usage
 *
 * Use the built-in CA with specific TTL:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const connect = new consul.CertificateAuthority("connect", {
 *     config: {
 *         IntermediateCertTTL: "8760h",
 *         LeafCertTTL: "24h",
 *         RotationPeriod: "2160h",
 *     },
 *     connectProvider: "consul",
 * });
 * ```
 *
 * Use Vault to manage and sign certificates:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const connect = new consul.CertificateAuthority("connect", {
 *     config: {
 *         address: "http://localhost:8200",
 *         intermediate_pki_path: "connect-intermediate",
 *         root_pki_path: "connect-root",
 *         token: "...",
 *     },
 *     connectProvider: "vault",
 * });
 * ```
 *
 * Use the [AWS Certificate Manager Private Certificate Authority](https://aws.amazon.com/certificate-manager/private-certificate-authority/):
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const connect = new consul.CertificateAuthority("connect", {
 *     config: {
 *         existing_arn: "arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-123456789012",
 *     },
 *     connectProvider: "aws-pca",
 * });
 * ```
 */
export class CertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateAuthorityState, opts?: pulumi.CustomResourceOptions): CertificateAuthority {
        return new CertificateAuthority(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/certificateAuthority:CertificateAuthority';

    /**
     * Returns true if the given object is an instance of CertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateAuthority {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateAuthority.__pulumiType;
    }

    /**
     * The raw configuration to use for the chosen provider.
     */
    public readonly config!: pulumi.Output<{[key: string]: string}>;
    /**
     * Specifies the CA provider type to use.
     */
    public readonly connectProvider!: pulumi.Output<string>;

    /**
     * Create a CertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateAuthorityArgs | CertificateAuthorityState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as CertificateAuthorityState | undefined;
            inputs["config"] = state ? state.config : undefined;
            inputs["connectProvider"] = state ? state.connectProvider : undefined;
        } else {
            const args = argsOrState as CertificateAuthorityArgs | undefined;
            if (!args || args.config === undefined) {
                throw new Error("Missing required property 'config'");
            }
            if (!args || args.connectProvider === undefined) {
                throw new Error("Missing required property 'connectProvider'");
            }
            inputs["config"] = args ? args.config : undefined;
            inputs["connectProvider"] = args ? args.connectProvider : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CertificateAuthority.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CertificateAuthority resources.
 */
export interface CertificateAuthorityState {
    /**
     * The raw configuration to use for the chosen provider.
     */
    readonly config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the CA provider type to use.
     */
    readonly connectProvider?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateAuthority resource.
 */
export interface CertificateAuthorityArgs {
    /**
     * The raw configuration to use for the chosen provider.
     */
    readonly config: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the CA provider type to use.
     */
    readonly connectProvider: pulumi.Input<string>;
}
