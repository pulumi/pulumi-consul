// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `consul.CertificateAuthority` resource can be used to manage the configuration of the Certificate Authority used by [Consul Connect](https://www.consul.io/docs/connect/ca).
 *
 * > **Note:** The keys in the `config` argument must be using Camel case.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import consul:index/certificateAuthority:CertificateAuthority connect connect-ca
 * ```
 */
export class CertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateAuthorityState, opts?: pulumi.CustomResourceOptions): CertificateAuthority {
        return new CertificateAuthority(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/certificateAuthority:CertificateAuthority';

    /**
     * Returns true if the given object is an instance of CertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateAuthority {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateAuthority.__pulumiType;
    }

    /**
     * The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
     * [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
     *
     * @deprecated The config attribute is deprecated, please use config_json instead.
     */
    public readonly config!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
     * [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
     */
    public readonly configJson!: pulumi.Output<string | undefined>;
    /**
     * Specifies the CA provider type to use.
     */
    public readonly connectProvider!: pulumi.Output<string>;

    /**
     * Create a CertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateAuthorityArgs | CertificateAuthorityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateAuthorityState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["configJson"] = state ? state.configJson : undefined;
            resourceInputs["connectProvider"] = state ? state.connectProvider : undefined;
        } else {
            const args = argsOrState as CertificateAuthorityArgs | undefined;
            if ((!args || args.connectProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectProvider'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["configJson"] = args ? args.configJson : undefined;
            resourceInputs["connectProvider"] = args ? args.connectProvider : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateAuthority.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CertificateAuthority resources.
 */
export interface CertificateAuthorityState {
    /**
     * The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
     * [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
     *
     * @deprecated The config attribute is deprecated, please use config_json instead.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
     * [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
     */
    configJson?: pulumi.Input<string>;
    /**
     * Specifies the CA provider type to use.
     */
    connectProvider?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateAuthority resource.
 */
export interface CertificateAuthorityArgs {
    /**
     * The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
     * [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
     *
     * @deprecated The config attribute is deprecated, please use config_json instead.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The raw configuration to use for the chosen provider. For more information on configuring the Connect CA providers, see
     * [Provider Config](https://developer.hashicorp.com/consul/docs/connect/ca).
     */
    configJson?: pulumi.Input<string>;
    /**
     * Specifies the CA provider type to use.
     */
    connectProvider: pulumi.Input<string>;
}
