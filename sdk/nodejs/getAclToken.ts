// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `consul.AclToken` data source returns the information related to the `consul.AclToken` resource with the exception of its secret ID.
 *
 * If you want to get the secret ID associated with a token, use the [`consul.getAclTokenSecretId` data source](https://www.terraform.io/docs/providers/consul/d/acl_token_secret_id.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const test = consul.getAclToken({
 *     accessorId: "00000000-0000-0000-0000-000000000002",
 * });
 * export const consulAclPolicies = test.then(test => test.policies);
 * ```
 */
export function getAclToken(args: GetAclTokenArgs, opts?: pulumi.InvokeOptions): Promise<GetAclTokenResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("consul:index/getAclToken:getAclToken", {
        "accessorId": args.accessorId,
        "namespace": args.namespace,
        "partition": args.partition,
    }, opts);
}

/**
 * A collection of arguments for invoking getAclToken.
 */
export interface GetAclTokenArgs {
    /**
     * The accessor ID of the ACL token.
     */
    accessorId: string;
    /**
     * The namespace to lookup the ACL token.
     */
    namespace?: string;
    /**
     * The partition to lookup the ACL token.
     */
    partition?: string;
}

/**
 * A collection of values returned by getAclToken.
 */
export interface GetAclTokenResult {
    /**
     * The accessor ID of the ACL token.
     */
    readonly accessorId: string;
    /**
     * The description of the ACL token.
     */
    readonly description: string;
    /**
     * If set this represents the point after which a token should be considered revoked and is eligible for destruction.
     */
    readonly expirationTime: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Whether the ACL token is local to the datacenter it was created within.
     */
    readonly local: boolean;
    /**
     * The namespace to lookup the ACL token.
     */
    readonly namespace?: string;
    /**
     * The list of node identities attached to the token.
     */
    readonly nodeIdentities: outputs.GetAclTokenNodeIdentity[];
    /**
     * The partition to lookup the ACL token.
     */
    readonly partition?: string;
    /**
     * A list of policies associated with the ACL token.
     */
    readonly policies: outputs.GetAclTokenPolicy[];
    /**
     * List of roles linked to the token
     */
    readonly roles: outputs.GetAclTokenRole[];
    /**
     * The list of service identities attached to the token.
     */
    readonly serviceIdentities: outputs.GetAclTokenServiceIdentity[];
    /**
     * The list of templated policies that should be applied to the token.
     */
    readonly templatedPolicies: outputs.GetAclTokenTemplatedPolicy[];
}
/**
 * The `consul.AclToken` data source returns the information related to the `consul.AclToken` resource with the exception of its secret ID.
 *
 * If you want to get the secret ID associated with a token, use the [`consul.getAclTokenSecretId` data source](https://www.terraform.io/docs/providers/consul/d/acl_token_secret_id.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const test = consul.getAclToken({
 *     accessorId: "00000000-0000-0000-0000-000000000002",
 * });
 * export const consulAclPolicies = test.then(test => test.policies);
 * ```
 */
export function getAclTokenOutput(args: GetAclTokenOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAclTokenResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("consul:index/getAclToken:getAclToken", {
        "accessorId": args.accessorId,
        "namespace": args.namespace,
        "partition": args.partition,
    }, opts);
}

/**
 * A collection of arguments for invoking getAclToken.
 */
export interface GetAclTokenOutputArgs {
    /**
     * The accessor ID of the ACL token.
     */
    accessorId: pulumi.Input<string>;
    /**
     * The namespace to lookup the ACL token.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The partition to lookup the ACL token.
     */
    partition?: pulumi.Input<string>;
}
