// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides access to the [Autopilot Configuration](https://www.consul.io/docs/guides/autopilot.html)
 * of Consul to automatically manage Consul servers.
 *
 * It includes to automatically cleanup dead servers, monitor the status of the Raft
 * cluster and stable server introduction.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const config = new consul.AutopilotConfig("config", {
 *     cleanupDeadServers: false,
 *     lastContactThreshold: "1s",
 *     maxTrailingLogs: 500,
 * });
 * ```
 */
export class AutopilotConfig extends pulumi.CustomResource {
    /**
     * Get an existing AutopilotConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutopilotConfigState, opts?: pulumi.CustomResourceOptions): AutopilotConfig {
        return new AutopilotConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/autopilotConfig:AutopilotConfig';

    /**
     * Returns true if the given object is an instance of AutopilotConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutopilotConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutopilotConfig.__pulumiType;
    }

    /**
     * Whether to remove failing servers when a
     * replacement comes online. Defaults to true.
     */
    public readonly cleanupDeadServers!: pulumi.Output<boolean | undefined>;
    /**
     * The datacenter to use. This overrides the agent's
     * default datacenter and the datacenter in the provider setup.
     */
    public readonly datacenter!: pulumi.Output<string | undefined>;
    /**
     * Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
     * Defaults to false.
     */
    public readonly disableUpgradeMigration!: pulumi.Output<boolean | undefined>;
    /**
     * The time after which a server is
     * considered as unhealthy and will be removed. Defaults to `"200ms"`.
     */
    public readonly lastContactThreshold!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of Raft log entries a
     * server can trail the leader. Defaults to 250.
     */
    public readonly maxTrailingLogs!: pulumi.Output<number | undefined>;
    /**
     * The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
     * tag to use. Consul will try to keep one voting server by zone to take advantage
     * of isolated failure domains. Defaults to an empty string.
     */
    public readonly redundancyZoneTag!: pulumi.Output<string | undefined>;
    /**
     * The period to wait for a server to be
     * healthy and stable before being promoted to a full, voting member. Defaults to
     * `"10s"`.
     */
    public readonly serverStabilizationTime!: pulumi.Output<string | undefined>;
    /**
     * The tag to override the version information
     * used during a migration. Defaults to an empty string.
     */
    public readonly upgradeVersionTag!: pulumi.Output<string | undefined>;

    /**
     * Create a AutopilotConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AutopilotConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutopilotConfigArgs | AutopilotConfigState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutopilotConfigState | undefined;
            inputs["cleanupDeadServers"] = state ? state.cleanupDeadServers : undefined;
            inputs["datacenter"] = state ? state.datacenter : undefined;
            inputs["disableUpgradeMigration"] = state ? state.disableUpgradeMigration : undefined;
            inputs["lastContactThreshold"] = state ? state.lastContactThreshold : undefined;
            inputs["maxTrailingLogs"] = state ? state.maxTrailingLogs : undefined;
            inputs["redundancyZoneTag"] = state ? state.redundancyZoneTag : undefined;
            inputs["serverStabilizationTime"] = state ? state.serverStabilizationTime : undefined;
            inputs["upgradeVersionTag"] = state ? state.upgradeVersionTag : undefined;
        } else {
            const args = argsOrState as AutopilotConfigArgs | undefined;
            inputs["cleanupDeadServers"] = args ? args.cleanupDeadServers : undefined;
            inputs["datacenter"] = args ? args.datacenter : undefined;
            inputs["disableUpgradeMigration"] = args ? args.disableUpgradeMigration : undefined;
            inputs["lastContactThreshold"] = args ? args.lastContactThreshold : undefined;
            inputs["maxTrailingLogs"] = args ? args.maxTrailingLogs : undefined;
            inputs["redundancyZoneTag"] = args ? args.redundancyZoneTag : undefined;
            inputs["serverStabilizationTime"] = args ? args.serverStabilizationTime : undefined;
            inputs["upgradeVersionTag"] = args ? args.upgradeVersionTag : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AutopilotConfig.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AutopilotConfig resources.
 */
export interface AutopilotConfigState {
    /**
     * Whether to remove failing servers when a
     * replacement comes online. Defaults to true.
     */
    readonly cleanupDeadServers?: pulumi.Input<boolean>;
    /**
     * The datacenter to use. This overrides the agent's
     * default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
     * Defaults to false.
     */
    readonly disableUpgradeMigration?: pulumi.Input<boolean>;
    /**
     * The time after which a server is
     * considered as unhealthy and will be removed. Defaults to `"200ms"`.
     */
    readonly lastContactThreshold?: pulumi.Input<string>;
    /**
     * The maximum number of Raft log entries a
     * server can trail the leader. Defaults to 250.
     */
    readonly maxTrailingLogs?: pulumi.Input<number>;
    /**
     * The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
     * tag to use. Consul will try to keep one voting server by zone to take advantage
     * of isolated failure domains. Defaults to an empty string.
     */
    readonly redundancyZoneTag?: pulumi.Input<string>;
    /**
     * The period to wait for a server to be
     * healthy and stable before being promoted to a full, voting member. Defaults to
     * `"10s"`.
     */
    readonly serverStabilizationTime?: pulumi.Input<string>;
    /**
     * The tag to override the version information
     * used during a migration. Defaults to an empty string.
     */
    readonly upgradeVersionTag?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutopilotConfig resource.
 */
export interface AutopilotConfigArgs {
    /**
     * Whether to remove failing servers when a
     * replacement comes online. Defaults to true.
     */
    readonly cleanupDeadServers?: pulumi.Input<boolean>;
    /**
     * The datacenter to use. This overrides the agent's
     * default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
     * Defaults to false.
     */
    readonly disableUpgradeMigration?: pulumi.Input<boolean>;
    /**
     * The time after which a server is
     * considered as unhealthy and will be removed. Defaults to `"200ms"`.
     */
    readonly lastContactThreshold?: pulumi.Input<string>;
    /**
     * The maximum number of Raft log entries a
     * server can trail the leader. Defaults to 250.
     */
    readonly maxTrailingLogs?: pulumi.Input<number>;
    /**
     * The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
     * tag to use. Consul will try to keep one voting server by zone to take advantage
     * of isolated failure domains. Defaults to an empty string.
     */
    readonly redundancyZoneTag?: pulumi.Input<string>;
    /**
     * The period to wait for a server to be
     * healthy and stable before being promoted to a full, voting member. Defaults to
     * `"10s"`.
     */
    readonly serverStabilizationTime?: pulumi.Input<string>;
    /**
     * The tag to override the version information
     * used during a migration. Defaults to an empty string.
     */
    readonly upgradeVersionTag?: pulumi.Input<string>;
}
