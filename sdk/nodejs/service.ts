// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * A high-level resource for creating a Service in Consul in the Consul catalog. This
 * is appropriate for registering [external services](https://www.consul.io/docs/guides/external.html) and
 * can be used to create services addressable by Consul that cannot be registered
 * with a [local agent](https://www.consul.io/docs/agent/basics.html).
 *
 * > **NOTE:** If a Consul agent is running on the node where this service is
 * registered, it is not recommended to use this resource as the service will be
 * removed during the next [anti-entropy synchronisation](https://www.consul.io/docs/architecture/anti-entropy).
 *
 * ## Example Usage
 *
 * Creating a new node with the service:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const compute = new consul.Node("compute", {
 *     address: "www.google.com",
 * });
 * const google = new consul.Service("google", {
 *     node: compute.name,
 *     port: 80,
 *     tags: ["tag0"],
 * });
 * ```
 *
 * Utilizing an existing known node:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const google = new consul.Service("google", {
 *     node: "google",
 *     port: 443,
 * });
 * ```
 *
 * Register a health-check:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const redis = new consul.Service("redis", {
 *     checks: [{
 *         checkId: "service:redis1",
 *         deregisterCriticalServiceAfter: "30s",
 *         headers: [
 *             {
 *                 name: "foo",
 *                 values: ["test"],
 *             },
 *             {
 *                 name: "bar",
 *                 values: ["test"],
 *             },
 *         ],
 *         http: "https://www.hashicorptest.com",
 *         interval: "5s",
 *         method: "PUT",
 *         name: "Redis health check",
 *         status: "passing",
 *         timeout: "1s",
 *         tlsSkipVerify: false,
 *     }],
 *     node: "redis",
 *     port: 6379,
 * });
 * ```
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * The address of the service. Defaults to the
     * address of the node.
     */
    public readonly address!: pulumi.Output<string>;
    public readonly checks!: pulumi.Output<outputs.ServiceCheck[] | undefined>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    public readonly datacenter!: pulumi.Output<string>;
    /**
     * Specifies to disable the
     * anti-entropy feature for this service's tags. Defaults to `false`.
     */
    public readonly enableTagOverride!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated The external field has been deprecated and does nothing.
     */
    public readonly external!: pulumi.Output<boolean | undefined>;
    /**
     * A map of arbitrary KV metadata linked to the service
     * instance.
     */
    public readonly meta!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the health-check.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace to create the service within.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The name of the node the to register the service on.
     */
    public readonly node!: pulumi.Output<string>;
    /**
     * The port of the service.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * - If the service ID is not provided, it will be defaulted to the value
     * of the `name` attribute.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * A list of values that are opaque to Consul,
     * but can be used to distinguish between services or nodes.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServiceState | undefined;
            inputs["address"] = state ? state.address : undefined;
            inputs["checks"] = state ? state.checks : undefined;
            inputs["datacenter"] = state ? state.datacenter : undefined;
            inputs["enableTagOverride"] = state ? state.enableTagOverride : undefined;
            inputs["external"] = state ? state.external : undefined;
            inputs["meta"] = state ? state.meta : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespace"] = state ? state.namespace : undefined;
            inputs["node"] = state ? state.node : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["serviceId"] = state ? state.serviceId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if (!args || args.node === undefined) {
                throw new Error("Missing required property 'node'");
            }
            inputs["address"] = args ? args.address : undefined;
            inputs["checks"] = args ? args.checks : undefined;
            inputs["datacenter"] = args ? args.datacenter : undefined;
            inputs["enableTagOverride"] = args ? args.enableTagOverride : undefined;
            inputs["external"] = args ? args.external : undefined;
            inputs["meta"] = args ? args.meta : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["node"] = args ? args.node : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["serviceId"] = args ? args.serviceId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Service.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * The address of the service. Defaults to the
     * address of the node.
     */
    readonly address?: pulumi.Input<string>;
    readonly checks?: pulumi.Input<pulumi.Input<inputs.ServiceCheck>[]>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Specifies to disable the
     * anti-entropy feature for this service's tags. Defaults to `false`.
     */
    readonly enableTagOverride?: pulumi.Input<boolean>;
    /**
     * @deprecated The external field has been deprecated and does nothing.
     */
    readonly external?: pulumi.Input<boolean>;
    /**
     * A map of arbitrary KV metadata linked to the service
     * instance.
     */
    readonly meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the health-check.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The namespace to create the service within.
     */
    readonly namespace?: pulumi.Input<string>;
    /**
     * The name of the node the to register the service on.
     */
    readonly node?: pulumi.Input<string>;
    /**
     * The port of the service.
     */
    readonly port?: pulumi.Input<number>;
    /**
     * - If the service ID is not provided, it will be defaulted to the value
     * of the `name` attribute.
     */
    readonly serviceId?: pulumi.Input<string>;
    /**
     * A list of values that are opaque to Consul,
     * but can be used to distinguish between services or nodes.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * The address of the service. Defaults to the
     * address of the node.
     */
    readonly address?: pulumi.Input<string>;
    readonly checks?: pulumi.Input<pulumi.Input<inputs.ServiceCheck>[]>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Specifies to disable the
     * anti-entropy feature for this service's tags. Defaults to `false`.
     */
    readonly enableTagOverride?: pulumi.Input<boolean>;
    /**
     * @deprecated The external field has been deprecated and does nothing.
     */
    readonly external?: pulumi.Input<boolean>;
    /**
     * A map of arbitrary KV metadata linked to the service
     * instance.
     */
    readonly meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the health-check.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The namespace to create the service within.
     */
    readonly namespace?: pulumi.Input<string>;
    /**
     * The name of the node the to register the service on.
     */
    readonly node: pulumi.Input<string>;
    /**
     * The port of the service.
     */
    readonly port?: pulumi.Input<number>;
    /**
     * - If the service ID is not provided, it will be defaulted to the value
     * of the `name` attribute.
     */
    readonly serviceId?: pulumi.Input<string>;
    /**
     * A list of values that are opaque to Consul,
     * but can be used to distinguish between services or nodes.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
