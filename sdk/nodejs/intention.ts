// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [Intentions](https://www.consul.io/docs/connect/intentions.html) are used to define
 * rules for which services may connect to one another when using [Consul Connect](https://www.consul.io/docs/connect/index.html).
 *
 * It is appropriate to either reference existing services or specify non-existent services
 * that will be created in the future when creating intentions. This resource can be used
 * in conjunction with the `consul.Service` datasource when referencing services
 * registered on nodes that have a running Consul agent.
 *
 * ## Example Usage
 *
 * Create a simplest intention with static service names:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const database = new consul.Intention("database", {
 *     action: "allow",
 *     destinationName: "db",
 *     sourceName: "api",
 * });
 * ```
 *
 * Referencing a known service via a datasource:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const database = new consul.Intention("database", {
 *     action: "allow",
 *     destinationName: consul_service_pg.name,
 *     sourceName: "api",
 * });
 * const pg = pulumi.output(consul.getService({
 *     name: "postgresql",
 * }, { async: true }));
 * ```
 *
 * ## Import
 *
 * `consul_intention` can be imported
 *
 * ```sh
 *  $ pulumi import consul:index/intention:Intention database 657a57d6-0d56-57e2-31cb-e9f1ed3c18dd
 * ```
 */
export class Intention extends pulumi.CustomResource {
    /**
     * Get an existing Intention resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntentionState, opts?: pulumi.CustomResourceOptions): Intention {
        return new Intention(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/intention:Intention';

    /**
     * Returns true if the given object is an instance of Intention.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Intention {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Intention.__pulumiType;
    }

    /**
     * The intention action. Must be one of `allow` or `deny`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    public readonly datacenter!: pulumi.Output<string>;
    /**
     * Optional description that can be used by Consul
     * tooling, but is not used internally.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the destination service for the intention. This
     * service does not have to exist.
     */
    public readonly destinationName!: pulumi.Output<string>;
    /**
     * The destination
     * namespace of the intention.
     */
    public readonly destinationNamespace!: pulumi.Output<string | undefined>;
    /**
     * Key/value pairs that are opaque to Consul and are associated
     * with the intention.
     */
    public readonly meta!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the source service for the intention. This
     * service does not have to exist.
     */
    public readonly sourceName!: pulumi.Output<string>;
    /**
     * The source namespace of the
     * intention.
     */
    public readonly sourceNamespace!: pulumi.Output<string | undefined>;

    /**
     * Create a Intention resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntentionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntentionArgs | IntentionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntentionState | undefined;
            inputs["action"] = state ? state.action : undefined;
            inputs["datacenter"] = state ? state.datacenter : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["destinationName"] = state ? state.destinationName : undefined;
            inputs["destinationNamespace"] = state ? state.destinationNamespace : undefined;
            inputs["meta"] = state ? state.meta : undefined;
            inputs["sourceName"] = state ? state.sourceName : undefined;
            inputs["sourceNamespace"] = state ? state.sourceNamespace : undefined;
        } else {
            const args = argsOrState as IntentionArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.destinationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationName'");
            }
            if ((!args || args.sourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceName'");
            }
            inputs["action"] = args ? args.action : undefined;
            inputs["datacenter"] = args ? args.datacenter : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["destinationName"] = args ? args.destinationName : undefined;
            inputs["destinationNamespace"] = args ? args.destinationNamespace : undefined;
            inputs["meta"] = args ? args.meta : undefined;
            inputs["sourceName"] = args ? args.sourceName : undefined;
            inputs["sourceNamespace"] = args ? args.sourceNamespace : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Intention.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Intention resources.
 */
export interface IntentionState {
    /**
     * The intention action. Must be one of `allow` or `deny`.
     */
    readonly action?: pulumi.Input<string>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Optional description that can be used by Consul
     * tooling, but is not used internally.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of the destination service for the intention. This
     * service does not have to exist.
     */
    readonly destinationName?: pulumi.Input<string>;
    /**
     * The destination
     * namespace of the intention.
     */
    readonly destinationNamespace?: pulumi.Input<string>;
    /**
     * Key/value pairs that are opaque to Consul and are associated
     * with the intention.
     */
    readonly meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the source service for the intention. This
     * service does not have to exist.
     */
    readonly sourceName?: pulumi.Input<string>;
    /**
     * The source namespace of the
     * intention.
     */
    readonly sourceNamespace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Intention resource.
 */
export interface IntentionArgs {
    /**
     * The intention action. Must be one of `allow` or `deny`.
     */
    readonly action: pulumi.Input<string>;
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Optional description that can be used by Consul
     * tooling, but is not used internally.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of the destination service for the intention. This
     * service does not have to exist.
     */
    readonly destinationName: pulumi.Input<string>;
    /**
     * The destination
     * namespace of the intention.
     */
    readonly destinationNamespace?: pulumi.Input<string>;
    /**
     * Key/value pairs that are opaque to Consul and are associated
     * with the intention.
     */
    readonly meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the source service for the intention. This
     * service does not have to exist.
     */
    readonly sourceName: pulumi.Input<string>;
    /**
     * The source namespace of the
     * intention.
     */
    readonly sourceNamespace?: pulumi.Input<string>;
}
