// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [Cluster Peering](https://www.consul.io/docs/connect/cluster-peering) can be used to create connections between two or more independent clusters so that services deployed to different partitions or datacenters can communicate.
 *
 * The `clusterPeeringToken` resource can be used to generate a peering token that can later be used to establish a peering connection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const token = new consul.PeeringToken("token", {peerName: "eu-cluster"});
 * ```
 */
export class PeeringToken extends pulumi.CustomResource {
    /**
     * Get an existing PeeringToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PeeringTokenState, opts?: pulumi.CustomResourceOptions): PeeringToken {
        return new PeeringToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/peeringToken:PeeringToken';

    /**
     * Returns true if the given object is an instance of PeeringToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PeeringToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PeeringToken.__pulumiType;
    }

    /**
     * Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the cluster peering process.
     */
    public readonly meta!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * The name assigned to the peer cluster. The `peerName` is used to reference the peer cluster in service discovery queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
     */
    public readonly peerName!: pulumi.Output<string>;
    /**
     * The generated peering token
     */
    public /*out*/ readonly peeringToken!: pulumi.Output<string>;
    /**
     * The addresses for the cluster that generates the peering token. Addresses take the form {host or IP}:port. You can specify one or more load balancers or external IPs that route external traffic to this cluster's Consul servers.
     */
    public readonly serverExternalAddresses!: pulumi.Output<string[] | undefined>;

    /**
     * Create a PeeringToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PeeringTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PeeringTokenArgs | PeeringTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PeeringTokenState | undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["peerName"] = state ? state.peerName : undefined;
            resourceInputs["peeringToken"] = state ? state.peeringToken : undefined;
            resourceInputs["serverExternalAddresses"] = state ? state.serverExternalAddresses : undefined;
        } else {
            const args = argsOrState as PeeringTokenArgs | undefined;
            if ((!args || args.peerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerName'");
            }
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["peerName"] = args ? args.peerName : undefined;
            resourceInputs["serverExternalAddresses"] = args ? args.serverExternalAddresses : undefined;
            resourceInputs["peeringToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["peeringToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PeeringToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PeeringToken resources.
 */
export interface PeeringTokenState {
    /**
     * Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the cluster peering process.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partition?: pulumi.Input<string>;
    /**
     * The name assigned to the peer cluster. The `peerName` is used to reference the peer cluster in service discovery queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
     */
    peerName?: pulumi.Input<string>;
    /**
     * The generated peering token
     */
    peeringToken?: pulumi.Input<string>;
    /**
     * The addresses for the cluster that generates the peering token. Addresses take the form {host or IP}:port. You can specify one or more load balancers or external IPs that route external traffic to this cluster's Consul servers.
     */
    serverExternalAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PeeringToken resource.
 */
export interface PeeringTokenArgs {
    /**
     * Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the cluster peering process.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partition?: pulumi.Input<string>;
    /**
     * The name assigned to the peer cluster. The `peerName` is used to reference the peer cluster in service discovery queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
     */
    peerName: pulumi.Input<string>;
    /**
     * The addresses for the cluster that generates the peering token. Addresses take the form {host or IP}:port. You can specify one or more load balancers or external IPs that route external traffic to this cluster's Consul servers.
     */
    serverExternalAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}
