// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Keys extends pulumi.CustomResource {
    /**
     * Get an existing Keys resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeysState, opts?: pulumi.CustomResourceOptions): Keys {
        return new Keys(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/keys:Keys';

    /**
     * Returns true if the given object is an instance of Keys.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Keys {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Keys.__pulumiType;
    }

    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    public readonly datacenter!: pulumi.Output<string>;
    /**
     * Specifies a key in Consul to be written.
     * Supported values documented below.
     */
    public readonly keys!: pulumi.Output<outputs.KeysKey[] | undefined>;
    /**
     * The namespace to create the keys within.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The ACL token to use. This overrides the
     * token that the agent provides by default.
     */
    public readonly token!: pulumi.Output<string | undefined>;
    public /*out*/ readonly var!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Keys resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KeysArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeysArgs | KeysState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as KeysState | undefined;
            inputs["datacenter"] = state ? state.datacenter : undefined;
            inputs["keys"] = state ? state.keys : undefined;
            inputs["namespace"] = state ? state.namespace : undefined;
            inputs["token"] = state ? state.token : undefined;
            inputs["var"] = state ? state.var : undefined;
        } else {
            const args = argsOrState as KeysArgs | undefined;
            inputs["datacenter"] = args ? args.datacenter : undefined;
            inputs["keys"] = args ? args.keys : undefined;
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["token"] = args ? args.token : undefined;
            inputs["var"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Keys.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Keys resources.
 */
export interface KeysState {
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Specifies a key in Consul to be written.
     * Supported values documented below.
     */
    readonly keys?: pulumi.Input<pulumi.Input<inputs.KeysKey>[]>;
    /**
     * The namespace to create the keys within.
     */
    readonly namespace?: pulumi.Input<string>;
    /**
     * The ACL token to use. This overrides the
     * token that the agent provides by default.
     */
    readonly token?: pulumi.Input<string>;
    readonly var?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Keys resource.
 */
export interface KeysArgs {
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Specifies a key in Consul to be written.
     * Supported values documented below.
     */
    readonly keys?: pulumi.Input<pulumi.Input<inputs.KeysKey>[]>;
    /**
     * The namespace to create the keys within.
     */
    readonly namespace?: pulumi.Input<string>;
    /**
     * The ACL token to use. This overrides the
     * token that the agent provides by default.
     */
    readonly token?: pulumi.Input<string>;
}
