// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * `consul_key_prefix` can be imported. This is useful when the path already exists and you know all keys in path should be managed by Terraform.
 *
 * ```sh
 *  $ pulumi import consul:index/keyPrefix:KeyPrefix myapp_config myapp/config/
 * ```
 */
export class KeyPrefix extends pulumi.CustomResource {
    /**
     * Get an existing KeyPrefix resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyPrefixState, opts?: pulumi.CustomResourceOptions): KeyPrefix {
        return new KeyPrefix(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/keyPrefix:KeyPrefix';

    /**
     * Returns true if the given object is an instance of KeyPrefix.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyPrefix {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyPrefix.__pulumiType;
    }

    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    public readonly datacenter!: pulumi.Output<string>;
    /**
     * The namespace to create the keys within.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies the common prefix shared by all keys
     * that will be managed by this resource instance. In most cases this will
     * end with a slash, to manage a "folder" of keys.
     */
    public readonly pathPrefix!: pulumi.Output<string>;
    /**
     * A subkey to add. Supported values documented below.
     * Multiple blocks supported.
     */
    public readonly subkeyCollection!: pulumi.Output<outputs.KeyPrefixSubkeyCollection[] | undefined>;
    /**
     * A mapping from subkey name (which will be appended
     * to the given `pathPrefix`) to the value that should be stored at that key.
     * Use slashes, as shown in the above example, to create "sub-folders" under
     * the given path prefix.
     */
    public readonly subkeys!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ACL token to use. This overrides the
     * token that the agent provides by default.
     */
    public readonly token!: pulumi.Output<string | undefined>;

    /**
     * Create a KeyPrefix resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyPrefixArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyPrefixArgs | KeyPrefixState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyPrefixState | undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["pathPrefix"] = state ? state.pathPrefix : undefined;
            resourceInputs["subkeyCollection"] = state ? state.subkeyCollection : undefined;
            resourceInputs["subkeys"] = state ? state.subkeys : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as KeyPrefixArgs | undefined;
            if ((!args || args.pathPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pathPrefix'");
            }
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["pathPrefix"] = args ? args.pathPrefix : undefined;
            resourceInputs["subkeyCollection"] = args ? args.subkeyCollection : undefined;
            resourceInputs["subkeys"] = args ? args.subkeys : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyPrefix.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyPrefix resources.
 */
export interface KeyPrefixState {
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * The namespace to create the keys within.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the common prefix shared by all keys
     * that will be managed by this resource instance. In most cases this will
     * end with a slash, to manage a "folder" of keys.
     */
    pathPrefix?: pulumi.Input<string>;
    /**
     * A subkey to add. Supported values documented below.
     * Multiple blocks supported.
     */
    subkeyCollection?: pulumi.Input<pulumi.Input<inputs.KeyPrefixSubkeyCollection>[]>;
    /**
     * A mapping from subkey name (which will be appended
     * to the given `pathPrefix`) to the value that should be stored at that key.
     * Use slashes, as shown in the above example, to create "sub-folders" under
     * the given path prefix.
     */
    subkeys?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ACL token to use. This overrides the
     * token that the agent provides by default.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyPrefix resource.
 */
export interface KeyPrefixArgs {
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * The namespace to create the keys within.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the common prefix shared by all keys
     * that will be managed by this resource instance. In most cases this will
     * end with a slash, to manage a "folder" of keys.
     */
    pathPrefix: pulumi.Input<string>;
    /**
     * A subkey to add. Supported values documented below.
     * Multiple blocks supported.
     */
    subkeyCollection?: pulumi.Input<pulumi.Input<inputs.KeyPrefixSubkeyCollection>[]>;
    /**
     * A mapping from subkey name (which will be appended
     * to the given `pathPrefix`) to the value that should be stored at that key.
     * Use slashes, as shown in the above example, to create "sub-folders" under
     * the given path prefix.
     */
    subkeys?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ACL token to use. This overrides the
     * token that the agent provides by default.
     */
    token?: pulumi.Input<string>;
}
