// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `consul.AclPolicy` data source returns the information related to a
 * [Consul ACL Policy](https://www.consul.io/docs/acl/acl-system.html#acl-policies).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const agent = consul.getAclPolicy({
 *     name: "agent",
 * });
 * export const consulAclPolicy = agent.then(agent => agent.rules);
 * ```
 */
export function getAclPolicy(args: GetAclPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetAclPolicyResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("consul:index/getAclPolicy:getAclPolicy", {
        "name": args.name,
        "namespace": args.namespace,
        "partition": args.partition,
    }, opts);
}

/**
 * A collection of arguments for invoking getAclPolicy.
 */
export interface GetAclPolicyArgs {
    /**
     * The name of the ACL Policy.
     */
    name: string;
    /**
     * The namespace to lookup the policy.
     */
    namespace?: string;
    /**
     * The partition to lookup the policy.
     */
    partition?: string;
}

/**
 * A collection of values returned by getAclPolicy.
 */
export interface GetAclPolicyResult {
    /**
     * The datacenters associated with the ACL Policy.
     */
    readonly datacenters: string[];
    /**
     * The description of the ACL Policy.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly namespace?: string;
    readonly partition?: string;
    /**
     * The rules associated with the ACL Policy.
     */
    readonly rules: string;
}

export function getAclPolicyOutput(args: GetAclPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAclPolicyResult> {
    return pulumi.output(args).apply(a => getAclPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getAclPolicy.
 */
export interface GetAclPolicyOutputArgs {
    /**
     * The name of the ACL Policy.
     */
    name: pulumi.Input<string>;
    /**
     * The namespace to lookup the policy.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The partition to lookup the policy.
     */
    partition?: pulumi.Input<string>;
}
