// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getKeyPrefix(args: GetKeyPrefixArgs, opts?: pulumi.InvokeOptions): Promise<GetKeyPrefixResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("consul:index/getKeyPrefix:getKeyPrefix", {
        "datacenter": args.datacenter,
        "namespace": args.namespace,
        "pathPrefix": args.pathPrefix,
        "subkeyCollection": args.subkeyCollection,
        "token": args.token,
    }, opts);
}

/**
 * A collection of arguments for invoking getKeyPrefix.
 */
export interface GetKeyPrefixArgs {
    /**
     * The datacenter to use. This overrides the
     * agent's default datacenter and the datacenter in the provider setup.
     */
    readonly datacenter?: string;
    /**
     * The namespace to create the keys within.
     */
    readonly namespace?: string;
    /**
     * Specifies the common prefix shared by all keys
     * that will be read by this data source instance. In most cases, this will
     * end with a slash to read a "folder" of subkeys.
     */
    readonly pathPrefix: string;
    /**
     * Specifies a subkey in Consul to be read. Supported
     * values documented below. Multiple blocks supported.
     */
    readonly subkeyCollection?: inputs.GetKeyPrefixSubkeyCollection[];
    /**
     * The ACL token to use. This overrides the
     * token that the agent provides by default.
     */
    readonly token?: string;
}

/**
 * A collection of values returned by getKeyPrefix.
 */
export interface GetKeyPrefixResult {
    /**
     * The datacenter the keys are being read from.
     */
    readonly datacenter: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly namespace?: string;
    /**
     * the common prefix shared by all keys being read.
     * * `var.<name>` - For each name given, the corresponding attribute
     * has the value of the key.
     */
    readonly pathPrefix: string;
    readonly subkeyCollection?: outputs.GetKeyPrefixSubkeyCollection[];
    /**
     * A map of the subkeys and values is set if no `subkey`
     * block is provided.
     */
    readonly subkeys: {[key: string]: string};
    readonly token?: string;
    readonly var: {[key: string]: string};
}
