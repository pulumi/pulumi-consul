// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const web = new consul.ConfigEntry("web", {
 *     name: "web",
 *     kind: "service-defaults",
 *     configJson: JSON.stringify({
 *         Protocol: "http",
 *         Expose: {},
 *         MeshGateway: {},
 *         TransparentProxy: {},
 *     }),
 * });
 * const serviceResolver = new consul.ConfigEntryServiceResolver("service_resolver", {
 *     name: "service-resolver",
 *     defaultSubset: "v1",
 *     subsets: [
 *         {
 *             name: "v1",
 *             filter: "Service.Meta.version == v1",
 *         },
 *         {
 *             name: "v2",
 *             filter: "Service.Meta.version == v2",
 *         },
 *     ],
 * });
 * const foo = new consul.ConfigEntryServiceSplitter("foo", {
 *     name: serviceResolver.name,
 *     meta: {
 *         key: "value",
 *     },
 *     splits: [
 *         {
 *             weight: 80,
 *             service: "web",
 *             serviceSubset: "v1",
 *             requestHeaders: {
 *                 set: {
 *                     "x-web-version": "from-v1",
 *                 },
 *             },
 *             responseHeaders: {
 *                 set: {
 *                     "x-web-version": "to-v1",
 *                 },
 *             },
 *         },
 *         {
 *             weight: 10,
 *             service: "web",
 *             serviceSubset: "v2",
 *             requestHeaders: {
 *                 set: {
 *                     "x-web-version": "from-v2",
 *                 },
 *             },
 *             responseHeaders: {
 *                 set: {
 *                     "x-web-version": "to-v2",
 *                 },
 *             },
 *         },
 *         {
 *             weight: 10,
 *             service: "web",
 *             serviceSubset: "v2",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import consul:index/configEntryServiceSplitter:ConfigEntryServiceSplitter foo web
 * ```
 */
export class ConfigEntryServiceSplitter extends pulumi.CustomResource {
    /**
     * Get an existing ConfigEntryServiceSplitter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigEntryServiceSplitterState, opts?: pulumi.CustomResourceOptions): ConfigEntryServiceSplitter {
        return new ConfigEntryServiceSplitter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/configEntryServiceSplitter:ConfigEntryServiceSplitter';

    /**
     * Returns true if the given object is an instance of ConfigEntryServiceSplitter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigEntryServiceSplitter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigEntryServiceSplitter.__pulumiType;
    }

    /**
     * Specifies key-value pairs to add to the KV store.
     */
    declare public readonly meta: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies a name for the configuration entry.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the namespace to apply the configuration entry.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Specifies the admin partition to apply the configuration entry.
     */
    declare public readonly partition: pulumi.Output<string | undefined>;
    /**
     * Defines how much traffic to send to sets of service instances during a traffic split.
     */
    declare public readonly splits: pulumi.Output<outputs.ConfigEntryServiceSplitterSplit[]>;

    /**
     * Create a ConfigEntryServiceSplitter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigEntryServiceSplitterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigEntryServiceSplitterArgs | ConfigEntryServiceSplitterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigEntryServiceSplitterState | undefined;
            resourceInputs["meta"] = state?.meta;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["partition"] = state?.partition;
            resourceInputs["splits"] = state?.splits;
        } else {
            const args = argsOrState as ConfigEntryServiceSplitterArgs | undefined;
            if (args?.splits === undefined && !opts.urn) {
                throw new Error("Missing required property 'splits'");
            }
            resourceInputs["meta"] = args?.meta;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["partition"] = args?.partition;
            resourceInputs["splits"] = args?.splits;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigEntryServiceSplitter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigEntryServiceSplitter resources.
 */
export interface ConfigEntryServiceSplitterState {
    /**
     * Specifies key-value pairs to add to the KV store.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies a name for the configuration entry.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the namespace to apply the configuration entry.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the admin partition to apply the configuration entry.
     */
    partition?: pulumi.Input<string>;
    /**
     * Defines how much traffic to send to sets of service instances during a traffic split.
     */
    splits?: pulumi.Input<pulumi.Input<inputs.ConfigEntryServiceSplitterSplit>[]>;
}

/**
 * The set of arguments for constructing a ConfigEntryServiceSplitter resource.
 */
export interface ConfigEntryServiceSplitterArgs {
    /**
     * Specifies key-value pairs to add to the KV store.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies a name for the configuration entry.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the namespace to apply the configuration entry.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the admin partition to apply the configuration entry.
     */
    partition?: pulumi.Input<string>;
    /**
     * Defines how much traffic to send to sets of service instances during a traffic split.
     */
    splits: pulumi.Input<pulumi.Input<inputs.ConfigEntryServiceSplitterSplit>[]>;
}
