// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Starting with Consul 1.5.0, the consul.AclAuthMethod resource can be used to
 * managed [Consul ACL auth methods](https://www.consul.io/docs/acl/auth-methods).
 */
export class AclAuthMethod extends pulumi.CustomResource {
    /**
     * Get an existing AclAuthMethod resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclAuthMethodState, opts?: pulumi.CustomResourceOptions): AclAuthMethod {
        return new AclAuthMethod(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/aclAuthMethod:AclAuthMethod';

    /**
     * Returns true if the given object is an instance of AclAuthMethod.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclAuthMethod {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclAuthMethod.__pulumiType;
    }

    /**
     * The raw configuration for this ACL auth method. This
     * attribute is deprecated and will be removed in a future version. `configJson`
     * should be used instead.
     *
     * @deprecated The config attribute is deprecated, please use config_json instead.
     */
    public readonly config!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The raw configuration for this ACL auth method.
     */
    public readonly configJson!: pulumi.Output<string | undefined>;
    /**
     * A free form human readable description of the auth method.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An optional name to use instead of the name
     * attribute when displaying information about this auth method.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The maximum life of any token created by this
     * auth method.
     */
    public readonly maxTokenTtl!: pulumi.Output<string | undefined>;
    /**
     * The name of the ACL auth method.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace in which to create the auth method.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * A set of rules that control
     * which namespace tokens created via this auth method will be created within.
     */
    public readonly namespaceRules!: pulumi.Output<outputs.AclAuthMethodNamespaceRule[] | undefined>;
    /**
     * The partition the ACL auth method is associated with.
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * The kind of token that this auth method
     * produces. This can be either 'local' or 'global'.
     */
    public readonly tokenLocality!: pulumi.Output<string | undefined>;
    /**
     * The type of the ACL auth method.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a AclAuthMethod resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclAuthMethodArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclAuthMethodArgs | AclAuthMethodState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclAuthMethodState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["configJson"] = state ? state.configJson : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["maxTokenTtl"] = state ? state.maxTokenTtl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["namespaceRules"] = state ? state.namespaceRules : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["tokenLocality"] = state ? state.tokenLocality : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AclAuthMethodArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["configJson"] = args ? args.configJson : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["maxTokenTtl"] = args ? args.maxTokenTtl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["namespaceRules"] = args ? args.namespaceRules : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["tokenLocality"] = args ? args.tokenLocality : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AclAuthMethod.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclAuthMethod resources.
 */
export interface AclAuthMethodState {
    /**
     * The raw configuration for this ACL auth method. This
     * attribute is deprecated and will be removed in a future version. `configJson`
     * should be used instead.
     *
     * @deprecated The config attribute is deprecated, please use config_json instead.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The raw configuration for this ACL auth method.
     */
    configJson?: pulumi.Input<string>;
    /**
     * A free form human readable description of the auth method.
     */
    description?: pulumi.Input<string>;
    /**
     * An optional name to use instead of the name
     * attribute when displaying information about this auth method.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The maximum life of any token created by this
     * auth method.
     */
    maxTokenTtl?: pulumi.Input<string>;
    /**
     * The name of the ACL auth method.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace in which to create the auth method.
     */
    namespace?: pulumi.Input<string>;
    /**
     * A set of rules that control
     * which namespace tokens created via this auth method will be created within.
     */
    namespaceRules?: pulumi.Input<pulumi.Input<inputs.AclAuthMethodNamespaceRule>[]>;
    /**
     * The partition the ACL auth method is associated with.
     */
    partition?: pulumi.Input<string>;
    /**
     * The kind of token that this auth method
     * produces. This can be either 'local' or 'global'.
     */
    tokenLocality?: pulumi.Input<string>;
    /**
     * The type of the ACL auth method.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AclAuthMethod resource.
 */
export interface AclAuthMethodArgs {
    /**
     * The raw configuration for this ACL auth method. This
     * attribute is deprecated and will be removed in a future version. `configJson`
     * should be used instead.
     *
     * @deprecated The config attribute is deprecated, please use config_json instead.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The raw configuration for this ACL auth method.
     */
    configJson?: pulumi.Input<string>;
    /**
     * A free form human readable description of the auth method.
     */
    description?: pulumi.Input<string>;
    /**
     * An optional name to use instead of the name
     * attribute when displaying information about this auth method.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The maximum life of any token created by this
     * auth method.
     */
    maxTokenTtl?: pulumi.Input<string>;
    /**
     * The name of the ACL auth method.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace in which to create the auth method.
     */
    namespace?: pulumi.Input<string>;
    /**
     * A set of rules that control
     * which namespace tokens created via this auth method will be created within.
     */
    namespaceRules?: pulumi.Input<pulumi.Input<inputs.AclAuthMethodNamespaceRule>[]>;
    /**
     * The partition the ACL auth method is associated with.
     */
    partition?: pulumi.Input<string>;
    /**
     * The kind of token that this auth method
     * produces. This can be either 'local' or 'global'.
     */
    tokenLocality?: pulumi.Input<string>;
    /**
     * The type of the ACL auth method.
     */
    type: pulumi.Input<string>;
}
