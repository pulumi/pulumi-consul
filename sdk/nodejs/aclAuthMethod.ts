// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Starting with Consul 1.5.0, the consul..AclAuthMethod resource can be used to
 * managed Consul ACL auth methods.
 * 
 * 
 * ## Example Usage
 * 
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 * 
 * const minikube = new consul.AclAuthMethod("minikube", {
 *     config: {
 *         CACert: `-----BEGIN CERTIFICATE-----
 * ...-----END CERTIFICATE-----
 * `,
 *         Host: "https://192.0.2.42:8443",
 *         ServiceAccountJWT: "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...",
 *     },
 *     description: "dev minikube cluster",
 *     type: "kubernetes",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/acl_auth_method.markdown.
 */
export class AclAuthMethod extends pulumi.CustomResource {
    /**
     * Get an existing AclAuthMethod resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclAuthMethodState, opts?: pulumi.CustomResourceOptions): AclAuthMethod {
        return new AclAuthMethod(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/aclAuthMethod:AclAuthMethod';

    /**
     * Returns true if the given object is an instance of AclAuthMethod.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclAuthMethod {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclAuthMethod.__pulumiType;
    }

    /**
     * The raw configuration for this ACL auth method.
     */
    public readonly config!: pulumi.Output<{[key: string]: string}>;
    /**
     * A free form human readable description of the auth method.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the ACL auth method.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace to create the policy within.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The type of the ACL auth method.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a AclAuthMethod resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclAuthMethodArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclAuthMethodArgs | AclAuthMethodState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AclAuthMethodState | undefined;
            inputs["config"] = state ? state.config : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespace"] = state ? state.namespace : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AclAuthMethodArgs | undefined;
            if (!args || args.config === undefined) {
                throw new Error("Missing required property 'config'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["config"] = args ? args.config : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AclAuthMethod.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclAuthMethod resources.
 */
export interface AclAuthMethodState {
    /**
     * The raw configuration for this ACL auth method.
     */
    readonly config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A free form human readable description of the auth method.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of the ACL auth method.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The namespace to create the policy within.
     */
    readonly namespace?: pulumi.Input<string>;
    /**
     * The type of the ACL auth method.
     */
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AclAuthMethod resource.
 */
export interface AclAuthMethodArgs {
    /**
     * The raw configuration for this ACL auth method.
     */
    readonly config: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A free form human readable description of the auth method.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of the ACL auth method.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The namespace to create the policy within.
     */
    readonly namespace?: pulumi.Input<string>;
    /**
     * The type of the ACL auth method.
     */
    readonly type: pulumi.Input<string>;
}
