// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The [Configuration Entry](https://www.consul.io/docs/agent/config_entries.html)
 * resource can be used to provide cluster-wide defaults for various aspects of
 * Consul.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const proxyDefaults = new consul.ConfigEntry("proxyDefaults", {
 *     kind: "proxy-defaults",
 *     configJson: JSON.stringify({
 *         Config: {
 *             local_connect_timeout_ms: 1000,
 *             handshake_timeout_ms: 10000,
 *         },
 *     }),
 * });
 * const web = new consul.ConfigEntry("web", {
 *     kind: "service-defaults",
 *     configJson: JSON.stringify({
 *         Protocol: "http",
 *     }),
 * });
 * const admin = new consul.ConfigEntry("admin", {
 *     kind: "service-defaults",
 *     configJson: JSON.stringify({
 *         Protocol: "http",
 *     }),
 * });
 * const serviceResolver = new consul.ConfigEntry("serviceResolver", {
 *     kind: "service-resolver",
 *     configJson: JSON.stringify({
 *         DefaultSubset: "v1",
 *         Subsets: {
 *             v1: {
 *                 Filter: "Service.Meta.version == v1",
 *             },
 *             v2: {
 *                 Filter: "Service.Meta.version == v2",
 *             },
 *         },
 *     }),
 * });
 * const serviceSplitter = new consul.ConfigEntry("serviceSplitter", {
 *     kind: "service-splitter",
 *     configJson: JSON.stringify({
 *         Splits: [
 *             {
 *                 Weight: 90,
 *                 ServiceSubset: "v1",
 *             },
 *             {
 *                 Weight: 10,
 *                 ServiceSubset: "v2",
 *             },
 *         ],
 *     }),
 * });
 * const serviceRouter = new consul.ConfigEntry("serviceRouter", {
 *     kind: "service-router",
 *     configJson: JSON.stringify({
 *         Routes: [{
 *             Match: {
 *                 HTTP: {
 *                     PathPrefix: "/admin",
 *                 },
 *             },
 *             Destination: {
 *                 Service: "admin",
 *             },
 *         }],
 *     }),
 * });
 * const ingressGateway = new consul.ConfigEntry("ingressGateway", {
 *     kind: "ingress-gateway",
 *     configJson: JSON.stringify({
 *         TLS: {
 *             Enabled: true,
 *         },
 *         Listeners: [{
 *             Port: 8000,
 *             Protocol: "http",
 *             Services: [{
 *                 Name: "*",
 *             }],
 *         }],
 *     }),
 * });
 * const terminatingGateway = new consul.ConfigEntry("terminatingGateway", {
 *     kind: "terminating-gateway",
 *     configJson: JSON.stringify({
 *         Services: [{
 *             Name: "billing",
 *         }],
 *     }),
 * });
 * ```
 */
export class ConfigEntry extends pulumi.CustomResource {
    /**
     * Get an existing ConfigEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigEntryState, opts?: pulumi.CustomResourceOptions): ConfigEntry {
        return new ConfigEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/configEntry:ConfigEntry';

    /**
     * Returns true if the given object is an instance of ConfigEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigEntry.__pulumiType;
    }

    /**
     * An arbitrary map of configuration values.
     */
    public readonly configJson!: pulumi.Output<string | undefined>;
    /**
     * The kind of configuration entry to register.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * The name of the configuration entry being registred.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a ConfigEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigEntryArgs | ConfigEntryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ConfigEntryState | undefined;
            inputs["configJson"] = state ? state.configJson : undefined;
            inputs["kind"] = state ? state.kind : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ConfigEntryArgs | undefined;
            if ((!args || args.kind === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'kind'");
            }
            inputs["configJson"] = args ? args.configJson : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ConfigEntry.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigEntry resources.
 */
export interface ConfigEntryState {
    /**
     * An arbitrary map of configuration values.
     */
    readonly configJson?: pulumi.Input<string>;
    /**
     * The kind of configuration entry to register.
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * The name of the configuration entry being registred.
     */
    readonly name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigEntry resource.
 */
export interface ConfigEntryArgs {
    /**
     * An arbitrary map of configuration values.
     */
    readonly configJson?: pulumi.Input<string>;
    /**
     * The kind of configuration entry to register.
     */
    readonly kind: pulumi.Input<string>;
    /**
     * The name of the configuration entry being registred.
     */
    readonly name?: pulumi.Input<string>;
}
