// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **NOTE:** This feature requires Consul Enterprise.
 *
 * The `consul.Namespace` resource provides isolated [Consul Enterprise Namespaces](https://www.consul.io/docs/enterprise/namespaces/index.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as consul from "@pulumi/consul";
 *
 * const production = new consul.Namespace("production", {
 *     name: "production",
 *     description: "Production namespace",
 *     meta: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * `consul_namespace` can be imported. This is useful to manage attributes of the
 * default namespace that is created automatically:
 *
 * ```sh
 * $ pulumi import consul:index/namespace:Namespace default default
 * ```
 */
export class Namespace extends pulumi.CustomResource {
    /**
     * Get an existing Namespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceState, opts?: pulumi.CustomResourceOptions): Namespace {
        return new Namespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/namespace:Namespace';

    /**
     * Returns true if the given object is an instance of Namespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Namespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Namespace.__pulumiType;
    }

    /**
     * Free form namespace description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies arbitrary KV metadata to associate with the namespace.
     */
    declare public readonly meta: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The namespace name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The partition to create the namespace within.
     */
    declare public readonly partition: pulumi.Output<string | undefined>;
    /**
     * The list of default policies that should be applied to all tokens created in this namespace.
     */
    declare public readonly policyDefaults: pulumi.Output<string[] | undefined>;
    /**
     * The list of default roles that should be applied to all tokens created in this namespace.
     */
    declare public readonly roleDefaults: pulumi.Output<string[] | undefined>;

    /**
     * Create a Namespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceArgs | NamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["meta"] = state?.meta;
            resourceInputs["name"] = state?.name;
            resourceInputs["partition"] = state?.partition;
            resourceInputs["policyDefaults"] = state?.policyDefaults;
            resourceInputs["roleDefaults"] = state?.roleDefaults;
        } else {
            const args = argsOrState as NamespaceArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["meta"] = args?.meta;
            resourceInputs["name"] = args?.name;
            resourceInputs["partition"] = args?.partition;
            resourceInputs["policyDefaults"] = args?.policyDefaults;
            resourceInputs["roleDefaults"] = args?.roleDefaults;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Namespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Namespace resources.
 */
export interface NamespaceState {
    /**
     * Free form namespace description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies arbitrary KV metadata to associate with the namespace.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The namespace name.
     */
    name?: pulumi.Input<string>;
    /**
     * The partition to create the namespace within.
     */
    partition?: pulumi.Input<string>;
    /**
     * The list of default policies that should be applied to all tokens created in this namespace.
     */
    policyDefaults?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of default roles that should be applied to all tokens created in this namespace.
     */
    roleDefaults?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Namespace resource.
 */
export interface NamespaceArgs {
    /**
     * Free form namespace description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies arbitrary KV metadata to associate with the namespace.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The namespace name.
     */
    name?: pulumi.Input<string>;
    /**
     * The partition to create the namespace within.
     */
    partition?: pulumi.Input<string>;
    /**
     * The list of default policies that should be applied to all tokens created in this namespace.
     */
    policyDefaults?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of default roles that should be applied to all tokens created in this namespace.
     */
    roleDefaults?: pulumi.Input<pulumi.Input<string>[]>;
}
