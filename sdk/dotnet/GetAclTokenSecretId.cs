// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetAclTokenSecretId
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = new Consul.AclPolicy("test", new()
        ///     {
        ///         Name = "test",
        ///         Rules = "node \"\" { policy = \"read\" }",
        ///         Datacenters = new[]
        ///         {
        ///             "dc1",
        ///         },
        ///     });
        /// 
        ///     var testAclToken = new Consul.AclToken("test", new()
        ///     {
        ///         Description = "test",
        ///         Policies = new[]
        ///         {
        ///             test.Name,
        ///         },
        ///         Local = true,
        ///     });
        /// 
        ///     var read = Consul.GetAclTokenSecretId.Invoke(new()
        ///     {
        ///         AccessorId = testAclToken.Id,
        ///         PgpKey = "keybase:my_username",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["consulAclTokenSecretId"] = read.Apply(getAclTokenSecretIdResult =&gt; getAclTokenSecretIdResult.EncryptedSecretId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetAclTokenSecretIdResult> InvokeAsync(GetAclTokenSecretIdArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAclTokenSecretIdResult>("consul:index/getAclTokenSecretId:getAclTokenSecretId", args ?? new GetAclTokenSecretIdArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = new Consul.AclPolicy("test", new()
        ///     {
        ///         Name = "test",
        ///         Rules = "node \"\" { policy = \"read\" }",
        ///         Datacenters = new[]
        ///         {
        ///             "dc1",
        ///         },
        ///     });
        /// 
        ///     var testAclToken = new Consul.AclToken("test", new()
        ///     {
        ///         Description = "test",
        ///         Policies = new[]
        ///         {
        ///             test.Name,
        ///         },
        ///         Local = true,
        ///     });
        /// 
        ///     var read = Consul.GetAclTokenSecretId.Invoke(new()
        ///     {
        ///         AccessorId = testAclToken.Id,
        ///         PgpKey = "keybase:my_username",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["consulAclTokenSecretId"] = read.Apply(getAclTokenSecretIdResult =&gt; getAclTokenSecretIdResult.EncryptedSecretId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetAclTokenSecretIdResult> Invoke(GetAclTokenSecretIdInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAclTokenSecretIdResult>("consul:index/getAclTokenSecretId:getAclTokenSecretId", args ?? new GetAclTokenSecretIdInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAclTokenSecretIdArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The accessor ID of the ACL token.
        /// </summary>
        [Input("accessorId", required: true)]
        public string AccessorId { get; set; } = null!;

        /// <summary>
        /// The namespace to lookup the token.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The partition to lookup the token.
        /// </summary>
        [Input("partition")]
        public string? Partition { get; set; }

        [Input("pgpKey")]
        public string? PgpKey { get; set; }

        public GetAclTokenSecretIdArgs()
        {
        }
        public static new GetAclTokenSecretIdArgs Empty => new GetAclTokenSecretIdArgs();
    }

    public sealed class GetAclTokenSecretIdInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The accessor ID of the ACL token.
        /// </summary>
        [Input("accessorId", required: true)]
        public Input<string> AccessorId { get; set; } = null!;

        /// <summary>
        /// The namespace to lookup the token.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition to lookup the token.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("pgpKey")]
        public Input<string>? PgpKey { get; set; }

        public GetAclTokenSecretIdInvokeArgs()
        {
        }
        public static new GetAclTokenSecretIdInvokeArgs Empty => new GetAclTokenSecretIdInvokeArgs();
    }


    [OutputType]
    public sealed class GetAclTokenSecretIdResult
    {
        public readonly string AccessorId;
        public readonly string EncryptedSecretId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Namespace;
        public readonly string? Partition;
        public readonly string? PgpKey;
        /// <summary>
        /// The secret ID of the ACL token if `pgp_key` has not been set.
        /// </summary>
        public readonly string SecretId;

        [OutputConstructor]
        private GetAclTokenSecretIdResult(
            string accessorId,

            string encryptedSecretId,

            string id,

            string? @namespace,

            string? partition,

            string? pgpKey,

            string secretId)
        {
            AccessorId = accessorId;
            EncryptedSecretId = encryptedSecretId;
            Id = id;
            Namespace = @namespace;
            Partition = partition;
            PgpKey = pgpKey;
            SecretId = secretId;
        }
    }
}
