// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// &gt; **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).
    /// 
    /// The `consul.NetworkArea` resource manages a relationship between servers in two
    /// different Consul datacenters.
    /// 
    /// Unlike Consul's WAN feature, network areas use just the server RPC port for
    /// communication, and relationships can be made between independent pairs of
    /// datacenters, so not all servers need to be fully connected. This allows for
    /// complex topologies among Consul datacenters like hub/spoke and more general trees.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dc2 = new Consul.NetworkArea("dc2", new()
    ///     {
    ///         PeerDatacenter = "dc2",
    ///         RetryJoins = new[]
    ///         {
    ///             "1.2.3.4",
    ///         },
    ///         UseTls = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/networkArea:NetworkArea")]
    public partial class NetworkArea : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        /// <summary>
        /// The name of the Consul datacenter that will be
        /// joined to form the area.
        /// </summary>
        [Output("peerDatacenter")]
        public Output<string> PeerDatacenter { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of Consul servers to attempt to
        /// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
        /// </summary>
        [Output("retryJoins")]
        public Output<ImmutableArray<string>> RetryJoins { get; private set; } = null!;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;

        /// <summary>
        /// Specifies whether gossip over this area should be
        /// encrypted with TLS if possible. Defaults to `false`.
        /// </summary>
        [Output("useTls")]
        public Output<bool?> UseTls { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkArea resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkArea(string name, NetworkAreaArgs args, CustomResourceOptions? options = null)
            : base("consul:index/networkArea:NetworkArea", name, args ?? new NetworkAreaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkArea(string name, Input<string> id, NetworkAreaState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/networkArea:NetworkArea", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkArea resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkArea Get(string name, Input<string> id, NetworkAreaState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkArea(name, id, state, options);
        }
    }

    public sealed class NetworkAreaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The name of the Consul datacenter that will be
        /// joined to form the area.
        /// </summary>
        [Input("peerDatacenter", required: true)]
        public Input<string> PeerDatacenter { get; set; } = null!;

        [Input("retryJoins")]
        private InputList<string>? _retryJoins;

        /// <summary>
        /// Specifies a list of Consul servers to attempt to
        /// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
        /// </summary>
        public InputList<string> RetryJoins
        {
            get => _retryJoins ?? (_retryJoins = new InputList<string>());
            set => _retryJoins = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether gossip over this area should be
        /// encrypted with TLS if possible. Defaults to `false`.
        /// </summary>
        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public NetworkAreaArgs()
        {
        }
        public static new NetworkAreaArgs Empty => new NetworkAreaArgs();
    }

    public sealed class NetworkAreaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The name of the Consul datacenter that will be
        /// joined to form the area.
        /// </summary>
        [Input("peerDatacenter")]
        public Input<string>? PeerDatacenter { get; set; }

        [Input("retryJoins")]
        private InputList<string>? _retryJoins;

        /// <summary>
        /// Specifies a list of Consul servers to attempt to
        /// join. Servers can be given as `IP`, `IP:port`, `hostname`, or `hostname:port`.
        /// </summary>
        public InputList<string> RetryJoins
        {
            get => _retryJoins ?? (_retryJoins = new InputList<string>());
            set => _retryJoins = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether gossip over this area should be
        /// encrypted with TLS if possible. Defaults to `false`.
        /// </summary>
        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public NetworkAreaState()
        {
        }
        public static new NetworkAreaState Empty => new NetworkAreaState();
    }
}
