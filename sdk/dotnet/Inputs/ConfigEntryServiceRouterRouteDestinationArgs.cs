// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul.Inputs
{

    public sealed class ConfigEntryServiceRouterRouteDestinationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the total amount of time permitted for the request stream to be idle.
        /// </summary>
        [Input("idleTimeout")]
        public Input<string>? IdleTimeout { get; set; }

        /// <summary>
        /// Specifies the Consul namespace to resolve the service from instead of the current namespace.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the number of times to retry the request when a retry condition occurs.
        /// </summary>
        [Input("numRetries")]
        public Input<int>? NumRetries { get; set; }

        /// <summary>
        /// Specifies the Consul admin partition to resolve the service from instead of the current partition.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Specifies rewrites to the HTTP request path before proxying it to its final destination.
        /// </summary>
        [Input("prefixRewrite")]
        public Input<string>? PrefixRewrite { get; set; }

        /// <summary>
        /// Specifies a set of HTTP-specific header modification rules applied to requests routed with the service router.
        /// </summary>
        [Input("requestHeaders")]
        public Input<Inputs.ConfigEntryServiceRouterRouteDestinationRequestHeadersArgs>? RequestHeaders { get; set; }

        /// <summary>
        /// Specifies the total amount of time permitted for the entire downstream request to be processed, including retry attempts.
        /// </summary>
        [Input("requestTimeout")]
        public Input<string>? RequestTimeout { get; set; }

        /// <summary>
        /// Specifies a set of HTTP-specific header modification rules applied to responses routed with the service router.
        /// </summary>
        [Input("responseHeaders")]
        public Input<Inputs.ConfigEntryServiceRouterRouteDestinationResponseHeadersArgs>? ResponseHeaders { get; set; }

        /// <summary>
        /// Specifies that connection failure errors that trigger a retry request.
        /// </summary>
        [Input("retryOnConnectFailure")]
        public Input<bool>? RetryOnConnectFailure { get; set; }

        [Input("retryOnStatusCodes")]
        private InputList<int>? _retryOnStatusCodes;

        /// <summary>
        /// Specifies a list of integers for HTTP response status codes that trigger a retry request.
        /// </summary>
        public InputList<int> RetryOnStatusCodes
        {
            get => _retryOnStatusCodes ?? (_retryOnStatusCodes = new InputList<int>());
            set => _retryOnStatusCodes = value;
        }

        [Input("retryOns")]
        private InputList<string>? _retryOns;

        /// <summary>
        /// Specifies a list of conditions for Consul to retry requests based on the response from an upstream service.
        /// </summary>
        public InputList<string> RetryOns
        {
            get => _retryOns ?? (_retryOns = new InputList<string>());
            set => _retryOns = value;
        }

        /// <summary>
        /// Specifies the name of the service to resolve.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// Specifies a named subset of the given service to resolve instead of the one defined as that service's `DefaultSubset` in the service resolver configuration entry.
        /// </summary>
        [Input("serviceSubset")]
        public Input<string>? ServiceSubset { get; set; }

        public ConfigEntryServiceRouterRouteDestinationArgs()
        {
        }
        public static new ConfigEntryServiceRouterRouteDestinationArgs Empty => new ConfigEntryServiceRouterRouteDestinationArgs();
    }
}
