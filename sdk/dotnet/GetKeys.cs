// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetKeys
    {
        /// <summary>
        /// The `consul.Keys` datasource reads values from the Consul key/value store. This is a powerful way to dynamically set values in templates.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = Consul.GetKeys.Invoke(new()
        ///     {
        ///         Datacenter = "nyc1",
        ///         Keys = new[]
        ///         {
        ///             new Consul.Inputs.GetKeysKeyInputArgs
        ///             {
        ///                 Name = "ami",
        ///                 Path = "service/app/launch_ami",
        ///                 Default = "ami-1234",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Start our instance with the dynamic ami value
        ///     var appInstance = new Aws.Index.Instance("app", new()
        ///     {
        ///         Ami = app.Apply(getKeysResult =&gt; getKeysResult.Var?.Ami),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetKeysResult> InvokeAsync(GetKeysArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKeysResult>("consul:index/getKeys:getKeys", args ?? new GetKeysArgs(), options.WithDefaults());

        /// <summary>
        /// The `consul.Keys` datasource reads values from the Consul key/value store. This is a powerful way to dynamically set values in templates.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = Consul.GetKeys.Invoke(new()
        ///     {
        ///         Datacenter = "nyc1",
        ///         Keys = new[]
        ///         {
        ///             new Consul.Inputs.GetKeysKeyInputArgs
        ///             {
        ///                 Name = "ami",
        ///                 Path = "service/app/launch_ami",
        ///                 Default = "ami-1234",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Start our instance with the dynamic ami value
        ///     var appInstance = new Aws.Index.Instance("app", new()
        ///     {
        ///         Ami = app.Apply(getKeysResult =&gt; getKeysResult.Var?.Ami),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetKeysResult> Invoke(GetKeysInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeysResult>("consul:index/getKeys:getKeys", args ?? new GetKeysInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `consul.Keys` datasource reads values from the Consul key/value store. This is a powerful way to dynamically set values in templates.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = Consul.GetKeys.Invoke(new()
        ///     {
        ///         Datacenter = "nyc1",
        ///         Keys = new[]
        ///         {
        ///             new Consul.Inputs.GetKeysKeyInputArgs
        ///             {
        ///                 Name = "ami",
        ///                 Path = "service/app/launch_ami",
        ///                 Default = "ami-1234",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Start our instance with the dynamic ami value
        ///     var appInstance = new Aws.Index.Instance("app", new()
        ///     {
        ///         Ami = app.Apply(getKeysResult =&gt; getKeysResult.Var?.Ami),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetKeysResult> Invoke(GetKeysInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeysResult>("consul:index/getKeys:getKeys", args ?? new GetKeysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKeysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public string? Datacenter { get; set; }

        /// <summary>
        /// Whether to return an error when a key is absent from the KV store and no default is configured. This defaults to `false`.
        /// </summary>
        [Input("errorOnMissingKeys")]
        public bool? ErrorOnMissingKeys { get; set; }

        [Input("keys")]
        private List<Inputs.GetKeysKeyArgs>? _keys;

        /// <summary>
        /// Specifies a key in Consul to be read. Supported values documented below. Multiple blocks supported.
        /// </summary>
        public List<Inputs.GetKeysKeyArgs> Keys
        {
            get => _keys ?? (_keys = new List<Inputs.GetKeysKeyArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The namespace to lookup the keys.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The partition to lookup the keys.
        /// </summary>
        [Input("partition")]
        public string? Partition { get; set; }

        [Input("token")]
        private string? _token;

        /// <summary>
        /// The ACL token to use. This overrides the token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public string? Token
        {
            get => _token;
            set => _token = value;
        }

        public GetKeysArgs()
        {
        }
        public static new GetKeysArgs Empty => new GetKeysArgs();
    }

    public sealed class GetKeysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Whether to return an error when a key is absent from the KV store and no default is configured. This defaults to `false`.
        /// </summary>
        [Input("errorOnMissingKeys")]
        public Input<bool>? ErrorOnMissingKeys { get; set; }

        [Input("keys")]
        private InputList<Inputs.GetKeysKeyInputArgs>? _keys;

        /// <summary>
        /// Specifies a key in Consul to be read. Supported values documented below. Multiple blocks supported.
        /// </summary>
        public InputList<Inputs.GetKeysKeyInputArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.GetKeysKeyInputArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The namespace to lookup the keys.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition to lookup the keys.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The ACL token to use. This overrides the token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GetKeysInvokeArgs()
        {
        }
        public static new GetKeysInvokeArgs Empty => new GetKeysInvokeArgs();
    }


    [OutputType]
    public sealed class GetKeysResult
    {
        /// <summary>
        /// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// Whether to return an error when a key is absent from the KV store and no default is configured. This defaults to `false`.
        /// </summary>
        public readonly bool? ErrorOnMissingKeys;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies a key in Consul to be read. Supported values documented below. Multiple blocks supported.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeysKeyResult> Keys;
        /// <summary>
        /// The namespace to lookup the keys.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// The partition to lookup the keys.
        /// </summary>
        public readonly string? Partition;
        /// <summary>
        /// The ACL token to use. This overrides the token that the agent provides by default.
        /// </summary>
        public readonly string? Token;
        /// <summary>
        /// For each name given, the corresponding attribute has the value of the key.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Var;

        [OutputConstructor]
        private GetKeysResult(
            string datacenter,

            bool? errorOnMissingKeys,

            string id,

            ImmutableArray<Outputs.GetKeysKeyResult> keys,

            string? @namespace,

            string? partition,

            string? token,

            ImmutableDictionary<string, string> var)
        {
            Datacenter = datacenter;
            ErrorOnMissingKeys = errorOnMissingKeys;
            Id = id;
            Keys = keys;
            Namespace = @namespace;
            Partition = partition;
            Token = token;
            Var = var;
        }
    }
}
