// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetKeys
    {
        /// <summary>
        /// The `consul..Keys` resource reads values from the Consul key/value store.
        /// This is a powerful way dynamically set values in templates.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Consul = Pulumi.Consul;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var appKeys = Output.Create(Consul.GetKeys.InvokeAsync(new Consul.GetKeysArgs
        ///         {
        ///             Datacenter = "nyc1",
        ///             Keys = 
        ///             {
        ///                 new Consul.Inputs.GetKeysKeyArgs
        ///                 {
        ///                     Default = "ami-1234",
        ///                     Name = "ami",
        ///                     Path = "service/app/launch_ami",
        ///                 },
        ///             },
        ///             Token = "abcd",
        ///         }));
        ///         // Start our instance with the dynamic ami value
        ///         var appInstance = new Aws.Ec2.Instance("appInstance", new Aws.Ec2.InstanceArgs
        ///         {
        ///             Ami = appKeys.Apply(appKeys =&gt; appKeys.Var.Ami),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKeysResult> InvokeAsync(GetKeysArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKeysResult>("consul:index/getKeys:getKeys", args ?? new GetKeysArgs(), options.WithVersion());
    }


    public sealed class GetKeysArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public string? Datacenter { get; set; }

        [Input("keys")]
        private List<Inputs.GetKeysKeyArgs>? _keys;

        /// <summary>
        /// Specifies a key in Consul to be read. Supported
        /// values documented below. Multiple blocks supported.
        /// </summary>
        public List<Inputs.GetKeysKeyArgs> Keys
        {
            get => _keys ?? (_keys = new List<Inputs.GetKeysKeyArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The namespace to lookup the keys.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Input("token")]
        public string? Token { get; set; }

        public GetKeysArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKeysResult
    {
        /// <summary>
        /// The datacenter the keys are being read from.
        /// * `var.&lt;name&gt;` - For each name given, the corresponding attribute
        /// has the value of the key.
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetKeysKeyResult> Keys;
        public readonly string? Namespace;
        public readonly string? Token;
        public readonly ImmutableDictionary<string, string> Var;

        [OutputConstructor]
        private GetKeysResult(
            string datacenter,

            string id,

            ImmutableArray<Outputs.GetKeysKeyResult> keys,

            string? @namespace,

            string? token,

            ImmutableDictionary<string, string> var)
        {
            Datacenter = datacenter;
            Id = id;
            Keys = keys;
            Namespace = @namespace;
            Token = token;
            Var = var;
        }
    }
}
