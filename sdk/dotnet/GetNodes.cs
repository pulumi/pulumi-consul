// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static partial class Invokes
    {
        /// <summary>
        /// The `consul..getNodes` data source returns a list of Consul nodes that have
        /// been registered with the Consul cluster in a given datacenter.  By specifying a
        /// different datacenter in the `query_options` it is possible to retrieve a list of
        /// nodes from a different WAN-attached Consul datacenter.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/d/nodes.html.markdown.
        /// </summary>
        public static Task<GetNodesResult> GetNodes(GetNodesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNodesResult>("consul:index/getNodes:getNodes", args, options.WithVersion());
    }

    public sealed class GetNodesArgs : Pulumi.ResourceArgs
    {
        [Input("queryOptions")]
        private InputList<Inputs.GetNodesQueryOptionsArgs>? _queryOptions;

        /// <summary>
        /// See below.
        /// </summary>
        public InputList<Inputs.GetNodesQueryOptionsArgs> QueryOptions
        {
            get => _queryOptions ?? (_queryOptions = new InputList<Inputs.GetNodesQueryOptionsArgs>());
            set => _queryOptions = value;
        }

        public GetNodesArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetNodesResult
    {
        /// <summary>
        /// The datacenter the keys are being read from to.
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// A list of the Consul node IDs.
        /// </summary>
        public readonly ImmutableArray<string> NodeIds;
        /// <summary>
        /// A list of the Consul node names.
        /// </summary>
        public readonly ImmutableArray<string> NodeNames;
        /// <summary>
        /// A list of nodes and details about each Consul agent.  The list of
        /// per-node attributes is detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodesNodesResult> Nodes;
        public readonly ImmutableArray<Outputs.GetNodesQueryOptionsResult> QueryOptions;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetNodesResult(
            string datacenter,
            ImmutableArray<string> nodeIds,
            ImmutableArray<string> nodeNames,
            ImmutableArray<Outputs.GetNodesNodesResult> nodes,
            ImmutableArray<Outputs.GetNodesQueryOptionsResult> queryOptions,
            string id)
        {
            Datacenter = datacenter;
            NodeIds = nodeIds;
            NodeNames = nodeNames;
            Nodes = nodes;
            QueryOptions = queryOptions;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetNodesQueryOptionsArgs : Pulumi.ResourceArgs
    {
        [Input("allowStale")]
        public Input<bool>? AllowStale { get; set; }

        /// <summary>
        /// The Consul datacenter to query.  Defaults to the
        /// same value found in `query_options` parameter specified below, or if that is
        /// empty, the `datacenter` value found in the Consul agent that this provider is
        /// configured to talk to then the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("near")]
        public Input<string>? Near { get; set; }

        [Input("nodeMeta")]
        private InputMap<object>? _nodeMeta;
        public InputMap<object> NodeMeta
        {
            get => _nodeMeta ?? (_nodeMeta = new InputMap<object>());
            set => _nodeMeta = value;
        }

        [Input("requireConsistent")]
        public Input<bool>? RequireConsistent { get; set; }

        [Input("token")]
        public Input<string>? Token { get; set; }

        [Input("waitIndex")]
        public Input<int>? WaitIndex { get; set; }

        [Input("waitTime")]
        public Input<string>? WaitTime { get; set; }

        public GetNodesQueryOptionsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetNodesNodesResult
    {
        public readonly string Address;
        /// <summary>
        /// The Node ID of the Consul agent.
        /// * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node meta
        /// data tag information, if any.
        /// * [`name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The name
        /// of the Consul node.
        /// * [`address`](https://www.consul.io/docs/agent/http/catalog.html#Address) - The
        /// IP address the node is advertising to the Consul cluster.
        /// * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
        /// List of explicit LAN and WAN IP addresses for the agent.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, object> Meta;
        public readonly string Name;
        public readonly GetNodesNodesTaggedAddressesResult TaggedAddresses;

        [OutputConstructor]
        private GetNodesNodesResult(
            string address,
            string id,
            ImmutableDictionary<string, object> meta,
            string name,
            GetNodesNodesTaggedAddressesResult taggedAddresses)
        {
            Address = address;
            Id = id;
            Meta = meta;
            Name = name;
            TaggedAddresses = taggedAddresses;
        }
    }

    [OutputType]
    public sealed class GetNodesNodesTaggedAddressesResult
    {
        public readonly string Lan;
        public readonly string Wan;

        [OutputConstructor]
        private GetNodesNodesTaggedAddressesResult(
            string lan,
            string wan)
        {
            Lan = lan;
            Wan = wan;
        }
    }

    [OutputType]
    public sealed class GetNodesQueryOptionsResult
    {
        public readonly bool? AllowStale;
        /// <summary>
        /// The Consul datacenter to query.  Defaults to the
        /// same value found in `query_options` parameter specified below, or if that is
        /// empty, the `datacenter` value found in the Consul agent that this provider is
        /// configured to talk to then the datacenter in the provider setup.
        /// </summary>
        public readonly string? Datacenter;
        public readonly string? Near;
        public readonly ImmutableDictionary<string, object>? NodeMeta;
        public readonly bool? RequireConsistent;
        public readonly string? Token;
        public readonly int? WaitIndex;
        public readonly string? WaitTime;

        [OutputConstructor]
        private GetNodesQueryOptionsResult(
            bool? allowStale,
            string? datacenter,
            string? near,
            ImmutableDictionary<string, object>? nodeMeta,
            bool? requireConsistent,
            string? token,
            int? waitIndex,
            string? waitTime)
        {
            AllowStale = allowStale;
            Datacenter = datacenter;
            Near = near;
            NodeMeta = nodeMeta;
            RequireConsistent = requireConsistent;
            Token = token;
            WaitIndex = waitIndex;
            WaitTime = waitTime;
        }
    }
    }
}
