// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetAclAuthMethod
    {
        /// <summary>
        /// The `consul..AclAuthMethod` data source returns the information related to a
        /// [Consul Auth Method](https://www.consul.io/docs/acl/acl-auth-methods.html).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Consul.GetAclAuthMethod.InvokeAsync(new Consul.GetAclAuthMethodArgs
        ///         {
        ///             Name = "minikube",
        ///         }));
        ///         this.ConsulAclAuthMethod = test.Apply(test =&gt; test.Config);
        ///     }
        /// 
        ///     [Output("consulAclAuthMethod")]
        ///     public Output&lt;string&gt; ConsulAclAuthMethod { get; set; }
        /// }
        /// ```
        /// 
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAclAuthMethodResult> InvokeAsync(GetAclAuthMethodArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAclAuthMethodResult>("consul:index/getAclAuthMethod:getAclAuthMethod", args ?? new GetAclAuthMethodArgs(), options.WithVersion());
    }


    public sealed class GetAclAuthMethodArgs : Pulumi.InvokeArgs
    {
        [Input("config")]
        private Dictionary<string, string>? _config;

        /// <summary>
        /// The configuration options of the ACL Auth Method.
        /// </summary>
        public Dictionary<string, string> Config
        {
            get => _config ?? (_config = new Dictionary<string, string>());
            set => _config = value;
        }

        /// <summary>
        /// The description of the ACL Auth Method.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The name of the ACL Auth Method.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The namespace to lookup the auth method.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The type of the ACL Auth Method.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetAclAuthMethodArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAclAuthMethodResult
    {
        /// <summary>
        /// The configuration options of the ACL Auth Method.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Config;
        /// <summary>
        /// The description of the ACL Auth Method.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? Namespace;
        /// <summary>
        /// The type of the ACL Auth Method.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetAclAuthMethodResult(
            ImmutableDictionary<string, string>? config,

            string? description,

            string id,

            string name,

            string? @namespace,

            string? type)
        {
            Config = config;
            Description = description;
            Id = id;
            Name = name;
            Namespace = @namespace;
            Type = type;
        }
    }
}
