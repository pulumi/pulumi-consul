// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// The provider type for the consul package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [ConsulResourceType("pulumi:providers:consul")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// The HTTP(S) API address of the agent to use. Defaults to "127.0.0.1:8500".
        /// </summary>
        [Output("address")]
        public Output<string?> Address { get; private set; } = null!;

        /// <summary>
        /// A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
        /// </summary>
        [Output("caFile")]
        public Output<string?> CaFile { get; private set; } = null!;

        /// <summary>
        /// A path to a directory of PEM-encoded certificate authority files to use to check the authenticity of client and server
        /// connections. Can also be specified with the `CONSUL_CAPATH` environment variable.
        /// </summary>
        [Output("caPath")]
        public Output<string?> CaPath { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded certificate authority used to verify the remote agent's certificate.
        /// </summary>
        [Output("caPem")]
        public Output<string?> CaPem { get; private set; } = null!;

        /// <summary>
        /// A path to a PEM-encoded certificate provided to the remote agent; requires use of `key_file` or `key_pem`.
        /// </summary>
        [Output("certFile")]
        public Output<string?> CertFile { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded certificate provided to the remote agent; requires use of `key_file` or `key_pem`.
        /// </summary>
        [Output("certPem")]
        public Output<string?> CertPem { get; private set; } = null!;

        /// <summary>
        /// The datacenter to use. Defaults to that of the agent.
        /// </summary>
        [Output("datacenter")]
        public Output<string?> Datacenter { get; private set; } = null!;

        /// <summary>
        /// HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either `user` or
        /// `user:pass`. This may also be specified using the `CONSUL_HTTP_AUTH` environment variable.
        /// </summary>
        [Output("httpAuth")]
        public Output<string?> HttpAuth { get; private set; } = null!;

        /// <summary>
        /// A path to a PEM-encoded private key, required if `cert_file` or `cert_pem` is specified.
        /// </summary>
        [Output("keyFile")]
        public Output<string?> KeyFile { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded private key, required if `cert_file` or `cert_pem` is specified.
        /// </summary>
        [Output("keyPem")]
        public Output<string?> KeyPem { get; private set; } = null!;

        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The URL scheme of the agent to use ("http" or "https"). Defaults to "http".
        /// </summary>
        [Output("scheme")]
        public Output<string?> Scheme { get; private set; } = null!;

        /// <summary>
        /// The ACL token to use by default when making requests to the agent. Can also be specified with `CONSUL_HTTP_TOKEN` or
        /// `CONSUL_TOKEN` as an environment variable.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("consul", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The HTTP(S) API address of the agent to use. Defaults to "127.0.0.1:8500".
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// Authenticates to Consul using a JWT authentication method.
        /// </summary>
        [Input("authJwt", json: true)]
        public Input<Inputs.ProviderAuthJwtArgs>? AuthJwt { get; set; }

        /// <summary>
        /// A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
        /// </summary>
        [Input("caFile")]
        public Input<string>? CaFile { get; set; }

        /// <summary>
        /// A path to a directory of PEM-encoded certificate authority files to use to check the authenticity of client and server
        /// connections. Can also be specified with the `CONSUL_CAPATH` environment variable.
        /// </summary>
        [Input("caPath")]
        public Input<string>? CaPath { get; set; }

        /// <summary>
        /// PEM-encoded certificate authority used to verify the remote agent's certificate.
        /// </summary>
        [Input("caPem")]
        public Input<string>? CaPem { get; set; }

        /// <summary>
        /// A path to a PEM-encoded certificate provided to the remote agent; requires use of `key_file` or `key_pem`.
        /// </summary>
        [Input("certFile")]
        public Input<string>? CertFile { get; set; }

        /// <summary>
        /// PEM-encoded certificate provided to the remote agent; requires use of `key_file` or `key_pem`.
        /// </summary>
        [Input("certPem")]
        public Input<string>? CertPem { get; set; }

        /// <summary>
        /// The datacenter to use. Defaults to that of the agent.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("headers", json: true)]
        private InputList<Inputs.ProviderHeaderArgs>? _headers;

        /// <summary>
        /// A configuration block, described below, that provides additional headers to be sent along with all requests to the
        /// Consul server. This block can be specified multiple times.
        /// </summary>
        public InputList<Inputs.ProviderHeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.ProviderHeaderArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.ProviderHeaderArgs>());
                _headers = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either `user` or
        /// `user:pass`. This may also be specified using the `CONSUL_HTTP_AUTH` environment variable.
        /// </summary>
        [Input("httpAuth")]
        public Input<string>? HttpAuth { get; set; }

        /// <summary>
        /// Boolean value to disable SSL certificate verification; setting this value to true is not recommended for production use.
        /// Only use this with scheme set to "https".
        /// </summary>
        [Input("insecureHttps", json: true)]
        public Input<bool>? InsecureHttps { get; set; }

        /// <summary>
        /// A path to a PEM-encoded private key, required if `cert_file` or `cert_pem` is specified.
        /// </summary>
        [Input("keyFile")]
        public Input<string>? KeyFile { get; set; }

        /// <summary>
        /// PEM-encoded private key, required if `cert_file` or `cert_pem` is specified.
        /// </summary>
        [Input("keyPem")]
        public Input<string>? KeyPem { get; set; }

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The URL scheme of the agent to use ("http" or "https"). Defaults to "http".
        /// </summary>
        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The ACL token to use by default when making requests to the agent. Can also be specified with `CONSUL_HTTP_TOKEN` or
        /// `CONSUL_TOKEN` as an environment variable.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
