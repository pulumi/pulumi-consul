// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static partial class Invokes
    {
        /// <summary>
        /// `consul..getServiceHealth` can be used to get the list of the instances that
        /// are currently healthy, according to their associated  health-checks.
        /// The result includes the list of service instances, the node associated to each
        /// instance and its health-checks.
        /// 
        /// This resource is likely to change as frequently as the health-checks are being
        /// updated, you should expect different results in a frequent basis.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/d/service_health.html.markdown.
        /// </summary>
        [Obsolete("Use GetServiceHealth.InvokeAsync() instead")]
        public static Task<GetServiceHealthResult> GetServiceHealth(GetServiceHealthArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceHealthResult>("consul:index/getServiceHealth:getServiceHealth", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetServiceHealth
    {
        /// <summary>
        /// `consul..getServiceHealth` can be used to get the list of the instances that
        /// are currently healthy, according to their associated  health-checks.
        /// The result includes the list of service instances, the node associated to each
        /// instance and its health-checks.
        /// 
        /// This resource is likely to change as frequently as the health-checks are being
        /// updated, you should expect different results in a frequent basis.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/d/service_health.html.markdown.
        /// </summary>
        public static Task<GetServiceHealthResult> InvokeAsync(GetServiceHealthArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceHealthResult>("consul:index/getServiceHealth:getServiceHealth", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetServiceHealthArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Consul datacenter to query.
        /// </summary>
        [Input("datacenter")]
        public string? Datacenter { get; set; }

        /// <summary>
        /// The service name to select.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies a node name to sort the node list in ascending order
        /// based on the estimated round trip time from that node.
        /// </summary>
        [Input("near")]
        public string? Near { get; set; }

        [Input("nodeMeta")]
        private Dictionary<string, string>? _nodeMeta;

        /// <summary>
        /// Filter the results to nodes with the specified key/value
        /// pairs.
        /// </summary>
        public Dictionary<string, string> NodeMeta
        {
            get => _nodeMeta ?? (_nodeMeta = new Dictionary<string, string>());
            set => _nodeMeta = value;
        }

        /// <summary>
        /// Whether to return only nodes with all checks in the
        /// passing state. Defaults to `true`.
        /// </summary>
        [Input("passing")]
        public bool? Passing { get; set; }

        /// <summary>
        /// A single tag that can be used to filter the list to return
        /// based on a single matching tag.
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        [Input("waitFor")]
        public string? WaitFor { get; set; }

        public GetServiceHealthArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetServiceHealthResult
    {
        /// <summary>
        /// The datacenter in which the node is running.
        /// * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
        /// List of explicit LAN and WAN IP addresses for the agent.
        /// </summary>
        public readonly string? Datacenter;
        /// <summary>
        /// The name of this health-check.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The node to which the result must be sorted to.
        /// </summary>
        public readonly string? Near;
        /// <summary>
        /// The list of metadata to filter the nodes.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? NodeMeta;
        /// <summary>
        /// Whether to return only nodes with all checks in the
        /// passing state.
        /// </summary>
        public readonly bool? Passing;
        /// <summary>
        /// A list of entries and details about each endpoint advertising a
        /// service.  Each element in the list has three attributes: `node`, `service` and
        /// `checks`.  The list of the attributes of each one is detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceHealthResultsResult> Results;
        /// <summary>
        /// The name of the tag used to filter the list.
        /// </summary>
        public readonly string? Tag;
        public readonly string? WaitFor;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetServiceHealthResult(
            string? datacenter,
            string name,
            string? near,
            ImmutableDictionary<string, string>? nodeMeta,
            bool? passing,
            ImmutableArray<Outputs.GetServiceHealthResultsResult> results,
            string? tag,
            string? waitFor,
            string id)
        {
            Datacenter = datacenter;
            Name = name;
            Near = near;
            NodeMeta = nodeMeta;
            Passing = passing;
            Results = results;
            Tag = tag;
            WaitFor = waitFor;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetServiceHealthResultsChecksResult
    {
        /// <summary>
        /// The ID of this health-check.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The service name to select.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The name of the node associated with this health-check.
        /// </summary>
        public readonly string Node;
        /// <summary>
        /// A human readable description of the current state of the health-check.
        /// </summary>
        public readonly string Notes;
        /// <summary>
        /// The output of the health-check.
        /// </summary>
        public readonly string Output;
        /// <summary>
        /// The ID of the service associated to this health-check.
        /// </summary>
        public readonly string ServiceId;
        /// <summary>
        /// The name of the service associated with this health-check.
        /// </summary>
        public readonly string ServiceName;
        /// <summary>
        /// The list of tags associated with this health-check.
        /// </summary>
        public readonly ImmutableArray<string> ServiceTags;
        /// <summary>
        /// The status of this health-check.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetServiceHealthResultsChecksResult(
            string id,
            string name,
            string node,
            string notes,
            string output,
            string serviceId,
            string serviceName,
            ImmutableArray<string> serviceTags,
            string status)
        {
            Id = id;
            Name = name;
            Node = node;
            Notes = notes;
            Output = output;
            ServiceId = serviceId;
            ServiceName = serviceName;
            ServiceTags = serviceTags;
            Status = status;
        }
    }

    [OutputType]
    public sealed class GetServiceHealthResultsNodeResult
    {
        /// <summary>
        /// The address of this instance.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// The Consul datacenter to query.
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// The ID of this health-check.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Service metadata tag information, if any.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Meta;
        /// <summary>
        /// The service name to select.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableDictionary<string, string> TaggedAddresses;

        [OutputConstructor]
        private GetServiceHealthResultsNodeResult(
            string address,
            string datacenter,
            string id,
            ImmutableDictionary<string, string> meta,
            string name,
            ImmutableDictionary<string, string> taggedAddresses)
        {
            Address = address;
            Datacenter = datacenter;
            Id = id;
            Meta = meta;
            Name = name;
            TaggedAddresses = taggedAddresses;
        }
    }

    [OutputType]
    public sealed class GetServiceHealthResultsResult
    {
        public readonly ImmutableArray<GetServiceHealthResultsChecksResult> Checks;
        /// <summary>
        /// The name of the node associated with this health-check.
        /// </summary>
        public readonly GetServiceHealthResultsNodeResult Node;
        public readonly GetServiceHealthResultsServiceResult Service;

        [OutputConstructor]
        private GetServiceHealthResultsResult(
            ImmutableArray<GetServiceHealthResultsChecksResult> checks,
            GetServiceHealthResultsNodeResult node,
            GetServiceHealthResultsServiceResult service)
        {
            Checks = checks;
            Node = node;
            Service = service;
        }
    }

    [OutputType]
    public sealed class GetServiceHealthResultsServiceResult
    {
        /// <summary>
        /// The address of this instance.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// The ID of this health-check.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Service metadata tag information, if any.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Meta;
        /// <summary>
        /// The service name to select.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The port of this instance.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The list of tags associated with this instance.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetServiceHealthResultsServiceResult(
            string address,
            string id,
            ImmutableDictionary<string, string> meta,
            string name,
            int port,
            ImmutableArray<string> tags)
        {
            Address = address;
            Id = id;
            Meta = meta;
            Name = name;
            Port = port;
            Tags = tags;
        }
    }
    }
}
