// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static partial class Invokes
    {
        /// <summary>
        /// `consul..Service` provides details about a specific Consul service in a
        /// given datacenter.  The results include a list of nodes advertising the specified
        /// service, the node's IP address, port number, node ID, etc.  By specifying a
        /// different datacenter in the `query_options` it is possible to retrieve a list of
        /// services from a different WAN-attached Consul datacenter.
        /// 
        /// This data source is different from the `consul..getServices` (plural) data
        /// source, which provides a summary of the current Consul services.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/d/service.html.markdown.
        /// </summary>
        public static Task<GetServiceResult> GetService(GetServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("consul:index/getService:getService", args, options.WithVersion());
    }

    public sealed class GetServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Consul datacenter to query.  Defaults to the
        /// same value found in `query_options` parameter specified below, or if that is
        /// empty, the `datacenter` value found in the Consul agent that this provider is
        /// configured to talk to.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The service name to select.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("queryOptions")]
        private InputList<Inputs.GetServiceQueryOptionsArgs>? _queryOptions;

        /// <summary>
        /// See below.
        /// </summary>
        public InputList<Inputs.GetServiceQueryOptionsArgs> QueryOptions
        {
            get => _queryOptions ?? (_queryOptions = new InputList<Inputs.GetServiceQueryOptionsArgs>());
            set => _queryOptions = value;
        }

        /// <summary>
        /// A single tag that can be used to filter the list of nodes
        /// to return based on a single matching tag..
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        public GetServiceArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// The datacenter the keys are being read from to.
        /// </summary>
        public readonly string? Datacenter;
        /// <summary>
        /// The name of the service
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetServiceQueryOptionsResult> QueryOptions;
        /// <summary>
        /// A list of nodes and details about each endpoint advertising a
        /// service.  Each element in the list is a map of attributes that correspond to
        /// each individual node.  The list of per-node attributes is detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceServicesResult> Services;
        /// <summary>
        /// The name of the tag used to filter the list of nodes in `service`.
        /// </summary>
        public readonly string? Tag;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetServiceResult(
            string? datacenter,
            string name,
            ImmutableArray<Outputs.GetServiceQueryOptionsResult> queryOptions,
            ImmutableArray<Outputs.GetServiceServicesResult> services,
            string? tag,
            string id)
        {
            Datacenter = datacenter;
            Name = name;
            QueryOptions = queryOptions;
            Services = services;
            Tag = tag;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetServiceQueryOptionsArgs : Pulumi.ResourceArgs
    {
        [Input("allowStale")]
        public Input<bool>? AllowStale { get; set; }

        /// <summary>
        /// The Consul datacenter to query.  Defaults to the
        /// same value found in `query_options` parameter specified below, or if that is
        /// empty, the `datacenter` value found in the Consul agent that this provider is
        /// configured to talk to.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("near")]
        public Input<string>? Near { get; set; }

        [Input("nodeMeta")]
        private InputMap<object>? _nodeMeta;
        public InputMap<object> NodeMeta
        {
            get => _nodeMeta ?? (_nodeMeta = new InputMap<object>());
            set => _nodeMeta = value;
        }

        [Input("requireConsistent")]
        public Input<bool>? RequireConsistent { get; set; }

        [Input("token")]
        public Input<string>? Token { get; set; }

        [Input("waitIndex")]
        public Input<int>? WaitIndex { get; set; }

        [Input("waitTime")]
        public Input<string>? WaitTime { get; set; }

        public GetServiceQueryOptionsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetServiceQueryOptionsResult
    {
        public readonly bool? AllowStale;
        /// <summary>
        /// The Consul datacenter to query.  Defaults to the
        /// same value found in `query_options` parameter specified below, or if that is
        /// empty, the `datacenter` value found in the Consul agent that this provider is
        /// configured to talk to.
        /// </summary>
        public readonly string? Datacenter;
        public readonly string? Near;
        public readonly ImmutableDictionary<string, object>? NodeMeta;
        public readonly bool? RequireConsistent;
        public readonly string? Token;
        public readonly int? WaitIndex;
        public readonly string? WaitTime;

        [OutputConstructor]
        private GetServiceQueryOptionsResult(
            bool? allowStale,
            string? datacenter,
            string? near,
            ImmutableDictionary<string, object>? nodeMeta,
            bool? requireConsistent,
            string? token,
            int? waitIndex,
            string? waitTime)
        {
            AllowStale = allowStale;
            Datacenter = datacenter;
            Near = near;
            NodeMeta = nodeMeta;
            RequireConsistent = requireConsistent;
            Token = token;
            WaitIndex = waitIndex;
            WaitTime = waitTime;
        }
    }

    [OutputType]
    public sealed class GetServiceServicesResult
    {
        public readonly string Address;
        public readonly string CreateIndex;
        public readonly string EnableTagOverride;
        public readonly string Id;
        public readonly ImmutableDictionary<string, object> Meta;
        public readonly string ModifyIndex;
        /// <summary>
        /// The service name to select.
        /// </summary>
        public readonly string Name;
        public readonly string NodeAddress;
        /// <summary>
        /// The Node ID of the Consul agent advertising the service.
        /// * [`node_meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Node
        /// meta data tag information, if any.
        /// * [`node_name`](https://www.consul.io/docs/agent/http/catalog.html#Node) - The
        /// name of the Consul node.
        /// * [`address`](https://www.consul.io/docs/agent/http/catalog.html#ServiceAddress) -
        /// The IP address of the service.  If the `ServiceAddress` in the Consul catalog
        /// is empty, this value is automatically populated with the `node_address` (the
        /// `Address` in the Consul Catalog).
        /// * [`enable_tag_override`](https://www.consul.io/docs/agent/http/catalog.html#ServiceEnableTagOverride) -
        /// Whether service tags can be overridden on this service.
        /// * [`id`](https://www.consul.io/docs/agent/http/catalog.html#ServiceID) - A
        /// unique service instance identifier.
        /// * [`name`](https://www.consul.io/docs/agent/http/catalog.html#ServiceName) - The
        /// name of the service.
        /// * [`port`](https://www.consul.io/docs/agent/http/catalog.html#ServicePort) -
        /// Port number of the service.
        /// * [`tagged_addresses`](https://www.consul.io/docs/agent/http/catalog.html#TaggedAddresses) -
        /// List of explicit LAN and WAN IP addresses for the agent.
        /// * [`tags`](https://www.consul.io/docs/agent/http/catalog.html#ServiceTags) -
        /// List of tags for the service.
        /// * [`meta`](https://www.consul.io/docs/agent/http/catalog.html#Meta) - Service meta
        /// data tag information, if any.
        /// </summary>
        public readonly string NodeId;
        public readonly ImmutableDictionary<string, object> NodeMeta;
        public readonly string NodeName;
        public readonly string Port;
        public readonly GetServiceServicesTaggedAddressesResult TaggedAddresses;
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetServiceServicesResult(
            string address,
            string createIndex,
            string enableTagOverride,
            string id,
            ImmutableDictionary<string, object> meta,
            string modifyIndex,
            string name,
            string nodeAddress,
            string nodeId,
            ImmutableDictionary<string, object> nodeMeta,
            string nodeName,
            string port,
            GetServiceServicesTaggedAddressesResult taggedAddresses,
            ImmutableArray<string> tags)
        {
            Address = address;
            CreateIndex = createIndex;
            EnableTagOverride = enableTagOverride;
            Id = id;
            Meta = meta;
            ModifyIndex = modifyIndex;
            Name = name;
            NodeAddress = nodeAddress;
            NodeId = nodeId;
            NodeMeta = nodeMeta;
            NodeName = nodeName;
            Port = port;
            TaggedAddresses = taggedAddresses;
            Tags = tags;
        }
    }

    [OutputType]
    public sealed class GetServiceServicesTaggedAddressesResult
    {
        public readonly string Lan;
        public readonly string Wan;

        [OutputConstructor]
        private GetServiceServicesTaggedAddressesResult(
            string lan,
            string wan)
        {
            Lan = lan;
            Wan = wan;
        }
    }
    }
}
