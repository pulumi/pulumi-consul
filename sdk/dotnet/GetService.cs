// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetService
    {
        /// <summary>
        /// `consul.Service` provides details about a specific Consul service in a
        /// given datacenter.  The results include a list of nodes advertising the specified
        /// service, the node's IP address, port number, node ID, etc.  By specifying a
        /// different datacenter in the `query_options` it is possible to retrieve a list of
        /// services from a different WAN-attached Consul datacenter.
        /// 
        /// This data source is different from the `consul.getServices` (plural) data
        /// source, which provides a summary of the current Consul services.
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("consul:index/getService:getService", args ?? new GetServiceArgs(), options.WithVersion());
    }


    public sealed class GetServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Consul datacenter to query.  Defaults to the
        /// same value found in `query_options` parameter specified below, or if that is
        /// empty, the `datacenter` value found in the Consul agent that this provider is
        /// configured to talk to.
        /// </summary>
        [Input("datacenter")]
        public string? Datacenter { get; set; }

        /// <summary>
        /// The service name to select.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("queryOptions")]
        private List<Inputs.GetServiceQueryOptionArgs>? _queryOptions;

        /// <summary>
        /// See below.
        /// </summary>
        public List<Inputs.GetServiceQueryOptionArgs> QueryOptions
        {
            get => _queryOptions ?? (_queryOptions = new List<Inputs.GetServiceQueryOptionArgs>());
            set => _queryOptions = value;
        }

        /// <summary>
        /// A single tag that can be used to filter the list of nodes
        /// to return based on a single matching tag..
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        public GetServiceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// The datacenter the keys are being read from to.
        /// </summary>
        public readonly string? Datacenter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the service
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetServiceQueryOptionResult> QueryOptions;
        /// <summary>
        /// A list of nodes and details about each endpoint advertising a
        /// service.  Each element in the list is a map of attributes that correspond to
        /// each individual node.  The list of per-node attributes is detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceServiceResult> Services;
        /// <summary>
        /// The name of the tag used to filter the list of nodes in `service`.
        /// </summary>
        public readonly string? Tag;

        [OutputConstructor]
        private GetServiceResult(
            string? datacenter,

            string id,

            string name,

            ImmutableArray<Outputs.GetServiceQueryOptionResult> queryOptions,

            ImmutableArray<Outputs.GetServiceServiceResult> services,

            string? tag)
        {
            Datacenter = datacenter;
            Id = id;
            Name = name;
            QueryOptions = queryOptions;
            Services = services;
            Tag = tag;
        }
    }
}
