// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetAclToken
    {
        /// <summary>
        /// The `consul.AclToken` data source returns the information related to the `consul.AclToken` resource with the exception of its secret ID.
        /// 
        /// If you want to get the secret ID associated with a token, use the [`consul.getAclTokenSecretId` data source](https://www.terraform.io/docs/providers/consul/d/acl_token_secret_id.html).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Consul.GetAclToken.Invoke(new()
        ///     {
        ///         AccessorId = "00000000-0000-0000-0000-000000000002",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["consulAclPolicies"] = test.Apply(getAclTokenResult =&gt; getAclTokenResult.Policies),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetAclTokenResult> InvokeAsync(GetAclTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAclTokenResult>("consul:index/getAclToken:getAclToken", args ?? new GetAclTokenArgs(), options.WithDefaults());

        /// <summary>
        /// The `consul.AclToken` data source returns the information related to the `consul.AclToken` resource with the exception of its secret ID.
        /// 
        /// If you want to get the secret ID associated with a token, use the [`consul.getAclTokenSecretId` data source](https://www.terraform.io/docs/providers/consul/d/acl_token_secret_id.html).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Consul.GetAclToken.Invoke(new()
        ///     {
        ///         AccessorId = "00000000-0000-0000-0000-000000000002",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["consulAclPolicies"] = test.Apply(getAclTokenResult =&gt; getAclTokenResult.Policies),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetAclTokenResult> Invoke(GetAclTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAclTokenResult>("consul:index/getAclToken:getAclToken", args ?? new GetAclTokenInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `consul.AclToken` data source returns the information related to the `consul.AclToken` resource with the exception of its secret ID.
        /// 
        /// If you want to get the secret ID associated with a token, use the [`consul.getAclTokenSecretId` data source](https://www.terraform.io/docs/providers/consul/d/acl_token_secret_id.html).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Consul.GetAclToken.Invoke(new()
        ///     {
        ///         AccessorId = "00000000-0000-0000-0000-000000000002",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["consulAclPolicies"] = test.Apply(getAclTokenResult =&gt; getAclTokenResult.Policies),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetAclTokenResult> Invoke(GetAclTokenInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAclTokenResult>("consul:index/getAclToken:getAclToken", args ?? new GetAclTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAclTokenArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The accessor ID of the ACL token.
        /// </summary>
        [Input("accessorId", required: true)]
        public string AccessorId { get; set; } = null!;

        /// <summary>
        /// The namespace to lookup the ACL token.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The partition to lookup the ACL token.
        /// </summary>
        [Input("partition")]
        public string? Partition { get; set; }

        public GetAclTokenArgs()
        {
        }
        public static new GetAclTokenArgs Empty => new GetAclTokenArgs();
    }

    public sealed class GetAclTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The accessor ID of the ACL token.
        /// </summary>
        [Input("accessorId", required: true)]
        public Input<string> AccessorId { get; set; } = null!;

        /// <summary>
        /// The namespace to lookup the ACL token.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition to lookup the ACL token.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        public GetAclTokenInvokeArgs()
        {
        }
        public static new GetAclTokenInvokeArgs Empty => new GetAclTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetAclTokenResult
    {
        /// <summary>
        /// The accessor ID of the ACL token.
        /// </summary>
        public readonly string AccessorId;
        /// <summary>
        /// The description of the ACL token.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// If set this represents the point after which a token should be considered revoked and is eligible for destruction.
        /// </summary>
        public readonly string ExpirationTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the ACL token is local to the datacenter it was created within.
        /// </summary>
        public readonly bool Local;
        /// <summary>
        /// The namespace to lookup the ACL token.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// The list of node identities attached to the token.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclTokenNodeIdentityResult> NodeIdentities;
        /// <summary>
        /// The partition to lookup the ACL token.
        /// </summary>
        public readonly string? Partition;
        /// <summary>
        /// A list of policies associated with the ACL token.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclTokenPolicyResult> Policies;
        /// <summary>
        /// List of roles linked to the token
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclTokenRoleResult> Roles;
        /// <summary>
        /// The list of service identities attached to the token.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclTokenServiceIdentityResult> ServiceIdentities;
        /// <summary>
        /// The list of templated policies that should be applied to the token.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclTokenTemplatedPolicyResult> TemplatedPolicies;

        [OutputConstructor]
        private GetAclTokenResult(
            string accessorId,

            string description,

            string expirationTime,

            string id,

            bool local,

            string? @namespace,

            ImmutableArray<Outputs.GetAclTokenNodeIdentityResult> nodeIdentities,

            string? partition,

            ImmutableArray<Outputs.GetAclTokenPolicyResult> policies,

            ImmutableArray<Outputs.GetAclTokenRoleResult> roles,

            ImmutableArray<Outputs.GetAclTokenServiceIdentityResult> serviceIdentities,

            ImmutableArray<Outputs.GetAclTokenTemplatedPolicyResult> templatedPolicies)
        {
            AccessorId = accessorId;
            Description = description;
            ExpirationTime = expirationTime;
            Id = id;
            Local = local;
            Namespace = @namespace;
            NodeIdentities = nodeIdentities;
            Partition = partition;
            Policies = policies;
            Roles = roles;
            ServiceIdentities = serviceIdentities;
            TemplatedPolicies = templatedPolicies;
        }
    }
}
