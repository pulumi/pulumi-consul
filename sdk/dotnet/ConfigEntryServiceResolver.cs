// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var web = new Consul.ConfigEntryServiceResolver("web", new()
    ///     {
    ///         Name = "web",
    ///         DefaultSubset = "v1",
    ///         ConnectTimeout = "15s",
    ///         Subsets = new[]
    ///         {
    ///             new Consul.Inputs.ConfigEntryServiceResolverSubsetArgs
    ///             {
    ///                 Name = "v1",
    ///                 Filter = "Service.Meta.version == v1",
    ///             },
    ///             new Consul.Inputs.ConfigEntryServiceResolverSubsetArgs
    ///             {
    ///                 Name = "v2",
    ///                 Filter = "Service.Meta.version == v2",
    ///             },
    ///         },
    ///         Redirects = new[]
    ///         {
    ///             new Consul.Inputs.ConfigEntryServiceResolverRedirectArgs
    ///             {
    ///                 Service = "web",
    ///                 Datacenter = "dc2",
    ///             },
    ///         },
    ///         Failovers = new[]
    ///         {
    ///             new Consul.Inputs.ConfigEntryServiceResolverFailoverArgs
    ///             {
    ///                 SubsetName = "v2",
    ///                 Datacenters = new[]
    ///                 {
    ///                     "dc2",
    ///                 },
    ///             },
    ///             new Consul.Inputs.ConfigEntryServiceResolverFailoverArgs
    ///             {
    ///                 SubsetName = "*",
    ///                 Datacenters = new[]
    ///                 {
    ///                     "dc3",
    ///                     "dc4",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/configEntryServiceResolver:ConfigEntryServiceResolver")]
    public partial class ConfigEntryServiceResolver : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the timeout duration for establishing new network connections to this service.
        /// </summary>
        [Output("connectTimeout")]
        public Output<string?> ConnectTimeout { get; private set; } = null!;

        /// <summary>
        /// Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
        /// </summary>
        [Output("defaultSubset")]
        public Output<string?> DefaultSubset { get; private set; } = null!;

        /// <summary>
        /// Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
        /// </summary>
        [Output("failovers")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceResolverFailover>> Failovers { get; private set; } = null!;

        /// <summary>
        /// Specifies the load balancing policy and configuration for services issuing requests to this upstream.
        /// </summary>
        [Output("loadBalancers")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceResolverLoadBalancer>> LoadBalancers { get; private set; } = null!;

        /// <summary>
        /// Specifies key-value pairs to add to the KV store.
        /// </summary>
        [Output("meta")]
        public Output<ImmutableDictionary<string, string>?> Meta { get; private set; } = null!;

        /// <summary>
        /// Specifies a name for the configuration entry.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the namespace that the service resolver applies to.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Specifies the admin partition that the service resolver applies to.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
        /// </summary>
        [Output("redirects")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceResolverRedirect>> Redirects { get; private set; } = null!;

        /// <summary>
        /// Specifies the timeout duration for receiving an HTTP response from this service.
        /// </summary>
        [Output("requestTimeout")]
        public Output<string?> RequestTimeout { get; private set; } = null!;

        /// <summary>
        /// Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
        /// </summary>
        [Output("subsets")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceResolverSubset>> Subsets { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigEntryServiceResolver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigEntryServiceResolver(string name, ConfigEntryServiceResolverArgs? args = null, CustomResourceOptions? options = null)
            : base("consul:index/configEntryServiceResolver:ConfigEntryServiceResolver", name, args ?? new ConfigEntryServiceResolverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigEntryServiceResolver(string name, Input<string> id, ConfigEntryServiceResolverState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/configEntryServiceResolver:ConfigEntryServiceResolver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigEntryServiceResolver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigEntryServiceResolver Get(string name, Input<string> id, ConfigEntryServiceResolverState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigEntryServiceResolver(name, id, state, options);
        }
    }

    public sealed class ConfigEntryServiceResolverArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the timeout duration for establishing new network connections to this service.
        /// </summary>
        [Input("connectTimeout")]
        public Input<string>? ConnectTimeout { get; set; }

        /// <summary>
        /// Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
        /// </summary>
        [Input("defaultSubset")]
        public Input<string>? DefaultSubset { get; set; }

        [Input("failovers")]
        private InputList<Inputs.ConfigEntryServiceResolverFailoverArgs>? _failovers;

        /// <summary>
        /// Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceResolverFailoverArgs> Failovers
        {
            get => _failovers ?? (_failovers = new InputList<Inputs.ConfigEntryServiceResolverFailoverArgs>());
            set => _failovers = value;
        }

        [Input("loadBalancers")]
        private InputList<Inputs.ConfigEntryServiceResolverLoadBalancerArgs>? _loadBalancers;

        /// <summary>
        /// Specifies the load balancing policy and configuration for services issuing requests to this upstream.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceResolverLoadBalancerArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.ConfigEntryServiceResolverLoadBalancerArgs>());
            set => _loadBalancers = value;
        }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies key-value pairs to add to the KV store.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// Specifies a name for the configuration entry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the namespace that the service resolver applies to.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the admin partition that the service resolver applies to.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("redirects")]
        private InputList<Inputs.ConfigEntryServiceResolverRedirectArgs>? _redirects;

        /// <summary>
        /// Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceResolverRedirectArgs> Redirects
        {
            get => _redirects ?? (_redirects = new InputList<Inputs.ConfigEntryServiceResolverRedirectArgs>());
            set => _redirects = value;
        }

        /// <summary>
        /// Specifies the timeout duration for receiving an HTTP response from this service.
        /// </summary>
        [Input("requestTimeout")]
        public Input<string>? RequestTimeout { get; set; }

        [Input("subsets")]
        private InputList<Inputs.ConfigEntryServiceResolverSubsetArgs>? _subsets;

        /// <summary>
        /// Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceResolverSubsetArgs> Subsets
        {
            get => _subsets ?? (_subsets = new InputList<Inputs.ConfigEntryServiceResolverSubsetArgs>());
            set => _subsets = value;
        }

        public ConfigEntryServiceResolverArgs()
        {
        }
        public static new ConfigEntryServiceResolverArgs Empty => new ConfigEntryServiceResolverArgs();
    }

    public sealed class ConfigEntryServiceResolverState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the timeout duration for establishing new network connections to this service.
        /// </summary>
        [Input("connectTimeout")]
        public Input<string>? ConnectTimeout { get; set; }

        /// <summary>
        /// Specifies a defined subset of service instances to use when no explicit subset is requested. If this parameter is not specified, Consul uses the unnamed default subset.
        /// </summary>
        [Input("defaultSubset")]
        public Input<string>? DefaultSubset { get; set; }

        [Input("failovers")]
        private InputList<Inputs.ConfigEntryServiceResolverFailoverGetArgs>? _failovers;

        /// <summary>
        /// Specifies controls for rerouting traffic to an alternate pool of service instances if the target service fails.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceResolverFailoverGetArgs> Failovers
        {
            get => _failovers ?? (_failovers = new InputList<Inputs.ConfigEntryServiceResolverFailoverGetArgs>());
            set => _failovers = value;
        }

        [Input("loadBalancers")]
        private InputList<Inputs.ConfigEntryServiceResolverLoadBalancerGetArgs>? _loadBalancers;

        /// <summary>
        /// Specifies the load balancing policy and configuration for services issuing requests to this upstream.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceResolverLoadBalancerGetArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.ConfigEntryServiceResolverLoadBalancerGetArgs>());
            set => _loadBalancers = value;
        }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies key-value pairs to add to the KV store.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// Specifies a name for the configuration entry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the namespace that the service resolver applies to.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the admin partition that the service resolver applies to.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("redirects")]
        private InputList<Inputs.ConfigEntryServiceResolverRedirectGetArgs>? _redirects;

        /// <summary>
        /// Specifies redirect instructions for local service traffic so that services deployed to a different network location resolve the upstream request instead.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceResolverRedirectGetArgs> Redirects
        {
            get => _redirects ?? (_redirects = new InputList<Inputs.ConfigEntryServiceResolverRedirectGetArgs>());
            set => _redirects = value;
        }

        /// <summary>
        /// Specifies the timeout duration for receiving an HTTP response from this service.
        /// </summary>
        [Input("requestTimeout")]
        public Input<string>? RequestTimeout { get; set; }

        [Input("subsets")]
        private InputList<Inputs.ConfigEntryServiceResolverSubsetGetArgs>? _subsets;

        /// <summary>
        /// Specifies names for custom service subsets and the conditions under which service instances belong to each subset.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceResolverSubsetGetArgs> Subsets
        {
            get => _subsets ?? (_subsets = new InputList<Inputs.ConfigEntryServiceResolverSubsetGetArgs>());
            set => _subsets = value;
        }

        public ConfigEntryServiceResolverState()
        {
        }
        public static new ConfigEntryServiceResolverState Empty => new ConfigEntryServiceResolverState();
    }
}
