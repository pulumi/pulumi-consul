// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/prepared_query.html.markdown.
    /// </summary>
    public partial class PreparedQuery : Pulumi.CustomResource
    {
        /// <summary>
        /// When `true` the prepared query will return connect
        /// proxy services for a queried service.  Conditions such as `tags` in the
        /// prepared query will be matched against the proxy service. Defaults to false.
        /// </summary>
        [Output("connect")]
        public Output<bool?> Connect { get; private set; } = null!;

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string?> Datacenter { get; private set; } = null!;

        /// <summary>
        /// Settings for controlling the DNS response details.
        /// </summary>
        [Output("dns")]
        public Output<Outputs.PreparedQueryDns?> Dns { get; private set; } = null!;

        /// <summary>
        /// Options for controlling behavior when no healthy
        /// nodes are available in the local DC.
        /// </summary>
        [Output("failover")]
        public Output<Outputs.PreparedQueryFailover?> Failover { get; private set; } = null!;

        /// <summary>
        /// The name of the prepared query. Used to identify
        /// the prepared query during requests. Can be specified as an empty string
        /// to configure the query as a catch-all.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Allows specifying the name of a node to sort results
        /// near using Consul's distance sorting and network coordinates. The magic
        /// `_agent` value can be used to always sort nearest the node servicing the
        /// request.
        /// </summary>
        [Output("near")]
        public Output<string?> Near { get; private set; } = null!;

        /// <summary>
        /// When `true`, the prepared query will only
        /// return nodes with passing health checks in the result.
        /// </summary>
        [Output("onlyPassing")]
        public Output<bool?> OnlyPassing { get; private set; } = null!;

        /// <summary>
        /// The name of the service to query.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// The name of the Consul session to tie this query's
        /// lifetime to.  This is an advanced parameter that should not be used without a
        /// complete understanding of Consul sessions and the implications of their use
        /// (it is recommended to leave this blank in nearly all cases).  If this
        /// parameter is omitted the query will not expire.
        /// </summary>
        [Output("session")]
        public Output<string?> Session { get; private set; } = null!;

        /// <summary>
        /// The ACL token to store with the prepared
        /// query. This token will be used by default whenever the query is executed.
        /// </summary>
        [Output("storedToken")]
        public Output<string?> StoredToken { get; private set; } = null!;

        /// <summary>
        /// The list of required and/or disallowed tags.  If a tag is
        /// in this list it must be present.  If the tag is preceded with a "!" then it is
        /// disallowed.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Query templating options. This is used to make a
        /// single prepared query respond to many different requests.
        /// </summary>
        [Output("template")]
        public Output<Outputs.PreparedQueryTemplate?> Template { get; private set; } = null!;

        /// <summary>
        /// The ACL token to use when saving the prepared query.
        /// This overrides the token that the agent provides by default.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;


        /// <summary>
        /// Create a PreparedQuery resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PreparedQuery(string name, PreparedQueryArgs args, CustomResourceOptions? options = null)
            : base("consul:index/preparedQuery:PreparedQuery", name, args, MakeResourceOptions(options, ""))
        {
        }

        private PreparedQuery(string name, Input<string> id, PreparedQueryState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/preparedQuery:PreparedQuery", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PreparedQuery resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PreparedQuery Get(string name, Input<string> id, PreparedQueryState? state = null, CustomResourceOptions? options = null)
        {
            return new PreparedQuery(name, id, state, options);
        }
    }

    public sealed class PreparedQueryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// When `true` the prepared query will return connect
        /// proxy services for a queried service.  Conditions such as `tags` in the
        /// prepared query will be matched against the proxy service. Defaults to false.
        /// </summary>
        [Input("connect")]
        public Input<bool>? Connect { get; set; }

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Settings for controlling the DNS response details.
        /// </summary>
        [Input("dns")]
        public Input<Inputs.PreparedQueryDnsArgs>? Dns { get; set; }

        /// <summary>
        /// Options for controlling behavior when no healthy
        /// nodes are available in the local DC.
        /// </summary>
        [Input("failover")]
        public Input<Inputs.PreparedQueryFailoverArgs>? Failover { get; set; }

        /// <summary>
        /// The name of the prepared query. Used to identify
        /// the prepared query during requests. Can be specified as an empty string
        /// to configure the query as a catch-all.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Allows specifying the name of a node to sort results
        /// near using Consul's distance sorting and network coordinates. The magic
        /// `_agent` value can be used to always sort nearest the node servicing the
        /// request.
        /// </summary>
        [Input("near")]
        public Input<string>? Near { get; set; }

        /// <summary>
        /// When `true`, the prepared query will only
        /// return nodes with passing health checks in the result.
        /// </summary>
        [Input("onlyPassing")]
        public Input<bool>? OnlyPassing { get; set; }

        /// <summary>
        /// The name of the service to query.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        /// <summary>
        /// The name of the Consul session to tie this query's
        /// lifetime to.  This is an advanced parameter that should not be used without a
        /// complete understanding of Consul sessions and the implications of their use
        /// (it is recommended to leave this blank in nearly all cases).  If this
        /// parameter is omitted the query will not expire.
        /// </summary>
        [Input("session")]
        public Input<string>? Session { get; set; }

        /// <summary>
        /// The ACL token to store with the prepared
        /// query. This token will be used by default whenever the query is executed.
        /// </summary>
        [Input("storedToken")]
        public Input<string>? StoredToken { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of required and/or disallowed tags.  If a tag is
        /// in this list it must be present.  If the tag is preceded with a "!" then it is
        /// disallowed.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Query templating options. This is used to make a
        /// single prepared query respond to many different requests.
        /// </summary>
        [Input("template")]
        public Input<Inputs.PreparedQueryTemplateArgs>? Template { get; set; }

        /// <summary>
        /// The ACL token to use when saving the prepared query.
        /// This overrides the token that the agent provides by default.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public PreparedQueryArgs()
        {
        }
    }

    public sealed class PreparedQueryState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// When `true` the prepared query will return connect
        /// proxy services for a queried service.  Conditions such as `tags` in the
        /// prepared query will be matched against the proxy service. Defaults to false.
        /// </summary>
        [Input("connect")]
        public Input<bool>? Connect { get; set; }

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Settings for controlling the DNS response details.
        /// </summary>
        [Input("dns")]
        public Input<Inputs.PreparedQueryDnsGetArgs>? Dns { get; set; }

        /// <summary>
        /// Options for controlling behavior when no healthy
        /// nodes are available in the local DC.
        /// </summary>
        [Input("failover")]
        public Input<Inputs.PreparedQueryFailoverGetArgs>? Failover { get; set; }

        /// <summary>
        /// The name of the prepared query. Used to identify
        /// the prepared query during requests. Can be specified as an empty string
        /// to configure the query as a catch-all.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Allows specifying the name of a node to sort results
        /// near using Consul's distance sorting and network coordinates. The magic
        /// `_agent` value can be used to always sort nearest the node servicing the
        /// request.
        /// </summary>
        [Input("near")]
        public Input<string>? Near { get; set; }

        /// <summary>
        /// When `true`, the prepared query will only
        /// return nodes with passing health checks in the result.
        /// </summary>
        [Input("onlyPassing")]
        public Input<bool>? OnlyPassing { get; set; }

        /// <summary>
        /// The name of the service to query.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// The name of the Consul session to tie this query's
        /// lifetime to.  This is an advanced parameter that should not be used without a
        /// complete understanding of Consul sessions and the implications of their use
        /// (it is recommended to leave this blank in nearly all cases).  If this
        /// parameter is omitted the query will not expire.
        /// </summary>
        [Input("session")]
        public Input<string>? Session { get; set; }

        /// <summary>
        /// The ACL token to store with the prepared
        /// query. This token will be used by default whenever the query is executed.
        /// </summary>
        [Input("storedToken")]
        public Input<string>? StoredToken { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of required and/or disallowed tags.  If a tag is
        /// in this list it must be present.  If the tag is preceded with a "!" then it is
        /// disallowed.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Query templating options. This is used to make a
        /// single prepared query respond to many different requests.
        /// </summary>
        [Input("template")]
        public Input<Inputs.PreparedQueryTemplateGetArgs>? Template { get; set; }

        /// <summary>
        /// The ACL token to use when saving the prepared query.
        /// This overrides the token that the agent provides by default.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public PreparedQueryState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class PreparedQueryDnsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The TTL to send when returning DNS results.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public PreparedQueryDnsArgs()
        {
        }
    }

    public sealed class PreparedQueryDnsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The TTL to send when returning DNS results.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public PreparedQueryDnsGetArgs()
        {
        }
    }

    public sealed class PreparedQueryFailoverArgs : Pulumi.ResourceArgs
    {
        [Input("datacenters")]
        private InputList<string>? _datacenters;

        /// <summary>
        /// Remote datacenters to return results from.
        /// </summary>
        public InputList<string> Datacenters
        {
            get => _datacenters ?? (_datacenters = new InputList<string>());
            set => _datacenters = value;
        }

        /// <summary>
        /// Return results from this many datacenters,
        /// sorted in ascending order of estimated RTT.
        /// </summary>
        [Input("nearestN")]
        public Input<int>? NearestN { get; set; }

        public PreparedQueryFailoverArgs()
        {
        }
    }

    public sealed class PreparedQueryFailoverGetArgs : Pulumi.ResourceArgs
    {
        [Input("datacenters")]
        private InputList<string>? _datacenters;

        /// <summary>
        /// Remote datacenters to return results from.
        /// </summary>
        public InputList<string> Datacenters
        {
            get => _datacenters ?? (_datacenters = new InputList<string>());
            set => _datacenters = value;
        }

        /// <summary>
        /// Return results from this many datacenters,
        /// sorted in ascending order of estimated RTT.
        /// </summary>
        [Input("nearestN")]
        public Input<int>? NearestN { get; set; }

        public PreparedQueryFailoverGetArgs()
        {
        }
    }

    public sealed class PreparedQueryTemplateArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The regular expression to match with. When using
        /// `name_prefix_match`, this regex is applied against the query name.
        /// </summary>
        [Input("regexp", required: true)]
        public Input<string> Regexp { get; set; } = null!;

        /// <summary>
        /// The type of template matching to perform. Currently
        /// only `name_prefix_match` is supported.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public PreparedQueryTemplateArgs()
        {
        }
    }

    public sealed class PreparedQueryTemplateGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The regular expression to match with. When using
        /// `name_prefix_match`, this regex is applied against the query name.
        /// </summary>
        [Input("regexp", required: true)]
        public Input<string> Regexp { get; set; } = null!;

        /// <summary>
        /// The type of template matching to perform. Currently
        /// only `name_prefix_match` is supported.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public PreparedQueryTemplateGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class PreparedQueryDns
    {
        /// <summary>
        /// The TTL to send when returning DNS results.
        /// </summary>
        public readonly string? Ttl;

        [OutputConstructor]
        private PreparedQueryDns(string? ttl)
        {
            Ttl = ttl;
        }
    }

    [OutputType]
    public sealed class PreparedQueryFailover
    {
        /// <summary>
        /// Remote datacenters to return results from.
        /// </summary>
        public readonly ImmutableArray<string> Datacenters;
        /// <summary>
        /// Return results from this many datacenters,
        /// sorted in ascending order of estimated RTT.
        /// </summary>
        public readonly int? NearestN;

        [OutputConstructor]
        private PreparedQueryFailover(
            ImmutableArray<string> datacenters,
            int? nearestN)
        {
            Datacenters = datacenters;
            NearestN = nearestN;
        }
    }

    [OutputType]
    public sealed class PreparedQueryTemplate
    {
        /// <summary>
        /// The regular expression to match with. When using
        /// `name_prefix_match`, this regex is applied against the query name.
        /// </summary>
        public readonly string Regexp;
        /// <summary>
        /// The type of template matching to perform. Currently
        /// only `name_prefix_match` is supported.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private PreparedQueryTemplate(
            string regexp,
            string type)
        {
            Regexp = regexp;
            Type = type;
        }
    }
    }
}
