// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetPeering
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var basic = Consul.GetPeering.Invoke(new()
        ///     {
        ///         PeerName = "peered-cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPeeringResult> InvokeAsync(GetPeeringArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPeeringResult>("consul:index/getPeering:getPeering", args ?? new GetPeeringArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var basic = Consul.GetPeering.Invoke(new()
        ///     {
        ///         PeerName = "peered-cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPeeringResult> Invoke(GetPeeringInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPeeringResult>("consul:index/getPeering:getPeering", args ?? new GetPeeringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPeeringArgs : global::Pulumi.InvokeArgs
    {
        [Input("partition")]
        public string? Partition { get; set; }

        [Input("peerName", required: true)]
        public string PeerName { get; set; } = null!;

        public GetPeeringArgs()
        {
        }
        public static new GetPeeringArgs Empty => new GetPeeringArgs();
    }

    public sealed class GetPeeringInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("peerName", required: true)]
        public Input<string> PeerName { get; set; } = null!;

        public GetPeeringInvokeArgs()
        {
        }
        public static new GetPeeringInvokeArgs Empty => new GetPeeringInvokeArgs();
    }


    [OutputType]
    public sealed class GetPeeringResult
    {
        public readonly string DeletedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Meta;
        public readonly string? Partition;
        public readonly ImmutableArray<string> PeerCaPems;
        public readonly string PeerId;
        public readonly string PeerName;
        public readonly ImmutableArray<string> PeerServerAddresses;
        public readonly string PeerServerName;
        public readonly string State;

        [OutputConstructor]
        private GetPeeringResult(
            string deletedAt,

            string id,

            ImmutableDictionary<string, string> meta,

            string? partition,

            ImmutableArray<string> peerCaPems,

            string peerId,

            string peerName,

            ImmutableArray<string> peerServerAddresses,

            string peerServerName,

            string state)
        {
            DeletedAt = deletedAt;
            Id = id;
            Meta = meta;
            Partition = partition;
            PeerCaPems = peerCaPems;
            PeerId = peerId;
            PeerName = peerName;
            PeerServerAddresses = peerServerAddresses;
            PeerServerName = peerServerName;
            State = state;
        }
    }
}
