// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// Provides access to Node data in Consul. This can be used to define a
    /// node. Currently, defining health checks is not supported.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/node.html.markdown.
    /// </summary>
    public partial class Node : Pulumi.CustomResource
    {
        /// <summary>
        /// The address of the node being added to,
        /// or referenced in the catalog.
        /// </summary>
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        /// <summary>
        /// The datacenter to use. This overrides the agent's
        /// default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        /// <summary>
        /// Key/value pairs that are associated with the node.
        /// </summary>
        [Output("meta")]
        public Output<ImmutableDictionary<string, object>?> Meta { get; private set; } = null!;

        /// <summary>
        /// The name of the node being added to, or
        /// referenced in the catalog.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;


        /// <summary>
        /// Create a Node resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Node(string name, NodeArgs args, CustomResourceOptions? options = null)
            : base("consul:index/node:Node", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Node(string name, Input<string> id, NodeState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/node:Node", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Node resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Node Get(string name, Input<string> id, NodeState? state = null, CustomResourceOptions? options = null)
        {
            return new Node(name, id, state, options);
        }
    }

    public sealed class NodeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address of the node being added to,
        /// or referenced in the catalog.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// The datacenter to use. This overrides the agent's
        /// default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("meta")]
        private InputMap<object>? _meta;

        /// <summary>
        /// Key/value pairs that are associated with the node.
        /// </summary>
        public InputMap<object> Meta
        {
            get => _meta ?? (_meta = new InputMap<object>());
            set => _meta = value;
        }

        /// <summary>
        /// The name of the node being added to, or
        /// referenced in the catalog.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("token")]
        public Input<string>? Token { get; set; }

        public NodeArgs()
        {
        }
    }

    public sealed class NodeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address of the node being added to,
        /// or referenced in the catalog.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// The datacenter to use. This overrides the agent's
        /// default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("meta")]
        private InputMap<object>? _meta;

        /// <summary>
        /// Key/value pairs that are associated with the node.
        /// </summary>
        public InputMap<object> Meta
        {
            get => _meta ?? (_meta = new InputMap<object>());
            set => _meta = value;
        }

        /// <summary>
        /// The name of the node being added to, or
        /// referenced in the catalog.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("token")]
        public Input<string>? Token { get; set; }

        public NodeState()
        {
        }
    }
}
