// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// Starting with Consul 1.5.0, the consul.AclBindingRule resource can be used to managed Consul ACL binding rules.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var minikube = new Consul.AclAuthMethod("minikube", new()
    ///     {
    ///         Name = "minikube",
    ///         Type = "kubernetes",
    ///         Description = "dev minikube cluster",
    ///         Config = 
    ///         {
    ///             { "Host", "https://192.0.2.42:8443" },
    ///             { "CACert", @"-----BEGIN CERTIFICATE-----
    /// ...-----END CERTIFICATE-----
    /// " },
    ///             { "ServiceAccountJWT", "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9..." },
    ///         },
    ///     });
    /// 
    ///     var test = new Consul.AclBindingRule("test", new()
    ///     {
    ///         AuthMethod = minikube.Name,
    ///         Description = "foobar",
    ///         Selector = "serviceaccount.namespace==default",
    ///         BindType = "service",
    ///         BindName = "minikube",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/aclBindingRule:AclBindingRule")]
    public partial class AclBindingRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the ACL auth method this rule apply.
        /// </summary>
        [Output("authMethod")]
        public Output<string> AuthMethod { get; private set; } = null!;

        /// <summary>
        /// The name to bind to a token at login-time.
        /// </summary>
        [Output("bindName")]
        public Output<string> BindName { get; private set; } = null!;

        /// <summary>
        /// Specifies the way the binding rule affects a token created at login.
        /// </summary>
        [Output("bindType")]
        public Output<string> BindType { get; private set; } = null!;

        /// <summary>
        /// The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
        /// </summary>
        [Output("bindVars")]
        public Output<Outputs.AclBindingRuleBindVars?> BindVars { get; private set; } = null!;

        /// <summary>
        /// A free form human readable description of the binding rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the binding rule within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The partition the ACL binding rule is associated with.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// The expression used to match this rule against valid identities returned from an auth method validation.
        /// </summary>
        [Output("selector")]
        public Output<string?> Selector { get; private set; } = null!;


        /// <summary>
        /// Create a AclBindingRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AclBindingRule(string name, AclBindingRuleArgs args, CustomResourceOptions? options = null)
            : base("consul:index/aclBindingRule:AclBindingRule", name, args ?? new AclBindingRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AclBindingRule(string name, Input<string> id, AclBindingRuleState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/aclBindingRule:AclBindingRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AclBindingRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AclBindingRule Get(string name, Input<string> id, AclBindingRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new AclBindingRule(name, id, state, options);
        }
    }

    public sealed class AclBindingRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the ACL auth method this rule apply.
        /// </summary>
        [Input("authMethod", required: true)]
        public Input<string> AuthMethod { get; set; } = null!;

        /// <summary>
        /// The name to bind to a token at login-time.
        /// </summary>
        [Input("bindName", required: true)]
        public Input<string> BindName { get; set; } = null!;

        /// <summary>
        /// Specifies the way the binding rule affects a token created at login.
        /// </summary>
        [Input("bindType", required: true)]
        public Input<string> BindType { get; set; } = null!;

        /// <summary>
        /// The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
        /// </summary>
        [Input("bindVars")]
        public Input<Inputs.AclBindingRuleBindVarsArgs>? BindVars { get; set; }

        /// <summary>
        /// A free form human readable description of the binding rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The namespace to create the binding rule within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition the ACL binding rule is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// The expression used to match this rule against valid identities returned from an auth method validation.
        /// </summary>
        [Input("selector")]
        public Input<string>? Selector { get; set; }

        public AclBindingRuleArgs()
        {
        }
        public static new AclBindingRuleArgs Empty => new AclBindingRuleArgs();
    }

    public sealed class AclBindingRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the ACL auth method this rule apply.
        /// </summary>
        [Input("authMethod")]
        public Input<string>? AuthMethod { get; set; }

        /// <summary>
        /// The name to bind to a token at login-time.
        /// </summary>
        [Input("bindName")]
        public Input<string>? BindName { get; set; }

        /// <summary>
        /// Specifies the way the binding rule affects a token created at login.
        /// </summary>
        [Input("bindType")]
        public Input<string>? BindType { get; set; }

        /// <summary>
        /// The variables used when binding rule type is `templated-policy`. Can be lightly templated using HIL `${foo}` syntax from available field names.
        /// </summary>
        [Input("bindVars")]
        public Input<Inputs.AclBindingRuleBindVarsGetArgs>? BindVars { get; set; }

        /// <summary>
        /// A free form human readable description of the binding rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The namespace to create the binding rule within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition the ACL binding rule is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// The expression used to match this rule against valid identities returned from an auth method validation.
        /// </summary>
        [Input("selector")]
        public Input<string>? Selector { get; set; }

        public AclBindingRuleState()
        {
        }
        public static new AclBindingRuleState Empty => new AclBindingRuleState();
    }
}
