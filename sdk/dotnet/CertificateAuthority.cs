// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// The `consul.CertificateAuthority` resource can be used to manage the configuration of the Certificate Authority used by [Consul Connect](https://www.consul.io/docs/connect/ca).
    /// 
    /// &gt; **Note:** The keys in the `config` argument must be using Camel case.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import consul:index/certificateAuthority:CertificateAuthority connect connect-ca
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/certificateAuthority:CertificateAuthority")]
    public partial class CertificateAuthority : global::Pulumi.CustomResource
    {
        [Output("config")]
        public Output<ImmutableDictionary<string, string>?> Config { get; private set; } = null!;

        [Output("configJson")]
        public Output<string?> ConfigJson { get; private set; } = null!;

        /// <summary>
        /// Specifies the CA provider type to use.
        /// </summary>
        [Output("connectProvider")]
        public Output<string> ConnectProvider { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateAuthority resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateAuthority(string name, CertificateAuthorityArgs args, CustomResourceOptions? options = null)
            : base("consul:index/certificateAuthority:CertificateAuthority", name, args ?? new CertificateAuthorityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateAuthority(string name, Input<string> id, CertificateAuthorityState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/certificateAuthority:CertificateAuthority", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateAuthority Get(string name, Input<string> id, CertificateAuthorityState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateAuthority(name, id, state, options);
        }
    }

    public sealed class CertificateAuthorityArgs : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<string>? _config;
        [Obsolete(@"The config attribute is deprecated, please use config_json instead.")]
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// Specifies the CA provider type to use.
        /// </summary>
        [Input("connectProvider", required: true)]
        public Input<string> ConnectProvider { get; set; } = null!;

        public CertificateAuthorityArgs()
        {
        }
        public static new CertificateAuthorityArgs Empty => new CertificateAuthorityArgs();
    }

    public sealed class CertificateAuthorityState : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<string>? _config;
        [Obsolete(@"The config attribute is deprecated, please use config_json instead.")]
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// Specifies the CA provider type to use.
        /// </summary>
        [Input("connectProvider")]
        public Input<string>? ConnectProvider { get; set; }

        public CertificateAuthorityState()
        {
        }
        public static new CertificateAuthorityState Empty => new CertificateAuthorityState();
    }
}
