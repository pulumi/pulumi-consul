// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// The `consul.CertificateAuthority` resource can be used to manage the configuration of
    /// the Certificate Authority used by [Consul Connect](https://www.consul.io/docs/connect/ca).
    /// 
    /// ## Example Usage
    /// 
    /// Use the built-in CA with specific TTL:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var connect = new Consul.CertificateAuthority("connect", new Consul.CertificateAuthorityArgs
    ///         {
    ///             Config = 
    ///             {
    ///                 { "IntermediateCertTTL", "8760h" },
    ///                 { "LeafCertTTL", "24h" },
    ///                 { "RotationPeriod", "2160h" },
    ///             },
    ///             ConnectProvider = "consul",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Use Vault to manage and sign certificates:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var connect = new Consul.CertificateAuthority("connect", new Consul.CertificateAuthorityArgs
    ///         {
    ///             Config = 
    ///             {
    ///                 { "address", "http://localhost:8200" },
    ///                 { "intermediate_pki_path", "connect-intermediate" },
    ///                 { "root_pki_path", "connect-root" },
    ///                 { "token", "..." },
    ///             },
    ///             ConnectProvider = "vault",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Use the [AWS Certificate Manager Private Certificate Authority](https://aws.amazon.com/certificate-manager/private-certificate-authority/):
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var connect = new Consul.CertificateAuthority("connect", new Consul.CertificateAuthorityArgs
    ///         {
    ///             Config = 
    ///             {
    ///                 { "existing_arn", "arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-123456789012" },
    ///             },
    ///             ConnectProvider = "aws-pca",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// `certificate_authority` can be imported
    /// 
    /// ```sh
    ///  $ pulumi import consul:index/certificateAuthority:CertificateAuthority connect connect-ca
    /// ```
    /// </summary>
    public partial class CertificateAuthority : Pulumi.CustomResource
    {
        /// <summary>
        /// The raw configuration to use for the chosen provider.
        /// </summary>
        [Output("config")]
        public Output<ImmutableDictionary<string, string>> Config { get; private set; } = null!;

        /// <summary>
        /// Specifies the CA provider type to use.
        /// </summary>
        [Output("connectProvider")]
        public Output<string> ConnectProvider { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateAuthority resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateAuthority(string name, CertificateAuthorityArgs args, CustomResourceOptions? options = null)
            : base("consul:index/certificateAuthority:CertificateAuthority", name, args ?? new CertificateAuthorityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateAuthority(string name, Input<string> id, CertificateAuthorityState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/certificateAuthority:CertificateAuthority", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateAuthority Get(string name, Input<string> id, CertificateAuthorityState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateAuthority(name, id, state, options);
        }
    }

    public sealed class CertificateAuthorityArgs : Pulumi.ResourceArgs
    {
        [Input("config", required: true)]
        private InputMap<string>? _config;

        /// <summary>
        /// The raw configuration to use for the chosen provider.
        /// </summary>
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        /// <summary>
        /// Specifies the CA provider type to use.
        /// </summary>
        [Input("connectProvider", required: true)]
        public Input<string> ConnectProvider { get; set; } = null!;

        public CertificateAuthorityArgs()
        {
        }
    }

    public sealed class CertificateAuthorityState : Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<string>? _config;

        /// <summary>
        /// The raw configuration to use for the chosen provider.
        /// </summary>
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        /// <summary>
        /// Specifies the CA provider type to use.
        /// </summary>
        [Input("connectProvider")]
        public Input<string>? ConnectProvider { get; set; }

        public CertificateAuthorityState()
        {
        }
    }
}
