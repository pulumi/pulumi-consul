// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// &gt; **NOTE:** This feature requires [Consul Enterprise](https://www.consul.io/docs/enterprise/index.html).
    /// 
    /// The `consul.License` resource provides datacenter-level management of
    /// the Consul Enterprise license. If ACLs are enabled then a token with operator
    /// privileges may be required in order to use this command.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var license = new Consul.License("license", new Consul.LicenseArgs
    ///         {
    ///             License = File.ReadAllText("license.hclic"),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class License : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the customer the license is attached to.
        /// </summary>
        [Output("customerId")]
        public Output<string> CustomerId { get; private set; } = null!;

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string?> Datacenter { get; private set; } = null!;

        /// <summary>
        /// The expiration time of the license.
        /// </summary>
        [Output("expirationTime")]
        public Output<string> ExpirationTime { get; private set; } = null!;

        /// <summary>
        /// The features for which the license is valid.
        /// </summary>
        [Output("features")]
        public Output<ImmutableArray<string>> Features { get; private set; } = null!;

        /// <summary>
        /// The metadata attached to the license.
        /// </summary>
        [Output("flags")]
        public Output<ImmutableDictionary<string, string>> Flags { get; private set; } = null!;

        /// <summary>
        /// The ID of the current installation.
        /// </summary>
        [Output("installationId")]
        public Output<string> InstallationId { get; private set; } = null!;

        /// <summary>
        /// The date the license was issued.
        /// </summary>
        [Output("issueTime")]
        public Output<string> IssueTime { get; private set; } = null!;

        /// <summary>
        /// The Consul license to use.
        /// </summary>
        [Output("license")]
        public Output<string> ConsulLicense { get; private set; } = null!;

        /// <summary>
        /// The ID of the license used.
        /// </summary>
        [Output("licenseId")]
        public Output<string> LicenseId { get; private set; } = null!;

        /// <summary>
        /// The product for which the license is valid.
        /// </summary>
        [Output("product")]
        public Output<string> Product { get; private set; } = null!;

        /// <summary>
        /// The start time of the license.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// Whether the license is valid.
        /// </summary>
        [Output("valid")]
        public Output<bool> Valid { get; private set; } = null!;

        /// <summary>
        /// A list of warning messages regarding the license validity.
        /// </summary>
        [Output("warnings")]
        public Output<ImmutableArray<string>> Warnings { get; private set; } = null!;


        /// <summary>
        /// Create a License resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public License(string name, LicenseArgs args, CustomResourceOptions? options = null)
            : base("consul:index/license:License", name, args ?? new LicenseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private License(string name, Input<string> id, LicenseState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/license:License", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing License resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static License Get(string name, Input<string> id, LicenseState? state = null, CustomResourceOptions? options = null)
        {
            return new License(name, id, state, options);
        }
    }

    public sealed class LicenseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The Consul license to use.
        /// </summary>
        [Input("license", required: true)]
        public Input<string> ConsulLicense { get; set; } = null!;

        public LicenseArgs()
        {
        }
    }

    public sealed class LicenseState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the customer the license is attached to.
        /// </summary>
        [Input("customerId")]
        public Input<string>? CustomerId { get; set; }

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The expiration time of the license.
        /// </summary>
        [Input("expirationTime")]
        public Input<string>? ExpirationTime { get; set; }

        [Input("features")]
        private InputList<string>? _features;

        /// <summary>
        /// The features for which the license is valid.
        /// </summary>
        public InputList<string> Features
        {
            get => _features ?? (_features = new InputList<string>());
            set => _features = value;
        }

        [Input("flags")]
        private InputMap<string>? _flags;

        /// <summary>
        /// The metadata attached to the license.
        /// </summary>
        public InputMap<string> Flags
        {
            get => _flags ?? (_flags = new InputMap<string>());
            set => _flags = value;
        }

        /// <summary>
        /// The ID of the current installation.
        /// </summary>
        [Input("installationId")]
        public Input<string>? InstallationId { get; set; }

        /// <summary>
        /// The date the license was issued.
        /// </summary>
        [Input("issueTime")]
        public Input<string>? IssueTime { get; set; }

        /// <summary>
        /// The Consul license to use.
        /// </summary>
        [Input("license")]
        public Input<string>? ConsulLicense { get; set; }

        /// <summary>
        /// The ID of the license used.
        /// </summary>
        [Input("licenseId")]
        public Input<string>? LicenseId { get; set; }

        /// <summary>
        /// The product for which the license is valid.
        /// </summary>
        [Input("product")]
        public Input<string>? Product { get; set; }

        /// <summary>
        /// The start time of the license.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// Whether the license is valid.
        /// </summary>
        [Input("valid")]
        public Input<bool>? Valid { get; set; }

        [Input("warnings")]
        private InputList<string>? _warnings;

        /// <summary>
        /// A list of warning messages regarding the license validity.
        /// </summary>
        public InputList<string> Warnings
        {
            get => _warnings ?? (_warnings = new InputList<string>());
            set => _warnings = value;
        }

        public LicenseState()
        {
        }
    }
}
