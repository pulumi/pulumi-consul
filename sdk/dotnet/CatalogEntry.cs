// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// !&gt; The `consul.CatalogEntry` resource has been deprecated in version 2.0.0 of the provider
    /// and will be removed in a future release. Please read the [upgrade guide](https://www.terraform.io/docs/providers/consul/guides/upgrading.html#deprecation-of-consul_catalog_entry)
    /// for more information.
    /// 
    /// Registers a node or service with the [Consul Catalog](https://www.consul.io/docs/agent/http/catalog.html#catalog_register).
    /// Currently, defining health checks is not supported.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var app = new Consul.CatalogEntry("app", new()
    ///     {
    ///         Address = "192.168.10.10",
    ///         Node = "foobar",
    ///         Services = 
    ///         {
    ///             { "address", "127.0.0.1" },
    ///             { "id", "redis1" },
    ///             { "name", "redis" },
    ///             { "port", 8000 },
    ///             { "tags", new[]
    ///             {
    ///                 "master",
    ///                 "v1",
    ///             } },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/catalogEntry:CatalogEntry")]
    public partial class CatalogEntry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The address of the node being added to,
        /// or referenced in the catalog.
        /// </summary>
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        /// <summary>
        /// The name of the node being added to, or
        /// referenced in the catalog.
        /// </summary>
        [Output("node")]
        public Output<string> Node { get; private set; } = null!;

        /// <summary>
        /// A service to optionally associated with
        /// the node. Supported values are documented below.
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.CatalogEntryService>> Services { get; private set; } = null!;

        /// <summary>
        /// ACL token.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;


        /// <summary>
        /// Create a CatalogEntry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CatalogEntry(string name, CatalogEntryArgs args, CustomResourceOptions? options = null)
            : base("consul:index/catalogEntry:CatalogEntry", name, args ?? new CatalogEntryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CatalogEntry(string name, Input<string> id, CatalogEntryState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/catalogEntry:CatalogEntry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CatalogEntry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CatalogEntry Get(string name, Input<string> id, CatalogEntryState? state = null, CustomResourceOptions? options = null)
        {
            return new CatalogEntry(name, id, state, options);
        }
    }

    public sealed class CatalogEntryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address of the node being added to,
        /// or referenced in the catalog.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The name of the node being added to, or
        /// referenced in the catalog.
        /// </summary>
        [Input("node", required: true)]
        public Input<string> Node { get; set; } = null!;

        [Input("services")]
        private InputList<Inputs.CatalogEntryServiceArgs>? _services;

        /// <summary>
        /// A service to optionally associated with
        /// the node. Supported values are documented below.
        /// </summary>
        public InputList<Inputs.CatalogEntryServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.CatalogEntryServiceArgs>());
            set => _services = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// ACL token.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public CatalogEntryArgs()
        {
        }
        public static new CatalogEntryArgs Empty => new CatalogEntryArgs();
    }

    public sealed class CatalogEntryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address of the node being added to,
        /// or referenced in the catalog.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The name of the node being added to, or
        /// referenced in the catalog.
        /// </summary>
        [Input("node")]
        public Input<string>? Node { get; set; }

        [Input("services")]
        private InputList<Inputs.CatalogEntryServiceGetArgs>? _services;

        /// <summary>
        /// A service to optionally associated with
        /// the node. Supported values are documented below.
        /// </summary>
        public InputList<Inputs.CatalogEntryServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.CatalogEntryServiceGetArgs>());
            set => _services = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// ACL token.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public CatalogEntryState()
        {
        }
        public static new CatalogEntryState Empty => new CatalogEntryState();
    }
}
