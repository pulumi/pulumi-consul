// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetAutopilotHealth
    {
        /// <summary>
        /// The `consul.getAutopilotHealth` data source returns
        /// [autopilot health information](https://www.consul.io/api/operator/autopilot.html#read-health)
        /// about the current Consul cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var read = Output.Create(Consul.GetAutopilotHealth.InvokeAsync());
        ///         this.Health = read.Apply(read =&gt; read.Healthy);
        ///     }
        /// 
        ///     [Output("health")]
        ///     public Output&lt;string&gt; Health { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAutopilotHealthResult> InvokeAsync(GetAutopilotHealthArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAutopilotHealthResult>("consul:index/getAutopilotHealth:getAutopilotHealth", args ?? new GetAutopilotHealthArgs(), options.WithVersion());
    }


    public sealed class GetAutopilotHealthArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the agent's
        /// default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public string? Datacenter { get; set; }

        public GetAutopilotHealthArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAutopilotHealthResult
    {
        public readonly string? Datacenter;
        /// <summary>
        /// The number of redundant healthy servers that could fail
        /// without causing an outage
        /// </summary>
        public readonly int FailureTolerance;
        /// <summary>
        /// Whether the server is healthy according to the current Autopilot
        /// configuration
        /// </summary>
        public readonly bool Healthy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of server health information. See below for details on the
        /// available information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAutopilotHealthServerResult> Servers;

        [OutputConstructor]
        private GetAutopilotHealthResult(
            string? datacenter,

            int failureTolerance,

            bool healthy,

            string id,

            ImmutableArray<Outputs.GetAutopilotHealthServerResult> servers)
        {
            Datacenter = datacenter;
            FailureTolerance = failureTolerance;
            Healthy = healthy;
            Id = id;
            Servers = servers;
        }
    }
}
