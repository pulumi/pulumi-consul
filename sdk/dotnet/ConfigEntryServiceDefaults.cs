// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dashboard = new Consul.ConfigEntryServiceDefaults("dashboard", new()
    ///     {
    ///         Name = "dashboard",
    ///         UpstreamConfigs = new[]
    ///         {
    ///             new Consul.Inputs.ConfigEntryServiceDefaultsUpstreamConfigArgs
    ///             {
    ///                 Defaults = 
    ///                 {
    ///                     { "meshGateways", new Consul.Inputs.ConfigEntryServiceDefaultsUpstreamConfigDefaultArgs
    ///                     {
    ///                         Mode = "local",
    ///                     } },
    ///                     { "limits", new Consul.Inputs.ConfigEntryServiceDefaultsUpstreamConfigDefaultArgs
    ///                     {
    ///                         MaxConnections = 512,
    ///                         MaxPendingRequests = 512,
    ///                         MaxConcurrentRequests = 512,
    ///                     } },
    ///                 },
    ///                 Overrides = new[]
    ///                 {
    ///                     new Consul.Inputs.ConfigEntryServiceDefaultsUpstreamConfigOverrideArgs
    ///                     {
    ///                         Name = "counting",
    ///                         MeshGateways = new[]
    ///                         {
    ///                             new Consul.Inputs.ConfigEntryServiceDefaultsUpstreamConfigOverrideMeshGatewayArgs
    ///                             {
    ///                                 Mode = "remote",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/configEntryServiceDefaults:ConfigEntryServiceDefaults")]
    public partial class ConfigEntryServiceDefaults : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the strategy for allocating inbound connections to the service across Envoy proxy threads.
        /// </summary>
        [Output("balanceInboundConnections")]
        public Output<string?> BalanceInboundConnections { get; private set; } = null!;

        /// <summary>
        /// Configures the destination for service traffic through terminating gateways.
        /// </summary>
        [Output("destinations")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceDefaultsDestination>> Destinations { get; private set; } = null!;

        /// <summary>
        /// List of extensions to modify Envoy proxy configuration.
        /// </summary>
        [Output("envoyExtensions")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceDefaultsEnvoyExtension>> EnvoyExtensions { get; private set; } = null!;

        /// <summary>
        /// Specifies default configurations for exposing HTTP paths through Envoy.
        /// </summary>
        [Output("exposes")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceDefaultsExpose>> Exposes { get; private set; } = null!;

        /// <summary>
        /// Specifies the TLS server name indication (SNI) when federating with an external system.
        /// </summary>
        [Output("externalSni")]
        public Output<string?> ExternalSni { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of milliseconds allowed for establishing connections to the local application instance before timing out.
        /// </summary>
        [Output("localConnectTimeoutMs")]
        public Output<int?> LocalConnectTimeoutMs { get; private set; } = null!;

        /// <summary>
        /// Specifies the timeout for HTTP requests to the local application instance.
        /// </summary>
        [Output("localRequestTimeoutMs")]
        public Output<int?> LocalRequestTimeoutMs { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of concurrent inbound connections to each service instance.
        /// </summary>
        [Output("maxInboundConnections")]
        public Output<int?> MaxInboundConnections { get; private set; } = null!;

        /// <summary>
        /// Specifies the default mesh gateway mode field for the service.
        /// </summary>
        [Output("meshGateways")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceDefaultsMeshGateway>> MeshGateways { get; private set; } = null!;

        /// <summary>
        /// Specifies a set of custom key-value pairs to add to the Consul KV store.
        /// </summary>
        [Output("meta")]
        public Output<ImmutableDictionary<string, string>?> Meta { get; private set; } = null!;

        /// <summary>
        /// Specifies a mode for how the service directs inbound and outbound traffic.
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// Controls whether mutual TLS is required for incoming connections to this service. This setting is only supported for services with transparent proxy enabled.
        /// </summary>
        [Output("mutualTlsMode")]
        public Output<string?> MutualTlsMode { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the service you are setting the defaults for.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the Consul namespace that the configuration entry applies to.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the name of the Consul admin partition that the configuration entry applies to. Refer to Admin Partitions for additional information.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// Specifies the default protocol for the service.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Controls configurations specific to proxies in transparent mode. Refer to Transparent Proxy Mode for additional information.
        /// </summary>
        [Output("transparentProxies")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceDefaultsTransparentProxy>> TransparentProxies { get; private set; } = null!;

        /// <summary>
        /// Controls default upstream connection settings and custom overrides for individual upstream services.
        /// </summary>
        [Output("upstreamConfigs")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceDefaultsUpstreamConfig>> UpstreamConfigs { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigEntryServiceDefaults resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigEntryServiceDefaults(string name, ConfigEntryServiceDefaultsArgs args, CustomResourceOptions? options = null)
            : base("consul:index/configEntryServiceDefaults:ConfigEntryServiceDefaults", name, args ?? new ConfigEntryServiceDefaultsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigEntryServiceDefaults(string name, Input<string> id, ConfigEntryServiceDefaultsState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/configEntryServiceDefaults:ConfigEntryServiceDefaults", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigEntryServiceDefaults resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigEntryServiceDefaults Get(string name, Input<string> id, ConfigEntryServiceDefaultsState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigEntryServiceDefaults(name, id, state, options);
        }
    }

    public sealed class ConfigEntryServiceDefaultsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the strategy for allocating inbound connections to the service across Envoy proxy threads.
        /// </summary>
        [Input("balanceInboundConnections")]
        public Input<string>? BalanceInboundConnections { get; set; }

        [Input("destinations")]
        private InputList<Inputs.ConfigEntryServiceDefaultsDestinationArgs>? _destinations;

        /// <summary>
        /// Configures the destination for service traffic through terminating gateways.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsDestinationArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.ConfigEntryServiceDefaultsDestinationArgs>());
            set => _destinations = value;
        }

        [Input("envoyExtensions")]
        private InputList<Inputs.ConfigEntryServiceDefaultsEnvoyExtensionArgs>? _envoyExtensions;

        /// <summary>
        /// List of extensions to modify Envoy proxy configuration.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsEnvoyExtensionArgs> EnvoyExtensions
        {
            get => _envoyExtensions ?? (_envoyExtensions = new InputList<Inputs.ConfigEntryServiceDefaultsEnvoyExtensionArgs>());
            set => _envoyExtensions = value;
        }

        [Input("exposes", required: true)]
        private InputList<Inputs.ConfigEntryServiceDefaultsExposeArgs>? _exposes;

        /// <summary>
        /// Specifies default configurations for exposing HTTP paths through Envoy.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsExposeArgs> Exposes
        {
            get => _exposes ?? (_exposes = new InputList<Inputs.ConfigEntryServiceDefaultsExposeArgs>());
            set => _exposes = value;
        }

        /// <summary>
        /// Specifies the TLS server name indication (SNI) when federating with an external system.
        /// </summary>
        [Input("externalSni")]
        public Input<string>? ExternalSni { get; set; }

        /// <summary>
        /// Specifies the number of milliseconds allowed for establishing connections to the local application instance before timing out.
        /// </summary>
        [Input("localConnectTimeoutMs")]
        public Input<int>? LocalConnectTimeoutMs { get; set; }

        /// <summary>
        /// Specifies the timeout for HTTP requests to the local application instance.
        /// </summary>
        [Input("localRequestTimeoutMs")]
        public Input<int>? LocalRequestTimeoutMs { get; set; }

        /// <summary>
        /// Specifies the maximum number of concurrent inbound connections to each service instance.
        /// </summary>
        [Input("maxInboundConnections")]
        public Input<int>? MaxInboundConnections { get; set; }

        [Input("meshGateways")]
        private InputList<Inputs.ConfigEntryServiceDefaultsMeshGatewayArgs>? _meshGateways;

        /// <summary>
        /// Specifies the default mesh gateway mode field for the service.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsMeshGatewayArgs> MeshGateways
        {
            get => _meshGateways ?? (_meshGateways = new InputList<Inputs.ConfigEntryServiceDefaultsMeshGatewayArgs>());
            set => _meshGateways = value;
        }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies a set of custom key-value pairs to add to the Consul KV store.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// Specifies a mode for how the service directs inbound and outbound traffic.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Controls whether mutual TLS is required for incoming connections to this service. This setting is only supported for services with transparent proxy enabled.
        /// </summary>
        [Input("mutualTlsMode")]
        public Input<string>? MutualTlsMode { get; set; }

        /// <summary>
        /// Specifies the name of the service you are setting the defaults for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the Consul namespace that the configuration entry applies to.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the name of the name of the Consul admin partition that the configuration entry applies to. Refer to Admin Partitions for additional information.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Specifies the default protocol for the service.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("transparentProxies")]
        private InputList<Inputs.ConfigEntryServiceDefaultsTransparentProxyArgs>? _transparentProxies;

        /// <summary>
        /// Controls configurations specific to proxies in transparent mode. Refer to Transparent Proxy Mode for additional information.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsTransparentProxyArgs> TransparentProxies
        {
            get => _transparentProxies ?? (_transparentProxies = new InputList<Inputs.ConfigEntryServiceDefaultsTransparentProxyArgs>());
            set => _transparentProxies = value;
        }

        [Input("upstreamConfigs")]
        private InputList<Inputs.ConfigEntryServiceDefaultsUpstreamConfigArgs>? _upstreamConfigs;

        /// <summary>
        /// Controls default upstream connection settings and custom overrides for individual upstream services.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsUpstreamConfigArgs> UpstreamConfigs
        {
            get => _upstreamConfigs ?? (_upstreamConfigs = new InputList<Inputs.ConfigEntryServiceDefaultsUpstreamConfigArgs>());
            set => _upstreamConfigs = value;
        }

        public ConfigEntryServiceDefaultsArgs()
        {
        }
        public static new ConfigEntryServiceDefaultsArgs Empty => new ConfigEntryServiceDefaultsArgs();
    }

    public sealed class ConfigEntryServiceDefaultsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the strategy for allocating inbound connections to the service across Envoy proxy threads.
        /// </summary>
        [Input("balanceInboundConnections")]
        public Input<string>? BalanceInboundConnections { get; set; }

        [Input("destinations")]
        private InputList<Inputs.ConfigEntryServiceDefaultsDestinationGetArgs>? _destinations;

        /// <summary>
        /// Configures the destination for service traffic through terminating gateways.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsDestinationGetArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.ConfigEntryServiceDefaultsDestinationGetArgs>());
            set => _destinations = value;
        }

        [Input("envoyExtensions")]
        private InputList<Inputs.ConfigEntryServiceDefaultsEnvoyExtensionGetArgs>? _envoyExtensions;

        /// <summary>
        /// List of extensions to modify Envoy proxy configuration.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsEnvoyExtensionGetArgs> EnvoyExtensions
        {
            get => _envoyExtensions ?? (_envoyExtensions = new InputList<Inputs.ConfigEntryServiceDefaultsEnvoyExtensionGetArgs>());
            set => _envoyExtensions = value;
        }

        [Input("exposes")]
        private InputList<Inputs.ConfigEntryServiceDefaultsExposeGetArgs>? _exposes;

        /// <summary>
        /// Specifies default configurations for exposing HTTP paths through Envoy.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsExposeGetArgs> Exposes
        {
            get => _exposes ?? (_exposes = new InputList<Inputs.ConfigEntryServiceDefaultsExposeGetArgs>());
            set => _exposes = value;
        }

        /// <summary>
        /// Specifies the TLS server name indication (SNI) when federating with an external system.
        /// </summary>
        [Input("externalSni")]
        public Input<string>? ExternalSni { get; set; }

        /// <summary>
        /// Specifies the number of milliseconds allowed for establishing connections to the local application instance before timing out.
        /// </summary>
        [Input("localConnectTimeoutMs")]
        public Input<int>? LocalConnectTimeoutMs { get; set; }

        /// <summary>
        /// Specifies the timeout for HTTP requests to the local application instance.
        /// </summary>
        [Input("localRequestTimeoutMs")]
        public Input<int>? LocalRequestTimeoutMs { get; set; }

        /// <summary>
        /// Specifies the maximum number of concurrent inbound connections to each service instance.
        /// </summary>
        [Input("maxInboundConnections")]
        public Input<int>? MaxInboundConnections { get; set; }

        [Input("meshGateways")]
        private InputList<Inputs.ConfigEntryServiceDefaultsMeshGatewayGetArgs>? _meshGateways;

        /// <summary>
        /// Specifies the default mesh gateway mode field for the service.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsMeshGatewayGetArgs> MeshGateways
        {
            get => _meshGateways ?? (_meshGateways = new InputList<Inputs.ConfigEntryServiceDefaultsMeshGatewayGetArgs>());
            set => _meshGateways = value;
        }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies a set of custom key-value pairs to add to the Consul KV store.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// Specifies a mode for how the service directs inbound and outbound traffic.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Controls whether mutual TLS is required for incoming connections to this service. This setting is only supported for services with transparent proxy enabled.
        /// </summary>
        [Input("mutualTlsMode")]
        public Input<string>? MutualTlsMode { get; set; }

        /// <summary>
        /// Specifies the name of the service you are setting the defaults for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the Consul namespace that the configuration entry applies to.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the name of the name of the Consul admin partition that the configuration entry applies to. Refer to Admin Partitions for additional information.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Specifies the default protocol for the service.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("transparentProxies")]
        private InputList<Inputs.ConfigEntryServiceDefaultsTransparentProxyGetArgs>? _transparentProxies;

        /// <summary>
        /// Controls configurations specific to proxies in transparent mode. Refer to Transparent Proxy Mode for additional information.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsTransparentProxyGetArgs> TransparentProxies
        {
            get => _transparentProxies ?? (_transparentProxies = new InputList<Inputs.ConfigEntryServiceDefaultsTransparentProxyGetArgs>());
            set => _transparentProxies = value;
        }

        [Input("upstreamConfigs")]
        private InputList<Inputs.ConfigEntryServiceDefaultsUpstreamConfigGetArgs>? _upstreamConfigs;

        /// <summary>
        /// Controls default upstream connection settings and custom overrides for individual upstream services.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceDefaultsUpstreamConfigGetArgs> UpstreamConfigs
        {
            get => _upstreamConfigs ?? (_upstreamConfigs = new InputList<Inputs.ConfigEntryServiceDefaultsUpstreamConfigGetArgs>());
            set => _upstreamConfigs = value;
        }

        public ConfigEntryServiceDefaultsState()
        {
        }
        public static new ConfigEntryServiceDefaultsState Empty => new ConfigEntryServiceDefaultsState();
    }
}
