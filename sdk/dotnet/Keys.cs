// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var app = new Consul.Keys("app", new()
    ///     {
    ///         Datacenter = "nyc1",
    ///         Token = "abcd",
    ///         KeysCollection = new[]
    ///         {
    ///             new Consul.Inputs.KeysKeyArgs
    ///             {
    ///                 Path = "service/app/elb_address",
    ///                 Value = appAwsElb.DnsName,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [ConsulResourceType("consul:index/keys:Keys")]
    public partial class Keys : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        /// <summary>
        /// Specifies a key in Consul to be written.
        /// Supported values documented below.
        /// </summary>
        [Output("keys")]
        public Output<ImmutableArray<Outputs.KeysKey>> KeysCollection { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the keys within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The partition to create the keys within.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;

        [Output("var")]
        public Output<ImmutableDictionary<string, string>> Var { get; private set; } = null!;


        /// <summary>
        /// Create a Keys resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Keys(string name, KeysArgs? args = null, CustomResourceOptions? options = null)
            : base("consul:index/keys:Keys", name, args ?? new KeysArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Keys(string name, Input<string> id, KeysState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/keys:Keys", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Keys resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Keys Get(string name, Input<string> id, KeysState? state = null, CustomResourceOptions? options = null)
        {
            return new Keys(name, id, state, options);
        }
    }

    public sealed class KeysArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("keys")]
        private InputList<Inputs.KeysKeyArgs>? _keys;

        /// <summary>
        /// Specifies a key in Consul to be written.
        /// Supported values documented below.
        /// </summary>
        public InputList<Inputs.KeysKeyArgs> KeysCollection
        {
            get => _keys ?? (_keys = new InputList<Inputs.KeysKeyArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The namespace to create the keys within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition to create the keys within.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public KeysArgs()
        {
        }
        public static new KeysArgs Empty => new KeysArgs();
    }

    public sealed class KeysState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("keys")]
        private InputList<Inputs.KeysKeyGetArgs>? _keys;

        /// <summary>
        /// Specifies a key in Consul to be written.
        /// Supported values documented below.
        /// </summary>
        public InputList<Inputs.KeysKeyGetArgs> KeysCollection
        {
            get => _keys ?? (_keys = new InputList<Inputs.KeysKeyGetArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The namespace to create the keys within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition to create the keys within.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("var")]
        private InputMap<string>? _var;
        public InputMap<string> Var
        {
            get => _var ?? (_var = new InputMap<string>());
            set => _var = value;
        }

        public KeysState()
        {
        }
        public static new KeysState Empty => new KeysState();
    }
}
