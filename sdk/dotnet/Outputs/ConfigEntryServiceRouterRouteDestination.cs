// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul.Outputs
{

    [OutputType]
    public sealed class ConfigEntryServiceRouterRouteDestination
    {
        /// <summary>
        /// Specifies the total amount of time permitted for the request stream to be idle.
        /// </summary>
        public readonly string? IdleTimeout;
        /// <summary>
        /// Specifies the Consul namespace to resolve the service from instead of the current namespace.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// Specifies the number of times to retry the request when a retry condition occurs.
        /// </summary>
        public readonly int? NumRetries;
        /// <summary>
        /// Specifies the Consul admin partition to resolve the service from instead of the current partition.
        /// </summary>
        public readonly string? Partition;
        /// <summary>
        /// Specifies rewrites to the HTTP request path before proxying it to its final destination.
        /// </summary>
        public readonly string? PrefixRewrite;
        /// <summary>
        /// Specifies a set of HTTP-specific header modification rules applied to requests routed with the service router.
        /// </summary>
        public readonly Outputs.ConfigEntryServiceRouterRouteDestinationRequestHeaders? RequestHeaders;
        /// <summary>
        /// Specifies the total amount of time permitted for the entire downstream request to be processed, including retry attempts.
        /// </summary>
        public readonly string? RequestTimeout;
        /// <summary>
        /// Specifies a set of HTTP-specific header modification rules applied to responses routed with the service router.
        /// </summary>
        public readonly Outputs.ConfigEntryServiceRouterRouteDestinationResponseHeaders? ResponseHeaders;
        /// <summary>
        /// Specifies that connection failure errors that trigger a retry request.
        /// </summary>
        public readonly bool? RetryOnConnectFailure;
        /// <summary>
        /// Specifies a list of integers for HTTP response status codes that trigger a retry request.
        /// </summary>
        public readonly ImmutableArray<int> RetryOnStatusCodes;
        /// <summary>
        /// Specifies a list of conditions for Consul to retry requests based on the response from an upstream service.
        /// </summary>
        public readonly ImmutableArray<string> RetryOns;
        /// <summary>
        /// Specifies the name of the service to resolve.
        /// </summary>
        public readonly string? Service;
        /// <summary>
        /// Specifies a named subset of the given service to resolve instead of the one defined as that service's `default_subset` in the service resolver configuration entry.
        /// </summary>
        public readonly string? ServiceSubset;

        [OutputConstructor]
        private ConfigEntryServiceRouterRouteDestination(
            string? idleTimeout,

            string? @namespace,

            int? numRetries,

            string? partition,

            string? prefixRewrite,

            Outputs.ConfigEntryServiceRouterRouteDestinationRequestHeaders? requestHeaders,

            string? requestTimeout,

            Outputs.ConfigEntryServiceRouterRouteDestinationResponseHeaders? responseHeaders,

            bool? retryOnConnectFailure,

            ImmutableArray<int> retryOnStatusCodes,

            ImmutableArray<string> retryOns,

            string? service,

            string? serviceSubset)
        {
            IdleTimeout = idleTimeout;
            Namespace = @namespace;
            NumRetries = numRetries;
            Partition = partition;
            PrefixRewrite = prefixRewrite;
            RequestHeaders = requestHeaders;
            RequestTimeout = requestTimeout;
            ResponseHeaders = responseHeaders;
            RetryOnConnectFailure = retryOnConnectFailure;
            RetryOnStatusCodes = retryOnStatusCodes;
            RetryOns = retryOns;
            Service = service;
            ServiceSubset = serviceSubset;
        }
    }
}
