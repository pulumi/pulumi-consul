// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul.Outputs
{

    [OutputType]
    public sealed class ConfigEntryServiceIntentionsSourcePermissionHttpHeader
    {
        /// <summary>
        /// Specifies a value for the header key set in the Name field. If the request header value matches the Exact value, Consul applies the permission.
        /// </summary>
        public readonly string? Exact;
        /// <summary>
        /// Inverts the matching logic configured in the Header.
        /// </summary>
        public readonly bool? Invert;
        /// <summary>
        /// Specifies the name of a JWT provider defined in the Name field of the jwt-provider configuration entry.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies a prefix value for the header key set in the Name field.
        /// </summary>
        public readonly string? Prefix;
        /// <summary>
        /// Enables a match if the header configured in the Name field appears in the request. Consul matches on any value as long as the header key appears in the request.
        /// </summary>
        public readonly bool? Present;
        /// <summary>
        /// Specifies a regular expression pattern as the value for the header key set in the Name field.
        /// </summary>
        public readonly string? Regex;
        /// <summary>
        /// Specifies a suffix value for the header key set in the Name field.
        /// </summary>
        public readonly string? Suffix;

        [OutputConstructor]
        private ConfigEntryServiceIntentionsSourcePermissionHttpHeader(
            string? exact,

            bool? invert,

            string name,

            string? prefix,

            bool? present,

            string? regex,

            string? suffix)
        {
            Exact = exact;
            Invert = invert;
            Name = name;
            Prefix = prefix;
            Present = present;
            Regex = regex;
            Suffix = suffix;
        }
    }
}
