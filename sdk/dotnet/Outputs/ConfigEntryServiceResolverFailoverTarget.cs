// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul.Outputs
{

    [OutputType]
    public sealed class ConfigEntryServiceResolverFailoverTarget
    {
        /// <summary>
        /// Specifies the WAN federated datacenter to use for the failover target. If empty, the current datacenter is used.
        /// </summary>
        public readonly string? Datacenter;
        /// <summary>
        /// Specifies the namespace at the failover location where the failover services are deployed.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// Specifies the admin partition within the same datacenter to use for the failover target. If empty, the default partition is used.
        /// </summary>
        public readonly string? Partition;
        /// <summary>
        /// Specifies the destination cluster peer to resolve the target service name from.
        /// </summary>
        public readonly string? Peer;
        /// <summary>
        /// Specifies the name of the service to resolve at the failover location during a failover scenario.
        /// </summary>
        public readonly string? Service;
        /// <summary>
        /// Specifies the name of a subset of service instances to resolve at the failover location during a failover scenario.
        /// </summary>
        public readonly string? ServiceSubset;

        [OutputConstructor]
        private ConfigEntryServiceResolverFailoverTarget(
            string? datacenter,

            string? @namespace,

            string? partition,

            string? peer,

            string? service,

            string? serviceSubset)
        {
            Datacenter = datacenter;
            Namespace = @namespace;
            Partition = partition;
            Peer = peer;
            Service = service;
            ServiceSubset = serviceSubset;
        }
    }
}
