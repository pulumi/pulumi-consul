// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul.Outputs
{

    [OutputType]
    public sealed class ConfigEntryServiceRouterRouteMatchHttpHeader
    {
        /// <summary>
        /// Specifies that a request matches when the header with the given name is this exact value.
        /// </summary>
        public readonly string? Exact;
        /// <summary>
        /// Specifies that the logic for the HTTP header match should be inverted.
        /// </summary>
        public readonly bool? Invert;
        /// <summary>
        /// Specifies the name of the HTTP header to match.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Specifies that a request matches when the header with the given name has this prefix.
        /// </summary>
        public readonly string? Prefix;
        /// <summary>
        /// Specifies that a request matches when the value in the `Name` argument is present anywhere in the HTTP header.
        /// </summary>
        public readonly bool? Present;
        /// <summary>
        /// Specifies that a request matches when the header with the given name matches this regular expression.
        /// </summary>
        public readonly string? Regex;
        /// <summary>
        /// Specifies that a request matches when the header with the given name has this suffix.
        /// </summary>
        public readonly string? Suffix;

        [OutputConstructor]
        private ConfigEntryServiceRouterRouteMatchHttpHeader(
            string? exact,

            bool? invert,

            string? name,

            string? prefix,

            bool? present,

            string? regex,

            string? suffix)
        {
            Exact = exact;
            Invert = invert;
            Name = name;
            Prefix = prefix;
            Present = present;
            Regex = regex;
            Suffix = suffix;
        }
    }
}
