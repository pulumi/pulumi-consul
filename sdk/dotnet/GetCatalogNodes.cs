// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static partial class Invokes
    {
        public static Task<GetCatalogNodesResult> GetCatalogNodes(GetCatalogNodesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCatalogNodesResult>("consul:index/getCatalogNodes:getCatalogNodes", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetCatalogNodesArgs : Pulumi.InvokeArgs
    {
        [Input("queryOptions")]
        private List<Inputs.GetCatalogNodesQueryOptionsArgs>? _queryOptions;
        public List<Inputs.GetCatalogNodesQueryOptionsArgs> QueryOptions
        {
            get => _queryOptions ?? (_queryOptions = new List<Inputs.GetCatalogNodesQueryOptionsArgs>());
            set => _queryOptions = value;
        }

        public GetCatalogNodesArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetCatalogNodesResult
    {
        public readonly string Datacenter;
        public readonly ImmutableArray<string> NodeIds;
        public readonly ImmutableArray<string> NodeNames;
        public readonly ImmutableArray<Outputs.GetCatalogNodesNodesResult> Nodes;
        public readonly ImmutableArray<Outputs.GetCatalogNodesQueryOptionsResult> QueryOptions;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetCatalogNodesResult(
            string datacenter,
            ImmutableArray<string> nodeIds,
            ImmutableArray<string> nodeNames,
            ImmutableArray<Outputs.GetCatalogNodesNodesResult> nodes,
            ImmutableArray<Outputs.GetCatalogNodesQueryOptionsResult> queryOptions,
            string id)
        {
            Datacenter = datacenter;
            NodeIds = nodeIds;
            NodeNames = nodeNames;
            Nodes = nodes;
            QueryOptions = queryOptions;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetCatalogNodesQueryOptionsArgs : Pulumi.InvokeArgs
    {
        [Input("allowStale")]
        public bool? AllowStale { get; set; }

        [Input("datacenter")]
        public string? Datacenter { get; set; }

        [Input("near")]
        public string? Near { get; set; }

        [Input("nodeMeta")]
        private Dictionary<string, object>? _nodeMeta;
        public Dictionary<string, object> NodeMeta
        {
            get => _nodeMeta ?? (_nodeMeta = new Dictionary<string, object>());
            set => _nodeMeta = value;
        }

        [Input("requireConsistent")]
        public bool? RequireConsistent { get; set; }

        [Input("token")]
        public string? Token { get; set; }

        [Input("waitIndex")]
        public int? WaitIndex { get; set; }

        [Input("waitTime")]
        public string? WaitTime { get; set; }

        public GetCatalogNodesQueryOptionsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetCatalogNodesNodesResult
    {
        public readonly string Address;
        public readonly string Id;
        public readonly ImmutableDictionary<string, object> Meta;
        public readonly string Name;
        public readonly GetCatalogNodesNodesTaggedAddressesResult TaggedAddresses;

        [OutputConstructor]
        private GetCatalogNodesNodesResult(
            string address,
            string id,
            ImmutableDictionary<string, object> meta,
            string name,
            GetCatalogNodesNodesTaggedAddressesResult taggedAddresses)
        {
            Address = address;
            Id = id;
            Meta = meta;
            Name = name;
            TaggedAddresses = taggedAddresses;
        }
    }

    [OutputType]
    public sealed class GetCatalogNodesNodesTaggedAddressesResult
    {
        public readonly string Lan;
        public readonly string Wan;

        [OutputConstructor]
        private GetCatalogNodesNodesTaggedAddressesResult(
            string lan,
            string wan)
        {
            Lan = lan;
            Wan = wan;
        }
    }

    [OutputType]
    public sealed class GetCatalogNodesQueryOptionsResult
    {
        public readonly bool? AllowStale;
        public readonly string? Datacenter;
        public readonly string? Near;
        public readonly ImmutableDictionary<string, object>? NodeMeta;
        public readonly bool? RequireConsistent;
        public readonly string? Token;
        public readonly int? WaitIndex;
        public readonly string? WaitTime;

        [OutputConstructor]
        private GetCatalogNodesQueryOptionsResult(
            bool? allowStale,
            string? datacenter,
            string? near,
            ImmutableDictionary<string, object>? nodeMeta,
            bool? requireConsistent,
            string? token,
            int? waitIndex,
            string? waitTime)
        {
            AllowStale = allowStale;
            Datacenter = datacenter;
            Near = near;
            NodeMeta = nodeMeta;
            RequireConsistent = requireConsistent;
            Token = token;
            WaitIndex = waitIndex;
            WaitTime = waitTime;
        }
    }
    }
}
