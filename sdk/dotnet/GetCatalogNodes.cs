// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    [Obsolete(@"getCatalogNodes has been deprecated in favor of getNodes")]
    public static class GetCatalogNodes
    {
        /// <summary>
        /// The `consul.getNodes` data source returns a list of Consul nodes that have
        /// been registered with the Consul cluster in a given datacenter.  By specifying a
        /// different datacenter in the `QueryOptions` it is possible to retrieve a list of
        /// nodes from a different WAN-attached Consul datacenter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// using Example = Pulumi.Example;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var read_dc1_nodes = Consul.GetNodes.Invoke(new()
        ///     {
        ///         QueryOptions = new[]
        ///         {
        ///             new Consul.Inputs.GetNodesQueryOptionInputArgs
        ///             {
        ///                 Datacenter = "dc1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Set the description to a whitespace delimited list of the node names
        ///     var app = new Example.Index.Resource("app", new()
        ///     {
        ///         Description = Std.Join.Invoke(new()
        ///         {
        ///             Separator = " ",
        ///             Input = Std.Formatlist.Invoke(new()
        ///             {
        ///                 Input = "%s",
        ///                 Args = new[]
        ///                 {
        ///                     nodeNames,
        ///                 },
        ///             }).Result,
        ///         }).Result,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCatalogNodesResult> InvokeAsync(GetCatalogNodesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCatalogNodesResult>("consul:index/getCatalogNodes:getCatalogNodes", args ?? new GetCatalogNodesArgs(), options.WithDefaults());

        /// <summary>
        /// The `consul.getNodes` data source returns a list of Consul nodes that have
        /// been registered with the Consul cluster in a given datacenter.  By specifying a
        /// different datacenter in the `QueryOptions` it is possible to retrieve a list of
        /// nodes from a different WAN-attached Consul datacenter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// using Example = Pulumi.Example;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var read_dc1_nodes = Consul.GetNodes.Invoke(new()
        ///     {
        ///         QueryOptions = new[]
        ///         {
        ///             new Consul.Inputs.GetNodesQueryOptionInputArgs
        ///             {
        ///                 Datacenter = "dc1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Set the description to a whitespace delimited list of the node names
        ///     var app = new Example.Index.Resource("app", new()
        ///     {
        ///         Description = Std.Join.Invoke(new()
        ///         {
        ///             Separator = " ",
        ///             Input = Std.Formatlist.Invoke(new()
        ///             {
        ///                 Input = "%s",
        ///                 Args = new[]
        ///                 {
        ///                     nodeNames,
        ///                 },
        ///             }).Result,
        ///         }).Result,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogNodesResult> Invoke(GetCatalogNodesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogNodesResult>("consul:index/getCatalogNodes:getCatalogNodes", args ?? new GetCatalogNodesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `consul.getNodes` data source returns a list of Consul nodes that have
        /// been registered with the Consul cluster in a given datacenter.  By specifying a
        /// different datacenter in the `QueryOptions` it is possible to retrieve a list of
        /// nodes from a different WAN-attached Consul datacenter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// using Example = Pulumi.Example;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var read_dc1_nodes = Consul.GetNodes.Invoke(new()
        ///     {
        ///         QueryOptions = new[]
        ///         {
        ///             new Consul.Inputs.GetNodesQueryOptionInputArgs
        ///             {
        ///                 Datacenter = "dc1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Set the description to a whitespace delimited list of the node names
        ///     var app = new Example.Index.Resource("app", new()
        ///     {
        ///         Description = Std.Join.Invoke(new()
        ///         {
        ///             Separator = " ",
        ///             Input = Std.Formatlist.Invoke(new()
        ///             {
        ///                 Input = "%s",
        ///                 Args = new[]
        ///                 {
        ///                     nodeNames,
        ///                 },
        ///             }).Result,
        ///         }).Result,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogNodesResult> Invoke(GetCatalogNodesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogNodesResult>("consul:index/getCatalogNodes:getCatalogNodes", args ?? new GetCatalogNodesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogNodesArgs : global::Pulumi.InvokeArgs
    {
        [Input("queryOptions")]
        private List<Inputs.GetCatalogNodesQueryOptionArgs>? _queryOptions;

        /// <summary>
        /// See below.
        /// </summary>
        public List<Inputs.GetCatalogNodesQueryOptionArgs> QueryOptions
        {
            get => _queryOptions ?? (_queryOptions = new List<Inputs.GetCatalogNodesQueryOptionArgs>());
            set => _queryOptions = value;
        }

        public GetCatalogNodesArgs()
        {
        }
        public static new GetCatalogNodesArgs Empty => new GetCatalogNodesArgs();
    }

    public sealed class GetCatalogNodesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("queryOptions")]
        private InputList<Inputs.GetCatalogNodesQueryOptionInputArgs>? _queryOptions;

        /// <summary>
        /// See below.
        /// </summary>
        public InputList<Inputs.GetCatalogNodesQueryOptionInputArgs> QueryOptions
        {
            get => _queryOptions ?? (_queryOptions = new InputList<Inputs.GetCatalogNodesQueryOptionInputArgs>());
            set => _queryOptions = value;
        }

        public GetCatalogNodesInvokeArgs()
        {
        }
        public static new GetCatalogNodesInvokeArgs Empty => new GetCatalogNodesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogNodesResult
    {
        /// <summary>
        /// The datacenter the keys are being read from to.
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of the Consul node IDs.
        /// </summary>
        public readonly ImmutableArray<string> NodeIds;
        /// <summary>
        /// A list of the Consul node names.
        /// </summary>
        public readonly ImmutableArray<string> NodeNames;
        /// <summary>
        /// A list of nodes and details about each Consul agent.  The list of
        /// per-node attributes is detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCatalogNodesNodeResult> Nodes;
        public readonly ImmutableArray<Outputs.GetCatalogNodesQueryOptionResult> QueryOptions;

        [OutputConstructor]
        private GetCatalogNodesResult(
            string datacenter,

            string id,

            ImmutableArray<string> nodeIds,

            ImmutableArray<string> nodeNames,

            ImmutableArray<Outputs.GetCatalogNodesNodeResult> nodes,

            ImmutableArray<Outputs.GetCatalogNodesQueryOptionResult> queryOptions)
        {
            Datacenter = datacenter;
            Id = id;
            NodeIds = nodeIds;
            NodeNames = nodeNames;
            Nodes = nodes;
            QueryOptions = queryOptions;
        }
    }
}
