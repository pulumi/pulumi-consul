// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// The [Configuration Entry](https://www.consul.io/docs/agent/config_entries.html)
    /// resource can be used to provide cluster-wide defaults for various aspects of
    /// Consul.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var proxyDefaults = new Consul.ConfigEntry("proxyDefaults", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "proxy-defaults",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Config", new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     { "local_connect_timeout_ms", 1000 },
    ///                     { "handshake_timeout_ms", 10000 },
    ///                 } },
    ///             }),
    ///         });
    ///         var web = new Consul.ConfigEntry("web", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "service-defaults",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Protocol", "http" },
    ///             }),
    ///         });
    ///         var admin = new Consul.ConfigEntry("admin", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "service-defaults",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Protocol", "http" },
    ///             }),
    ///         });
    ///         var serviceResolver = new Consul.ConfigEntry("serviceResolver", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "service-resolver",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "DefaultSubset", "v1" },
    ///                 { "Subsets", new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     { "v1", new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         { "Filter", "Service.Meta.version == v1" },
    ///                     } },
    ///                     { "v2", new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         { "Filter", "Service.Meta.version == v2" },
    ///                     } },
    ///                 } },
    ///             }),
    ///         });
    ///         var serviceSplitter = new Consul.ConfigEntry("serviceSplitter", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "service-splitter",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Splits", new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "Weight", 90 },
    ///                             { "ServiceSubset", "v1" },
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "Weight", 10 },
    ///                             { "ServiceSubset", "v2" },
    ///                         },
    ///                     }
    ///                  },
    ///             }),
    ///         });
    ///         var serviceRouter = new Consul.ConfigEntry("serviceRouter", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "service-router",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Routes", new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "Match", new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 { "HTTP", new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     { "PathPrefix", "/admin" },
    ///                                 } },
    ///                             } },
    ///                             { "Destination", new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 { "Service", "admin" },
    ///                             } },
    ///                         },
    ///                     }
    ///                  },
    ///             }),
    ///         });
    ///         var ingressGateway = new Consul.ConfigEntry("ingressGateway", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "ingress-gateway",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "TLS", new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     { "Enabled", true },
    ///                 } },
    ///                 { "Listeners", new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "Port", 8000 },
    ///                             { "Protocol", "http" },
    ///                             { "Services", new[]
    ///                                 {
    ///                                     new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         { "Name", "*" },
    ///                                     },
    ///                                 }
    ///                              },
    ///                         },
    ///                     }
    ///                  },
    ///             }),
    ///         });
    ///         var terminatingGateway = new Consul.ConfigEntry("terminatingGateway", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "terminating-gateway",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Services", new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "Name", "billing" },
    ///                         },
    ///                     }
    ///                  },
    ///             }),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### `service-intentions` config entry
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var serviceIntentions = new Consul.ConfigEntry("serviceIntentions", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "service-intentions",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Sources", new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "Action", "allow" },
    ///                             { "Name", "frontend-webapp" },
    ///                             { "Precedence", 9 },
    ///                             { "Type", "consul" },
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "Action", "allow" },
    ///                             { "Name", "nightly-cronjob" },
    ///                             { "Precedence", 9 },
    ///                             { "Type", "consul" },
    ///                         },
    ///                     }
    ///                  },
    ///             }),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var sd = new Consul.ConfigEntry("sd", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "service-defaults",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Protocol", "http" },
    ///             }),
    ///         });
    ///         var serviceIntentions = new Consul.ConfigEntry("serviceIntentions", new Consul.ConfigEntryArgs
    ///         {
    ///             Kind = "service-intentions",
    ///             ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Sources", new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "Name", "contractor-webapp" },
    ///                             { "Permissions", new[]
    ///                                 {
    ///                                     new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         { "Action", "allow" },
    ///                                         { "HTTP", new Dictionary&lt;string, object?&gt;
    ///                                         {
    ///                                             { "Methods", new[]
    ///                                                 {
    ///                                                     "GET",
    ///                                                     "HEAD",
    ///                                                 }
    ///                                              },
    ///                                             { "PathExact", "/healtz" },
    ///                                         } },
    ///                                     },
    ///                                 }
    ///                              },
    ///                             { "Precedence", 9 },
    ///                             { "Type", "consul" },
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "Name", "admin-dashboard-webapp" },
    ///                             { "Permissions", new[]
    ///                                 {
    ///                                     new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         { "Action", "deny" },
    ///                                         { "HTTP", new Dictionary&lt;string, object?&gt;
    ///                                         {
    ///                                             { "PathPrefix", "/debugz" },
    ///                                         } },
    ///                                     },
    ///                                     new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         { "Action", "allow" },
    ///                                         { "HTTP", new Dictionary&lt;string, object?&gt;
    ///                                         {
    ///                                             { "PathPrefix", "/" },
    ///                                         } },
    ///                                     },
    ///                                 }
    ///                              },
    ///                             { "Precedence", 9 },
    ///                             { "Type", "consul" },
    ///                         },
    ///                     }
    ///                  },
    ///             }),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/configEntry:ConfigEntry")]
    public partial class ConfigEntry : Pulumi.CustomResource
    {
        /// <summary>
        /// An arbitrary map of configuration values.
        /// </summary>
        [Output("configJson")]
        public Output<string?> ConfigJson { get; private set; } = null!;

        /// <summary>
        /// The kind of configuration entry to register.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The name of the configuration entry being registred.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the config entry within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigEntry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigEntry(string name, ConfigEntryArgs args, CustomResourceOptions? options = null)
            : base("consul:index/configEntry:ConfigEntry", name, args ?? new ConfigEntryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigEntry(string name, Input<string> id, ConfigEntryState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/configEntry:ConfigEntry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigEntry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigEntry Get(string name, Input<string> id, ConfigEntryState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigEntry(name, id, state, options);
        }
    }

    public sealed class ConfigEntryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An arbitrary map of configuration values.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// The kind of configuration entry to register.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The name of the configuration entry being registred.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the config entry within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public ConfigEntryArgs()
        {
        }
    }

    public sealed class ConfigEntryState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An arbitrary map of configuration values.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// The kind of configuration entry to register.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The name of the configuration entry being registred.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the config entry within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public ConfigEntryState()
        {
        }
    }
}
