// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var proxyDefaults = new Consul.ConfigEntry("proxy_defaults", new()
    ///     {
    ///         Kind = "proxy-defaults",
    ///         Name = "global",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Config"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["local_connect_timeout_ms"] = 1000,
    ///                 ["handshake_timeout_ms"] = 10000,
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var web = new Consul.ConfigEntry("web", new()
    ///     {
    ///         Name = "web",
    ///         Kind = "service-defaults",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Protocol"] = "http",
    ///         }),
    ///     });
    /// 
    ///     var admin = new Consul.ConfigEntry("admin", new()
    ///     {
    ///         Name = "admin",
    ///         Kind = "service-defaults",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Protocol"] = "http",
    ///         }),
    ///     });
    /// 
    ///     var serviceResolver = new Consul.ConfigEntry("service_resolver", new()
    ///     {
    ///         Kind = "service-resolver",
    ///         Name = web.Name,
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["DefaultSubset"] = "v1",
    ///             ["Subsets"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["v1"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Filter"] = "Service.Meta.version == v1",
    ///                 },
    ///                 ["v2"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Filter"] = "Service.Meta.version == v2",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var serviceSplitter = new Consul.ConfigEntry("service_splitter", new()
    ///     {
    ///         Kind = "service-splitter",
    ///         Name = serviceResolver.Name,
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Splits"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Weight"] = 90,
    ///                     ["ServiceSubset"] = "v1",
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Weight"] = 10,
    ///                     ["ServiceSubset"] = "v2",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var serviceRouter = new Consul.ConfigEntry("service_router", new()
    ///     {
    ///         Kind = "service-router",
    ///         Name = "web",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Routes"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Match"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["HTTP"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["PathPrefix"] = "/admin",
    ///                         },
    ///                     },
    ///                     ["Destination"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "admin",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var ingressGateway = new Consul.ConfigEntry("ingress_gateway", new()
    ///     {
    ///         Name = "us-east-ingress",
    ///         Kind = "ingress-gateway",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["TLS"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["Enabled"] = true,
    ///             },
    ///             ["Listeners"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Port"] = 8000,
    ///                     ["Protocol"] = "http",
    ///                     ["Services"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["Name"] = "*",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var terminatingGateway = new Consul.ConfigEntry("terminating_gateway", new()
    ///     {
    ///         Name = "us-west-gateway",
    ///         Kind = "terminating-gateway",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Services"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Name"] = "billing",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### `service-intentions` config entry
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serviceIntentions = new Consul.ConfigEntry("service_intentions", new()
    ///     {
    ///         Name = "api-service",
    ///         Kind = "service-intentions",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Sources"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = "allow",
    ///                     ["Name"] = "frontend-webapp",
    ///                     ["Precedence"] = 9,
    ///                     ["Type"] = "consul",
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = "allow",
    ///                     ["Name"] = "nightly-cronjob",
    ///                     ["Precedence"] = 9,
    ///                     ["Type"] = "consul",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sd = new Consul.ConfigEntry("sd", new()
    ///     {
    ///         Name = "fort-knox",
    ///         Kind = "service-defaults",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Protocol"] = "http",
    ///         }),
    ///     });
    /// 
    ///     var jwtProvider = new Consul.ConfigEntry("jwt_provider", new()
    ///     {
    ///         Name = "test-provider",
    ///         Kind = "jwt-provider",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Issuer"] = "test-issuer",
    ///             ["JSONWebKeySet"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["Remote"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["URI"] = "https://127.0.0.1:9091",
    ///                     ["FetchAsynchronously"] = true,
    ///                 },
    ///             },
    ///             ["Forwarding"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["HeaderName"] = "test-token",
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var serviceIntentions = new Consul.ConfigEntry("service_intentions", new()
    ///     {
    ///         Name = sd.Name,
    ///         Kind = "service-intentions",
    ///         ConfigJson = Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Sources"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Name"] = "contractor-webapp",
    ///                     ["Permissions"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["Action"] = "allow",
    ///                             ["HTTP"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["Methods"] = new[]
    ///                                 {
    ///                                     "GET",
    ///                                     "HEAD",
    ///                                 },
    ///                                 ["PathExact"] = "/healtz",
    ///                             },
    ///                             ["JWT"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["Providers"] = new[]
    ///                                 {
    ///                                     new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         ["Name"] = jwtProvider.Name,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     ["Precedence"] = 9,
    ///                     ["Type"] = "consul",
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Name"] = "admin-dashboard-webapp",
    ///                     ["Permissions"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["Action"] = "deny",
    ///                             ["HTTP"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["PathPrefix"] = "/debugz",
    ///                             },
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["Action"] = "allow",
    ///                             ["HTTP"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["PathPrefix"] = "/",
    ///                             },
    ///                         },
    ///                     },
    ///                     ["Precedence"] = 9,
    ///                     ["Type"] = "consul",
    ///                 },
    ///             },
    ///         })),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### `exported-services` config entry
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exportedServices = new Consul.ConfigEntry("exported_services", new()
    ///     {
    ///         Name = "test",
    ///         Kind = "exported-services",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Services"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Name"] = "test",
    ///                     ["Namespace"] = "default",
    ///                     ["Consumers"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["Partition"] = "default",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### `mesh` config entry
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mesh = new Consul.ConfigEntry("mesh", new()
    ///     {
    ///         Name = "mesh",
    ///         Kind = "mesh",
    ///         Partition = "default",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["TransparentProxy"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["MeshDestinationsOnly"] = true,
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### `jwt-provider` config entry
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var jwtProvider = new Consul.ConfigEntry("jwt_provider", new()
    ///     {
    ///         Name = "provider-name",
    ///         Kind = "jwt-provider",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Issuer"] = "https://your.issuer.com",
    ///             ["JSONWebKeySet"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["Remote"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["URI"] = "https://your-remote.jwks.com",
    ///                     ["FetchAsynchronously"] = true,
    ///                     ["CacheDuration"] = "10s",
    ///                 },
    ///             },
    ///             ["Forwarding"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["HeaderName"] = "test-token",
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// `consul_config_entry` can be imported using the syntax `&lt;kind&gt;/&lt;name&gt;` if the
    /// config entry is in the default partition and default namespace, or
    /// `&lt;partition&gt;/&lt;namespace&gt;/&lt;kind&gt;/&lt;name&gt;` for config entries in a non-default
    /// partition or namespace:
    /// 
    /// ```sh
    /// $ pulumi import consul:index/configEntry:ConfigEntry service_splitter 816a195f-6cb1-2e8d-92af-3011ae706318
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/configEntry:ConfigEntry")]
    public partial class ConfigEntry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An arbitrary map of configuration values.
        /// </summary>
        [Output("configJson")]
        public Output<string?> ConfigJson { get; private set; } = null!;

        /// <summary>
        /// The kind of configuration entry to register.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The name of the configuration entry being registered.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the config entry within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The partition the config entry is associated with.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigEntry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigEntry(string name, ConfigEntryArgs args, CustomResourceOptions? options = null)
            : base("consul:index/configEntry:ConfigEntry", name, args ?? new ConfigEntryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigEntry(string name, Input<string> id, ConfigEntryState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/configEntry:ConfigEntry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigEntry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigEntry Get(string name, Input<string> id, ConfigEntryState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigEntry(name, id, state, options);
        }
    }

    public sealed class ConfigEntryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An arbitrary map of configuration values.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// The kind of configuration entry to register.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The name of the configuration entry being registered.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the config entry within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition the config entry is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        public ConfigEntryArgs()
        {
        }
        public static new ConfigEntryArgs Empty => new ConfigEntryArgs();
    }

    public sealed class ConfigEntryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An arbitrary map of configuration values.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// The kind of configuration entry to register.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The name of the configuration entry being registered.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the config entry within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition the config entry is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        public ConfigEntryState()
        {
        }
        public static new ConfigEntryState Empty => new ConfigEntryState();
    }
}
