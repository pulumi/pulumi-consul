// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// Provides access to the [Autopilot Configuration](https://www.consul.io/docs/guides/autopilot.html)
    /// of Consul to automatically manage Consul servers.
    /// 
    /// It includes to automatically cleanup dead servers, monitor the status of the Raft
    /// cluster and stable server introduction.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/autopilot_config.html.markdown.
    /// </summary>
    public partial class AutopilotConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to remove failing servers when a
        /// replacement comes online. Defaults to true.
        /// </summary>
        [Output("cleanupDeadServers")]
        public Output<bool?> CleanupDeadServers { get; private set; } = null!;

        /// <summary>
        /// The datacenter to use. This overrides the agent's
        /// default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string?> Datacenter { get; private set; } = null!;

        /// <summary>
        /// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
        /// Defaults to false.
        /// </summary>
        [Output("disableUpgradeMigration")]
        public Output<bool?> DisableUpgradeMigration { get; private set; } = null!;

        /// <summary>
        /// The time after which a server is
        /// considered as unhealthy and will be removed. Defaults to `"200ms"`.
        /// </summary>
        [Output("lastContactThreshold")]
        public Output<string?> LastContactThreshold { get; private set; } = null!;

        /// <summary>
        /// The maximum number of Raft log entries a
        /// server can trail the leader. Defaults to 250.
        /// </summary>
        [Output("maxTrailingLogs")]
        public Output<int?> MaxTrailingLogs { get; private set; } = null!;

        /// <summary>
        /// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
        /// tag to use. Consul will try to keep one voting server by zone to take advantage
        /// of isolated failure domains. Defaults to an empty string.
        /// </summary>
        [Output("redundancyZoneTag")]
        public Output<string?> RedundancyZoneTag { get; private set; } = null!;

        /// <summary>
        /// The period to wait for a server to be
        /// healthy and stable before being promoted to a full, voting member. Defaults to
        /// `"10s"`.
        /// </summary>
        [Output("serverStabilizationTime")]
        public Output<string?> ServerStabilizationTime { get; private set; } = null!;

        /// <summary>
        /// The tag to override the version information
        /// used during a migration. Defaults to an empty string.
        /// </summary>
        [Output("upgradeVersionTag")]
        public Output<string?> UpgradeVersionTag { get; private set; } = null!;


        /// <summary>
        /// Create a AutopilotConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutopilotConfig(string name, AutopilotConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("consul:index/autopilotConfig:AutopilotConfig", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private AutopilotConfig(string name, Input<string> id, AutopilotConfigState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/autopilotConfig:AutopilotConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutopilotConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutopilotConfig Get(string name, Input<string> id, AutopilotConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new AutopilotConfig(name, id, state, options);
        }
    }

    public sealed class AutopilotConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to remove failing servers when a
        /// replacement comes online. Defaults to true.
        /// </summary>
        [Input("cleanupDeadServers")]
        public Input<bool>? CleanupDeadServers { get; set; }

        /// <summary>
        /// The datacenter to use. This overrides the agent's
        /// default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
        /// Defaults to false.
        /// </summary>
        [Input("disableUpgradeMigration")]
        public Input<bool>? DisableUpgradeMigration { get; set; }

        /// <summary>
        /// The time after which a server is
        /// considered as unhealthy and will be removed. Defaults to `"200ms"`.
        /// </summary>
        [Input("lastContactThreshold")]
        public Input<string>? LastContactThreshold { get; set; }

        /// <summary>
        /// The maximum number of Raft log entries a
        /// server can trail the leader. Defaults to 250.
        /// </summary>
        [Input("maxTrailingLogs")]
        public Input<int>? MaxTrailingLogs { get; set; }

        /// <summary>
        /// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
        /// tag to use. Consul will try to keep one voting server by zone to take advantage
        /// of isolated failure domains. Defaults to an empty string.
        /// </summary>
        [Input("redundancyZoneTag")]
        public Input<string>? RedundancyZoneTag { get; set; }

        /// <summary>
        /// The period to wait for a server to be
        /// healthy and stable before being promoted to a full, voting member. Defaults to
        /// `"10s"`.
        /// </summary>
        [Input("serverStabilizationTime")]
        public Input<string>? ServerStabilizationTime { get; set; }

        /// <summary>
        /// The tag to override the version information
        /// used during a migration. Defaults to an empty string.
        /// </summary>
        [Input("upgradeVersionTag")]
        public Input<string>? UpgradeVersionTag { get; set; }

        public AutopilotConfigArgs()
        {
        }
    }

    public sealed class AutopilotConfigState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to remove failing servers when a
        /// replacement comes online. Defaults to true.
        /// </summary>
        [Input("cleanupDeadServers")]
        public Input<bool>? CleanupDeadServers { get; set; }

        /// <summary>
        /// The datacenter to use. This overrides the agent's
        /// default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Whether to disable [upgrade migrations](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones).
        /// Defaults to false.
        /// </summary>
        [Input("disableUpgradeMigration")]
        public Input<bool>? DisableUpgradeMigration { get; set; }

        /// <summary>
        /// The time after which a server is
        /// considered as unhealthy and will be removed. Defaults to `"200ms"`.
        /// </summary>
        [Input("lastContactThreshold")]
        public Input<string>? LastContactThreshold { get; set; }

        /// <summary>
        /// The maximum number of Raft log entries a
        /// server can trail the leader. Defaults to 250.
        /// </summary>
        [Input("maxTrailingLogs")]
        public Input<int>? MaxTrailingLogs { get; set; }

        /// <summary>
        /// The [redundancy zone](https://www.consul.io/docs/guides/autopilot.html#redundancy-zones)
        /// tag to use. Consul will try to keep one voting server by zone to take advantage
        /// of isolated failure domains. Defaults to an empty string.
        /// </summary>
        [Input("redundancyZoneTag")]
        public Input<string>? RedundancyZoneTag { get; set; }

        /// <summary>
        /// The period to wait for a server to be
        /// healthy and stable before being promoted to a full, voting member. Defaults to
        /// `"10s"`.
        /// </summary>
        [Input("serverStabilizationTime")]
        public Input<string>? ServerStabilizationTime { get; set; }

        /// <summary>
        /// The tag to override the version information
        /// used during a migration. Defaults to an empty string.
        /// </summary>
        [Input("upgradeVersionTag")]
        public Input<string>? UpgradeVersionTag { get; set; }

        public AutopilotConfigState()
        {
        }
    }
}
