// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Basic usage
    ///     var agent = new Consul.AclPolicy("agent", new()
    ///     {
    ///         Name = "agent",
    ///         Rules = @"node_prefix """" {
    ///   policy = ""read""
    /// }
    /// ",
    ///     });
    /// 
    ///     var test = new Consul.AclToken("test", new()
    ///     {
    ///         Description = "my test token",
    ///         Policies = new[]
    ///         {
    ///             agent.Name,
    ///         },
    ///         Local = true,
    ///     });
    /// 
    ///     // Explicitly set the `accessor_id`
    ///     var testRandomUuid = new Random.RandomUuid("test");
    /// 
    ///     var testPredefinedId = new Consul.AclToken("test_predefined_id", new()
    ///     {
    ///         AccessorId = testUuid.Result,
    ///         Description = "my test uuid token",
    ///         Policies = new[]
    ///         {
    ///             agent.Name,
    ///         },
    ///         Local = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import consul:index/aclToken:AclToken anonymous 00000000-0000-0000-0000-000000000002
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import consul:index/aclToken:AclToken master-token 624d94ca-bc5c-f960-4e83-0a609cf588be
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/aclToken:AclToken")]
    public partial class AclToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The uuid of the token. If omitted, Consul will generate a random uuid.
        /// </summary>
        [Output("accessorId")]
        public Output<string> AccessorId { get; private set; } = null!;

        /// <summary>
        /// The description of the token.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If set this represents the point after which a token should be considered revoked and is eligible for destruction.
        /// </summary>
        [Output("expirationTime")]
        public Output<string?> ExpirationTime { get; private set; } = null!;

        /// <summary>
        /// The flag to set the token local to the current datacenter.
        /// </summary>
        [Output("local")]
        public Output<bool?> Local { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the token within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The list of node identities that should be applied to the token.
        /// </summary>
        [Output("nodeIdentities")]
        public Output<ImmutableArray<Outputs.AclTokenNodeIdentity>> NodeIdentities { get; private set; } = null!;

        /// <summary>
        /// The partition the ACL token is associated with.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// The list of policies attached to the token.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;

        /// <summary>
        /// The list of roles attached to the token.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<string>> Roles { get; private set; } = null!;

        /// <summary>
        /// The list of service identities that should be applied to the token.
        /// </summary>
        [Output("serviceIdentities")]
        public Output<ImmutableArray<Outputs.AclTokenServiceIdentity>> ServiceIdentities { get; private set; } = null!;

        /// <summary>
        /// The list of templated policies that should be applied to the token.
        /// </summary>
        [Output("templatedPolicies")]
        public Output<ImmutableArray<Outputs.AclTokenTemplatedPolicy>> TemplatedPolicies { get; private set; } = null!;


        /// <summary>
        /// Create a AclToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AclToken(string name, AclTokenArgs? args = null, CustomResourceOptions? options = null)
            : base("consul:index/aclToken:AclToken", name, args ?? new AclTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AclToken(string name, Input<string> id, AclTokenState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/aclToken:AclToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AclToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AclToken Get(string name, Input<string> id, AclTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new AclToken(name, id, state, options);
        }
    }

    public sealed class AclTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The uuid of the token. If omitted, Consul will generate a random uuid.
        /// </summary>
        [Input("accessorId")]
        public Input<string>? AccessorId { get; set; }

        /// <summary>
        /// The description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If set this represents the point after which a token should be considered revoked and is eligible for destruction.
        /// </summary>
        [Input("expirationTime")]
        public Input<string>? ExpirationTime { get; set; }

        /// <summary>
        /// The flag to set the token local to the current datacenter.
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// The namespace to create the token within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("nodeIdentities")]
        private InputList<Inputs.AclTokenNodeIdentityArgs>? _nodeIdentities;

        /// <summary>
        /// The list of node identities that should be applied to the token.
        /// </summary>
        public InputList<Inputs.AclTokenNodeIdentityArgs> NodeIdentities
        {
            get => _nodeIdentities ?? (_nodeIdentities = new InputList<Inputs.AclTokenNodeIdentityArgs>());
            set => _nodeIdentities = value;
        }

        /// <summary>
        /// The partition the ACL token is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// The list of policies attached to the token.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// The list of roles attached to the token.
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        [Input("serviceIdentities")]
        private InputList<Inputs.AclTokenServiceIdentityArgs>? _serviceIdentities;

        /// <summary>
        /// The list of service identities that should be applied to the token.
        /// </summary>
        public InputList<Inputs.AclTokenServiceIdentityArgs> ServiceIdentities
        {
            get => _serviceIdentities ?? (_serviceIdentities = new InputList<Inputs.AclTokenServiceIdentityArgs>());
            set => _serviceIdentities = value;
        }

        [Input("templatedPolicies")]
        private InputList<Inputs.AclTokenTemplatedPolicyArgs>? _templatedPolicies;

        /// <summary>
        /// The list of templated policies that should be applied to the token.
        /// </summary>
        public InputList<Inputs.AclTokenTemplatedPolicyArgs> TemplatedPolicies
        {
            get => _templatedPolicies ?? (_templatedPolicies = new InputList<Inputs.AclTokenTemplatedPolicyArgs>());
            set => _templatedPolicies = value;
        }

        public AclTokenArgs()
        {
        }
        public static new AclTokenArgs Empty => new AclTokenArgs();
    }

    public sealed class AclTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The uuid of the token. If omitted, Consul will generate a random uuid.
        /// </summary>
        [Input("accessorId")]
        public Input<string>? AccessorId { get; set; }

        /// <summary>
        /// The description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If set this represents the point after which a token should be considered revoked and is eligible for destruction.
        /// </summary>
        [Input("expirationTime")]
        public Input<string>? ExpirationTime { get; set; }

        /// <summary>
        /// The flag to set the token local to the current datacenter.
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// The namespace to create the token within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("nodeIdentities")]
        private InputList<Inputs.AclTokenNodeIdentityGetArgs>? _nodeIdentities;

        /// <summary>
        /// The list of node identities that should be applied to the token.
        /// </summary>
        public InputList<Inputs.AclTokenNodeIdentityGetArgs> NodeIdentities
        {
            get => _nodeIdentities ?? (_nodeIdentities = new InputList<Inputs.AclTokenNodeIdentityGetArgs>());
            set => _nodeIdentities = value;
        }

        /// <summary>
        /// The partition the ACL token is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// The list of policies attached to the token.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// The list of roles attached to the token.
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        [Input("serviceIdentities")]
        private InputList<Inputs.AclTokenServiceIdentityGetArgs>? _serviceIdentities;

        /// <summary>
        /// The list of service identities that should be applied to the token.
        /// </summary>
        public InputList<Inputs.AclTokenServiceIdentityGetArgs> ServiceIdentities
        {
            get => _serviceIdentities ?? (_serviceIdentities = new InputList<Inputs.AclTokenServiceIdentityGetArgs>());
            set => _serviceIdentities = value;
        }

        [Input("templatedPolicies")]
        private InputList<Inputs.AclTokenTemplatedPolicyGetArgs>? _templatedPolicies;

        /// <summary>
        /// The list of templated policies that should be applied to the token.
        /// </summary>
        public InputList<Inputs.AclTokenTemplatedPolicyGetArgs> TemplatedPolicies
        {
            get => _templatedPolicies ?? (_templatedPolicies = new InputList<Inputs.AclTokenTemplatedPolicyGetArgs>());
            set => _templatedPolicies = value;
        }

        public AclTokenState()
        {
        }
        public static new AclTokenState Empty => new AclTokenState();
    }
}
