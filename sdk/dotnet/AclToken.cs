// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// The `consul..AclToken` resource writes an ACL token into Consul.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/acl_token.html.markdown.
    /// </summary>
    public partial class AclToken : Pulumi.CustomResource
    {
        /// <summary>
        /// The uuid of the token. If omitted, Consul will
        /// generate a random uuid.
        /// </summary>
        [Output("accessorId")]
        public Output<string> AccessorId { get; private set; } = null!;

        /// <summary>
        /// The description of the token.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The flag to set the token local to the current datacenter.
        /// </summary>
        [Output("local")]
        public Output<bool?> Local { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the token within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The list of policies attached to the token.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;

        /// <summary>
        /// The list of roles attached to the token.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<string>> Roles { get; private set; } = null!;


        /// <summary>
        /// Create a AclToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AclToken(string name, AclTokenArgs? args = null, CustomResourceOptions? options = null)
            : base("consul:index/aclToken:AclToken", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private AclToken(string name, Input<string> id, AclTokenState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/aclToken:AclToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AclToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AclToken Get(string name, Input<string> id, AclTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new AclToken(name, id, state, options);
        }
    }

    public sealed class AclTokenArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The uuid of the token. If omitted, Consul will
        /// generate a random uuid.
        /// </summary>
        [Input("accessorId")]
        public Input<string>? AccessorId { get; set; }

        /// <summary>
        /// The description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag to set the token local to the current datacenter.
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// The namespace to create the token within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// The list of policies attached to the token.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// The list of roles attached to the token.
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        public AclTokenArgs()
        {
        }
    }

    public sealed class AclTokenState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The uuid of the token. If omitted, Consul will
        /// generate a random uuid.
        /// </summary>
        [Input("accessorId")]
        public Input<string>? AccessorId { get; set; }

        /// <summary>
        /// The description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag to set the token local to the current datacenter.
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// The namespace to create the token within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// The list of policies attached to the token.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// The list of roles attached to the token.
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        public AclTokenState()
        {
        }
    }
}
