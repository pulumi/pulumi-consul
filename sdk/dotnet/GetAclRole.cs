// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetAclRole
    {
        /// <summary>
        /// The `consul.AclRole` data source returns the information related to a [Consul ACL Role](https://www.consul.io/api/acl/roles.html).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Consul.GetAclRole.Invoke(new()
        ///     {
        ///         Name = "example-role",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["consulAclRole"] = test.Apply(getAclRoleResult =&gt; getAclRoleResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetAclRoleResult> InvokeAsync(GetAclRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAclRoleResult>("consul:index/getAclRole:getAclRole", args ?? new GetAclRoleArgs(), options.WithDefaults());

        /// <summary>
        /// The `consul.AclRole` data source returns the information related to a [Consul ACL Role](https://www.consul.io/api/acl/roles.html).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Consul.GetAclRole.Invoke(new()
        ///     {
        ///         Name = "example-role",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["consulAclRole"] = test.Apply(getAclRoleResult =&gt; getAclRoleResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetAclRoleResult> Invoke(GetAclRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAclRoleResult>("consul:index/getAclRole:getAclRole", args ?? new GetAclRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAclRoleArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The namespace to lookup the role.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The partition to lookup the role.
        /// </summary>
        [Input("partition")]
        public string? Partition { get; set; }

        public GetAclRoleArgs()
        {
        }
        public static new GetAclRoleArgs Empty => new GetAclRoleArgs();
    }

    public sealed class GetAclRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The namespace to lookup the role.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The partition to lookup the role.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        public GetAclRoleInvokeArgs()
        {
        }
        public static new GetAclRoleInvokeArgs Empty => new GetAclRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetAclRoleResult
    {
        /// <summary>
        /// The description of the ACL Role.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the ACL Role.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The namespace to lookup the role.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// The list of node identities associated with the ACL Role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclRoleNodeIdentityResult> NodeIdentities;
        /// <summary>
        /// The partition to lookup the role.
        /// </summary>
        public readonly string? Partition;
        /// <summary>
        /// The list of policies associated with the ACL Role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclRolePolicyResult> Policies;
        /// <summary>
        /// The list of service identities associated with the ACL Role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclRoleServiceIdentityResult> ServiceIdentities;
        /// <summary>
        /// The list of templated policies that should be applied to the token.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclRoleTemplatedPolicyResult> TemplatedPolicies;

        [OutputConstructor]
        private GetAclRoleResult(
            string description,

            string id,

            string name,

            string? @namespace,

            ImmutableArray<Outputs.GetAclRoleNodeIdentityResult> nodeIdentities,

            string? partition,

            ImmutableArray<Outputs.GetAclRolePolicyResult> policies,

            ImmutableArray<Outputs.GetAclRoleServiceIdentityResult> serviceIdentities,

            ImmutableArray<Outputs.GetAclRoleTemplatedPolicyResult> templatedPolicies)
        {
            Description = description;
            Id = id;
            Name = name;
            Namespace = @namespace;
            NodeIdentities = nodeIdentities;
            Partition = partition;
            Policies = policies;
            ServiceIdentities = serviceIdentities;
            TemplatedPolicies = templatedPolicies;
        }
    }
}
