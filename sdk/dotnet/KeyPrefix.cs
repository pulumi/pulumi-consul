// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// ## Import
    /// 
    /// `consul_key_prefix` can be imported. This is useful when the path already exists and you know all keys in path should be managed by Terraform.
    /// 
    /// ```sh
    ///  $ pulumi import consul:index/keyPrefix:KeyPrefix myapp_config myapp/config/
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/keyPrefix:KeyPrefix")]
    public partial class KeyPrefix : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the keys within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The admin partition to create the keys within.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// Specifies the common prefix shared by all keys
        /// that will be managed by this resource instance. In most cases this will
        /// end with a slash, to manage a "folder" of keys.
        /// </summary>
        [Output("pathPrefix")]
        public Output<string> PathPrefix { get; private set; } = null!;

        /// <summary>
        /// A subkey to add. Supported values documented below.
        /// Multiple blocks supported.
        /// </summary>
        [Output("subkeyCollection")]
        public Output<ImmutableArray<Outputs.KeyPrefixSubkeyCollection>> SubkeyCollection { get; private set; } = null!;

        /// <summary>
        /// A mapping from subkey name (which will be appended
        /// to the given `path_prefix`) to the value that should be stored at that key.
        /// Use slashes, as shown in the above example, to create "sub-folders" under
        /// the given path prefix.
        /// </summary>
        [Output("subkeys")]
        public Output<ImmutableDictionary<string, string>?> Subkeys { get; private set; } = null!;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;


        /// <summary>
        /// Create a KeyPrefix resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyPrefix(string name, KeyPrefixArgs args, CustomResourceOptions? options = null)
            : base("consul:index/keyPrefix:KeyPrefix", name, args ?? new KeyPrefixArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeyPrefix(string name, Input<string> id, KeyPrefixState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/keyPrefix:KeyPrefix", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyPrefix resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyPrefix Get(string name, Input<string> id, KeyPrefixState? state = null, CustomResourceOptions? options = null)
        {
            return new KeyPrefix(name, id, state, options);
        }
    }

    public sealed class KeyPrefixArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The namespace to create the keys within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The admin partition to create the keys within.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Specifies the common prefix shared by all keys
        /// that will be managed by this resource instance. In most cases this will
        /// end with a slash, to manage a "folder" of keys.
        /// </summary>
        [Input("pathPrefix", required: true)]
        public Input<string> PathPrefix { get; set; } = null!;

        [Input("subkeyCollection")]
        private InputList<Inputs.KeyPrefixSubkeyCollectionArgs>? _subkeyCollection;

        /// <summary>
        /// A subkey to add. Supported values documented below.
        /// Multiple blocks supported.
        /// </summary>
        public InputList<Inputs.KeyPrefixSubkeyCollectionArgs> SubkeyCollection
        {
            get => _subkeyCollection ?? (_subkeyCollection = new InputList<Inputs.KeyPrefixSubkeyCollectionArgs>());
            set => _subkeyCollection = value;
        }

        [Input("subkeys")]
        private InputMap<string>? _subkeys;

        /// <summary>
        /// A mapping from subkey name (which will be appended
        /// to the given `path_prefix`) to the value that should be stored at that key.
        /// Use slashes, as shown in the above example, to create "sub-folders" under
        /// the given path prefix.
        /// </summary>
        public InputMap<string> Subkeys
        {
            get => _subkeys ?? (_subkeys = new InputMap<string>());
            set => _subkeys = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public KeyPrefixArgs()
        {
        }
        public static new KeyPrefixArgs Empty => new KeyPrefixArgs();
    }

    public sealed class KeyPrefixState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The namespace to create the keys within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The admin partition to create the keys within.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Specifies the common prefix shared by all keys
        /// that will be managed by this resource instance. In most cases this will
        /// end with a slash, to manage a "folder" of keys.
        /// </summary>
        [Input("pathPrefix")]
        public Input<string>? PathPrefix { get; set; }

        [Input("subkeyCollection")]
        private InputList<Inputs.KeyPrefixSubkeyCollectionGetArgs>? _subkeyCollection;

        /// <summary>
        /// A subkey to add. Supported values documented below.
        /// Multiple blocks supported.
        /// </summary>
        public InputList<Inputs.KeyPrefixSubkeyCollectionGetArgs> SubkeyCollection
        {
            get => _subkeyCollection ?? (_subkeyCollection = new InputList<Inputs.KeyPrefixSubkeyCollectionGetArgs>());
            set => _subkeyCollection = value;
        }

        [Input("subkeys")]
        private InputMap<string>? _subkeys;

        /// <summary>
        /// A mapping from subkey name (which will be appended
        /// to the given `path_prefix`) to the value that should be stored at that key.
        /// Use slashes, as shown in the above example, to create "sub-folders" under
        /// the given path prefix.
        /// </summary>
        public InputMap<string> Subkeys
        {
            get => _subkeys ?? (_subkeys = new InputMap<string>());
            set => _subkeys = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public KeyPrefixState()
        {
        }
        public static new KeyPrefixState Empty => new KeyPrefixState();
    }
}
