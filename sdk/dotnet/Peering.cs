// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// [Cluster Peering](https://www.consul.io/docs/connect/cluster-peering) can be used to create connections between two or more independent clusters so that services deployed to different partitions or datacenters can communicate.
    /// 
    /// The `cluster_peering` resource can be used to establish the peering after a peering token has been generated.
    /// 
    /// &gt; **Cluster peering is currently in technical preview:** Functionality associated with cluster peering is subject to change. You should never use the technical preview release in secure environments or production scenarios. Features in technical preview may have performance issues, scaling issues, and limited support.
    /// 
    /// The functionality described here is available only in Consul version 1.13.0 and later.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create a peering between the EU and US Consul clusters
    ///         var eu = new Consul.Provider("eu", new Consul.ProviderArgs
    ///         {
    ///             Address = "eu-cluster:8500",
    ///         });
    ///         var us = new Consul.Provider("us", new Consul.ProviderArgs
    ///         {
    ///             Address = "us-cluster:8500",
    ///         });
    ///         var eu_usPeeringToken = new Consul.PeeringToken("eu-usPeeringToken", new Consul.PeeringTokenArgs
    ///         {
    ///             PeerName = "eu-cluster",
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = consul.Us,
    ///         });
    ///         var eu_usPeering = new Consul.Peering("eu-usPeering", new Consul.PeeringArgs
    ///         {
    ///             PeerName = "eu-cluster",
    ///             PeeringToken = consul_peering_token.Token.Peering_token,
    ///             Meta = 
    ///             {
    ///                 { "hello", "world" },
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = consul.Eu,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/peering:Peering")]
    public partial class Peering : Pulumi.CustomResource
    {
        [Output("deletedAt")]
        public Output<string> DeletedAt { get; private set; } = null!;

        /// <summary>
        /// Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the
        /// cluster peering process.
        /// </summary>
        [Output("meta")]
        public Output<ImmutableDictionary<string, string>?> Meta { get; private set; } = null!;

        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        [Output("peerCaPems")]
        public Output<ImmutableArray<string>> PeerCaPems { get; private set; } = null!;

        [Output("peerId")]
        public Output<string> PeerId { get; private set; } = null!;

        /// <summary>
        /// The name assigned to the peer cluster. The `peer_name` is used to reference the peer cluster in service discovery
        /// queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
        /// </summary>
        [Output("peerName")]
        public Output<string> PeerName { get; private set; } = null!;

        [Output("peerServerAddresses")]
        public Output<ImmutableArray<string>> PeerServerAddresses { get; private set; } = null!;

        [Output("peerServerName")]
        public Output<string> PeerServerName { get; private set; } = null!;

        /// <summary>
        /// The peering token fetched from the peer cluster.
        /// </summary>
        [Output("peeringToken")]
        public Output<string> PeeringToken { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a Peering resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Peering(string name, PeeringArgs args, CustomResourceOptions? options = null)
            : base("consul:index/peering:Peering", name, args ?? new PeeringArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Peering(string name, Input<string> id, PeeringState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/peering:Peering", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Peering resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Peering Get(string name, Input<string> id, PeeringState? state = null, CustomResourceOptions? options = null)
        {
            return new Peering(name, id, state, options);
        }
    }

    public sealed class PeeringArgs : Pulumi.ResourceArgs
    {
        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the
        /// cluster peering process.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// The name assigned to the peer cluster. The `peer_name` is used to reference the peer cluster in service discovery
        /// queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
        /// </summary>
        [Input("peerName", required: true)]
        public Input<string> PeerName { get; set; } = null!;

        /// <summary>
        /// The peering token fetched from the peer cluster.
        /// </summary>
        [Input("peeringToken", required: true)]
        public Input<string> PeeringToken { get; set; } = null!;

        public PeeringArgs()
        {
        }
    }

    public sealed class PeeringState : Pulumi.ResourceArgs
    {
        [Input("deletedAt")]
        public Input<string>? DeletedAt { get; set; }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies KV metadata to associate with the peering. This parameter is not required and does not directly impact the
        /// cluster peering process.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("peerCaPems")]
        private InputList<string>? _peerCaPems;
        public InputList<string> PeerCaPems
        {
            get => _peerCaPems ?? (_peerCaPems = new InputList<string>());
            set => _peerCaPems = value;
        }

        [Input("peerId")]
        public Input<string>? PeerId { get; set; }

        /// <summary>
        /// The name assigned to the peer cluster. The `peer_name` is used to reference the peer cluster in service discovery
        /// queries and configuration entries such as `service-intentions`. This field must be a valid DNS hostname label.
        /// </summary>
        [Input("peerName")]
        public Input<string>? PeerName { get; set; }

        [Input("peerServerAddresses")]
        private InputList<string>? _peerServerAddresses;
        public InputList<string> PeerServerAddresses
        {
            get => _peerServerAddresses ?? (_peerServerAddresses = new InputList<string>());
            set => _peerServerAddresses = value;
        }

        [Input("peerServerName")]
        public Input<string>? PeerServerName { get; set; }

        /// <summary>
        /// The peering token fetched from the peer cluster.
        /// </summary>
        [Input("peeringToken")]
        public Input<string>? PeeringToken { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        public PeeringState()
        {
        }
    }
}
