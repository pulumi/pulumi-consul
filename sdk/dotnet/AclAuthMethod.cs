// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// Starting with Consul 1.5.0, the `consul.AclAuthMethod` resource can be used to managed [Consul ACL auth methods](https://www.consul.io/docs/acl/auth-methods).
    /// 
    /// ## Example Usage
    /// 
    /// Define a `Kubernetes` auth method:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var minikube = new Consul.AclAuthMethod("minikube", new()
    ///     {
    ///         Name = "minikube",
    ///         Type = "kubernetes",
    ///         Description = "dev minikube cluster",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Host"] = "https://192.0.2.42:8443",
    ///             ["CACert"] = @"-----BEGIN CERTIFICATE-----
    /// ...-----END CERTIFICATE-----
    /// ",
    ///             ["ServiceAccountJWT"] = "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9...",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Define a `Jwt` auth method:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var oidc = new Consul.AclAuthMethod("oidc", new()
    ///     {
    ///         Name = "auth0",
    ///         Type = "oidc",
    ///         MaxTokenTtl = "5m",
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["AllowedRedirectURIs"] = new[]
    ///             {
    ///                 "http://localhost:8550/oidc/callback",
    ///                 "http://localhost:8500/ui/oidc/callback",
    ///             },
    ///             ["BoundAudiences"] = new[]
    ///             {
    ///                 "V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt",
    ///             },
    ///             ["ClaimMappings"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["http://example.com/first_name"] = "first_name",
    ///                 ["http://example.com/last_name"] = "last_name",
    ///             },
    ///             ["ListClaimMappings"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["http://consul.com/groups"] = "groups",
    ///             },
    ///             ["OIDCClientID"] = "V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt",
    ///             ["OIDCClientSecret"] = "...(omitted)...",
    ///             ["OIDCDiscoveryURL"] = "https://my-corp-app-name.auth0.com/",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/aclAuthMethod:AclAuthMethod")]
    public partial class AclAuthMethod : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The raw configuration for this ACL auth method.
        /// </summary>
        [Output("config")]
        public Output<ImmutableDictionary<string, string>?> Config { get; private set; } = null!;

        /// <summary>
        /// The raw configuration for this ACL auth method.
        /// </summary>
        [Output("configJson")]
        public Output<string?> ConfigJson { get; private set; } = null!;

        /// <summary>
        /// A free form human readable description of the auth method.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// An optional name to use instead of the name attribute when displaying information about this auth method.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The maximum life of any token created by this auth method. **This attribute is required and must be set to a nonzero for the OIDC auth method.**
        /// </summary>
        [Output("maxTokenTtl")]
        public Output<string?> MaxTokenTtl { get; private set; } = null!;

        /// <summary>
        /// The name of the ACL auth method.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace in which to create the auth method.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// A set of rules that control which namespace tokens created via this auth method will be created within.
        /// </summary>
        [Output("namespaceRules")]
        public Output<ImmutableArray<Outputs.AclAuthMethodNamespaceRule>> NamespaceRules { get; private set; } = null!;

        /// <summary>
        /// The partition the ACL auth method is associated with.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// The kind of token that this auth method produces. This can be either 'local' or 'global'.
        /// </summary>
        [Output("tokenLocality")]
        public Output<string?> TokenLocality { get; private set; } = null!;

        /// <summary>
        /// The type of the ACL auth method.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AclAuthMethod resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AclAuthMethod(string name, AclAuthMethodArgs args, CustomResourceOptions? options = null)
            : base("consul:index/aclAuthMethod:AclAuthMethod", name, args ?? new AclAuthMethodArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AclAuthMethod(string name, Input<string> id, AclAuthMethodState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/aclAuthMethod:AclAuthMethod", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AclAuthMethod resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AclAuthMethod Get(string name, Input<string> id, AclAuthMethodState? state = null, CustomResourceOptions? options = null)
        {
            return new AclAuthMethod(name, id, state, options);
        }
    }

    public sealed class AclAuthMethodArgs : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<string>? _config;

        /// <summary>
        /// The raw configuration for this ACL auth method.
        /// </summary>
        [Obsolete(@"The config attribute is deprecated, please use `ConfigJson` instead.")]
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        /// <summary>
        /// The raw configuration for this ACL auth method.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// A free form human readable description of the auth method.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An optional name to use instead of the name attribute when displaying information about this auth method.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The maximum life of any token created by this auth method. **This attribute is required and must be set to a nonzero for the OIDC auth method.**
        /// </summary>
        [Input("maxTokenTtl")]
        public Input<string>? MaxTokenTtl { get; set; }

        /// <summary>
        /// The name of the ACL auth method.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace in which to create the auth method.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("namespaceRules")]
        private InputList<Inputs.AclAuthMethodNamespaceRuleArgs>? _namespaceRules;

        /// <summary>
        /// A set of rules that control which namespace tokens created via this auth method will be created within.
        /// </summary>
        public InputList<Inputs.AclAuthMethodNamespaceRuleArgs> NamespaceRules
        {
            get => _namespaceRules ?? (_namespaceRules = new InputList<Inputs.AclAuthMethodNamespaceRuleArgs>());
            set => _namespaceRules = value;
        }

        /// <summary>
        /// The partition the ACL auth method is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// The kind of token that this auth method produces. This can be either 'local' or 'global'.
        /// </summary>
        [Input("tokenLocality")]
        public Input<string>? TokenLocality { get; set; }

        /// <summary>
        /// The type of the ACL auth method.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public AclAuthMethodArgs()
        {
        }
        public static new AclAuthMethodArgs Empty => new AclAuthMethodArgs();
    }

    public sealed class AclAuthMethodState : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<string>? _config;

        /// <summary>
        /// The raw configuration for this ACL auth method.
        /// </summary>
        [Obsolete(@"The config attribute is deprecated, please use `ConfigJson` instead.")]
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        /// <summary>
        /// The raw configuration for this ACL auth method.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// A free form human readable description of the auth method.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An optional name to use instead of the name attribute when displaying information about this auth method.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The maximum life of any token created by this auth method. **This attribute is required and must be set to a nonzero for the OIDC auth method.**
        /// </summary>
        [Input("maxTokenTtl")]
        public Input<string>? MaxTokenTtl { get; set; }

        /// <summary>
        /// The name of the ACL auth method.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace in which to create the auth method.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("namespaceRules")]
        private InputList<Inputs.AclAuthMethodNamespaceRuleGetArgs>? _namespaceRules;

        /// <summary>
        /// A set of rules that control which namespace tokens created via this auth method will be created within.
        /// </summary>
        public InputList<Inputs.AclAuthMethodNamespaceRuleGetArgs> NamespaceRules
        {
            get => _namespaceRules ?? (_namespaceRules = new InputList<Inputs.AclAuthMethodNamespaceRuleGetArgs>());
            set => _namespaceRules = value;
        }

        /// <summary>
        /// The partition the ACL auth method is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// The kind of token that this auth method produces. This can be either 'local' or 'global'.
        /// </summary>
        [Input("tokenLocality")]
        public Input<string>? TokenLocality { get; set; }

        /// <summary>
        /// The type of the ACL auth method.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AclAuthMethodState()
        {
        }
        public static new AclAuthMethodState Empty => new AclAuthMethodState();
    }
}
