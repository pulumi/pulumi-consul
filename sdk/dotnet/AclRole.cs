// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// Starting with Consul 1.5.0, the consul..AclRole can be used to managed Consul ACL roles.
    /// 
    /// 
    /// ## Example Usage
    /// 
    /// 
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var read_policy = new Consul.AclPolicy("read-policy", new Consul.AclPolicyArgs
    ///         {
    ///             Datacenters = 
    ///             {
    ///                 "dc1",
    ///             },
    ///             Rules = "node \"\" { policy = \"read\" }",
    ///         });
    ///         var read = new Consul.AclRole("read", new Consul.AclRoleArgs
    ///         {
    ///             Description = "bar",
    ///             Policies = 
    ///             {
    ///                 read_policy.Id,
    ///             },
    ///             ServiceIdentities = 
    ///             {
    ///                 new Consul.Inputs.AclRoleServiceIdentityArgs
    ///                 {
    ///                     ServiceName = "foo",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class AclRole : Pulumi.CustomResource
    {
        /// <summary>
        /// A free form human readable description of the role.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the ACL role.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the role within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The list of policies that should be applied to the role.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;

        /// <summary>
        /// The list of service identities that should
        /// be applied to the role.
        /// </summary>
        [Output("serviceIdentities")]
        public Output<ImmutableArray<Outputs.AclRoleServiceIdentity>> ServiceIdentities { get; private set; } = null!;


        /// <summary>
        /// Create a AclRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AclRole(string name, AclRoleArgs? args = null, CustomResourceOptions? options = null)
            : base("consul:index/aclRole:AclRole", name, args ?? new AclRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AclRole(string name, Input<string> id, AclRoleState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/aclRole:AclRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AclRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AclRole Get(string name, Input<string> id, AclRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new AclRole(name, id, state, options);
        }
    }

    public sealed class AclRoleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A free form human readable description of the role.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the ACL role.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the role within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// The list of policies that should be applied to the role.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("serviceIdentities")]
        private InputList<Inputs.AclRoleServiceIdentityArgs>? _serviceIdentities;

        /// <summary>
        /// The list of service identities that should
        /// be applied to the role.
        /// </summary>
        public InputList<Inputs.AclRoleServiceIdentityArgs> ServiceIdentities
        {
            get => _serviceIdentities ?? (_serviceIdentities = new InputList<Inputs.AclRoleServiceIdentityArgs>());
            set => _serviceIdentities = value;
        }

        public AclRoleArgs()
        {
        }
    }

    public sealed class AclRoleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A free form human readable description of the role.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the ACL role.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the role within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// The list of policies that should be applied to the role.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("serviceIdentities")]
        private InputList<Inputs.AclRoleServiceIdentityGetArgs>? _serviceIdentities;

        /// <summary>
        /// The list of service identities that should
        /// be applied to the role.
        /// </summary>
        public InputList<Inputs.AclRoleServiceIdentityGetArgs> ServiceIdentities
        {
            get => _serviceIdentities ?? (_serviceIdentities = new InputList<Inputs.AclRoleServiceIdentityGetArgs>());
            set => _serviceIdentities = value;
        }

        public AclRoleState()
        {
        }
    }
}
