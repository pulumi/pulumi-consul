// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var read_policy = new Consul.AclPolicy("read-policy", new()
    ///     {
    ///         Name = "read-policy",
    ///         Rules = "node \"\" { policy = \"read\" }",
    ///         Datacenters = new[]
    ///         {
    ///             "dc1",
    ///         },
    ///     });
    /// 
    ///     var read = new Consul.AclRole("read", new()
    ///     {
    ///         Name = "foo",
    ///         Description = "bar",
    ///         Policies = new[]
    ///         {
    ///             read_policy.Id,
    ///         },
    ///         ServiceIdentities = new[]
    ///         {
    ///             new Consul.Inputs.AclRoleServiceIdentityArgs
    ///             {
    ///                 ServiceName = "foo",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import consul:index/aclRole:AclRole read 816a195f-6cb1-2e8d-92af-3011ae706318
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/aclRole:AclRole")]
    public partial class AclRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A free form human readable description of the role.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of node, workload identity or service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the role within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The list of node identities that should be applied to the role.
        /// </summary>
        [Output("nodeIdentities")]
        public Output<ImmutableArray<Outputs.AclRoleNodeIdentity>> NodeIdentities { get; private set; } = null!;

        /// <summary>
        /// The partition the ACL role is associated with.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;

        /// <summary>
        /// The list of service identities that should be applied to the role.
        /// </summary>
        [Output("serviceIdentities")]
        public Output<ImmutableArray<Outputs.AclRoleServiceIdentity>> ServiceIdentities { get; private set; } = null!;

        /// <summary>
        /// The list of templated policies that should be applied to the token.
        /// </summary>
        [Output("templatedPolicies")]
        public Output<ImmutableArray<Outputs.AclRoleTemplatedPolicy>> TemplatedPolicies { get; private set; } = null!;


        /// <summary>
        /// Create a AclRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AclRole(string name, AclRoleArgs? args = null, CustomResourceOptions? options = null)
            : base("consul:index/aclRole:AclRole", name, args ?? new AclRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AclRole(string name, Input<string> id, AclRoleState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/aclRole:AclRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AclRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AclRole Get(string name, Input<string> id, AclRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new AclRole(name, id, state, options);
        }
    }

    public sealed class AclRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A free form human readable description of the role.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of node, workload identity or service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the role within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("nodeIdentities")]
        private InputList<Inputs.AclRoleNodeIdentityArgs>? _nodeIdentities;

        /// <summary>
        /// The list of node identities that should be applied to the role.
        /// </summary>
        public InputList<Inputs.AclRoleNodeIdentityArgs> NodeIdentities
        {
            get => _nodeIdentities ?? (_nodeIdentities = new InputList<Inputs.AclRoleNodeIdentityArgs>());
            set => _nodeIdentities = value;
        }

        /// <summary>
        /// The partition the ACL role is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("serviceIdentities")]
        private InputList<Inputs.AclRoleServiceIdentityArgs>? _serviceIdentities;

        /// <summary>
        /// The list of service identities that should be applied to the role.
        /// </summary>
        public InputList<Inputs.AclRoleServiceIdentityArgs> ServiceIdentities
        {
            get => _serviceIdentities ?? (_serviceIdentities = new InputList<Inputs.AclRoleServiceIdentityArgs>());
            set => _serviceIdentities = value;
        }

        [Input("templatedPolicies")]
        private InputList<Inputs.AclRoleTemplatedPolicyArgs>? _templatedPolicies;

        /// <summary>
        /// The list of templated policies that should be applied to the token.
        /// </summary>
        public InputList<Inputs.AclRoleTemplatedPolicyArgs> TemplatedPolicies
        {
            get => _templatedPolicies ?? (_templatedPolicies = new InputList<Inputs.AclRoleTemplatedPolicyArgs>());
            set => _templatedPolicies = value;
        }

        public AclRoleArgs()
        {
        }
        public static new AclRoleArgs Empty => new AclRoleArgs();
    }

    public sealed class AclRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A free form human readable description of the role.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of node, workload identity or service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the role within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("nodeIdentities")]
        private InputList<Inputs.AclRoleNodeIdentityGetArgs>? _nodeIdentities;

        /// <summary>
        /// The list of node identities that should be applied to the role.
        /// </summary>
        public InputList<Inputs.AclRoleNodeIdentityGetArgs> NodeIdentities
        {
            get => _nodeIdentities ?? (_nodeIdentities = new InputList<Inputs.AclRoleNodeIdentityGetArgs>());
            set => _nodeIdentities = value;
        }

        /// <summary>
        /// The partition the ACL role is associated with.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("serviceIdentities")]
        private InputList<Inputs.AclRoleServiceIdentityGetArgs>? _serviceIdentities;

        /// <summary>
        /// The list of service identities that should be applied to the role.
        /// </summary>
        public InputList<Inputs.AclRoleServiceIdentityGetArgs> ServiceIdentities
        {
            get => _serviceIdentities ?? (_serviceIdentities = new InputList<Inputs.AclRoleServiceIdentityGetArgs>());
            set => _serviceIdentities = value;
        }

        [Input("templatedPolicies")]
        private InputList<Inputs.AclRoleTemplatedPolicyGetArgs>? _templatedPolicies;

        /// <summary>
        /// The list of templated policies that should be applied to the token.
        /// </summary>
        public InputList<Inputs.AclRoleTemplatedPolicyGetArgs> TemplatedPolicies
        {
            get => _templatedPolicies ?? (_templatedPolicies = new InputList<Inputs.AclRoleTemplatedPolicyGetArgs>());
            set => _templatedPolicies = value;
        }

        public AclRoleState()
        {
        }
        public static new AclRoleState Empty => new AclRoleState();
    }
}
