// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static partial class Invokes
    {
        public static Task<GetCatalogServiceResult> GetCatalogService(GetCatalogServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCatalogServiceResult>("consul:index/getCatalogService:getCatalogService", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetCatalogServiceArgs : Pulumi.InvokeArgs
    {
        [Input("datacenter")]
        public string? Datacenter { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("queryOptions")]
        private List<Inputs.GetCatalogServiceQueryOptionsArgs>? _queryOptions;
        public List<Inputs.GetCatalogServiceQueryOptionsArgs> QueryOptions
        {
            get => _queryOptions ?? (_queryOptions = new List<Inputs.GetCatalogServiceQueryOptionsArgs>());
            set => _queryOptions = value;
        }

        [Input("tag")]
        public string? Tag { get; set; }

        public GetCatalogServiceArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetCatalogServiceResult
    {
        public readonly string? Datacenter;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetCatalogServiceQueryOptionsResult> QueryOptions;
        public readonly ImmutableArray<Outputs.GetCatalogServiceServicesResult> Services;
        public readonly string? Tag;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetCatalogServiceResult(
            string? datacenter,
            string name,
            ImmutableArray<Outputs.GetCatalogServiceQueryOptionsResult> queryOptions,
            ImmutableArray<Outputs.GetCatalogServiceServicesResult> services,
            string? tag,
            string id)
        {
            Datacenter = datacenter;
            Name = name;
            QueryOptions = queryOptions;
            Services = services;
            Tag = tag;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetCatalogServiceQueryOptionsArgs : Pulumi.InvokeArgs
    {
        [Input("allowStale")]
        public bool? AllowStale { get; set; }

        [Input("datacenter")]
        public string? Datacenter { get; set; }

        [Input("near")]
        public string? Near { get; set; }

        [Input("nodeMeta")]
        private Dictionary<string, object>? _nodeMeta;
        public Dictionary<string, object> NodeMeta
        {
            get => _nodeMeta ?? (_nodeMeta = new Dictionary<string, object>());
            set => _nodeMeta = value;
        }

        [Input("requireConsistent")]
        public bool? RequireConsistent { get; set; }

        [Input("token")]
        public string? Token { get; set; }

        [Input("waitIndex")]
        public int? WaitIndex { get; set; }

        [Input("waitTime")]
        public string? WaitTime { get; set; }

        public GetCatalogServiceQueryOptionsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetCatalogServiceQueryOptionsResult
    {
        public readonly bool? AllowStale;
        public readonly string? Datacenter;
        public readonly string? Near;
        public readonly ImmutableDictionary<string, object>? NodeMeta;
        public readonly bool? RequireConsistent;
        public readonly string? Token;
        public readonly int? WaitIndex;
        public readonly string? WaitTime;

        [OutputConstructor]
        private GetCatalogServiceQueryOptionsResult(
            bool? allowStale,
            string? datacenter,
            string? near,
            ImmutableDictionary<string, object>? nodeMeta,
            bool? requireConsistent,
            string? token,
            int? waitIndex,
            string? waitTime)
        {
            AllowStale = allowStale;
            Datacenter = datacenter;
            Near = near;
            NodeMeta = nodeMeta;
            RequireConsistent = requireConsistent;
            Token = token;
            WaitIndex = waitIndex;
            WaitTime = waitTime;
        }
    }

    [OutputType]
    public sealed class GetCatalogServiceServicesResult
    {
        public readonly string Address;
        public readonly string CreateIndex;
        public readonly string EnableTagOverride;
        public readonly string Id;
        public readonly ImmutableDictionary<string, object> Meta;
        public readonly string ModifyIndex;
        public readonly string Name;
        public readonly string NodeAddress;
        public readonly string NodeId;
        public readonly ImmutableDictionary<string, object> NodeMeta;
        public readonly string NodeName;
        public readonly string Port;
        public readonly GetCatalogServiceServicesTaggedAddressesResult TaggedAddresses;
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetCatalogServiceServicesResult(
            string address,
            string createIndex,
            string enableTagOverride,
            string id,
            ImmutableDictionary<string, object> meta,
            string modifyIndex,
            string name,
            string nodeAddress,
            string nodeId,
            ImmutableDictionary<string, object> nodeMeta,
            string nodeName,
            string port,
            GetCatalogServiceServicesTaggedAddressesResult taggedAddresses,
            ImmutableArray<string> tags)
        {
            Address = address;
            CreateIndex = createIndex;
            EnableTagOverride = enableTagOverride;
            Id = id;
            Meta = meta;
            ModifyIndex = modifyIndex;
            Name = name;
            NodeAddress = nodeAddress;
            NodeId = nodeId;
            NodeMeta = nodeMeta;
            NodeName = nodeName;
            Port = port;
            TaggedAddresses = taggedAddresses;
            Tags = tags;
        }
    }

    [OutputType]
    public sealed class GetCatalogServiceServicesTaggedAddressesResult
    {
        public readonly string Lan;
        public readonly string Wan;

        [OutputConstructor]
        private GetCatalogServiceServicesTaggedAddressesResult(
            string lan,
            string wan)
        {
            Lan = lan;
            Wan = wan;
        }
    }
    }
}
