// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetKeyPrefix
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = Consul.GetKeyPrefix.Invoke(new()
        ///     {
        ///         Datacenter = "nyc1",
        ///         Token = "abcd",
        ///         PathPrefix = "myapp/config/",
        ///         SubkeyCollection = new[]
        ///         {
        ///             new Consul.Inputs.GetKeyPrefixSubkeyCollectionInputArgs
        ///             {
        ///                 Name = "ami",
        ///                 Path = "app/launch_ami",
        ///                 Default = "ami-1234",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Start our instance with the dynamic ami value
        ///     var appInstance = new Aws.Index.Instance("app", new()
        ///     {
        ///         Ami = app.Apply(getKeyPrefixResult =&gt; getKeyPrefixResult.Var?.Ami),
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var web = Consul.GetKeyPrefix.Invoke(new()
        ///     {
        ///         Datacenter = "nyc1",
        ///         Token = "efgh",
        ///         PathPrefix = "myapp/config/",
        ///     });
        /// 
        ///     // Start our instance with the dynamic ami value
        ///     var webInstance = new Aws.Index.Instance("web", new()
        ///     {
        ///         Ami = web.Apply(getKeyPrefixResult =&gt; getKeyPrefixResult.Subkeys?.App_launch_ami),
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetKeyPrefixResult> InvokeAsync(GetKeyPrefixArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKeyPrefixResult>("consul:index/getKeyPrefix:getKeyPrefix", args ?? new GetKeyPrefixArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = Consul.GetKeyPrefix.Invoke(new()
        ///     {
        ///         Datacenter = "nyc1",
        ///         Token = "abcd",
        ///         PathPrefix = "myapp/config/",
        ///         SubkeyCollection = new[]
        ///         {
        ///             new Consul.Inputs.GetKeyPrefixSubkeyCollectionInputArgs
        ///             {
        ///                 Name = "ami",
        ///                 Path = "app/launch_ami",
        ///                 Default = "ami-1234",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Start our instance with the dynamic ami value
        ///     var appInstance = new Aws.Index.Instance("app", new()
        ///     {
        ///         Ami = app.Apply(getKeyPrefixResult =&gt; getKeyPrefixResult.Var?.Ami),
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Consul = Pulumi.Consul;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var web = Consul.GetKeyPrefix.Invoke(new()
        ///     {
        ///         Datacenter = "nyc1",
        ///         Token = "efgh",
        ///         PathPrefix = "myapp/config/",
        ///     });
        /// 
        ///     // Start our instance with the dynamic ami value
        ///     var webInstance = new Aws.Index.Instance("web", new()
        ///     {
        ///         Ami = web.Apply(getKeyPrefixResult =&gt; getKeyPrefixResult.Subkeys?.App_launch_ami),
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetKeyPrefixResult> Invoke(GetKeyPrefixInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeyPrefixResult>("consul:index/getKeyPrefix:getKeyPrefix", args ?? new GetKeyPrefixInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKeyPrefixArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public string? Datacenter { get; set; }

        /// <summary>
        /// The namespace to lookup the keys within.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The namespace to lookup the keys within.
        /// </summary>
        [Input("partition")]
        public string? Partition { get; set; }

        /// <summary>
        /// Specifies the common prefix shared by all keys
        /// that will be read by this data source instance. In most cases, this will
        /// end with a slash to read a "folder" of subkeys.
        /// </summary>
        [Input("pathPrefix", required: true)]
        public string PathPrefix { get; set; } = null!;

        [Input("subkeyCollection")]
        private List<Inputs.GetKeyPrefixSubkeyCollectionArgs>? _subkeyCollection;

        /// <summary>
        /// Specifies a subkey in Consul to be read. Supported
        /// values documented below. Multiple blocks supported.
        /// </summary>
        public List<Inputs.GetKeyPrefixSubkeyCollectionArgs> SubkeyCollection
        {
            get => _subkeyCollection ?? (_subkeyCollection = new List<Inputs.GetKeyPrefixSubkeyCollectionArgs>());
            set => _subkeyCollection = value;
        }

        [Input("token")]
        private string? _token;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public string? Token
        {
            get => _token;
            set => _token = value;
        }

        public GetKeyPrefixArgs()
        {
        }
        public static new GetKeyPrefixArgs Empty => new GetKeyPrefixArgs();
    }

    public sealed class GetKeyPrefixInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The namespace to lookup the keys within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The namespace to lookup the keys within.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Specifies the common prefix shared by all keys
        /// that will be read by this data source instance. In most cases, this will
        /// end with a slash to read a "folder" of subkeys.
        /// </summary>
        [Input("pathPrefix", required: true)]
        public Input<string> PathPrefix { get; set; } = null!;

        [Input("subkeyCollection")]
        private InputList<Inputs.GetKeyPrefixSubkeyCollectionInputArgs>? _subkeyCollection;

        /// <summary>
        /// Specifies a subkey in Consul to be read. Supported
        /// values documented below. Multiple blocks supported.
        /// </summary>
        public InputList<Inputs.GetKeyPrefixSubkeyCollectionInputArgs> SubkeyCollection
        {
            get => _subkeyCollection ?? (_subkeyCollection = new InputList<Inputs.GetKeyPrefixSubkeyCollectionInputArgs>());
            set => _subkeyCollection = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Obsolete(@"The token argument has been deprecated and will be removed in a future release.
Please use the token argument in the provider configuration")]
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GetKeyPrefixInvokeArgs()
        {
        }
        public static new GetKeyPrefixInvokeArgs Empty => new GetKeyPrefixInvokeArgs();
    }


    [OutputType]
    public sealed class GetKeyPrefixResult
    {
        /// <summary>
        /// The datacenter the keys are being read from.
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Namespace;
        public readonly string? Partition;
        /// <summary>
        /// the common prefix shared by all keys being read.
        /// * `var.&lt;name&gt;` - For each name given, the corresponding attribute
        /// has the value of the key.
        /// </summary>
        public readonly string PathPrefix;
        public readonly ImmutableArray<Outputs.GetKeyPrefixSubkeyCollectionResult> SubkeyCollection;
        /// <summary>
        /// A map of the subkeys and values is set if no `subkey`
        /// block is provided.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Subkeys;
        public readonly string? Token;
        public readonly ImmutableDictionary<string, string> Var;

        [OutputConstructor]
        private GetKeyPrefixResult(
            string datacenter,

            string id,

            string? @namespace,

            string? partition,

            string pathPrefix,

            ImmutableArray<Outputs.GetKeyPrefixSubkeyCollectionResult> subkeyCollection,

            ImmutableDictionary<string, string> subkeys,

            string? token,

            ImmutableDictionary<string, string> var)
        {
            Datacenter = datacenter;
            Id = id;
            Namespace = @namespace;
            Partition = partition;
            PathPrefix = pathPrefix;
            SubkeyCollection = subkeyCollection;
            Subkeys = subkeys;
            Token = token;
            Var = var;
        }
    }
}
