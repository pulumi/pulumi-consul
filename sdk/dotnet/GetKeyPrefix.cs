// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Consul
{
    public static class GetKeyPrefix
    {
        public static Task<GetKeyPrefixResult> InvokeAsync(GetKeyPrefixArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKeyPrefixResult>("consul:index/getKeyPrefix:getKeyPrefix", args ?? new GetKeyPrefixArgs(), options.WithVersion());

        public static Output<GetKeyPrefixResult> Invoke(GetKeyPrefixInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKeyPrefixResult>("consul:index/getKeyPrefix:getKeyPrefix", args ?? new GetKeyPrefixInvokeArgs(), options.WithVersion());
    }


    public sealed class GetKeyPrefixArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public string? Datacenter { get; set; }

        /// <summary>
        /// The namespace to create the keys within.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// Specifies the common prefix shared by all keys
        /// that will be read by this data source instance. In most cases, this will
        /// end with a slash to read a "folder" of subkeys.
        /// </summary>
        [Input("pathPrefix", required: true)]
        public string PathPrefix { get; set; } = null!;

        [Input("subkeyCollection")]
        private List<Inputs.GetKeyPrefixSubkeyCollectionArgs>? _subkeyCollection;

        /// <summary>
        /// Specifies a subkey in Consul to be read. Supported
        /// values documented below. Multiple blocks supported.
        /// </summary>
        public List<Inputs.GetKeyPrefixSubkeyCollectionArgs> SubkeyCollection
        {
            get => _subkeyCollection ?? (_subkeyCollection = new List<Inputs.GetKeyPrefixSubkeyCollectionArgs>());
            set => _subkeyCollection = value;
        }

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Input("token")]
        public string? Token { get; set; }

        public GetKeyPrefixArgs()
        {
        }
    }

    public sealed class GetKeyPrefixInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The namespace to create the keys within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the common prefix shared by all keys
        /// that will be read by this data source instance. In most cases, this will
        /// end with a slash to read a "folder" of subkeys.
        /// </summary>
        [Input("pathPrefix", required: true)]
        public Input<string> PathPrefix { get; set; } = null!;

        [Input("subkeyCollection")]
        private InputList<Inputs.GetKeyPrefixSubkeyCollectionInputArgs>? _subkeyCollection;

        /// <summary>
        /// Specifies a subkey in Consul to be read. Supported
        /// values documented below. Multiple blocks supported.
        /// </summary>
        public InputList<Inputs.GetKeyPrefixSubkeyCollectionInputArgs> SubkeyCollection
        {
            get => _subkeyCollection ?? (_subkeyCollection = new InputList<Inputs.GetKeyPrefixSubkeyCollectionInputArgs>());
            set => _subkeyCollection = value;
        }

        /// <summary>
        /// The ACL token to use. This overrides the
        /// token that the agent provides by default.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public GetKeyPrefixInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKeyPrefixResult
    {
        /// <summary>
        /// The datacenter the keys are being read from.
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Namespace;
        /// <summary>
        /// the common prefix shared by all keys being read.
        /// * `var.&lt;name&gt;` - For each name given, the corresponding attribute
        /// has the value of the key.
        /// </summary>
        public readonly string PathPrefix;
        public readonly ImmutableArray<Outputs.GetKeyPrefixSubkeyCollectionResult> SubkeyCollection;
        /// <summary>
        /// A map of the subkeys and values is set if no `subkey`
        /// block is provided.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Subkeys;
        public readonly string? Token;
        public readonly ImmutableDictionary<string, string> Var;

        [OutputConstructor]
        private GetKeyPrefixResult(
            string datacenter,

            string id,

            string? @namespace,

            string pathPrefix,

            ImmutableArray<Outputs.GetKeyPrefixSubkeyCollectionResult> subkeyCollection,

            ImmutableDictionary<string, string> subkeys,

            string? token,

            ImmutableDictionary<string, string> var)
        {
            Datacenter = datacenter;
            Id = id;
            Namespace = @namespace;
            PathPrefix = pathPrefix;
            SubkeyCollection = subkeyCollection;
            Subkeys = subkeys;
            Token = token;
            Var = var;
        }
    }
}
