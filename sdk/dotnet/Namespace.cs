// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// &gt; **NOTE:** This feature requires Consul Enterprise.
    /// 
    /// The `consul.Namespace` resource provides isolated [Consul Enterprise Namespaces](https://www.consul.io/docs/enterprise/namespaces/index.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var production = new Consul.Namespace("production", new Consul.NamespaceArgs
    ///         {
    ///             Description = "Production namespace",
    ///             Meta = 
    ///             {
    ///                 { "foo", "bar" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// `consul_namespace` can be imported. This is useful to manage attributes of the default namespace that is created automatically
    /// 
    /// ```sh
    ///  $ pulumi import consul:index/namespace:Namespace default default
    /// ```
    /// </summary>
    [ConsulResourceType("consul:index/namespace:Namespace")]
    public partial class Namespace : Pulumi.CustomResource
    {
        /// <summary>
        /// Free form namespace description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies arbitrary KV metadata to associate with the namespace.
        /// </summary>
        [Output("meta")]
        public Output<ImmutableDictionary<string, string>?> Meta { get; private set; } = null!;

        /// <summary>
        /// The namespace name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The partition to create the namespace within.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// The list of default policies that should be applied to all tokens created in this namespace.
        /// </summary>
        [Output("policyDefaults")]
        public Output<ImmutableArray<string>> PolicyDefaults { get; private set; } = null!;

        /// <summary>
        /// The list of default roles that should be applied to all tokens created in this namespace.
        /// </summary>
        [Output("roleDefaults")]
        public Output<ImmutableArray<string>> RoleDefaults { get; private set; } = null!;


        /// <summary>
        /// Create a Namespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Namespace(string name, NamespaceArgs? args = null, CustomResourceOptions? options = null)
            : base("consul:index/namespace:Namespace", name, args ?? new NamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Namespace(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/namespace:Namespace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Namespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Namespace Get(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Namespace(name, id, state, options);
        }
    }

    public sealed class NamespaceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Free form namespace description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies arbitrary KV metadata to associate with the namespace.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// The namespace name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The partition to create the namespace within.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("policyDefaults")]
        private InputList<string>? _policyDefaults;

        /// <summary>
        /// The list of default policies that should be applied to all tokens created in this namespace.
        /// </summary>
        public InputList<string> PolicyDefaults
        {
            get => _policyDefaults ?? (_policyDefaults = new InputList<string>());
            set => _policyDefaults = value;
        }

        [Input("roleDefaults")]
        private InputList<string>? _roleDefaults;

        /// <summary>
        /// The list of default roles that should be applied to all tokens created in this namespace.
        /// </summary>
        public InputList<string> RoleDefaults
        {
            get => _roleDefaults ?? (_roleDefaults = new InputList<string>());
            set => _roleDefaults = value;
        }

        public NamespaceArgs()
        {
        }
    }

    public sealed class NamespaceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Free form namespace description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies arbitrary KV metadata to associate with the namespace.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// The namespace name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The partition to create the namespace within.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("policyDefaults")]
        private InputList<string>? _policyDefaults;

        /// <summary>
        /// The list of default policies that should be applied to all tokens created in this namespace.
        /// </summary>
        public InputList<string> PolicyDefaults
        {
            get => _policyDefaults ?? (_policyDefaults = new InputList<string>());
            set => _policyDefaults = value;
        }

        [Input("roleDefaults")]
        private InputList<string>? _roleDefaults;

        /// <summary>
        /// The list of default roles that should be applied to all tokens created in this namespace.
        /// </summary>
        public InputList<string> RoleDefaults
        {
            get => _roleDefaults ?? (_roleDefaults = new InputList<string>());
            set => _roleDefaults = value;
        }

        public NamespaceState()
        {
        }
    }
}
