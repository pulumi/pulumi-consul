// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// A high-level resource for creating a Service in Consul in the Consul catalog. This
    /// is appropriate for registering [external services](https://www.consul.io/docs/guides/external.html) and
    /// can be used to create services addressable by Consul that cannot be registered
    /// with a [local agent](https://www.consul.io/docs/agent/basics.html).
    /// 
    /// If the Consul agent is running on the node where this service is registered, it is
    /// not recommended to use this resource.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-consul/blob/master/website/docs/r/service.html.markdown.
    /// </summary>
    public partial class Service : Pulumi.CustomResource
    {
        /// <summary>
        /// The address of the service. Defaults to the
        /// address of the node.
        /// </summary>
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        [Output("checks")]
        public Output<ImmutableArray<Outputs.ServiceChecks>> Checks { get; private set; } = null!;

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        [Output("external")]
        public Output<bool?> External { get; private set; } = null!;

        /// <summary>
        /// A map of arbitrary KV metadata linked to the service
        /// instance.
        /// </summary>
        [Output("meta")]
        public Output<ImmutableDictionary<string, string>?> Meta { get; private set; } = null!;

        /// <summary>
        /// The name of the health-check.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the service within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The name of the node the to register the service on.
        /// </summary>
        [Output("node")]
        public Output<string> Node { get; private set; } = null!;

        /// <summary>
        /// The port of the service.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// The ID of the service.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// A list of values that are opaque to Consul,
        /// but can be used to distinguish between services or nodes.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("consul:index/service:Service", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address of the service. Defaults to the
        /// address of the node.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        [Input("checks")]
        private InputList<Inputs.ServiceChecksArgs>? _checks;
        public InputList<Inputs.ServiceChecksArgs> Checks
        {
            get => _checks ?? (_checks = new InputList<Inputs.ServiceChecksArgs>());
            set => _checks = value;
        }

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("external")]
        public Input<bool>? External { get; set; }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// A map of arbitrary KV metadata linked to the service
        /// instance.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// The name of the health-check.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the service within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The name of the node the to register the service on.
        /// </summary>
        [Input("node", required: true)]
        public Input<string> Node { get; set; } = null!;

        /// <summary>
        /// The port of the service.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the service.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of values that are opaque to Consul,
        /// but can be used to distinguish between services or nodes.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ServiceArgs()
        {
        }
    }

    public sealed class ServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address of the service. Defaults to the
        /// address of the node.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        [Input("checks")]
        private InputList<Inputs.ServiceChecksGetArgs>? _checks;
        public InputList<Inputs.ServiceChecksGetArgs> Checks
        {
            get => _checks ?? (_checks = new InputList<Inputs.ServiceChecksGetArgs>());
            set => _checks = value;
        }

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("external")]
        public Input<bool>? External { get; set; }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// A map of arbitrary KV metadata linked to the service
        /// instance.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// The name of the health-check.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the service within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The name of the node the to register the service on.
        /// </summary>
        [Input("node")]
        public Input<string>? Node { get; set; }

        /// <summary>
        /// The port of the service.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the service.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of values that are opaque to Consul,
        /// but can be used to distinguish between services or nodes.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ServiceState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ServiceChecksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An ID, *unique per agent*. Will default to *name*
        /// if not set.
        /// </summary>
        [Input("checkId", required: true)]
        public Input<string> CheckId { get; set; } = null!;

        /// <summary>
        /// The time after which
        /// the service is automatically deregistered when in the `critical` state.
        /// Defaults to `30s`.
        /// </summary>
        [Input("deregisterCriticalServiceAfter")]
        public Input<string>? DeregisterCriticalServiceAfter { get; set; }

        [Input("headers")]
        private InputList<ServiceChecksHeadersArgs>? _headers;

        /// <summary>
        /// The headers to send for an HTTP check.
        /// The attributes of each header is given below.
        /// </summary>
        public InputList<ServiceChecksHeadersArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<ServiceChecksHeadersArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// The HTTP endpoint to call for an HTTP check.
        /// </summary>
        [Input("http")]
        public Input<string>? Http { get; set; }

        /// <summary>
        /// The interval to wait between each health-check
        /// invocation.
        /// </summary>
        [Input("interval", required: true)]
        public Input<string> Interval { get; set; } = null!;

        /// <summary>
        /// The method to use for HTTP health-checks. Defaults
        /// to `GET`.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The name of the health-check.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// An opaque field meant to hold human readable text.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The initial health-check status.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The TCP address and port to connect to for a TCP check.
        /// </summary>
        [Input("tcp")]
        public Input<string>? Tcp { get; set; }

        /// <summary>
        /// The timeout value for HTTP checks.
        /// </summary>
        [Input("timeout", required: true)]
        public Input<string> Timeout { get; set; } = null!;

        /// <summary>
        /// Whether to deactivate certificate
        /// verification for HTTP health-checks. Defaults to `false`.
        /// </summary>
        [Input("tlsSkipVerify")]
        public Input<bool>? TlsSkipVerify { get; set; }

        public ServiceChecksArgs()
        {
        }
    }

    public sealed class ServiceChecksGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An ID, *unique per agent*. Will default to *name*
        /// if not set.
        /// </summary>
        [Input("checkId", required: true)]
        public Input<string> CheckId { get; set; } = null!;

        /// <summary>
        /// The time after which
        /// the service is automatically deregistered when in the `critical` state.
        /// Defaults to `30s`.
        /// </summary>
        [Input("deregisterCriticalServiceAfter")]
        public Input<string>? DeregisterCriticalServiceAfter { get; set; }

        [Input("headers")]
        private InputList<ServiceChecksHeadersGetArgs>? _headers;

        /// <summary>
        /// The headers to send for an HTTP check.
        /// The attributes of each header is given below.
        /// </summary>
        public InputList<ServiceChecksHeadersGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<ServiceChecksHeadersGetArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// The HTTP endpoint to call for an HTTP check.
        /// </summary>
        [Input("http")]
        public Input<string>? Http { get; set; }

        /// <summary>
        /// The interval to wait between each health-check
        /// invocation.
        /// </summary>
        [Input("interval", required: true)]
        public Input<string> Interval { get; set; } = null!;

        /// <summary>
        /// The method to use for HTTP health-checks. Defaults
        /// to `GET`.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The name of the health-check.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// An opaque field meant to hold human readable text.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The initial health-check status.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The TCP address and port to connect to for a TCP check.
        /// </summary>
        [Input("tcp")]
        public Input<string>? Tcp { get; set; }

        /// <summary>
        /// The timeout value for HTTP checks.
        /// </summary>
        [Input("timeout", required: true)]
        public Input<string> Timeout { get; set; } = null!;

        /// <summary>
        /// Whether to deactivate certificate
        /// verification for HTTP health-checks. Defaults to `false`.
        /// </summary>
        [Input("tlsSkipVerify")]
        public Input<bool>? TlsSkipVerify { get; set; }

        public ServiceChecksGetArgs()
        {
        }
    }

    public sealed class ServiceChecksHeadersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the header.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;

        /// <summary>
        /// The header's list of values.
        /// </summary>
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public ServiceChecksHeadersArgs()
        {
        }
    }

    public sealed class ServiceChecksHeadersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the header.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;

        /// <summary>
        /// The header's list of values.
        /// </summary>
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public ServiceChecksHeadersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ServiceChecks
    {
        /// <summary>
        /// An ID, *unique per agent*. Will default to *name*
        /// if not set.
        /// </summary>
        public readonly string CheckId;
        /// <summary>
        /// The time after which
        /// the service is automatically deregistered when in the `critical` state.
        /// Defaults to `30s`.
        /// </summary>
        public readonly string? DeregisterCriticalServiceAfter;
        /// <summary>
        /// The headers to send for an HTTP check.
        /// The attributes of each header is given below.
        /// </summary>
        public readonly ImmutableArray<ServiceChecksHeaders> Headers;
        /// <summary>
        /// The HTTP endpoint to call for an HTTP check.
        /// </summary>
        public readonly string? Http;
        /// <summary>
        /// The interval to wait between each health-check
        /// invocation.
        /// </summary>
        public readonly string Interval;
        /// <summary>
        /// The method to use for HTTP health-checks. Defaults
        /// to `GET`.
        /// </summary>
        public readonly string? Method;
        /// <summary>
        /// The name of the health-check.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// An opaque field meant to hold human readable text.
        /// </summary>
        public readonly string? Notes;
        /// <summary>
        /// The initial health-check status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The TCP address and port to connect to for a TCP check.
        /// </summary>
        public readonly string? Tcp;
        /// <summary>
        /// The timeout value for HTTP checks.
        /// </summary>
        public readonly string Timeout;
        /// <summary>
        /// Whether to deactivate certificate
        /// verification for HTTP health-checks. Defaults to `false`.
        /// </summary>
        public readonly bool? TlsSkipVerify;

        [OutputConstructor]
        private ServiceChecks(
            string checkId,
            string? deregisterCriticalServiceAfter,
            ImmutableArray<ServiceChecksHeaders> headers,
            string? http,
            string interval,
            string? method,
            string name,
            string? notes,
            string status,
            string? tcp,
            string timeout,
            bool? tlsSkipVerify)
        {
            CheckId = checkId;
            DeregisterCriticalServiceAfter = deregisterCriticalServiceAfter;
            Headers = headers;
            Http = http;
            Interval = interval;
            Method = method;
            Name = name;
            Notes = notes;
            Status = status;
            Tcp = tcp;
            Timeout = timeout;
            TlsSkipVerify = tlsSkipVerify;
        }
    }

    [OutputType]
    public sealed class ServiceChecksHeaders
    {
        /// <summary>
        /// The name of the header.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The header's list of values.
        /// </summary>
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private ServiceChecksHeaders(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }
    }
}
