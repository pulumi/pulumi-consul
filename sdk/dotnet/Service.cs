// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// A high-level resource for creating a Service in Consul in the Consul catalog. This
    /// is appropriate for registering [external services](https://www.consul.io/docs/guides/external.html) and
    /// can be used to create services addressable by Consul that cannot be registered
    /// with a [local agent](https://www.consul.io/docs/agent/basics.html).
    /// 
    /// &gt; **NOTE:** If a Consul agent is running on the node where this service is
    /// registered, it is not recommended to use this resource as the service will be
    /// removed during the next [anti-entropy synchronisation](https://www.consul.io/docs/architecture/anti-entropy).
    /// 
    /// ## Example Usage
    /// 
    /// Creating a new node with the service:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var compute = new Consul.Node("compute", new Consul.NodeArgs
    ///         {
    ///             Address = "www.google.com",
    ///         });
    ///         var google = new Consul.Service("google", new Consul.ServiceArgs
    ///         {
    ///             Node = compute.Name,
    ///             Port = 80,
    ///             Tags = 
    ///             {
    ///                 "tag0",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Utilizing an existing known node:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var google = new Consul.Service("google", new Consul.ServiceArgs
    ///         {
    ///             Node = "google",
    ///             Port = 443,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Register a health-check:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Consul = Pulumi.Consul;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var redis = new Consul.Service("redis", new Consul.ServiceArgs
    ///         {
    ///             Checks = 
    ///             {
    ///                 new Consul.Inputs.ServiceCheckArgs
    ///                 {
    ///                     CheckId = "service:redis1",
    ///                     DeregisterCriticalServiceAfter = "30s",
    ///                     Headers = 
    ///                     {
    ///                         new Consul.Inputs.ServiceCheckHeaderArgs
    ///                         {
    ///                             Name = "foo",
    ///                             Value = 
    ///                             {
    ///                                 "test",
    ///                             },
    ///                         },
    ///                         new Consul.Inputs.ServiceCheckHeaderArgs
    ///                         {
    ///                             Name = "bar",
    ///                             Value = 
    ///                             {
    ///                                 "test",
    ///                             },
    ///                         },
    ///                     },
    ///                     Http = "https://www.hashicorptest.com",
    ///                     Interval = "5s",
    ///                     Method = "PUT",
    ///                     Name = "Redis health check",
    ///                     Status = "passing",
    ///                     Timeout = "1s",
    ///                     TlsSkipVerify = false,
    ///                 },
    ///             },
    ///             Node = "redis",
    ///             Port = 6379,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Service : Pulumi.CustomResource
    {
        /// <summary>
        /// The address of the service. Defaults to the
        /// address of the node.
        /// </summary>
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        [Output("checks")]
        public Output<ImmutableArray<Outputs.ServiceCheck>> Checks { get; private set; } = null!;

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        /// <summary>
        /// Specifies to disable the
        /// anti-entropy feature for this service's tags. Defaults to `false`.
        /// </summary>
        [Output("enableTagOverride")]
        public Output<bool?> EnableTagOverride { get; private set; } = null!;

        [Output("external")]
        public Output<bool?> External { get; private set; } = null!;

        /// <summary>
        /// A map of arbitrary KV metadata linked to the service
        /// instance.
        /// </summary>
        [Output("meta")]
        public Output<ImmutableDictionary<string, string>?> Meta { get; private set; } = null!;

        /// <summary>
        /// The name of the health-check.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to create the service within.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The name of the node the to register the service on.
        /// </summary>
        [Output("node")]
        public Output<string> Node { get; private set; } = null!;

        /// <summary>
        /// The port of the service.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// - If the service ID is not provided, it will be defaulted to the value
        /// of the `name` attribute.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// A list of values that are opaque to Consul,
        /// but can be used to distinguish between services or nodes.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("consul:index/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address of the service. Defaults to the
        /// address of the node.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        [Input("checks")]
        private InputList<Inputs.ServiceCheckArgs>? _checks;
        public InputList<Inputs.ServiceCheckArgs> Checks
        {
            get => _checks ?? (_checks = new InputList<Inputs.ServiceCheckArgs>());
            set => _checks = value;
        }

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Specifies to disable the
        /// anti-entropy feature for this service's tags. Defaults to `false`.
        /// </summary>
        [Input("enableTagOverride")]
        public Input<bool>? EnableTagOverride { get; set; }

        [Input("external")]
        public Input<bool>? External { get; set; }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// A map of arbitrary KV metadata linked to the service
        /// instance.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// The name of the health-check.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the service within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The name of the node the to register the service on.
        /// </summary>
        [Input("node", required: true)]
        public Input<string> Node { get; set; } = null!;

        /// <summary>
        /// The port of the service.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// - If the service ID is not provided, it will be defaulted to the value
        /// of the `name` attribute.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of values that are opaque to Consul,
        /// but can be used to distinguish between services or nodes.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ServiceArgs()
        {
        }
    }

    public sealed class ServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address of the service. Defaults to the
        /// address of the node.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        [Input("checks")]
        private InputList<Inputs.ServiceCheckGetArgs>? _checks;
        public InputList<Inputs.ServiceCheckGetArgs> Checks
        {
            get => _checks ?? (_checks = new InputList<Inputs.ServiceCheckGetArgs>());
            set => _checks = value;
        }

        /// <summary>
        /// The datacenter to use. This overrides the
        /// agent's default datacenter and the datacenter in the provider setup.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Specifies to disable the
        /// anti-entropy feature for this service's tags. Defaults to `false`.
        /// </summary>
        [Input("enableTagOverride")]
        public Input<bool>? EnableTagOverride { get; set; }

        [Input("external")]
        public Input<bool>? External { get; set; }

        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// A map of arbitrary KV metadata linked to the service
        /// instance.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// The name of the health-check.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to create the service within.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The name of the node the to register the service on.
        /// </summary>
        [Input("node")]
        public Input<string>? Node { get; set; }

        /// <summary>
        /// The port of the service.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// - If the service ID is not provided, it will be defaulted to the value
        /// of the `name` attribute.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of values that are opaque to Consul,
        /// but can be used to distinguish between services or nodes.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ServiceState()
        {
        }
    }
}
