// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [ConsulResourceType("consul:index/configEntryServiceRouter:ConfigEntryServiceRouter")]
    public partial class ConfigEntryServiceRouter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies key-value pairs to add to the KV store.
        /// </summary>
        [Output("meta")]
        public Output<ImmutableDictionary<string, string>?> Meta { get; private set; } = null!;

        /// <summary>
        /// Specifies a name for the configuration entry.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the namespace to apply the configuration entry.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Specifies the admin partition to apply the configuration entry.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// Defines the possible routes for L7 requests.
        /// </summary>
        [Output("routes")]
        public Output<ImmutableArray<Outputs.ConfigEntryServiceRouterRoute>> Routes { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigEntryServiceRouter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigEntryServiceRouter(string name, ConfigEntryServiceRouterArgs? args = null, CustomResourceOptions? options = null)
            : base("consul:index/configEntryServiceRouter:ConfigEntryServiceRouter", name, args ?? new ConfigEntryServiceRouterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigEntryServiceRouter(string name, Input<string> id, ConfigEntryServiceRouterState? state = null, CustomResourceOptions? options = null)
            : base("consul:index/configEntryServiceRouter:ConfigEntryServiceRouter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigEntryServiceRouter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigEntryServiceRouter Get(string name, Input<string> id, ConfigEntryServiceRouterState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigEntryServiceRouter(name, id, state, options);
        }
    }

    public sealed class ConfigEntryServiceRouterArgs : global::Pulumi.ResourceArgs
    {
        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies key-value pairs to add to the KV store.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// Specifies a name for the configuration entry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the namespace to apply the configuration entry.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the admin partition to apply the configuration entry.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("routes")]
        private InputList<Inputs.ConfigEntryServiceRouterRouteArgs>? _routes;

        /// <summary>
        /// Defines the possible routes for L7 requests.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceRouterRouteArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.ConfigEntryServiceRouterRouteArgs>());
            set => _routes = value;
        }

        public ConfigEntryServiceRouterArgs()
        {
        }
        public static new ConfigEntryServiceRouterArgs Empty => new ConfigEntryServiceRouterArgs();
    }

    public sealed class ConfigEntryServiceRouterState : global::Pulumi.ResourceArgs
    {
        [Input("meta")]
        private InputMap<string>? _meta;

        /// <summary>
        /// Specifies key-value pairs to add to the KV store.
        /// </summary>
        public InputMap<string> Meta
        {
            get => _meta ?? (_meta = new InputMap<string>());
            set => _meta = value;
        }

        /// <summary>
        /// Specifies a name for the configuration entry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the namespace to apply the configuration entry.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the admin partition to apply the configuration entry.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("routes")]
        private InputList<Inputs.ConfigEntryServiceRouterRouteGetArgs>? _routes;

        /// <summary>
        /// Defines the possible routes for L7 requests.
        /// </summary>
        public InputList<Inputs.ConfigEntryServiceRouterRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.ConfigEntryServiceRouterRouteGetArgs>());
            set => _routes = value;
        }

        public ConfigEntryServiceRouterState()
        {
        }
        public static new ConfigEntryServiceRouterState Empty => new ConfigEntryServiceRouterState();
    }
}
