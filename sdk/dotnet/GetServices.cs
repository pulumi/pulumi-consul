// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Consul
{
    public static class GetServices
    {
        /// <summary>
        /// The `consul.getServices` data source returns a list of Consul services that
        /// have been registered with the Consul cluster in a given datacenter.  By
        /// specifying a different datacenter in the `query_options` it is possible to
        /// retrieve a list of services from a different WAN-attached Consul datacenter.
        /// 
        /// This data source is different from the `consul.Service` (singular) data
        /// source, which provides a detailed response about a specific Consul service.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// using Example = Pulumi.Example;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var read_dc1 = Consul.GetServices.Invoke(new()
        ///     {
        ///         QueryOptions = new[]
        ///         {
        ///             new Consul.Inputs.GetServicesQueryOptionInputArgs
        ///             {
        ///                 Datacenter = "dc1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Set the description to a whitespace delimited list of the services
        ///     var app = new Example.Index.Resource("app", new()
        ///     {
        ///         Description = Std.Join.Invoke(new()
        ///         {
        ///             Separator = " ",
        ///             Input = names,
        ///         }).Result,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetServicesResult> InvokeAsync(GetServicesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServicesResult>("consul:index/getServices:getServices", args ?? new GetServicesArgs(), options.WithDefaults());

        /// <summary>
        /// The `consul.getServices` data source returns a list of Consul services that
        /// have been registered with the Consul cluster in a given datacenter.  By
        /// specifying a different datacenter in the `query_options` it is possible to
        /// retrieve a list of services from a different WAN-attached Consul datacenter.
        /// 
        /// This data source is different from the `consul.Service` (singular) data
        /// source, which provides a detailed response about a specific Consul service.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Consul = Pulumi.Consul;
        /// using Example = Pulumi.Example;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var read_dc1 = Consul.GetServices.Invoke(new()
        ///     {
        ///         QueryOptions = new[]
        ///         {
        ///             new Consul.Inputs.GetServicesQueryOptionInputArgs
        ///             {
        ///                 Datacenter = "dc1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // Set the description to a whitespace delimited list of the services
        ///     var app = new Example.Index.Resource("app", new()
        ///     {
        ///         Description = Std.Join.Invoke(new()
        ///         {
        ///             Separator = " ",
        ///             Input = names,
        ///         }).Result,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetServicesResult> Invoke(GetServicesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServicesResult>("consul:index/getServices:getServices", args ?? new GetServicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServicesArgs : global::Pulumi.InvokeArgs
    {
        [Input("queryOptions")]
        private List<Inputs.GetServicesQueryOptionArgs>? _queryOptions;

        /// <summary>
        /// See below.
        /// </summary>
        public List<Inputs.GetServicesQueryOptionArgs> QueryOptions
        {
            get => _queryOptions ?? (_queryOptions = new List<Inputs.GetServicesQueryOptionArgs>());
            set => _queryOptions = value;
        }

        public GetServicesArgs()
        {
        }
        public static new GetServicesArgs Empty => new GetServicesArgs();
    }

    public sealed class GetServicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("queryOptions")]
        private InputList<Inputs.GetServicesQueryOptionInputArgs>? _queryOptions;

        /// <summary>
        /// See below.
        /// </summary>
        public InputList<Inputs.GetServicesQueryOptionInputArgs> QueryOptions
        {
            get => _queryOptions ?? (_queryOptions = new InputList<Inputs.GetServicesQueryOptionInputArgs>());
            set => _queryOptions = value;
        }

        public GetServicesInvokeArgs()
        {
        }
        public static new GetServicesInvokeArgs Empty => new GetServicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetServicesResult
    {
        /// <summary>
        /// The datacenter the keys are being read from to.
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Names;
        public readonly ImmutableArray<Outputs.GetServicesQueryOptionResult> QueryOptions;
        public readonly ImmutableDictionary<string, string> Services;
        /// <summary>
        /// A map of the tags found for each service.  If more than one service
        /// shares the same tag, unique service names will be joined by whitespace (this
        /// is the inverse of `services` and can be used to lookup the services that match
        /// a single tag).
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetServicesResult(
            string datacenter,

            string id,

            ImmutableArray<string> names,

            ImmutableArray<Outputs.GetServicesQueryOptionResult> queryOptions,

            ImmutableDictionary<string, string> services,

            ImmutableDictionary<string, string> tags)
        {
            Datacenter = datacenter;
            Id = id;
            Names = names;
            QueryOptions = queryOptions;
            Services = services;
            Tags = tags;
        }
    }
}
